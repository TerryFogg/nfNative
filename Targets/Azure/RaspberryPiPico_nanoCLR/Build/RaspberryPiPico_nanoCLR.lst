
C:\repos\nfNative\Targets\Azure\RaspberryPiPico_nanoCLR\Local\Build\RaspberryPiPico_nanoCLR.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__VECTOR_TABLE>:
10000100:	20042000 	.word	0x20042000
10000104:	10000227 	.word	0x10000227
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
\name:
    bkpt #0
.endm

// these are separated out for clarity
decl_isr_bkpt isr_invalid
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
decl_isr_bkpt isr_nmi
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
decl_isr_bkpt isr_hardfault
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
decl_isr_bkpt isr_svcall
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
decl_isr_bkpt isr_pendsv
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
decl_isr_bkpt isr_systick
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:

// All unhandled USER IRQs fall through to here
.global __unhandled_user_irq
.thumb_func
__unhandled_user_irq:
    bl __get_current_exception
100001cc:	f000 f863 	bl	10000296 <__get_current_exception>
    subs r0, #16
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
.global unhandled_user_irq_num_in_r0
unhandled_user_irq_num_in_r0:
    bkpt #0
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	10007f68 	.word	0x10007f68
100001dc:	10007f84 	.word	0x10007f84
100001e0:	10000264 	.word	0x10000264
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <__bi_22>:
100001e8:	50520005 68f465de 10008ab4              ..RP.e.h....

100001f4 <__bi_30>:
100001f4:	50520006 9da22254 10007efc              ..RPT"...~..

10000200 <__bi_38>:
10000200:	50520006 02031c86 10007f08              ..RP........

1000020c <__bi_50>:
1000020c:	50520006 5360b3ab 10007f18              ..RP..`S....

10000218 <_entry_point>:
    // this point). Same path for debugger entry and bootloader entry.
    ldr r0, =__vectors
#else
    // Debugger tried to run code after loading, so SSI is in 03h-only mode.
    // Go back through bootrom + boot2 to properly initialise flash.
    movs r0, #0
10000218:	2000      	movs	r0, #0
#endif
    ldr r1, =(PPB_BASE + M0PLUS_VTOR_OFFSET)
1000021a:	4921      	ldr	r1, [pc, #132]	; (100002a0 <__get_current_exception+0xa>)
    str r0, [r1]
1000021c:	6008      	str	r0, [r1, #0]
    ldmia r0!, {r1, r2}
1000021e:	c806      	ldmia	r0!, {r1, r2}
    msr msp, r1
10000220:	f381 8808 	msr	MSP, r1
    bx r2
10000224:	4710      	bx	r2

10000226 <_reset_handler>:
.type _reset_handler,%function
.thumb_func
_reset_handler:
    // Only core 0 should run the C runtime startup code; core 1 is normally
    // sleeping in the bootrom at this point but check to be sure
    ldr r0, =(SIO_BASE + SIO_CPUID_OFFSET)
10000226:	481f      	ldr	r0, [pc, #124]	; (100002a4 <__get_current_exception+0xe>)
    ldr r0, [r0]
10000228:	6800      	ldr	r0, [r0, #0]
    cmp r0, #0
1000022a:	2800      	cmp	r0, #0
    bne hold_non_core0_in_bootrom
1000022c:	d12f      	bne.n	1000028e <hold_non_core0_in_bootrom>

    // In a NO_FLASH binary, don't perform .data copy, since it's loaded
    // in-place by the SRAM load. Still need to clear .bss
#if !PICO_NO_FLASH
    adr r4, data_cpy_table
1000022e:	a40d      	add	r4, pc, #52	; (adr r4, 10000264 <data_cpy_table>)

    // assume there is at least one entry
1:
    ldmia r4!, {r1-r3}
10000230:	cc0e      	ldmia	r4!, {r1, r2, r3}
    cmp r1, #0
10000232:	2900      	cmp	r1, #0
    beq 2f
10000234:	d002      	beq.n	1000023c <_reset_handler+0x16>
    bl data_cpy
10000236:	f000 f812 	bl	1000025e <data_cpy>
    b 1b
1000023a:	e7f9      	b.n	10000230 <_reset_handler+0xa>
2:
#endif

    // Zero out the BSS
    ldr r1, =__bss_start__
1000023c:	491a      	ldr	r1, [pc, #104]	; (100002a8 <__get_current_exception+0x12>)
    ldr r2, =__bss_end__
1000023e:	4a1b      	ldr	r2, [pc, #108]	; (100002ac <__get_current_exception+0x16>)
    movs r0, #0
10000240:	2000      	movs	r0, #0
    b bss_fill_test
10000242:	e000      	b.n	10000246 <bss_fill_test>

10000244 <bss_fill_loop>:
bss_fill_loop:
    stm r1!, {r0}
10000244:	c101      	stmia	r1!, {r0}

10000246 <bss_fill_test>:
bss_fill_test:
    cmp r1, r2
10000246:	4291      	cmp	r1, r2
    bne bss_fill_loop
10000248:	d1fc      	bne.n	10000244 <bss_fill_loop>

1000024a <platform_entry>:

platform_entry: // symbol for stack traces
    // Use 32-bit jumps, in case these symbols are moved out of branch range
    // (e.g. if main is in SRAM and crt0 in flash)
    ldr r1, =runtime_init
1000024a:	4919      	ldr	r1, [pc, #100]	; (100002b0 <__get_current_exception+0x1a>)
    blx r1
1000024c:	4788      	blx	r1
    ldr r1, =main
1000024e:	4919      	ldr	r1, [pc, #100]	; (100002b4 <__get_current_exception+0x1e>)
    blx r1
10000250:	4788      	blx	r1
    ldr r1, =exit
10000252:	4919      	ldr	r1, [pc, #100]	; (100002b8 <__get_current_exception+0x22>)
    blx r1
10000254:	4788      	blx	r1
.weak _exit
.type _exit,%function
.thumb_func
_exit:
1: // separate label because _exit can be moved out of branch range
    bkpt #0
10000256:	be00      	bkpt	0x0000
    b 1b
10000258:	e7fd      	b.n	10000256 <platform_entry+0xc>

1000025a <data_cpy_loop>:

#if !PICO_NO_FLASH
data_cpy_loop:
    ldm r1!, {r0}
1000025a:	c901      	ldmia	r1!, {r0}
    stm r2!, {r0}
1000025c:	c201      	stmia	r2!, {r0}

1000025e <data_cpy>:
data_cpy:
    cmp r2, r3
1000025e:	429a      	cmp	r2, r3
    blo data_cpy_loop
10000260:	d3fb      	bcc.n	1000025a <data_cpy_loop>
    bx lr
10000262:	4770      	bx	lr

10000264 <data_cpy_table>:
10000264:	10007f84 	.word	0x10007f84
10000268:	200000c0 	.word	0x200000c0
1000026c:	20000bf0 	.word	0x20000bf0
10000270:	10008ab4 	.word	0x10008ab4
10000274:	20040000 	.word	0x20040000
10000278:	20040000 	.word	0x20040000
1000027c:	10008ab4 	.word	0x10008ab4
10000280:	20041000 	.word	0x20041000
10000284:	20041000 	.word	0x20041000
10000288:	00000000 	.word	0x00000000

.weak runtime_init
.type runtime_init,%function
.thumb_func
runtime_init:
    bx lr
1000028c:	4770      	bx	lr

1000028e <hold_non_core0_in_bootrom>:
// catch it and send back to the sleep-and-launch code in the bootrom. Shouldn't
// happen (it should sleep in the ROM until given an entry point via the
// cross-core FIFOs) but it's good to be defensive.

hold_non_core0_in_bootrom:
    ldr r0, = 'W' | ('V' << 8)
1000028e:	480b      	ldr	r0, [pc, #44]	; (100002bc <__get_current_exception+0x26>)
    bl rom_func_lookup
10000290:	f003 f892 	bl	100033b8 <rom_func_lookup>
    bx r0
10000294:	4700      	bx	r0

10000296 <__get_current_exception>:

.global __get_current_exception
.thumb_func
__get_current_exception:
    mrs  r0, ipsr
10000296:	f3ef 8005 	mrs	r0, IPSR
    uxtb r0, r0
1000029a:	b2c0      	uxtb	r0, r0
    bx   lr
1000029c:	4770      	bx	lr
1000029e:	0000      	.short	0x0000
    ldr r1, =(PPB_BASE + M0PLUS_VTOR_OFFSET)
100002a0:	e000ed08 	.word	0xe000ed08
    ldr r0, =(SIO_BASE + SIO_CPUID_OFFSET)
100002a4:	d0000000 	.word	0xd0000000
    ldr r1, =__bss_start__
100002a8:	20000bf0 	.word	0x20000bf0
    ldr r2, =__bss_end__
100002ac:	20001660 	.word	0x20001660
    ldr r1, =runtime_init
100002b0:	10005001 	.word	0x10005001
    ldr r1, =main
100002b4:	100056f7 	.word	0x100056f7
    ldr r1, =exit
100002b8:	10005199 	.word	0x10005199
    ldr r0, = 'W' | ('V' << 8)
100002bc:	00005657 	.word	0x00005657

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	f3af 8000 	nop.w
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20000e90 	.word	0x20000e90
100002e4:	00000000 	.word	0x00000000
100002e8:	10006cd0 	.word	0x10006cd0

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	f3af 8000 	nop.w
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20000e94 	.word	0x20000e94
10000308:	10006cd0 	.word	0x10006cd0

1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>:
        return node;
    }

    //--//

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_DblLinkedList);
1000030c:	b580      	push	{r7, lr}
1000030e:	b082      	sub	sp, #8
10000310:	af00      	add	r7, sp, #0
10000312:	6078      	str	r0, [r7, #4]
10000314:	687b      	ldr	r3, [r7, #4]
10000316:	0018      	movs	r0, r3
10000318:	46bd      	mov	sp, r7
1000031a:	b002      	add	sp, #8
1000031c:	bd80      	pop	{r7, pc}

1000031e <_ZN21CLR_RT_WellKnownTypesC1Ev>:
    CLR_RT_TypeDef_Index m_I2cTransferResult;
    CLR_RT_TypeDef_Index m_I2cTransferResult_old;

    CLR_RT_TypeDef_Index m_RmtCommand;

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_WellKnownTypes);
1000031e:	b580      	push	{r7, lr}
10000320:	b082      	sub	sp, #8
10000322:	af00      	add	r7, sp, #0
10000324:	6078      	str	r0, [r7, #4]
10000326:	687b      	ldr	r3, [r7, #4]
10000328:	0018      	movs	r0, r3
1000032a:	46bd      	mov	sp, r7
1000032c:	b002      	add	sp, #8
1000032e:	bd80      	pop	{r7, pc}

10000330 <_ZN23CLR_RT_WellKnownMethodsC1Ev>:
struct CLR_RT_WellKnownMethods
{
    CLR_RT_MethodDef_Index m_ResourceManager_GetObjectFromId;
    CLR_RT_MethodDef_Index m_ResourceManager_GetObjectChunkFromId;

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_WellKnownMethods);
10000330:	b580      	push	{r7, lr}
10000332:	b082      	sub	sp, #8
10000334:	af00      	add	r7, sp, #0
10000336:	6078      	str	r0, [r7, #4]
10000338:	687b      	ldr	r3, [r7, #4]
1000033a:	0018      	movs	r0, r3
1000033c:	46bd      	mov	sp, r7
1000033e:	b002      	add	sp, #8
10000340:	bd80      	pop	{r7, pc}

10000342 <_ZN17CLR_RT_TypeSystemC1Ev>:
    void Dump(const wchar_t *szFileName, bool fNoByteCode);
#endif

    //--//

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_TypeSystem);
10000342:	b580      	push	{r7, lr}
10000344:	b082      	sub	sp, #8
10000346:	af00      	add	r7, sp, #0
10000348:	6078      	str	r0, [r7, #4]
1000034a:	687b      	ldr	r3, [r7, #4]
1000034c:	0018      	movs	r0, r3
1000034e:	46bd      	mov	sp, r7
10000350:	b002      	add	sp, #8
10000352:	bd80      	pop	{r7, pc}

10000354 <_ZN23CLR_RT_GarbageCollectorC1Ev>:
    static bool ComputeReachabilityGraphForSingleBlock(CLR_RT_HeapBlock **ptr);
    static bool ComputeReachabilityGraphForMultipleBlocks(CLR_RT_HeapBlock *lst, CLR_UINT32 num);

    //--//

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_GarbageCollector);
10000354:	b580      	push	{r7, lr}
10000356:	b082      	sub	sp, #8
10000358:	af00      	add	r7, sp, #0
1000035a:	6078      	str	r0, [r7, #4]
1000035c:	687b      	ldr	r3, [r7, #4]
1000035e:	3310      	adds	r3, #16
10000360:	0018      	movs	r0, r3
10000362:	f7ff ffd3 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
10000366:	687b      	ldr	r3, [r7, #4]
10000368:	0018      	movs	r0, r3
1000036a:	46bd      	mov	sp, r7
1000036c:	b002      	add	sp, #8
1000036e:	bd80      	pop	{r7, pc}

10000370 <_ZN17CLR_RT_EventCacheC1Ev>:
        CLR_RT_HeapBlock::HB_InitializeToZero,                                                                         \
        CONVERTFROMSIZETOHEAPBLOCKS(sizeof(cls)))

    //--//

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_EventCache);
10000370:	b580      	push	{r7, lr}
10000372:	b082      	sub	sp, #8
10000374:	af00      	add	r7, sp, #0
10000376:	6078      	str	r0, [r7, #4]
10000378:	687b      	ldr	r3, [r7, #4]
1000037a:	0018      	movs	r0, r3
1000037c:	46bd      	mov	sp, r7
1000037e:	b002      	add	sp, #8
10000380:	bd80      	pop	{r7, pc}

10000382 <_ZN22CLR_RT_ExecutionEngineC1Ev>:

    CLR_INT64 ProcessTimer();

    //--//

    PROHIBIT_COPY_CONSTRUCTORS(CLR_RT_ExecutionEngine);
10000382:	b580      	push	{r7, lr}
10000384:	b082      	sub	sp, #8
10000386:	af00      	add	r7, sp, #0
10000388:	6078      	str	r0, [r7, #4]
1000038a:	687b      	ldr	r3, [r7, #4]
1000038c:	3301      	adds	r3, #1
1000038e:	33ff      	adds	r3, #255	; 0xff
10000390:	0018      	movs	r0, r3
10000392:	f7ff ffbb 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
10000396:	687b      	ldr	r3, [r7, #4]
10000398:	3315      	adds	r3, #21
1000039a:	33ff      	adds	r3, #255	; 0xff
1000039c:	0018      	movs	r0, r3
1000039e:	f7ff ffb5 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003a2:	687b      	ldr	r3, [r7, #4]
100003a4:	3321      	adds	r3, #33	; 0x21
100003a6:	33ff      	adds	r3, #255	; 0xff
100003a8:	0018      	movs	r0, r3
100003aa:	f7ff ffaf 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003ae:	687b      	ldr	r3, [r7, #4]
100003b0:	3331      	adds	r3, #49	; 0x31
100003b2:	33ff      	adds	r3, #255	; 0xff
100003b4:	0018      	movs	r0, r3
100003b6:	f7ff ffa9 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003ba:	687b      	ldr	r3, [r7, #4]
100003bc:	333d      	adds	r3, #61	; 0x3d
100003be:	33ff      	adds	r3, #255	; 0xff
100003c0:	0018      	movs	r0, r3
100003c2:	f7ff ffa3 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003c6:	687b      	ldr	r3, [r7, #4]
100003c8:	3349      	adds	r3, #73	; 0x49
100003ca:	33ff      	adds	r3, #255	; 0xff
100003cc:	0018      	movs	r0, r3
100003ce:	f7ff ff9d 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003d2:	687b      	ldr	r3, [r7, #4]
100003d4:	335d      	adds	r3, #93	; 0x5d
100003d6:	33ff      	adds	r3, #255	; 0xff
100003d8:	0018      	movs	r0, r3
100003da:	f7ff ff97 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003de:	687b      	ldr	r3, [r7, #4]
100003e0:	3369      	adds	r3, #105	; 0x69
100003e2:	33ff      	adds	r3, #255	; 0xff
100003e4:	0018      	movs	r0, r3
100003e6:	f7ff ff91 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
100003ea:	687b      	ldr	r3, [r7, #4]
100003ec:	0018      	movs	r0, r3
100003ee:	46bd      	mov	sp, r7
100003f0:	b002      	add	sp, #8
100003f2:	bd80      	pop	{r7, pc}

100003f4 <_ZN15CLR_HW_Hardware13InterruptDataC1Ev>:
            m_data1 = recFrom.m_data1;
            m_data2 = recFrom.m_data2;
        }
    };

    struct InterruptData
100003f4:	b580      	push	{r7, lr}
100003f6:	b082      	sub	sp, #8
100003f8:	af00      	add	r7, sp, #0
100003fa:	6078      	str	r0, [r7, #4]
100003fc:	687b      	ldr	r3, [r7, #4]
100003fe:	3314      	adds	r3, #20
10000400:	0018      	movs	r0, r3
10000402:	f7ff ff83 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
10000406:	687b      	ldr	r3, [r7, #4]
10000408:	0018      	movs	r0, r3
1000040a:	46bd      	mov	sp, r7
1000040c:	b002      	add	sp, #8
1000040e:	bd80      	pop	{r7, pc}

10000410 <_ZN15CLR_HW_HardwareC1Ev>:
struct CLR_HW_Hardware
10000410:	b580      	push	{r7, lr}
10000412:	b082      	sub	sp, #8
10000414:	af00      	add	r7, sp, #0
10000416:	6078      	str	r0, [r7, #4]
10000418:	687b      	ldr	r3, [r7, #4]
1000041a:	3304      	adds	r3, #4
1000041c:	0018      	movs	r0, r3
1000041e:	f7ff ffe9 	bl	100003f4 <_ZN15CLR_HW_Hardware13InterruptDataC1Ev>
10000422:	687b      	ldr	r3, [r7, #4]
10000424:	0018      	movs	r0, r3
10000426:	46bd      	mov	sp, r7
10000428:	b002      	add	sp, #8
1000042a:	bd80      	pop	{r7, pc}

1000042c <_Z41__static_initialization_and_destruction_0ii>:
CLR_RT_WellKnownTypes      g_CLR_RT_WellKnownTypes;
CLR_RT_WellKnownMethods    g_CLR_RT_WellKnownMethods;
CLR_RT_TypeSystem          g_CLR_RT_TypeSystem;
CLR_RT_EventCache          g_CLR_RT_EventCache;
CLR_RT_GarbageCollector    g_CLR_RT_GarbageCollector;
CLR_HW_Hardware            g_CLR_HW_Hardware;
1000042c:	b580      	push	{r7, lr}
1000042e:	b082      	sub	sp, #8
10000430:	af00      	add	r7, sp, #0
10000432:	6078      	str	r0, [r7, #4]
10000434:	6039      	str	r1, [r7, #0]
10000436:	687b      	ldr	r3, [r7, #4]
10000438:	2b01      	cmp	r3, #1
1000043a:	d11f      	bne.n	1000047c <_Z41__static_initialization_and_destruction_0ii+0x50>
1000043c:	683b      	ldr	r3, [r7, #0]
1000043e:	4a11      	ldr	r2, [pc, #68]	; (10000484 <_Z41__static_initialization_and_destruction_0ii+0x58>)
10000440:	4293      	cmp	r3, r2
10000442:	d11b      	bne.n	1000047c <_Z41__static_initialization_and_destruction_0ii+0x50>
CLR_RT_ExecutionEngine     g_CLR_RT_ExecutionEngine;
10000444:	4b10      	ldr	r3, [pc, #64]	; (10000488 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
10000446:	0018      	movs	r0, r3
10000448:	f7ff ff9b 	bl	10000382 <_ZN22CLR_RT_ExecutionEngineC1Ev>
CLR_RT_WellKnownTypes      g_CLR_RT_WellKnownTypes;
1000044c:	4b0f      	ldr	r3, [pc, #60]	; (1000048c <_Z41__static_initialization_and_destruction_0ii+0x60>)
1000044e:	0018      	movs	r0, r3
10000450:	f7ff ff65 	bl	1000031e <_ZN21CLR_RT_WellKnownTypesC1Ev>
CLR_RT_WellKnownMethods    g_CLR_RT_WellKnownMethods;
10000454:	4b0e      	ldr	r3, [pc, #56]	; (10000490 <_Z41__static_initialization_and_destruction_0ii+0x64>)
10000456:	0018      	movs	r0, r3
10000458:	f7ff ff6a 	bl	10000330 <_ZN23CLR_RT_WellKnownMethodsC1Ev>
CLR_RT_TypeSystem          g_CLR_RT_TypeSystem;
1000045c:	4b0d      	ldr	r3, [pc, #52]	; (10000494 <_Z41__static_initialization_and_destruction_0ii+0x68>)
1000045e:	0018      	movs	r0, r3
10000460:	f7ff ff6f 	bl	10000342 <_ZN17CLR_RT_TypeSystemC1Ev>
CLR_RT_EventCache          g_CLR_RT_EventCache;
10000464:	4b0c      	ldr	r3, [pc, #48]	; (10000498 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
10000466:	0018      	movs	r0, r3
10000468:	f7ff ff82 	bl	10000370 <_ZN17CLR_RT_EventCacheC1Ev>
CLR_RT_GarbageCollector    g_CLR_RT_GarbageCollector;
1000046c:	4b0b      	ldr	r3, [pc, #44]	; (1000049c <_Z41__static_initialization_and_destruction_0ii+0x70>)
1000046e:	0018      	movs	r0, r3
10000470:	f7ff ff70 	bl	10000354 <_ZN23CLR_RT_GarbageCollectorC1Ev>
CLR_HW_Hardware            g_CLR_HW_Hardware;
10000474:	4b0a      	ldr	r3, [pc, #40]	; (100004a0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
10000476:	0018      	movs	r0, r3
10000478:	f7ff ffca 	bl	10000410 <_ZN15CLR_HW_HardwareC1Ev>
1000047c:	46c0      	nop			; (mov r8, r8)
1000047e:	46bd      	mov	sp, r7
10000480:	b002      	add	sp, #8
10000482:	bd80      	pop	{r7, pc}
10000484:	0000ffff 	.word	0x0000ffff
10000488:	20000cf0 	.word	0x20000cf0
1000048c:	20001328 	.word	0x20001328
10000490:	20001320 	.word	0x20001320
10000494:	20001210 	.word	0x20001210
10000498:	20000fcc 	.word	0x20000fcc
1000049c:	200011c0 	.word	0x200011c0
100004a0:	20000f98 	.word	0x20000f98

100004a4 <_GLOBAL__sub_I_g_buildCRC>:
100004a4:	b580      	push	{r7, lr}
100004a6:	af00      	add	r7, sp, #0
100004a8:	4b03      	ldr	r3, [pc, #12]	; (100004b8 <_GLOBAL__sub_I_g_buildCRC+0x14>)
100004aa:	0019      	movs	r1, r3
100004ac:	2001      	movs	r0, #1
100004ae:	f7ff ffbd 	bl	1000042c <_Z41__static_initialization_and_destruction_0ii>
100004b2:	46bd      	mov	sp, r7
100004b4:	bd80      	pop	{r7, pc}
100004b6:	46c0      	nop			; (mov r8, r8)
100004b8:	0000ffff 	.word	0x0000ffff

100004bc <_Z41__static_initialization_and_destruction_0ii>:
    event = NULL;

    NANOCLR_SET_AND_LEAVE(CLR_E_PIN_DEAD);

    NANOCLR_NOCLEANUP();
}
100004bc:	b580      	push	{r7, lr}
100004be:	b082      	sub	sp, #8
100004c0:	af00      	add	r7, sp, #0
100004c2:	6078      	str	r0, [r7, #4]
100004c4:	6039      	str	r1, [r7, #0]
100004c6:	687b      	ldr	r3, [r7, #4]
100004c8:	2b01      	cmp	r3, #1
100004ca:	d107      	bne.n	100004dc <_Z41__static_initialization_and_destruction_0ii+0x20>
100004cc:	683b      	ldr	r3, [r7, #0]
100004ce:	4a05      	ldr	r2, [pc, #20]	; (100004e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
100004d0:	4293      	cmp	r3, r2
100004d2:	d103      	bne.n	100004dc <_Z41__static_initialization_and_destruction_0ii+0x20>
CLR_RT_DblLinkedList CLR_RT_HeapBlock_NativeEventDispatcher::eventList; 
100004d4:	4b04      	ldr	r3, [pc, #16]	; (100004e8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
100004d6:	0018      	movs	r0, r3
100004d8:	f7ff ff18 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
}
100004dc:	46c0      	nop			; (mov r8, r8)
100004de:	46bd      	mov	sp, r7
100004e0:	b002      	add	sp, #8
100004e2:	bd80      	pop	{r7, pc}
100004e4:	0000ffff 	.word	0x0000ffff
100004e8:	20000ed0 	.word	0x20000ed0

100004ec <_GLOBAL__sub_I__ZN38CLR_RT_HeapBlock_NativeEventDispatcher9eventListE>:
100004ec:	b580      	push	{r7, lr}
100004ee:	af00      	add	r7, sp, #0
100004f0:	4b03      	ldr	r3, [pc, #12]	; (10000500 <_GLOBAL__sub_I__ZN38CLR_RT_HeapBlock_NativeEventDispatcher9eventListE+0x14>)
100004f2:	0019      	movs	r1, r3
100004f4:	2001      	movs	r0, #1
100004f6:	f7ff ffe1 	bl	100004bc <_Z41__static_initialization_and_destruction_0ii>
100004fa:	46bd      	mov	sp, r7
100004fc:	bd80      	pop	{r7, pc}
100004fe:	46c0      	nop			; (mov r8, r8)
10000500:	0000ffff 	.word	0x0000ffff

10000504 <_Z41__static_initialization_and_destruction_0ii>:
        }
    }
    NANOCLR_FOREACH_NODE_END();

    return NULL;
}
10000504:	b580      	push	{r7, lr}
10000506:	b082      	sub	sp, #8
10000508:	af00      	add	r7, sp, #0
1000050a:	6078      	str	r0, [r7, #4]
1000050c:	6039      	str	r1, [r7, #0]
1000050e:	687b      	ldr	r3, [r7, #4]
10000510:	2b01      	cmp	r3, #1
10000512:	d107      	bne.n	10000524 <_Z41__static_initialization_and_destruction_0ii+0x20>
10000514:	683b      	ldr	r3, [r7, #0]
10000516:	4a05      	ldr	r2, [pc, #20]	; (1000052c <_Z41__static_initialization_and_destruction_0ii+0x28>)
10000518:	4293      	cmp	r3, r2
1000051a:	d103      	bne.n	10000524 <_Z41__static_initialization_and_destruction_0ii+0x20>
CLR_RT_DblLinkedList CLR_RT_HeapBlock_EndPoint::m_endPoints;
1000051c:	4b04      	ldr	r3, [pc, #16]	; (10000530 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
1000051e:	0018      	movs	r0, r3
10000520:	f7ff fef4 	bl	1000030c <_ZN20CLR_RT_DblLinkedListC1Ev>
}
10000524:	46c0      	nop			; (mov r8, r8)
10000526:	46bd      	mov	sp, r7
10000528:	b002      	add	sp, #8
1000052a:	bd80      	pop	{r7, pc}
1000052c:	0000ffff 	.word	0x0000ffff
10000530:	20000ec4 	.word	0x20000ec4

10000534 <_GLOBAL__sub_I__ZN25CLR_RT_HeapBlock_EndPoint11m_endPointsE>:
10000534:	b580      	push	{r7, lr}
10000536:	af00      	add	r7, sp, #0
10000538:	4b03      	ldr	r3, [pc, #12]	; (10000548 <_GLOBAL__sub_I__ZN25CLR_RT_HeapBlock_EndPoint11m_endPointsE+0x14>)
1000053a:	0019      	movs	r1, r3
1000053c:	2001      	movs	r0, #1
1000053e:	f7ff ffe1 	bl	10000504 <_Z41__static_initialization_and_destruction_0ii>
10000542:	46bd      	mov	sp, r7
10000544:	bd80      	pop	{r7, pc}
10000546:	46c0      	nop			; (mov r8, r8)
10000548:	0000ffff 	.word	0x0000ffff

1000054c <_ZN8SettingsC1Ev>:
        memset(&g_CLR_HW_Hardware, 0, sizeof(g_CLR_HW_Hardware));

        m_fInitialized = false;
    }

    Settings()
1000054c:	b580      	push	{r7, lr}
1000054e:	b082      	sub	sp, #8
10000550:	af00      	add	r7, sp, #0
10000552:	6078      	str	r0, [r7, #4]
    {
        m_fInitialized = false;
10000554:	687b      	ldr	r3, [r7, #4]
10000556:	2200      	movs	r2, #0
10000558:	711a      	strb	r2, [r3, #4]
    }
1000055a:	687b      	ldr	r3, [r7, #4]
1000055c:	0018      	movs	r0, r3
1000055e:	46bd      	mov	sp, r7
10000560:	b002      	add	sp, #8
10000562:	bd80      	pop	{r7, pc}

10000564 <_Z41__static_initialization_and_destruction_0ii>:
#if !defined(BUILD_RTM)
    CLR_Debug::Printf("Exiting.\r\n");
#endif

    CPU_Reset();
}
10000564:	b580      	push	{r7, lr}
10000566:	b082      	sub	sp, #8
10000568:	af00      	add	r7, sp, #0
1000056a:	6078      	str	r0, [r7, #4]
1000056c:	6039      	str	r1, [r7, #0]
1000056e:	687b      	ldr	r3, [r7, #4]
10000570:	2b01      	cmp	r3, #1
10000572:	d107      	bne.n	10000584 <_Z41__static_initialization_and_destruction_0ii+0x20>
10000574:	683b      	ldr	r3, [r7, #0]
10000576:	4a05      	ldr	r2, [pc, #20]	; (1000058c <_Z41__static_initialization_and_destruction_0ii+0x28>)
10000578:	4293      	cmp	r3, r2
1000057a:	d103      	bne.n	10000584 <_Z41__static_initialization_and_destruction_0ii+0x20>
static Settings s_ClrSettings;
1000057c:	4b04      	ldr	r3, [pc, #16]	; (10000590 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
1000057e:	0018      	movs	r0, r3
10000580:	f7ff ffe4 	bl	1000054c <_ZN8SettingsC1Ev>
}
10000584:	46c0      	nop			; (mov r8, r8)
10000586:	46bd      	mov	sp, r7
10000588:	b002      	add	sp, #8
1000058a:	bd80      	pop	{r7, pc}
1000058c:	0000ffff 	.word	0x0000ffff
10000590:	20000eac 	.word	0x20000eac

10000594 <_GLOBAL__sub_I_ClrExit>:
10000594:	b580      	push	{r7, lr}
10000596:	af00      	add	r7, sp, #0
10000598:	4b03      	ldr	r3, [pc, #12]	; (100005a8 <_GLOBAL__sub_I_ClrExit+0x14>)
1000059a:	0019      	movs	r1, r3
1000059c:	2001      	movs	r0, #1
1000059e:	f7ff ffe1 	bl	10000564 <_Z41__static_initialization_and_destruction_0ii>
100005a2:	46bd      	mov	sp, r7
100005a4:	bd80      	pop	{r7, pc}
100005a6:	46c0      	nop			; (mov r8, r8)
100005a8:	0000ffff 	.word	0x0000ffff

100005ac <lock_init>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
100005ac:	b580      	push	{r7, lr}
100005ae:	b084      	sub	sp, #16
100005b0:	af00      	add	r7, sp, #0
100005b2:	6078      	str	r0, [r7, #4]
100005b4:	6039      	str	r1, [r7, #0]
100005b6:	683b      	ldr	r3, [r7, #0]
100005b8:	60fb      	str	r3, [r7, #12]
 * \param lock_num Spinlock ID
 * \return The spinlock instance
 */
__force_inline static spin_lock_t *spin_lock_instance(uint lock_num) {
    invalid_params_if(SYNC, lock_num >= NUM_SPIN_LOCKS);
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100005ba:	68fb      	ldr	r3, [r7, #12]
100005bc:	4a05      	ldr	r2, [pc, #20]	; (100005d4 <lock_init+0x28>)
100005be:	4694      	mov	ip, r2
100005c0:	4463      	add	r3, ip
100005c2:	009b      	lsls	r3, r3, #2
100005c4:	001a      	movs	r2, r3
    valid_params_if(LOCK_CORE, lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
100005c6:	687b      	ldr	r3, [r7, #4]
100005c8:	601a      	str	r2, [r3, #0]
}
100005ca:	46c0      	nop			; (mov r8, r8)
100005cc:	46bd      	mov	sp, r7
100005ce:	b004      	add	sp, #16
100005d0:	bd80      	pop	{r7, pc}
100005d2:	46c0      	nop			; (mov r8, r8)
100005d4:	34000040 	.word	0x34000040

100005d8 <mutex_init>:
 */

#include "pico/mutex.h"
#include "pico/time.h"

void mutex_init(mutex_t *mtx) {
100005d8:	b590      	push	{r4, r7, lr}
100005da:	b083      	sub	sp, #12
100005dc:	af00      	add	r7, sp, #0
100005de:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
100005e0:	687c      	ldr	r4, [r7, #4]
100005e2:	f002 fb89 	bl	10002cf8 <next_striped_spin_lock_num>
100005e6:	0003      	movs	r3, r0
100005e8:	0019      	movs	r1, r3
100005ea:	0020      	movs	r0, r4
100005ec:	f7ff ffde 	bl	100005ac <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
100005f0:	687b      	ldr	r3, [r7, #4]
100005f2:	22ff      	movs	r2, #255	; 0xff
100005f4:	711a      	strb	r2, [r3, #4]
    __asm volatile ("dmb" : : : "memory");
100005f6:	f3bf 8f5f 	dmb	sy
}
100005fa:	46c0      	nop			; (mov r8, r8)
}
100005fc:	46c0      	nop			; (mov r8, r8)
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = false;
#endif
    __mem_fence_release();
}
100005fe:	46c0      	nop			; (mov r8, r8)
10000600:	46bd      	mov	sp, r7
10000602:	b003      	add	sp, #12
10000604:	bd90      	pop	{r4, r7, pc}

10000606 <recursive_mutex_init>:

void recursive_mutex_init(recursive_mutex_t *mtx) {
10000606:	b590      	push	{r4, r7, lr}
10000608:	b083      	sub	sp, #12
1000060a:	af00      	add	r7, sp, #0
1000060c:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
1000060e:	687c      	ldr	r4, [r7, #4]
10000610:	f002 fb72 	bl	10002cf8 <next_striped_spin_lock_num>
10000614:	0003      	movs	r3, r0
10000616:	0019      	movs	r1, r3
10000618:	0020      	movs	r0, r4
1000061a:	f7ff ffc7 	bl	100005ac <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
1000061e:	687b      	ldr	r3, [r7, #4]
10000620:	22ff      	movs	r2, #255	; 0xff
10000622:	711a      	strb	r2, [r3, #4]
    mtx->enter_count = 0;
10000624:	687b      	ldr	r3, [r7, #4]
10000626:	2200      	movs	r2, #0
10000628:	715a      	strb	r2, [r3, #5]
    __asm volatile ("dmb" : : : "memory");
1000062a:	f3bf 8f5f 	dmb	sy
}
1000062e:	46c0      	nop			; (mov r8, r8)
}
10000630:	46c0      	nop			; (mov r8, r8)
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = true;
#endif
    __mem_fence_release();
}
10000632:	46c0      	nop			; (mov r8, r8)
10000634:	46bd      	mov	sp, r7
10000636:	b003      	add	sp, #12
10000638:	bd90      	pop	{r4, r7, pc}

1000063a <to_us_since_boot>:
 * \brief convert an absolute_time_t into a number of microseconds since boot.
 * \param t the absolute time to convert
 * \return a number of microseconds since boot, equivalent to t
 * \ingroup timestamp
 */
static inline uint64_t to_us_since_boot(absolute_time_t t) {
1000063a:	b580      	push	{r7, lr}
1000063c:	b082      	sub	sp, #8
1000063e:	af00      	add	r7, sp, #0
10000640:	6038      	str	r0, [r7, #0]
10000642:	6079      	str	r1, [r7, #4]
#ifdef NDEBUG
    return t;
#else
    return t._private_us_since_boot;
10000644:	683a      	ldr	r2, [r7, #0]
10000646:	687b      	ldr	r3, [r7, #4]
#endif
}
10000648:	0010      	movs	r0, r2
1000064a:	0019      	movs	r1, r3
1000064c:	46bd      	mov	sp, r7
1000064e:	b002      	add	sp, #8
10000650:	bd80      	pop	{r7, pc}
	...

10000654 <update_us_since_boot>:
 * \param t the absolute time value to update
 * \param us_since_boot the number of microseconds since boot to represent. Note this should be representable
 *                      as a signed 64 bit integer
 * \ingroup timestamp
 */
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
10000654:	b580      	push	{r7, lr}
10000656:	b084      	sub	sp, #16
10000658:	af00      	add	r7, sp, #0
1000065a:	60f8      	str	r0, [r7, #12]
1000065c:	603a      	str	r2, [r7, #0]
1000065e:	607b      	str	r3, [r7, #4]
#ifdef NDEBUG
    *t = us_since_boot;
#else
    assert(us_since_boot <= INT64_MAX);
10000660:	683a      	ldr	r2, [r7, #0]
10000662:	687b      	ldr	r3, [r7, #4]
10000664:	2b00      	cmp	r3, #0
10000666:	da05      	bge.n	10000674 <update_us_since_boot+0x20>
10000668:	4b07      	ldr	r3, [pc, #28]	; (10000688 <update_us_since_boot+0x34>)
1000066a:	4a08      	ldr	r2, [pc, #32]	; (1000068c <update_us_since_boot+0x38>)
1000066c:	4808      	ldr	r0, [pc, #32]	; (10000690 <update_us_since_boot+0x3c>)
1000066e:	213f      	movs	r1, #63	; 0x3f
10000670:	f004 fd9a 	bl	100051a8 <__assert_func>
    t->_private_us_since_boot = us_since_boot;
10000674:	68f9      	ldr	r1, [r7, #12]
10000676:	683a      	ldr	r2, [r7, #0]
10000678:	687b      	ldr	r3, [r7, #4]
1000067a:	600a      	str	r2, [r1, #0]
1000067c:	604b      	str	r3, [r1, #4]
#endif
}
1000067e:	46c0      	nop			; (mov r8, r8)
10000680:	46bd      	mov	sp, r7
10000682:	b004      	add	sp, #16
10000684:	bd80      	pop	{r7, pc}
10000686:	46c0      	nop			; (mov r8, r8)
10000688:	10006df0 	.word	0x10006df0
1000068c:	1000719c 	.word	0x1000719c
10000690:	10006e0c 	.word	0x10006e0c

10000694 <time_reached>:
 *  \ingroup hardware_timer
 *
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
10000694:	b5b0      	push	{r4, r5, r7, lr}
10000696:	b086      	sub	sp, #24
10000698:	af00      	add	r7, sp, #0
1000069a:	6038      	str	r0, [r7, #0]
1000069c:	6079      	str	r1, [r7, #4]
    uint64_t target = to_us_since_boot(t);
1000069e:	683a      	ldr	r2, [r7, #0]
100006a0:	687b      	ldr	r3, [r7, #4]
100006a2:	0010      	movs	r0, r2
100006a4:	0019      	movs	r1, r3
100006a6:	f7ff ffc8 	bl	1000063a <to_us_since_boot>
100006aa:	0002      	movs	r2, r0
100006ac:	000b      	movs	r3, r1
100006ae:	613a      	str	r2, [r7, #16]
100006b0:	617b      	str	r3, [r7, #20]
    uint32_t hi_target = (uint32_t)(target >> 32u);
100006b2:	697b      	ldr	r3, [r7, #20]
100006b4:	001c      	movs	r4, r3
100006b6:	2300      	movs	r3, #0
100006b8:	001d      	movs	r5, r3
100006ba:	0023      	movs	r3, r4
100006bc:	60fb      	str	r3, [r7, #12]
    uint32_t hi = timer_hw->timerawh;
100006be:	4b0d      	ldr	r3, [pc, #52]	; (100006f4 <time_reached+0x60>)
100006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100006c2:	60bb      	str	r3, [r7, #8]
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100006c4:	68ba      	ldr	r2, [r7, #8]
100006c6:	68fb      	ldr	r3, [r7, #12]
100006c8:	429a      	cmp	r2, r3
100006ca:	d30a      	bcc.n	100006e2 <time_reached+0x4e>
100006cc:	4b09      	ldr	r3, [pc, #36]	; (100006f4 <time_reached+0x60>)
100006ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
100006d0:	693b      	ldr	r3, [r7, #16]
100006d2:	429a      	cmp	r2, r3
100006d4:	d203      	bcs.n	100006de <time_reached+0x4a>
100006d6:	68ba      	ldr	r2, [r7, #8]
100006d8:	68fb      	ldr	r3, [r7, #12]
100006da:	429a      	cmp	r2, r3
100006dc:	d001      	beq.n	100006e2 <time_reached+0x4e>
100006de:	2301      	movs	r3, #1
100006e0:	e000      	b.n	100006e4 <time_reached+0x50>
100006e2:	2300      	movs	r3, #0
100006e4:	1c1a      	adds	r2, r3, #0
100006e6:	2301      	movs	r3, #1
100006e8:	4013      	ands	r3, r2
100006ea:	b2db      	uxtb	r3, r3
}
100006ec:	0018      	movs	r0, r3
100006ee:	46bd      	mov	sp, r7
100006f0:	b006      	add	sp, #24
100006f2:	bdb0      	pop	{r4, r5, r7, pc}
100006f4:	40054000 	.word	0x40054000

100006f8 <get_absolute_time>:
 *
 * \sa absolute_time_t
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time(void) {
100006f8:	b580      	push	{r7, lr}
100006fa:	b084      	sub	sp, #16
100006fc:	af00      	add	r7, sp, #0
100006fe:	6078      	str	r0, [r7, #4]
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
10000700:	f002 fb4e 	bl	10002da0 <time_us_64>
10000704:	0002      	movs	r2, r0
10000706:	000b      	movs	r3, r1
10000708:	2108      	movs	r1, #8
1000070a:	1879      	adds	r1, r7, r1
1000070c:	0008      	movs	r0, r1
1000070e:	f7ff ffa1 	bl	10000654 <update_us_since_boot>
    return t;
10000712:	6879      	ldr	r1, [r7, #4]
10000714:	68ba      	ldr	r2, [r7, #8]
10000716:	68fb      	ldr	r3, [r7, #12]
10000718:	600a      	str	r2, [r1, #0]
1000071a:	604b      	str	r3, [r1, #4]
}
1000071c:	6878      	ldr	r0, [r7, #4]
1000071e:	46bd      	mov	sp, r7
10000720:	b004      	add	sp, #16
10000722:	bd80      	pop	{r7, pc}

10000724 <delayed_by_us>:
 *
 * \param t the base timestamp
 * \param us the number of microseconds to add
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
10000724:	b580      	push	{r7, lr}
10000726:	b08a      	sub	sp, #40	; 0x28
10000728:	af00      	add	r7, sp, #0
1000072a:	60f8      	str	r0, [r7, #12]
1000072c:	603a      	str	r2, [r7, #0]
1000072e:	607b      	str	r3, [r7, #4]
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
10000730:	683a      	ldr	r2, [r7, #0]
10000732:	687b      	ldr	r3, [r7, #4]
10000734:	0010      	movs	r0, r2
10000736:	0019      	movs	r1, r3
10000738:	f7ff ff7f 	bl	1000063a <to_us_since_boot>
1000073c:	0002      	movs	r2, r0
1000073e:	000b      	movs	r3, r1
10000740:	61ba      	str	r2, [r7, #24]
10000742:	61fb      	str	r3, [r7, #28]
    uint64_t delayed = base + us;
10000744:	69b8      	ldr	r0, [r7, #24]
10000746:	69f9      	ldr	r1, [r7, #28]
10000748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000074c:	1812      	adds	r2, r2, r0
1000074e:	414b      	adcs	r3, r1
10000750:	623a      	str	r2, [r7, #32]
10000752:	627b      	str	r3, [r7, #36]	; 0x24
    if (delayed < base) {
10000754:	69fa      	ldr	r2, [r7, #28]
10000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000758:	429a      	cmp	r2, r3
1000075a:	d807      	bhi.n	1000076c <delayed_by_us+0x48>
1000075c:	69fa      	ldr	r2, [r7, #28]
1000075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10000760:	429a      	cmp	r2, r3
10000762:	d108      	bne.n	10000776 <delayed_by_us+0x52>
10000764:	69ba      	ldr	r2, [r7, #24]
10000766:	6a3b      	ldr	r3, [r7, #32]
10000768:	429a      	cmp	r2, r3
1000076a:	d904      	bls.n	10000776 <delayed_by_us+0x52>
        delayed = (uint64_t)-1;
1000076c:	2201      	movs	r2, #1
1000076e:	4252      	negs	r2, r2
10000770:	17d3      	asrs	r3, r2, #31
10000772:	623a      	str	r2, [r7, #32]
10000774:	627b      	str	r3, [r7, #36]	; 0x24
    }
    update_us_since_boot(&t2, delayed);
10000776:	6a3a      	ldr	r2, [r7, #32]
10000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000077a:	2110      	movs	r1, #16
1000077c:	1879      	adds	r1, r7, r1
1000077e:	0008      	movs	r0, r1
10000780:	f7ff ff68 	bl	10000654 <update_us_since_boot>
    return t2;
10000784:	68f9      	ldr	r1, [r7, #12]
10000786:	693a      	ldr	r2, [r7, #16]
10000788:	697b      	ldr	r3, [r7, #20]
1000078a:	600a      	str	r2, [r1, #0]
1000078c:	604b      	str	r3, [r1, #4]
}
1000078e:	68f8      	ldr	r0, [r7, #12]
10000790:	46bd      	mov	sp, r7
10000792:	b00a      	add	sp, #40	; 0x28
10000794:	bd80      	pop	{r7, pc}

10000796 <make_timeout_time_us>:
 * \ingroup timestamp
 *
 * \param us the number of microseconds to add to the current timestamp
 * \return the future timestamp
 */
static inline absolute_time_t make_timeout_time_us(uint64_t us) {
10000796:	b590      	push	{r4, r7, lr}
10000798:	b089      	sub	sp, #36	; 0x24
1000079a:	af02      	add	r7, sp, #8
1000079c:	60f8      	str	r0, [r7, #12]
1000079e:	603a      	str	r2, [r7, #0]
100007a0:	607b      	str	r3, [r7, #4]
    return delayed_by_us(get_absolute_time(), us);
100007a2:	2310      	movs	r3, #16
100007a4:	18fb      	adds	r3, r7, r3
100007a6:	0018      	movs	r0, r3
100007a8:	f7ff ffa6 	bl	100006f8 <get_absolute_time>
100007ac:	68fc      	ldr	r4, [r7, #12]
100007ae:	6938      	ldr	r0, [r7, #16]
100007b0:	6979      	ldr	r1, [r7, #20]
100007b2:	683a      	ldr	r2, [r7, #0]
100007b4:	687b      	ldr	r3, [r7, #4]
100007b6:	9200      	str	r2, [sp, #0]
100007b8:	9301      	str	r3, [sp, #4]
100007ba:	0002      	movs	r2, r0
100007bc:	000b      	movs	r3, r1
100007be:	0020      	movs	r0, r4
100007c0:	f7ff ffb0 	bl	10000724 <delayed_by_us>
}
100007c4:	68f8      	ldr	r0, [r7, #12]
100007c6:	46bd      	mov	sp, r7
100007c8:	b007      	add	sp, #28
100007ca:	bd90      	pop	{r4, r7, pc}

100007cc <absolute_time_diff_us>:
 * \param from the first timestamp
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
100007cc:	b5b0      	push	{r4, r5, r7, lr}
100007ce:	b084      	sub	sp, #16
100007d0:	af00      	add	r7, sp, #0
100007d2:	60b8      	str	r0, [r7, #8]
100007d4:	60f9      	str	r1, [r7, #12]
100007d6:	603a      	str	r2, [r7, #0]
100007d8:	607b      	str	r3, [r7, #4]
    return (int64_t)(to_us_since_boot(to) - to_us_since_boot(from));
100007da:	683a      	ldr	r2, [r7, #0]
100007dc:	687b      	ldr	r3, [r7, #4]
100007de:	0010      	movs	r0, r2
100007e0:	0019      	movs	r1, r3
100007e2:	f7ff ff2a 	bl	1000063a <to_us_since_boot>
100007e6:	0004      	movs	r4, r0
100007e8:	000d      	movs	r5, r1
100007ea:	68ba      	ldr	r2, [r7, #8]
100007ec:	68fb      	ldr	r3, [r7, #12]
100007ee:	0010      	movs	r0, r2
100007f0:	0019      	movs	r1, r3
100007f2:	f7ff ff22 	bl	1000063a <to_us_since_boot>
100007f6:	0002      	movs	r2, r0
100007f8:	000b      	movs	r3, r1
100007fa:	1aa4      	subs	r4, r4, r2
100007fc:	419d      	sbcs	r5, r3
100007fe:	0022      	movs	r2, r4
10000800:	002b      	movs	r3, r5
}
10000802:	0010      	movs	r0, r2
10000804:	0019      	movs	r1, r3
10000806:	46bd      	mov	sp, r7
10000808:	b004      	add	sp, #16
1000080a:	bdb0      	pop	{r4, r5, r7, pc}

1000080c <add_alarm_at>:
 * @return 0 if the alarm time passed before or during the call AND there is no active alarm to return the id of.
 *           The latter can either happen because fire_if_past was false (i.e. no timer was ever created),
 *           or if the callback <i>was</i> called during this method but the callback cancelled itself by returning 0
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_at(absolute_time_t time, alarm_callback_t callback, void *user_data, bool fire_if_past) {
1000080c:	b580      	push	{r7, lr}
1000080e:	b088      	sub	sp, #32
10000810:	af04      	add	r7, sp, #16
10000812:	60b8      	str	r0, [r7, #8]
10000814:	60f9      	str	r1, [r7, #12]
10000816:	607a      	str	r2, [r7, #4]
10000818:	603b      	str	r3, [r7, #0]
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
1000081a:	f000 fa8b 	bl	10000d34 <alarm_pool_get_default>
1000081e:	68ba      	ldr	r2, [r7, #8]
10000820:	68fb      	ldr	r3, [r7, #12]
10000822:	2118      	movs	r1, #24
10000824:	1879      	adds	r1, r7, r1
10000826:	7809      	ldrb	r1, [r1, #0]
10000828:	9102      	str	r1, [sp, #8]
1000082a:	6839      	ldr	r1, [r7, #0]
1000082c:	9101      	str	r1, [sp, #4]
1000082e:	6879      	ldr	r1, [r7, #4]
10000830:	9100      	str	r1, [sp, #0]
10000832:	f000 fd67 	bl	10001304 <alarm_pool_add_alarm_at>
10000836:	0003      	movs	r3, r0
}
10000838:	0018      	movs	r0, r3
1000083a:	46bd      	mov	sp, r7
1000083c:	b004      	add	sp, #16
1000083e:	bd80      	pop	{r7, pc}

10000840 <ph_get_node>:
 * \param heap the heap
 */
void ph_destroy(pheap_t *heap);

// internal method
static inline pheap_node_t *ph_get_node(pheap_t *heap, pheap_node_id_t id) {
10000840:	b580      	push	{r7, lr}
10000842:	b082      	sub	sp, #8
10000844:	af00      	add	r7, sp, #0
10000846:	6078      	str	r0, [r7, #4]
10000848:	000a      	movs	r2, r1
1000084a:	1cfb      	adds	r3, r7, #3
1000084c:	701a      	strb	r2, [r3, #0]
    assert(id && id <= heap->max_nodes);
1000084e:	1cfb      	adds	r3, r7, #3
10000850:	781b      	ldrb	r3, [r3, #0]
10000852:	2b00      	cmp	r3, #0
10000854:	d005      	beq.n	10000862 <ph_get_node+0x22>
10000856:	687b      	ldr	r3, [r7, #4]
10000858:	7b1b      	ldrb	r3, [r3, #12]
1000085a:	1cfa      	adds	r2, r7, #3
1000085c:	7812      	ldrb	r2, [r2, #0]
1000085e:	429a      	cmp	r2, r3
10000860:	d905      	bls.n	1000086e <ph_get_node+0x2e>
10000862:	4b09      	ldr	r3, [pc, #36]	; (10000888 <ph_get_node+0x48>)
10000864:	4a09      	ldr	r2, [pc, #36]	; (1000088c <ph_get_node+0x4c>)
10000866:	480a      	ldr	r0, [pc, #40]	; (10000890 <ph_get_node+0x50>)
10000868:	2168      	movs	r1, #104	; 0x68
1000086a:	f004 fc9d 	bl	100051a8 <__assert_func>
    return heap->nodes + id - 1;
1000086e:	687b      	ldr	r3, [r7, #4]
10000870:	6819      	ldr	r1, [r3, #0]
10000872:	1cfb      	adds	r3, r7, #3
10000874:	781a      	ldrb	r2, [r3, #0]
10000876:	0013      	movs	r3, r2
10000878:	005b      	lsls	r3, r3, #1
1000087a:	189b      	adds	r3, r3, r2
1000087c:	3b03      	subs	r3, #3
1000087e:	18cb      	adds	r3, r1, r3
}
10000880:	0018      	movs	r0, r3
10000882:	46bd      	mov	sp, r7
10000884:	b002      	add	sp, #8
10000886:	bd80      	pop	{r7, pc}
10000888:	10006e60 	.word	0x10006e60
1000088c:	10007128 	.word	0x10007128
10000890:	10006e7c 	.word	0x10006e7c

10000894 <ph_add_child_node>:

// internal method
static void ph_add_child_node(pheap_t *heap, pheap_node_id_t parent_id, pheap_node_id_t child_id) {
10000894:	b580      	push	{r7, lr}
10000896:	b084      	sub	sp, #16
10000898:	af00      	add	r7, sp, #0
1000089a:	6078      	str	r0, [r7, #4]
1000089c:	0008      	movs	r0, r1
1000089e:	0011      	movs	r1, r2
100008a0:	1cfb      	adds	r3, r7, #3
100008a2:	1c02      	adds	r2, r0, #0
100008a4:	701a      	strb	r2, [r3, #0]
100008a6:	1cbb      	adds	r3, r7, #2
100008a8:	1c0a      	adds	r2, r1, #0
100008aa:	701a      	strb	r2, [r3, #0]
    pheap_node_t *n = ph_get_node(heap, parent_id);
100008ac:	1cfb      	adds	r3, r7, #3
100008ae:	781a      	ldrb	r2, [r3, #0]
100008b0:	687b      	ldr	r3, [r7, #4]
100008b2:	0011      	movs	r1, r2
100008b4:	0018      	movs	r0, r3
100008b6:	f7ff ffc3 	bl	10000840 <ph_get_node>
100008ba:	0003      	movs	r3, r0
100008bc:	60fb      	str	r3, [r7, #12]
    assert(parent_id);
100008be:	1cfb      	adds	r3, r7, #3
100008c0:	781b      	ldrb	r3, [r3, #0]
100008c2:	2b00      	cmp	r3, #0
100008c4:	d105      	bne.n	100008d2 <ph_add_child_node+0x3e>
100008c6:	4b1f      	ldr	r3, [pc, #124]	; (10000944 <ph_add_child_node+0xb0>)
100008c8:	4a1f      	ldr	r2, [pc, #124]	; (10000948 <ph_add_child_node+0xb4>)
100008ca:	4820      	ldr	r0, [pc, #128]	; (1000094c <ph_add_child_node+0xb8>)
100008cc:	216f      	movs	r1, #111	; 0x6f
100008ce:	f004 fc6b 	bl	100051a8 <__assert_func>
    assert(child_id);
100008d2:	1cbb      	adds	r3, r7, #2
100008d4:	781b      	ldrb	r3, [r3, #0]
100008d6:	2b00      	cmp	r3, #0
100008d8:	d105      	bne.n	100008e6 <ph_add_child_node+0x52>
100008da:	4b1d      	ldr	r3, [pc, #116]	; (10000950 <ph_add_child_node+0xbc>)
100008dc:	4a1a      	ldr	r2, [pc, #104]	; (10000948 <ph_add_child_node+0xb4>)
100008de:	481b      	ldr	r0, [pc, #108]	; (1000094c <ph_add_child_node+0xb8>)
100008e0:	2170      	movs	r1, #112	; 0x70
100008e2:	f004 fc61 	bl	100051a8 <__assert_func>
    assert(parent_id != child_id);
100008e6:	1cfa      	adds	r2, r7, #3
100008e8:	1cbb      	adds	r3, r7, #2
100008ea:	7812      	ldrb	r2, [r2, #0]
100008ec:	781b      	ldrb	r3, [r3, #0]
100008ee:	429a      	cmp	r2, r3
100008f0:	d105      	bne.n	100008fe <ph_add_child_node+0x6a>
100008f2:	4b18      	ldr	r3, [pc, #96]	; (10000954 <ph_add_child_node+0xc0>)
100008f4:	4a14      	ldr	r2, [pc, #80]	; (10000948 <ph_add_child_node+0xb4>)
100008f6:	4815      	ldr	r0, [pc, #84]	; (1000094c <ph_add_child_node+0xb8>)
100008f8:	2171      	movs	r1, #113	; 0x71
100008fa:	f004 fc55 	bl	100051a8 <__assert_func>
    pheap_node_t *c = ph_get_node(heap, child_id);
100008fe:	1cbb      	adds	r3, r7, #2
10000900:	781a      	ldrb	r2, [r3, #0]
10000902:	687b      	ldr	r3, [r7, #4]
10000904:	0011      	movs	r1, r2
10000906:	0018      	movs	r0, r3
10000908:	f7ff ff9a 	bl	10000840 <ph_get_node>
1000090c:	0003      	movs	r3, r0
1000090e:	60bb      	str	r3, [r7, #8]
    c->parent = parent_id;
10000910:	68bb      	ldr	r3, [r7, #8]
10000912:	1cfa      	adds	r2, r7, #3
10000914:	7812      	ldrb	r2, [r2, #0]
10000916:	709a      	strb	r2, [r3, #2]
    if (!n->child) {
10000918:	68fb      	ldr	r3, [r7, #12]
1000091a:	781b      	ldrb	r3, [r3, #0]
1000091c:	2b00      	cmp	r3, #0
1000091e:	d104      	bne.n	1000092a <ph_add_child_node+0x96>
        n->child = child_id;
10000920:	68fb      	ldr	r3, [r7, #12]
10000922:	1cba      	adds	r2, r7, #2
10000924:	7812      	ldrb	r2, [r2, #0]
10000926:	701a      	strb	r2, [r3, #0]
    } else {
        c->sibling = n->child;
        n->child = child_id;
    }
}
10000928:	e007      	b.n	1000093a <ph_add_child_node+0xa6>
        c->sibling = n->child;
1000092a:	68fb      	ldr	r3, [r7, #12]
1000092c:	781a      	ldrb	r2, [r3, #0]
1000092e:	68bb      	ldr	r3, [r7, #8]
10000930:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10000932:	68fb      	ldr	r3, [r7, #12]
10000934:	1cba      	adds	r2, r7, #2
10000936:	7812      	ldrb	r2, [r2, #0]
10000938:	701a      	strb	r2, [r3, #0]
}
1000093a:	46c0      	nop			; (mov r8, r8)
1000093c:	46bd      	mov	sp, r7
1000093e:	b004      	add	sp, #16
10000940:	bd80      	pop	{r7, pc}
10000942:	46c0      	nop			; (mov r8, r8)
10000944:	10006ed4 	.word	0x10006ed4
10000948:	10007114 	.word	0x10007114
1000094c:	10006e7c 	.word	0x10006e7c
10000950:	10006ee0 	.word	0x10006ee0
10000954:	10006eec 	.word	0x10006eec

10000958 <ph_merge_nodes>:

// internal method
static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10000958:	b590      	push	{r4, r7, lr}
1000095a:	b083      	sub	sp, #12
1000095c:	af00      	add	r7, sp, #0
1000095e:	6078      	str	r0, [r7, #4]
10000960:	0008      	movs	r0, r1
10000962:	0011      	movs	r1, r2
10000964:	1cfb      	adds	r3, r7, #3
10000966:	1c02      	adds	r2, r0, #0
10000968:	701a      	strb	r2, [r3, #0]
1000096a:	1cbb      	adds	r3, r7, #2
1000096c:	1c0a      	adds	r2, r1, #0
1000096e:	701a      	strb	r2, [r3, #0]
    if (!a) return b;
10000970:	1cfb      	adds	r3, r7, #3
10000972:	781b      	ldrb	r3, [r3, #0]
10000974:	2b00      	cmp	r3, #0
10000976:	d102      	bne.n	1000097e <ph_merge_nodes+0x26>
10000978:	1cbb      	adds	r3, r7, #2
1000097a:	781b      	ldrb	r3, [r3, #0]
1000097c:	e027      	b.n	100009ce <ph_merge_nodes+0x76>
    if (!b) return a;
1000097e:	1cbb      	adds	r3, r7, #2
10000980:	781b      	ldrb	r3, [r3, #0]
10000982:	2b00      	cmp	r3, #0
10000984:	d102      	bne.n	1000098c <ph_merge_nodes+0x34>
10000986:	1cfb      	adds	r3, r7, #3
10000988:	781b      	ldrb	r3, [r3, #0]
1000098a:	e020      	b.n	100009ce <ph_merge_nodes+0x76>
    if (heap->comparator(heap->user_data, a, b)) {
1000098c:	687b      	ldr	r3, [r7, #4]
1000098e:	685c      	ldr	r4, [r3, #4]
10000990:	687b      	ldr	r3, [r7, #4]
10000992:	6898      	ldr	r0, [r3, #8]
10000994:	1cbb      	adds	r3, r7, #2
10000996:	781a      	ldrb	r2, [r3, #0]
10000998:	1cfb      	adds	r3, r7, #3
1000099a:	781b      	ldrb	r3, [r3, #0]
1000099c:	0019      	movs	r1, r3
1000099e:	47a0      	blx	r4
100009a0:	1e03      	subs	r3, r0, #0
100009a2:	d00a      	beq.n	100009ba <ph_merge_nodes+0x62>
        ph_add_child_node(heap, a, b);
100009a4:	1cbb      	adds	r3, r7, #2
100009a6:	781a      	ldrb	r2, [r3, #0]
100009a8:	1cfb      	adds	r3, r7, #3
100009aa:	7819      	ldrb	r1, [r3, #0]
100009ac:	687b      	ldr	r3, [r7, #4]
100009ae:	0018      	movs	r0, r3
100009b0:	f7ff ff70 	bl	10000894 <ph_add_child_node>
        return a;
100009b4:	1cfb      	adds	r3, r7, #3
100009b6:	781b      	ldrb	r3, [r3, #0]
100009b8:	e009      	b.n	100009ce <ph_merge_nodes+0x76>
    } else {
        ph_add_child_node(heap, b, a);
100009ba:	1cfb      	adds	r3, r7, #3
100009bc:	781a      	ldrb	r2, [r3, #0]
100009be:	1cbb      	adds	r3, r7, #2
100009c0:	7819      	ldrb	r1, [r3, #0]
100009c2:	687b      	ldr	r3, [r7, #4]
100009c4:	0018      	movs	r0, r3
100009c6:	f7ff ff65 	bl	10000894 <ph_add_child_node>
        return b;
100009ca:	1cbb      	adds	r3, r7, #2
100009cc:	781b      	ldrb	r3, [r3, #0]
    }
}
100009ce:	0018      	movs	r0, r3
100009d0:	46bd      	mov	sp, r7
100009d2:	b003      	add	sp, #12
100009d4:	bd90      	pop	{r4, r7, pc}

100009d6 <ph_new_node>:
 * Allocate a new node from the unused space in the heap
 *
 * \param heap the heap
 * \return an identifier for the node, or 0 if the heap is full
 */
static inline pheap_node_id_t ph_new_node(pheap_t *heap) {
100009d6:	b580      	push	{r7, lr}
100009d8:	b084      	sub	sp, #16
100009da:	af00      	add	r7, sp, #0
100009dc:	6078      	str	r0, [r7, #4]
    if (!heap->free_head_id) return 0;
100009de:	687b      	ldr	r3, [r7, #4]
100009e0:	7b9b      	ldrb	r3, [r3, #14]
100009e2:	2b00      	cmp	r3, #0
100009e4:	d101      	bne.n	100009ea <ph_new_node+0x14>
100009e6:	2300      	movs	r3, #0
100009e8:	e026      	b.n	10000a38 <ph_new_node+0x62>
    pheap_node_id_t id = heap->free_head_id;
100009ea:	210f      	movs	r1, #15
100009ec:	187b      	adds	r3, r7, r1
100009ee:	687a      	ldr	r2, [r7, #4]
100009f0:	7b92      	ldrb	r2, [r2, #14]
100009f2:	701a      	strb	r2, [r3, #0]
    pheap_node_t *hn = ph_get_node(heap, id);
100009f4:	187b      	adds	r3, r7, r1
100009f6:	781a      	ldrb	r2, [r3, #0]
100009f8:	687b      	ldr	r3, [r7, #4]
100009fa:	0011      	movs	r1, r2
100009fc:	0018      	movs	r0, r3
100009fe:	f7ff ff1f 	bl	10000840 <ph_get_node>
10000a02:	0003      	movs	r3, r0
10000a04:	60bb      	str	r3, [r7, #8]
    heap->free_head_id = hn->sibling;
10000a06:	68bb      	ldr	r3, [r7, #8]
10000a08:	785a      	ldrb	r2, [r3, #1]
10000a0a:	687b      	ldr	r3, [r7, #4]
10000a0c:	739a      	strb	r2, [r3, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10000a0e:	687b      	ldr	r3, [r7, #4]
10000a10:	7b9b      	ldrb	r3, [r3, #14]
10000a12:	2b00      	cmp	r3, #0
10000a14:	d102      	bne.n	10000a1c <ph_new_node+0x46>
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	2200      	movs	r2, #0
10000a1a:	73da      	strb	r2, [r3, #15]
    hn->child = hn->sibling = hn->parent = 0;
10000a1c:	68bb      	ldr	r3, [r7, #8]
10000a1e:	2200      	movs	r2, #0
10000a20:	709a      	strb	r2, [r3, #2]
10000a22:	68bb      	ldr	r3, [r7, #8]
10000a24:	789a      	ldrb	r2, [r3, #2]
10000a26:	68bb      	ldr	r3, [r7, #8]
10000a28:	705a      	strb	r2, [r3, #1]
10000a2a:	68bb      	ldr	r3, [r7, #8]
10000a2c:	785a      	ldrb	r2, [r3, #1]
10000a2e:	68bb      	ldr	r3, [r7, #8]
10000a30:	701a      	strb	r2, [r3, #0]
    return id;
10000a32:	230f      	movs	r3, #15
10000a34:	18fb      	adds	r3, r7, r3
10000a36:	781b      	ldrb	r3, [r3, #0]
}
10000a38:	0018      	movs	r0, r3
10000a3a:	46bd      	mov	sp, r7
10000a3c:	b004      	add	sp, #16
10000a3e:	bd80      	pop	{r7, pc}

10000a40 <ph_insert_node>:
 *
 * \param heap the heap
 * \param id the id of the node to insert
 * \return the id of the new head of the pairing heap (i.e. node that compares first)
 */
static inline pheap_node_id_t ph_insert_node(pheap_t *heap, pheap_node_id_t id) {
10000a40:	b580      	push	{r7, lr}
10000a42:	b084      	sub	sp, #16
10000a44:	af00      	add	r7, sp, #0
10000a46:	6078      	str	r0, [r7, #4]
10000a48:	000a      	movs	r2, r1
10000a4a:	1cfb      	adds	r3, r7, #3
10000a4c:	701a      	strb	r2, [r3, #0]
    assert(id);
10000a4e:	1cfb      	adds	r3, r7, #3
10000a50:	781b      	ldrb	r3, [r3, #0]
10000a52:	2b00      	cmp	r3, #0
10000a54:	d105      	bne.n	10000a62 <ph_insert_node+0x22>
10000a56:	4b16      	ldr	r3, [pc, #88]	; (10000ab0 <ph_insert_node+0x70>)
10000a58:	4a16      	ldr	r2, [pc, #88]	; (10000ab4 <ph_insert_node+0x74>)
10000a5a:	4817      	ldr	r0, [pc, #92]	; (10000ab8 <ph_insert_node+0x78>)
10000a5c:	21a5      	movs	r1, #165	; 0xa5
10000a5e:	f004 fba3 	bl	100051a8 <__assert_func>
    pheap_node_t *hn = ph_get_node(heap, id);
10000a62:	1cfb      	adds	r3, r7, #3
10000a64:	781a      	ldrb	r2, [r3, #0]
10000a66:	687b      	ldr	r3, [r7, #4]
10000a68:	0011      	movs	r1, r2
10000a6a:	0018      	movs	r0, r3
10000a6c:	f7ff fee8 	bl	10000840 <ph_get_node>
10000a70:	0003      	movs	r3, r0
10000a72:	60fb      	str	r3, [r7, #12]
    hn->child = hn->sibling = hn->parent = 0;
10000a74:	68fb      	ldr	r3, [r7, #12]
10000a76:	2200      	movs	r2, #0
10000a78:	709a      	strb	r2, [r3, #2]
10000a7a:	68fb      	ldr	r3, [r7, #12]
10000a7c:	789a      	ldrb	r2, [r3, #2]
10000a7e:	68fb      	ldr	r3, [r7, #12]
10000a80:	705a      	strb	r2, [r3, #1]
10000a82:	68fb      	ldr	r3, [r7, #12]
10000a84:	785a      	ldrb	r2, [r3, #1]
10000a86:	68fb      	ldr	r3, [r7, #12]
10000a88:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10000a8a:	687b      	ldr	r3, [r7, #4]
10000a8c:	7b59      	ldrb	r1, [r3, #13]
10000a8e:	1cfb      	adds	r3, r7, #3
10000a90:	781a      	ldrb	r2, [r3, #0]
10000a92:	687b      	ldr	r3, [r7, #4]
10000a94:	0018      	movs	r0, r3
10000a96:	f7ff ff5f 	bl	10000958 <ph_merge_nodes>
10000a9a:	0003      	movs	r3, r0
10000a9c:	001a      	movs	r2, r3
10000a9e:	687b      	ldr	r3, [r7, #4]
10000aa0:	735a      	strb	r2, [r3, #13]
    return heap->root_id;
10000aa2:	687b      	ldr	r3, [r7, #4]
10000aa4:	7b5b      	ldrb	r3, [r3, #13]
}
10000aa6:	0018      	movs	r0, r3
10000aa8:	46bd      	mov	sp, r7
10000aaa:	b004      	add	sp, #16
10000aac:	bd80      	pop	{r7, pc}
10000aae:	46c0      	nop			; (mov r8, r8)
10000ab0:	10006f04 	.word	0x10006f04
10000ab4:	10007170 	.word	0x10007170
10000ab8:	10006e7c 	.word	0x10006e7c

10000abc <ph_peek_head>:
 * which compares first, but without removing it from the heap.
 *
 * \param heap the heap
 * \return the current head node id
 */
static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
10000abc:	b580      	push	{r7, lr}
10000abe:	b082      	sub	sp, #8
10000ac0:	af00      	add	r7, sp, #0
10000ac2:	6078      	str	r0, [r7, #4]
    return heap->root_id;
10000ac4:	687b      	ldr	r3, [r7, #4]
10000ac6:	7b5b      	ldrb	r3, [r3, #13]
}
10000ac8:	0018      	movs	r0, r3
10000aca:	46bd      	mov	sp, r7
10000acc:	b002      	add	sp, #8
10000ace:	bd80      	pop	{r7, pc}

10000ad0 <ph_contains_node>:
 *
 * @param heap the heap
 * @param id the id of the node
 * @return true if the heap contains a node with the given id, false otherwise.
 */
static inline bool ph_contains_node(pheap_t *heap, pheap_node_id_t id) {
10000ad0:	b580      	push	{r7, lr}
10000ad2:	b082      	sub	sp, #8
10000ad4:	af00      	add	r7, sp, #0
10000ad6:	6078      	str	r0, [r7, #4]
10000ad8:	000a      	movs	r2, r1
10000ada:	1cfb      	adds	r3, r7, #3
10000adc:	701a      	strb	r2, [r3, #0]
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10000ade:	687b      	ldr	r3, [r7, #4]
10000ae0:	7b5b      	ldrb	r3, [r3, #13]
10000ae2:	1cfa      	adds	r2, r7, #3
10000ae4:	7812      	ldrb	r2, [r2, #0]
10000ae6:	429a      	cmp	r2, r3
10000ae8:	d00a      	beq.n	10000b00 <ph_contains_node+0x30>
10000aea:	1cfb      	adds	r3, r7, #3
10000aec:	781a      	ldrb	r2, [r3, #0]
10000aee:	687b      	ldr	r3, [r7, #4]
10000af0:	0011      	movs	r1, r2
10000af2:	0018      	movs	r0, r3
10000af4:	f7ff fea4 	bl	10000840 <ph_get_node>
10000af8:	0003      	movs	r3, r0
10000afa:	789b      	ldrb	r3, [r3, #2]
10000afc:	2b00      	cmp	r3, #0
10000afe:	d001      	beq.n	10000b04 <ph_contains_node+0x34>
10000b00:	2301      	movs	r3, #1
10000b02:	e000      	b.n	10000b06 <ph_contains_node+0x36>
10000b04:	2300      	movs	r3, #0
10000b06:	1c1a      	adds	r2, r3, #0
10000b08:	2301      	movs	r3, #1
10000b0a:	4013      	ands	r3, r2
10000b0c:	b2db      	uxtb	r3, r3
}
10000b0e:	0018      	movs	r0, r3
10000b10:	46bd      	mov	sp, r7
10000b12:	b002      	add	sp, #8
10000b14:	bd80      	pop	{r7, pc}
	...

10000b18 <ph_free_node>:
 * Free a node that is not currently in the heap, but has been allocated
 *
 * @param heap the heap
 * @param id the id of the node
 */
static inline void ph_free_node(pheap_t *heap, pheap_node_id_t id) {
10000b18:	b580      	push	{r7, lr}
10000b1a:	b082      	sub	sp, #8
10000b1c:	af00      	add	r7, sp, #0
10000b1e:	6078      	str	r0, [r7, #4]
10000b20:	000a      	movs	r2, r1
10000b22:	1cfb      	adds	r3, r7, #3
10000b24:	701a      	strb	r2, [r3, #0]
    assert(id && !ph_contains_node(heap, id));
10000b26:	1cfb      	adds	r3, r7, #3
10000b28:	781b      	ldrb	r3, [r3, #0]
10000b2a:	2b00      	cmp	r3, #0
10000b2c:	d008      	beq.n	10000b40 <ph_free_node+0x28>
10000b2e:	1cfb      	adds	r3, r7, #3
10000b30:	781a      	ldrb	r2, [r3, #0]
10000b32:	687b      	ldr	r3, [r7, #4]
10000b34:	0011      	movs	r1, r2
10000b36:	0018      	movs	r0, r3
10000b38:	f7ff ffca 	bl	10000ad0 <ph_contains_node>
10000b3c:	1e03      	subs	r3, r0, #0
10000b3e:	d005      	beq.n	10000b4c <ph_free_node+0x34>
10000b40:	4b0e      	ldr	r3, [pc, #56]	; (10000b7c <ph_free_node+0x64>)
10000b42:	4a0f      	ldr	r2, [pc, #60]	; (10000b80 <ph_free_node+0x68>)
10000b44:	480f      	ldr	r0, [pc, #60]	; (10000b84 <ph_free_node+0x6c>)
10000b46:	21f6      	movs	r1, #246	; 0xf6
10000b48:	f004 fb2e 	bl	100051a8 <__assert_func>
    if (heap->free_tail_id) {
10000b4c:	687b      	ldr	r3, [r7, #4]
10000b4e:	7bdb      	ldrb	r3, [r3, #15]
10000b50:	2b00      	cmp	r3, #0
10000b52:	d00a      	beq.n	10000b6a <ph_free_node+0x52>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10000b54:	687b      	ldr	r3, [r7, #4]
10000b56:	7bda      	ldrb	r2, [r3, #15]
10000b58:	687b      	ldr	r3, [r7, #4]
10000b5a:	0011      	movs	r1, r2
10000b5c:	0018      	movs	r0, r3
10000b5e:	f7ff fe6f 	bl	10000840 <ph_get_node>
10000b62:	0002      	movs	r2, r0
10000b64:	1cfb      	adds	r3, r7, #3
10000b66:	781b      	ldrb	r3, [r3, #0]
10000b68:	7053      	strb	r3, [r2, #1]
    }
    heap->free_tail_id = id;
10000b6a:	687b      	ldr	r3, [r7, #4]
10000b6c:	1cfa      	adds	r2, r7, #3
10000b6e:	7812      	ldrb	r2, [r2, #0]
10000b70:	73da      	strb	r2, [r3, #15]
}
10000b72:	46c0      	nop			; (mov r8, r8)
10000b74:	46bd      	mov	sp, r7
10000b76:	b002      	add	sp, #8
10000b78:	bd80      	pop	{r7, pc}
10000b7a:	46c0      	nop			; (mov r8, r8)
10000b7c:	10006f08 	.word	0x10006f08
10000b80:	100071b4 	.word	0x100071b4
10000b84:	10006e7c 	.word	0x10006e7c

10000b88 <default_alarm_pool_initialized>:
        .heap = &default_alarm_pool_heap,
        .entries = default_alarm_pool_entries,
        .entry_ids_high = default_alarm_pool_entry_ids_high,
};

static inline bool default_alarm_pool_initialized(void) {
10000b88:	b580      	push	{r7, lr}
10000b8a:	af00      	add	r7, sp, #0
    return default_alarm_pool.lock != NULL;
10000b8c:	4b03      	ldr	r3, [pc, #12]	; (10000b9c <default_alarm_pool_initialized+0x14>)
10000b8e:	685b      	ldr	r3, [r3, #4]
10000b90:	1e5a      	subs	r2, r3, #1
10000b92:	4193      	sbcs	r3, r2
10000b94:	b2db      	uxtb	r3, r3
}
10000b96:	0018      	movs	r0, r3
10000b98:	46bd      	mov	sp, r7
10000b9a:	bd80      	pop	{r7, pc}
10000b9c:	200002f0 	.word	0x200002f0

10000ba0 <get_entry>:

static alarm_pool_t *pools[NUM_TIMERS];
static void alarm_pool_post_alloc_init(alarm_pool_t *pool, uint hardware_alarm_num);


static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
10000ba0:	b580      	push	{r7, lr}
10000ba2:	b082      	sub	sp, #8
10000ba4:	af00      	add	r7, sp, #0
10000ba6:	6078      	str	r0, [r7, #4]
10000ba8:	000a      	movs	r2, r1
10000baa:	1cfb      	adds	r3, r7, #3
10000bac:	701a      	strb	r2, [r3, #0]
    assert(id && id <= pool->heap->max_nodes);
10000bae:	1cfb      	adds	r3, r7, #3
10000bb0:	781b      	ldrb	r3, [r3, #0]
10000bb2:	2b00      	cmp	r3, #0
10000bb4:	d006      	beq.n	10000bc4 <get_entry+0x24>
10000bb6:	687b      	ldr	r3, [r7, #4]
10000bb8:	681b      	ldr	r3, [r3, #0]
10000bba:	7b1b      	ldrb	r3, [r3, #12]
10000bbc:	1cfa      	adds	r2, r7, #3
10000bbe:	7812      	ldrb	r2, [r2, #0]
10000bc0:	429a      	cmp	r2, r3
10000bc2:	d905      	bls.n	10000bd0 <get_entry+0x30>
10000bc4:	4b09      	ldr	r3, [pc, #36]	; (10000bec <get_entry+0x4c>)
10000bc6:	4a0a      	ldr	r2, [pc, #40]	; (10000bf0 <get_entry+0x50>)
10000bc8:	480a      	ldr	r0, [pc, #40]	; (10000bf4 <get_entry+0x54>)
10000bca:	213b      	movs	r1, #59	; 0x3b
10000bcc:	f004 faec 	bl	100051a8 <__assert_func>
    return pool->entries + id - 1;
10000bd0:	687b      	ldr	r3, [r7, #4]
10000bd2:	689a      	ldr	r2, [r3, #8]
10000bd4:	1cfb      	adds	r3, r7, #3
10000bd6:	781b      	ldrb	r3, [r3, #0]
10000bd8:	4907      	ldr	r1, [pc, #28]	; (10000bf8 <get_entry+0x58>)
10000bda:	468c      	mov	ip, r1
10000bdc:	4463      	add	r3, ip
10000bde:	011b      	lsls	r3, r3, #4
10000be0:	18d3      	adds	r3, r2, r3
}
10000be2:	0018      	movs	r0, r3
10000be4:	46bd      	mov	sp, r7
10000be6:	b002      	add	sp, #8
10000be8:	bd80      	pop	{r7, pc}
10000bea:	46c0      	nop			; (mov r8, r8)
10000bec:	10006f2c 	.word	0x10006f2c
10000bf0:	10007134 	.word	0x10007134
10000bf4:	10006f50 	.word	0x10006f50
10000bf8:	0fffffff 	.word	0x0fffffff

10000bfc <get_entry_id_high>:

static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
10000bfc:	b580      	push	{r7, lr}
10000bfe:	b082      	sub	sp, #8
10000c00:	af00      	add	r7, sp, #0
10000c02:	6078      	str	r0, [r7, #4]
10000c04:	000a      	movs	r2, r1
10000c06:	1cfb      	adds	r3, r7, #3
10000c08:	701a      	strb	r2, [r3, #0]
    assert(id && id <= pool->heap->max_nodes);
10000c0a:	1cfb      	adds	r3, r7, #3
10000c0c:	781b      	ldrb	r3, [r3, #0]
10000c0e:	2b00      	cmp	r3, #0
10000c10:	d006      	beq.n	10000c20 <get_entry_id_high+0x24>
10000c12:	687b      	ldr	r3, [r7, #4]
10000c14:	681b      	ldr	r3, [r3, #0]
10000c16:	7b1b      	ldrb	r3, [r3, #12]
10000c18:	1cfa      	adds	r2, r7, #3
10000c1a:	7812      	ldrb	r2, [r2, #0]
10000c1c:	429a      	cmp	r2, r3
10000c1e:	d905      	bls.n	10000c2c <get_entry_id_high+0x30>
10000c20:	4b07      	ldr	r3, [pc, #28]	; (10000c40 <get_entry_id_high+0x44>)
10000c22:	4a08      	ldr	r2, [pc, #32]	; (10000c44 <get_entry_id_high+0x48>)
10000c24:	4808      	ldr	r0, [pc, #32]	; (10000c48 <get_entry_id_high+0x4c>)
10000c26:	2140      	movs	r1, #64	; 0x40
10000c28:	f004 fabe 	bl	100051a8 <__assert_func>
    return pool->entry_ids_high + id - 1;
10000c2c:	687b      	ldr	r3, [r7, #4]
10000c2e:	68da      	ldr	r2, [r3, #12]
10000c30:	1cfb      	adds	r3, r7, #3
10000c32:	781b      	ldrb	r3, [r3, #0]
10000c34:	3b01      	subs	r3, #1
10000c36:	18d3      	adds	r3, r2, r3
}
10000c38:	0018      	movs	r0, r3
10000c3a:	46bd      	mov	sp, r7
10000c3c:	b002      	add	sp, #8
10000c3e:	bd80      	pop	{r7, pc}
10000c40:	10006f2c 	.word	0x10006f2c
10000c44:	100071c4 	.word	0x100071c4
10000c48:	10006f50 	.word	0x10006f50

10000c4c <timer_pool_entry_comparator>:

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10000c4c:	b5b0      	push	{r4, r5, r7, lr}
10000c4e:	b084      	sub	sp, #16
10000c50:	af00      	add	r7, sp, #0
10000c52:	6078      	str	r0, [r7, #4]
10000c54:	0008      	movs	r0, r1
10000c56:	0011      	movs	r1, r2
10000c58:	1cfb      	adds	r3, r7, #3
10000c5a:	1c02      	adds	r2, r0, #0
10000c5c:	701a      	strb	r2, [r3, #0]
10000c5e:	1cbb      	adds	r3, r7, #2
10000c60:	1c0a      	adds	r2, r1, #0
10000c62:	701a      	strb	r2, [r3, #0]
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
10000c64:	687b      	ldr	r3, [r7, #4]
10000c66:	60fb      	str	r3, [r7, #12]
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10000c68:	1cfb      	adds	r3, r7, #3
10000c6a:	781a      	ldrb	r2, [r3, #0]
10000c6c:	68fb      	ldr	r3, [r7, #12]
10000c6e:	0011      	movs	r1, r2
10000c70:	0018      	movs	r0, r3
10000c72:	f7ff ff95 	bl	10000ba0 <get_entry>
10000c76:	0003      	movs	r3, r0
10000c78:	681a      	ldr	r2, [r3, #0]
10000c7a:	685b      	ldr	r3, [r3, #4]
10000c7c:	0010      	movs	r0, r2
10000c7e:	0019      	movs	r1, r3
10000c80:	f7ff fcdb 	bl	1000063a <to_us_since_boot>
10000c84:	0004      	movs	r4, r0
10000c86:	000d      	movs	r5, r1
10000c88:	1cbb      	adds	r3, r7, #2
10000c8a:	781a      	ldrb	r2, [r3, #0]
10000c8c:	68fb      	ldr	r3, [r7, #12]
10000c8e:	0011      	movs	r1, r2
10000c90:	0018      	movs	r0, r3
10000c92:	f7ff ff85 	bl	10000ba0 <get_entry>
10000c96:	0003      	movs	r3, r0
10000c98:	681a      	ldr	r2, [r3, #0]
10000c9a:	685b      	ldr	r3, [r3, #4]
10000c9c:	0010      	movs	r0, r2
10000c9e:	0019      	movs	r1, r3
10000ca0:	f7ff fccb 	bl	1000063a <to_us_since_boot>
10000ca4:	0002      	movs	r2, r0
10000ca6:	000b      	movs	r3, r1
10000ca8:	2101      	movs	r1, #1
10000caa:	42ab      	cmp	r3, r5
10000cac:	d804      	bhi.n	10000cb8 <timer_pool_entry_comparator+0x6c>
10000cae:	d101      	bne.n	10000cb4 <timer_pool_entry_comparator+0x68>
10000cb0:	42a2      	cmp	r2, r4
10000cb2:	d801      	bhi.n	10000cb8 <timer_pool_entry_comparator+0x6c>
10000cb4:	2300      	movs	r3, #0
10000cb6:	1c19      	adds	r1, r3, #0
10000cb8:	b2cb      	uxtb	r3, r1
}
10000cba:	0018      	movs	r0, r3
10000cbc:	46bd      	mov	sp, r7
10000cbe:	b004      	add	sp, #16
10000cc0:	bdb0      	pop	{r4, r5, r7, pc}

10000cc2 <make_public_id>:

static inline alarm_id_t make_public_id(uint8_t id_high, pheap_node_id_t id) {
10000cc2:	b580      	push	{r7, lr}
10000cc4:	b082      	sub	sp, #8
10000cc6:	af00      	add	r7, sp, #0
10000cc8:	0002      	movs	r2, r0
10000cca:	1dfb      	adds	r3, r7, #7
10000ccc:	701a      	strb	r2, [r3, #0]
10000cce:	1dbb      	adds	r3, r7, #6
10000cd0:	1c0a      	adds	r2, r1, #0
10000cd2:	701a      	strb	r2, [r3, #0]
    return (alarm_id_t)(((uint)id_high << 8u * sizeof(id)) | id);
10000cd4:	1dfb      	adds	r3, r7, #7
10000cd6:	781b      	ldrb	r3, [r3, #0]
10000cd8:	021a      	lsls	r2, r3, #8
10000cda:	1dbb      	adds	r3, r7, #6
10000cdc:	781b      	ldrb	r3, [r3, #0]
10000cde:	4313      	orrs	r3, r2
}
10000ce0:	0018      	movs	r0, r3
10000ce2:	46bd      	mov	sp, r7
10000ce4:	b002      	add	sp, #8
10000ce6:	bd80      	pop	{r7, pc}

10000ce8 <alarm_pool_init_default>:

void alarm_pool_init_default() {
10000ce8:	b580      	push	{r7, lr}
10000cea:	af00      	add	r7, sp, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    // allow multiple calls for ease of use from host tests
    if (!default_alarm_pool_initialized()) {
10000cec:	f7ff ff4c 	bl	10000b88 <default_alarm_pool_initialized>
10000cf0:	0003      	movs	r3, r0
10000cf2:	001a      	movs	r2, r3
10000cf4:	2301      	movs	r3, #1
10000cf6:	4053      	eors	r3, r2
10000cf8:	b2db      	uxtb	r3, r3
10000cfa:	2b00      	cmp	r3, #0
10000cfc:	d00b      	beq.n	10000d16 <alarm_pool_init_default+0x2e>
        ph_post_alloc_init(default_alarm_pool.heap, PICO_TIME_DEFAULT_ALARM_POOL_MAX_TIMERS,
10000cfe:	4b0a      	ldr	r3, [pc, #40]	; (10000d28 <alarm_pool_init_default+0x40>)
10000d00:	6818      	ldr	r0, [r3, #0]
10000d02:	4b09      	ldr	r3, [pc, #36]	; (10000d28 <alarm_pool_init_default+0x40>)
10000d04:	4a09      	ldr	r2, [pc, #36]	; (10000d2c <alarm_pool_init_default+0x44>)
10000d06:	2110      	movs	r1, #16
10000d08:	f000 fdbd 	bl	10001886 <ph_post_alloc_init>
                           timer_pool_entry_comparator, &default_alarm_pool);
        alarm_pool_post_alloc_init(&default_alarm_pool,
10000d0c:	4b06      	ldr	r3, [pc, #24]	; (10000d28 <alarm_pool_init_default+0x40>)
10000d0e:	2103      	movs	r1, #3
10000d10:	0018      	movs	r0, r3
10000d12:	f000 fac5 	bl	100012a0 <alarm_pool_post_alloc_init>
                                   PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM);
    }
    lock_init(&sleep_notifier, PICO_SPINLOCK_ID_TIMER);
10000d16:	4b06      	ldr	r3, [pc, #24]	; (10000d30 <alarm_pool_init_default+0x48>)
10000d18:	210a      	movs	r1, #10
10000d1a:	0018      	movs	r0, r3
10000d1c:	f7ff fc46 	bl	100005ac <lock_init>
#endif
}
10000d20:	46c0      	nop			; (mov r8, r8)
10000d22:	46bd      	mov	sp, r7
10000d24:	bd80      	pop	{r7, pc}
10000d26:	46c0      	nop			; (mov r8, r8)
10000d28:	200002f0 	.word	0x200002f0
10000d2c:	10000c4d 	.word	0x10000c4d
10000d30:	20001648 	.word	0x20001648

10000d34 <alarm_pool_get_default>:

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
alarm_pool_t *alarm_pool_get_default() {
10000d34:	b580      	push	{r7, lr}
10000d36:	af00      	add	r7, sp, #0
    assert(default_alarm_pool_initialized());
10000d38:	f7ff ff26 	bl	10000b88 <default_alarm_pool_initialized>
10000d3c:	1e03      	subs	r3, r0, #0
10000d3e:	d105      	bne.n	10000d4c <alarm_pool_get_default+0x18>
10000d40:	4b04      	ldr	r3, [pc, #16]	; (10000d54 <alarm_pool_get_default+0x20>)
10000d42:	4a05      	ldr	r2, [pc, #20]	; (10000d58 <alarm_pool_get_default+0x24>)
10000d44:	4805      	ldr	r0, [pc, #20]	; (10000d5c <alarm_pool_get_default+0x28>)
10000d46:	215c      	movs	r1, #92	; 0x5c
10000d48:	f004 fa2e 	bl	100051a8 <__assert_func>
    return &default_alarm_pool;
10000d4c:	4b04      	ldr	r3, [pc, #16]	; (10000d60 <alarm_pool_get_default+0x2c>)
}
10000d4e:	0018      	movs	r0, r3
10000d50:	46bd      	mov	sp, r7
10000d52:	bd80      	pop	{r7, pc}
10000d54:	10006f9c 	.word	0x10006f9c
10000d58:	10007140 	.word	0x10007140
10000d5c:	10006f50 	.word	0x10006f50
10000d60:	200002f0 	.word	0x200002f0

10000d64 <add_alarm_under_lock>:
#endif

static pheap_node_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                       void *user_data, pheap_node_id_t reuse_id, bool create_if_past, bool *missed) {
10000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d66:	b089      	sub	sp, #36	; 0x24
10000d68:	af00      	add	r7, sp, #0
10000d6a:	60f8      	str	r0, [r7, #12]
10000d6c:	603a      	str	r2, [r7, #0]
10000d6e:	607b      	str	r3, [r7, #4]
    pheap_node_id_t id;
    if (reuse_id) {
10000d70:	2138      	movs	r1, #56	; 0x38
10000d72:	2008      	movs	r0, #8
10000d74:	180b      	adds	r3, r1, r0
10000d76:	19db      	adds	r3, r3, r7
10000d78:	781b      	ldrb	r3, [r3, #0]
10000d7a:	2b00      	cmp	r3, #0
10000d7c:	d01e      	beq.n	10000dbc <add_alarm_under_lock+0x58>
        assert(!ph_contains_node(pool->heap, reuse_id));
10000d7e:	68fb      	ldr	r3, [r7, #12]
10000d80:	681a      	ldr	r2, [r3, #0]
10000d82:	180b      	adds	r3, r1, r0
10000d84:	19db      	adds	r3, r3, r7
10000d86:	781b      	ldrb	r3, [r3, #0]
10000d88:	0019      	movs	r1, r3
10000d8a:	0010      	movs	r0, r2
10000d8c:	f7ff fea0 	bl	10000ad0 <ph_contains_node>
10000d90:	0003      	movs	r3, r0
10000d92:	001a      	movs	r2, r3
10000d94:	2301      	movs	r3, #1
10000d96:	4053      	eors	r3, r2
10000d98:	b2db      	uxtb	r3, r3
10000d9a:	2b00      	cmp	r3, #0
10000d9c:	d105      	bne.n	10000daa <add_alarm_under_lock+0x46>
10000d9e:	4b38      	ldr	r3, [pc, #224]	; (10000e80 <add_alarm_under_lock+0x11c>)
10000da0:	4a38      	ldr	r2, [pc, #224]	; (10000e84 <add_alarm_under_lock+0x120>)
10000da2:	4839      	ldr	r0, [pc, #228]	; (10000e88 <add_alarm_under_lock+0x124>)
10000da4:	2165      	movs	r1, #101	; 0x65
10000da6:	f004 f9ff 	bl	100051a8 <__assert_func>
        id = reuse_id;
10000daa:	231f      	movs	r3, #31
10000dac:	18fb      	adds	r3, r7, r3
10000dae:	2238      	movs	r2, #56	; 0x38
10000db0:	2108      	movs	r1, #8
10000db2:	1852      	adds	r2, r2, r1
10000db4:	19d2      	adds	r2, r2, r7
10000db6:	7812      	ldrb	r2, [r2, #0]
10000db8:	701a      	strb	r2, [r3, #0]
10000dba:	e008      	b.n	10000dce <add_alarm_under_lock+0x6a>
    } else {
        id = ph_new_node(pool->heap);
10000dbc:	68fb      	ldr	r3, [r7, #12]
10000dbe:	681b      	ldr	r3, [r3, #0]
10000dc0:	221f      	movs	r2, #31
10000dc2:	18bc      	adds	r4, r7, r2
10000dc4:	0018      	movs	r0, r3
10000dc6:	f7ff fe06 	bl	100009d6 <ph_new_node>
10000dca:	0003      	movs	r3, r0
10000dcc:	7023      	strb	r3, [r4, #0]
    }
    if (id) {
10000dce:	251f      	movs	r5, #31
10000dd0:	197b      	adds	r3, r7, r5
10000dd2:	781b      	ldrb	r3, [r3, #0]
10000dd4:	2b00      	cmp	r3, #0
10000dd6:	d04b      	beq.n	10000e70 <add_alarm_under_lock+0x10c>
        alarm_pool_entry_t *entry = get_entry(pool, id);
10000dd8:	197b      	adds	r3, r7, r5
10000dda:	781a      	ldrb	r2, [r3, #0]
10000ddc:	68fb      	ldr	r3, [r7, #12]
10000dde:	0011      	movs	r1, r2
10000de0:	0018      	movs	r0, r3
10000de2:	f7ff fedd 	bl	10000ba0 <get_entry>
10000de6:	0003      	movs	r3, r0
10000de8:	61bb      	str	r3, [r7, #24]
        entry->target = time;
10000dea:	69b9      	ldr	r1, [r7, #24]
10000dec:	683a      	ldr	r2, [r7, #0]
10000dee:	687b      	ldr	r3, [r7, #4]
10000df0:	600a      	str	r2, [r1, #0]
10000df2:	604b      	str	r3, [r1, #4]
        entry->callback = callback;
10000df4:	69bb      	ldr	r3, [r7, #24]
10000df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
10000df8:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10000dfa:	69bb      	ldr	r3, [r7, #24]
10000dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10000dfe:	60da      	str	r2, [r3, #12]
        if (id == ph_insert_node(pool->heap, id)) {
10000e00:	68fb      	ldr	r3, [r7, #12]
10000e02:	681a      	ldr	r2, [r3, #0]
10000e04:	197b      	adds	r3, r7, r5
10000e06:	781b      	ldrb	r3, [r3, #0]
10000e08:	0019      	movs	r1, r3
10000e0a:	0010      	movs	r0, r2
10000e0c:	f7ff fe18 	bl	10000a40 <ph_insert_node>
10000e10:	0003      	movs	r3, r0
10000e12:	001a      	movs	r2, r3
10000e14:	197b      	adds	r3, r7, r5
10000e16:	781b      	ldrb	r3, [r3, #0]
10000e18:	4293      	cmp	r3, r2
10000e1a:	d129      	bne.n	10000e70 <add_alarm_under_lock+0x10c>
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10000e1c:	68fb      	ldr	r3, [r7, #12]
10000e1e:	7d1b      	ldrb	r3, [r3, #20]
10000e20:	0019      	movs	r1, r3
10000e22:	2617      	movs	r6, #23
10000e24:	19bc      	adds	r4, r7, r6
10000e26:	683a      	ldr	r2, [r7, #0]
10000e28:	687b      	ldr	r3, [r7, #4]
10000e2a:	0008      	movs	r0, r1
10000e2c:	f002 f952 	bl	100030d4 <hardware_alarm_set_target>
10000e30:	0003      	movs	r3, r0
10000e32:	7023      	strb	r3, [r4, #0]
            if (is_missed && !create_if_past) {
10000e34:	19bb      	adds	r3, r7, r6
10000e36:	781b      	ldrb	r3, [r3, #0]
10000e38:	2b00      	cmp	r3, #0
10000e3a:	d011      	beq.n	10000e60 <add_alarm_under_lock+0xfc>
10000e3c:	233c      	movs	r3, #60	; 0x3c
10000e3e:	2208      	movs	r2, #8
10000e40:	189b      	adds	r3, r3, r2
10000e42:	19db      	adds	r3, r3, r7
10000e44:	781b      	ldrb	r3, [r3, #0]
10000e46:	2201      	movs	r2, #1
10000e48:	4053      	eors	r3, r2
10000e4a:	b2db      	uxtb	r3, r3
10000e4c:	2b00      	cmp	r3, #0
10000e4e:	d007      	beq.n	10000e60 <add_alarm_under_lock+0xfc>
                ph_remove_and_free_node(pool->heap, id);
10000e50:	68fb      	ldr	r3, [r7, #12]
10000e52:	681a      	ldr	r2, [r3, #0]
10000e54:	197b      	adds	r3, r7, r5
10000e56:	781b      	ldrb	r3, [r3, #0]
10000e58:	0019      	movs	r1, r3
10000e5a:	0010      	movs	r0, r2
10000e5c:	f000 fe7e 	bl	10001b5c <ph_remove_and_free_node>
            }
            if (missed) *missed = is_missed;
10000e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10000e62:	2b00      	cmp	r3, #0
10000e64:	d004      	beq.n	10000e70 <add_alarm_under_lock+0x10c>
10000e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10000e68:	2217      	movs	r2, #23
10000e6a:	18ba      	adds	r2, r7, r2
10000e6c:	7812      	ldrb	r2, [r2, #0]
10000e6e:	701a      	strb	r2, [r3, #0]
        }
    }
    return id;
10000e70:	231f      	movs	r3, #31
10000e72:	18fb      	adds	r3, r7, r3
10000e74:	781b      	ldrb	r3, [r3, #0]
}
10000e76:	0018      	movs	r0, r3
10000e78:	46bd      	mov	sp, r7
10000e7a:	b009      	add	sp, #36	; 0x24
10000e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000e7e:	46c0      	nop			; (mov r8, r8)
10000e80:	10006fc0 	.word	0x10006fc0
10000e84:	10007158 	.word	0x10007158
10000e88:	10006f50 	.word	0x10006f50

10000e8c <alarm_pool_alarm_callback>:

static void alarm_pool_alarm_callback(uint alarm_num) {
10000e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e8e:	b0af      	sub	sp, #188	; 0xbc
10000e90:	af06      	add	r7, sp, #24
10000e92:	6078      	str	r0, [r7, #4]
    // note this is called from timer IRQ handler
    alarm_pool_t *pool = pools[alarm_num];
10000e94:	4bd9      	ldr	r3, [pc, #868]	; (100011fc <alarm_pool_alarm_callback+0x370>)
10000e96:	687a      	ldr	r2, [r7, #4]
10000e98:	0092      	lsls	r2, r2, #2
10000e9a:	58d3      	ldr	r3, [r2, r3]
10000e9c:	228c      	movs	r2, #140	; 0x8c
10000e9e:	18ba      	adds	r2, r7, r2
10000ea0:	6013      	str	r3, [r2, #0]
    bool again;
    do {
        absolute_time_t now = get_absolute_time();
10000ea2:	2310      	movs	r3, #16
10000ea4:	18fb      	adds	r3, r7, r3
10000ea6:	0018      	movs	r0, r3
10000ea8:	f7ff fc26 	bl	100006f8 <get_absolute_time>
        alarm_callback_t callback = NULL;
10000eac:	2300      	movs	r3, #0
10000eae:	2298      	movs	r2, #152	; 0x98
10000eb0:	18ba      	adds	r2, r7, r2
10000eb2:	6013      	str	r3, [r2, #0]
        absolute_time_t target = nil_time;
10000eb4:	2200      	movs	r2, #0
10000eb6:	2300      	movs	r3, #0
10000eb8:	60ba      	str	r2, [r7, #8]
10000eba:	60fb      	str	r3, [r7, #12]
        void *user_data = NULL;
10000ebc:	2300      	movs	r3, #0
10000ebe:	2294      	movs	r2, #148	; 0x94
10000ec0:	18ba      	adds	r2, r7, r2
10000ec2:	6013      	str	r3, [r2, #0]
        uint8_t id_high;
        again = false;
10000ec4:	239f      	movs	r3, #159	; 0x9f
10000ec6:	18fb      	adds	r3, r7, r3
10000ec8:	2200      	movs	r2, #0
10000eca:	701a      	strb	r2, [r3, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10000ecc:	238c      	movs	r3, #140	; 0x8c
10000ece:	18fb      	adds	r3, r7, r3
10000ed0:	681b      	ldr	r3, [r3, #0]
10000ed2:	685b      	ldr	r3, [r3, #4]
10000ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000ed6:	f3ef 8310 	mrs	r3, PRIMASK
10000eda:	66bb      	str	r3, [r7, #104]	; 0x68
    __asm volatile ("cpsid i");
10000edc:	b672      	cpsid	i
    return status;
10000ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 *
 * \param lock Spinlock instance
 * \return interrupt status to be used when unlocking, to restore to original state
 */
__force_inline static uint32_t spin_lock_blocking(spin_lock_t *lock) {
    uint32_t save = save_and_disable_interrupts();
10000ee0:	667b      	str	r3, [r7, #100]	; 0x64
10000ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10000ee4:	663b      	str	r3, [r7, #96]	; 0x60
    while (__builtin_expect(!*lock, 0));
10000ee6:	46c0      	nop			; (mov r8, r8)
10000ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
10000eea:	681b      	ldr	r3, [r3, #0]
10000eec:	425a      	negs	r2, r3
10000eee:	4153      	adcs	r3, r2
10000ef0:	b2db      	uxtb	r3, r3
10000ef2:	2b00      	cmp	r3, #0
10000ef4:	d1f8      	bne.n	10000ee8 <alarm_pool_alarm_callback+0x5c>
    __asm volatile ("dmb" : : : "memory");
10000ef6:	f3bf 8f5f 	dmb	sy
}
10000efa:	46c0      	nop			; (mov r8, r8)
}
10000efc:	46c0      	nop			; (mov r8, r8)
}
10000efe:	46c0      	nop			; (mov r8, r8)
    spin_lock_unsafe_blocking(lock);
    return save;
10000f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10000f02:	2288      	movs	r2, #136	; 0x88
10000f04:	18ba      	adds	r2, r7, r2
10000f06:	6013      	str	r3, [r2, #0]
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10000f08:	268c      	movs	r6, #140	; 0x8c
10000f0a:	19bb      	adds	r3, r7, r6
10000f0c:	681b      	ldr	r3, [r3, #0]
10000f0e:	681b      	ldr	r3, [r3, #0]
10000f10:	2587      	movs	r5, #135	; 0x87
10000f12:	197c      	adds	r4, r7, r5
10000f14:	0018      	movs	r0, r3
10000f16:	f7ff fdd1 	bl	10000abc <ph_peek_head>
10000f1a:	0003      	movs	r3, r0
10000f1c:	7023      	strb	r3, [r4, #0]
        if (next_id) {
10000f1e:	197b      	adds	r3, r7, r5
10000f20:	781b      	ldrb	r3, [r3, #0]
10000f22:	2b00      	cmp	r3, #0
10000f24:	d100      	bne.n	10000f28 <alarm_pool_alarm_callback+0x9c>
10000f26:	e07d      	b.n	10001024 <alarm_pool_alarm_callback+0x198>
            alarm_pool_entry_t *entry = get_entry(pool, next_id);
10000f28:	197b      	adds	r3, r7, r5
10000f2a:	781a      	ldrb	r2, [r3, #0]
10000f2c:	19bb      	adds	r3, r7, r6
10000f2e:	681b      	ldr	r3, [r3, #0]
10000f30:	0011      	movs	r1, r2
10000f32:	0018      	movs	r0, r3
10000f34:	f7ff fe34 	bl	10000ba0 <get_entry>
10000f38:	0003      	movs	r3, r0
10000f3a:	2280      	movs	r2, #128	; 0x80
10000f3c:	18b9      	adds	r1, r7, r2
10000f3e:	600b      	str	r3, [r1, #0]
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10000f40:	18bb      	adds	r3, r7, r2
10000f42:	681b      	ldr	r3, [r3, #0]
10000f44:	681a      	ldr	r2, [r3, #0]
10000f46:	685b      	ldr	r3, [r3, #4]
10000f48:	6938      	ldr	r0, [r7, #16]
10000f4a:	6979      	ldr	r1, [r7, #20]
10000f4c:	f7ff fc3e 	bl	100007cc <absolute_time_diff_us>
10000f50:	0002      	movs	r2, r0
10000f52:	000b      	movs	r3, r1
10000f54:	2b00      	cmp	r3, #0
10000f56:	dc56      	bgt.n	10001006 <alarm_pool_alarm_callback+0x17a>
10000f58:	d101      	bne.n	10000f5e <alarm_pool_alarm_callback+0xd2>
10000f5a:	2a00      	cmp	r2, #0
10000f5c:	d153      	bne.n	10001006 <alarm_pool_alarm_callback+0x17a>
                // we don't free the id in case we need to re-add the timer
                pheap_node_id_t __unused removed_id = ph_remove_head(pool->heap, false);
10000f5e:	238c      	movs	r3, #140	; 0x8c
10000f60:	18fb      	adds	r3, r7, r3
10000f62:	681b      	ldr	r3, [r3, #0]
10000f64:	681b      	ldr	r3, [r3, #0]
10000f66:	257f      	movs	r5, #127	; 0x7f
10000f68:	197c      	adds	r4, r7, r5
10000f6a:	2100      	movs	r1, #0
10000f6c:	0018      	movs	r0, r3
10000f6e:	f000 fdd3 	bl	10001b18 <ph_remove_head>
10000f72:	0003      	movs	r3, r0
10000f74:	7023      	strb	r3, [r4, #0]
                assert(removed_id == next_id); // will be true under lock
10000f76:	197a      	adds	r2, r7, r5
10000f78:	2387      	movs	r3, #135	; 0x87
10000f7a:	18fb      	adds	r3, r7, r3
10000f7c:	7812      	ldrb	r2, [r2, #0]
10000f7e:	781b      	ldrb	r3, [r3, #0]
10000f80:	429a      	cmp	r2, r3
10000f82:	d005      	beq.n	10000f90 <alarm_pool_alarm_callback+0x104>
10000f84:	4b9e      	ldr	r3, [pc, #632]	; (10001200 <alarm_pool_alarm_callback+0x374>)
10000f86:	4a9f      	ldr	r2, [pc, #636]	; (10001204 <alarm_pool_alarm_callback+0x378>)
10000f88:	489f      	ldr	r0, [pc, #636]	; (10001208 <alarm_pool_alarm_callback+0x37c>)
10000f8a:	218c      	movs	r1, #140	; 0x8c
10000f8c:	f004 f90c 	bl	100051a8 <__assert_func>
                target = entry->target;
10000f90:	2180      	movs	r1, #128	; 0x80
10000f92:	187b      	adds	r3, r7, r1
10000f94:	681b      	ldr	r3, [r3, #0]
10000f96:	681a      	ldr	r2, [r3, #0]
10000f98:	685b      	ldr	r3, [r3, #4]
10000f9a:	60ba      	str	r2, [r7, #8]
10000f9c:	60fb      	str	r3, [r7, #12]
                callback = entry->callback;
10000f9e:	000a      	movs	r2, r1
10000fa0:	18bb      	adds	r3, r7, r2
10000fa2:	681b      	ldr	r3, [r3, #0]
10000fa4:	689b      	ldr	r3, [r3, #8]
10000fa6:	2198      	movs	r1, #152	; 0x98
10000fa8:	1878      	adds	r0, r7, r1
10000faa:	6003      	str	r3, [r0, #0]
                user_data = entry->user_data;
10000fac:	18bb      	adds	r3, r7, r2
10000fae:	681b      	ldr	r3, [r3, #0]
10000fb0:	68db      	ldr	r3, [r3, #12]
10000fb2:	2294      	movs	r2, #148	; 0x94
10000fb4:	18ba      	adds	r2, r7, r2
10000fb6:	6013      	str	r3, [r2, #0]
                assert(callback);
10000fb8:	187b      	adds	r3, r7, r1
10000fba:	681b      	ldr	r3, [r3, #0]
10000fbc:	2b00      	cmp	r3, #0
10000fbe:	d105      	bne.n	10000fcc <alarm_pool_alarm_callback+0x140>
10000fc0:	4b92      	ldr	r3, [pc, #584]	; (1000120c <alarm_pool_alarm_callback+0x380>)
10000fc2:	4a90      	ldr	r2, [pc, #576]	; (10001204 <alarm_pool_alarm_callback+0x378>)
10000fc4:	4890      	ldr	r0, [pc, #576]	; (10001208 <alarm_pool_alarm_callback+0x37c>)
10000fc6:	2190      	movs	r1, #144	; 0x90
10000fc8:	f004 f8ee 	bl	100051a8 <__assert_func>
                id_high = *get_entry_id_high(pool, next_id);
10000fcc:	2387      	movs	r3, #135	; 0x87
10000fce:	18fb      	adds	r3, r7, r3
10000fd0:	781a      	ldrb	r2, [r3, #0]
10000fd2:	248c      	movs	r4, #140	; 0x8c
10000fd4:	193b      	adds	r3, r7, r4
10000fd6:	681b      	ldr	r3, [r3, #0]
10000fd8:	0011      	movs	r1, r2
10000fda:	0018      	movs	r0, r3
10000fdc:	f7ff fe0e 	bl	10000bfc <get_entry_id_high>
10000fe0:	0002      	movs	r2, r0
10000fe2:	2193      	movs	r1, #147	; 0x93
10000fe4:	187b      	adds	r3, r7, r1
10000fe6:	7812      	ldrb	r2, [r2, #0]
10000fe8:	701a      	strb	r2, [r3, #0]
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10000fea:	237f      	movs	r3, #127	; 0x7f
10000fec:	18fb      	adds	r3, r7, r3
10000fee:	781a      	ldrb	r2, [r3, #0]
10000ff0:	187b      	adds	r3, r7, r1
10000ff2:	781b      	ldrb	r3, [r3, #0]
10000ff4:	0011      	movs	r1, r2
10000ff6:	0018      	movs	r0, r3
10000ff8:	f7ff fe63 	bl	10000cc2 <make_public_id>
10000ffc:	0002      	movs	r2, r0
10000ffe:	193b      	adds	r3, r7, r4
10001000:	681b      	ldr	r3, [r3, #0]
10001002:	611a      	str	r2, [r3, #16]
10001004:	e00e      	b.n	10001024 <alarm_pool_alarm_callback+0x198>
            } else {
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10001006:	2380      	movs	r3, #128	; 0x80
10001008:	18fb      	adds	r3, r7, r3
1000100a:	681b      	ldr	r3, [r3, #0]
1000100c:	681a      	ldr	r2, [r3, #0]
1000100e:	685b      	ldr	r3, [r3, #4]
10001010:	6879      	ldr	r1, [r7, #4]
10001012:	0008      	movs	r0, r1
10001014:	f002 f85e 	bl	100030d4 <hardware_alarm_set_target>
10001018:	1e03      	subs	r3, r0, #0
1000101a:	d003      	beq.n	10001024 <alarm_pool_alarm_callback+0x198>
                    again = true;
1000101c:	239f      	movs	r3, #159	; 0x9f
1000101e:	18fb      	adds	r3, r7, r3
10001020:	2201      	movs	r2, #1
10001022:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        spin_unlock(pool->lock, save);
10001024:	248c      	movs	r4, #140	; 0x8c
10001026:	193b      	adds	r3, r7, r4
10001028:	681b      	ldr	r3, [r3, #0]
1000102a:	685b      	ldr	r3, [r3, #4]
1000102c:	65fb      	str	r3, [r7, #92]	; 0x5c
1000102e:	2388      	movs	r3, #136	; 0x88
10001030:	18fb      	adds	r3, r7, r3
10001032:	681b      	ldr	r3, [r3, #0]
10001034:	65bb      	str	r3, [r7, #88]	; 0x58
10001036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001038:	657b      	str	r3, [r7, #84]	; 0x54
    __asm volatile ("dmb" : : : "memory");
1000103a:	f3bf 8f5f 	dmb	sy
}
1000103e:	46c0      	nop			; (mov r8, r8)
}
10001040:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10001044:	2200      	movs	r2, #0
10001046:	601a      	str	r2, [r3, #0]
}
10001048:	46c0      	nop			; (mov r8, r8)
1000104a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000104c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000104e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10001050:	f383 8810 	msr	PRIMASK, r3
}
10001054:	46c0      	nop			; (mov r8, r8)
 * \sa spin_lock_blocking()
 */
__force_inline static void spin_unlock(spin_lock_t *lock, uint32_t saved_irq) {
    spin_unlock_unsafe(lock);
    restore_interrupts(saved_irq);
}
10001056:	46c0      	nop			; (mov r8, r8)
        if (callback) {
10001058:	2598      	movs	r5, #152	; 0x98
1000105a:	197b      	adds	r3, r7, r5
1000105c:	681b      	ldr	r3, [r3, #0]
1000105e:	2b00      	cmp	r3, #0
10001060:	d100      	bne.n	10001064 <alarm_pool_alarm_callback+0x1d8>
10001062:	e111      	b.n	10001288 <alarm_pool_alarm_callback+0x3fc>
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10001064:	2387      	movs	r3, #135	; 0x87
10001066:	18fb      	adds	r3, r7, r3
10001068:	781a      	ldrb	r2, [r3, #0]
1000106a:	2393      	movs	r3, #147	; 0x93
1000106c:	18fb      	adds	r3, r7, r3
1000106e:	781b      	ldrb	r3, [r3, #0]
10001070:	0011      	movs	r1, r2
10001072:	0018      	movs	r0, r3
10001074:	f7ff fe25 	bl	10000cc2 <make_public_id>
10001078:	2394      	movs	r3, #148	; 0x94
1000107a:	18fb      	adds	r3, r7, r3
1000107c:	681a      	ldr	r2, [r3, #0]
1000107e:	197b      	adds	r3, r7, r5
10001080:	681b      	ldr	r3, [r3, #0]
10001082:	0011      	movs	r1, r2
10001084:	4798      	blx	r3
10001086:	0002      	movs	r2, r0
10001088:	000b      	movs	r3, r1
1000108a:	673a      	str	r2, [r7, #112]	; 0x70
1000108c:	677b      	str	r3, [r7, #116]	; 0x74
            save = spin_lock_blocking(pool->lock);
1000108e:	193b      	adds	r3, r7, r4
10001090:	681b      	ldr	r3, [r3, #0]
10001092:	685b      	ldr	r3, [r3, #4]
10001094:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001096:	f3ef 8310 	mrs	r3, PRIMASK
1000109a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm volatile ("cpsid i");
1000109c:	b672      	cpsid	i
    return status;
1000109e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    uint32_t save = save_and_disable_interrupts();
100010a0:	647b      	str	r3, [r7, #68]	; 0x44
100010a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
100010a4:	643b      	str	r3, [r7, #64]	; 0x40
    while (__builtin_expect(!*lock, 0));
100010a6:	46c0      	nop			; (mov r8, r8)
100010a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100010aa:	681b      	ldr	r3, [r3, #0]
100010ac:	425a      	negs	r2, r3
100010ae:	4153      	adcs	r3, r2
100010b0:	b2db      	uxtb	r3, r3
100010b2:	2b00      	cmp	r3, #0
100010b4:	d1f8      	bne.n	100010a8 <alarm_pool_alarm_callback+0x21c>
    __asm volatile ("dmb" : : : "memory");
100010b6:	f3bf 8f5f 	dmb	sy
}
100010ba:	46c0      	nop			; (mov r8, r8)
}
100010bc:	46c0      	nop			; (mov r8, r8)
}
100010be:	46c0      	nop			; (mov r8, r8)
    return save;
100010c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100010c2:	2288      	movs	r2, #136	; 0x88
100010c4:	18ba      	adds	r2, r7, r2
100010c6:	6013      	str	r3, [r2, #0]
            // todo think more about whether we want to keep calling
            if (repeat < 0 && pool->alarm_in_progress) {
100010c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100010ca:	2b00      	cmp	r3, #0
100010cc:	da46      	bge.n	1000115c <alarm_pool_alarm_callback+0x2d0>
100010ce:	228c      	movs	r2, #140	; 0x8c
100010d0:	18bb      	adds	r3, r7, r2
100010d2:	681b      	ldr	r3, [r3, #0]
100010d4:	691b      	ldr	r3, [r3, #16]
100010d6:	2b00      	cmp	r3, #0
100010d8:	d040      	beq.n	1000115c <alarm_pool_alarm_callback+0x2d0>
                assert(pool->alarm_in_progress == make_public_id(id_high, next_id));
100010da:	18bb      	adds	r3, r7, r2
100010dc:	681b      	ldr	r3, [r3, #0]
100010de:	691c      	ldr	r4, [r3, #16]
100010e0:	2387      	movs	r3, #135	; 0x87
100010e2:	18fb      	adds	r3, r7, r3
100010e4:	781a      	ldrb	r2, [r3, #0]
100010e6:	2393      	movs	r3, #147	; 0x93
100010e8:	18fb      	adds	r3, r7, r3
100010ea:	781b      	ldrb	r3, [r3, #0]
100010ec:	0011      	movs	r1, r2
100010ee:	0018      	movs	r0, r3
100010f0:	f7ff fde7 	bl	10000cc2 <make_public_id>
100010f4:	0003      	movs	r3, r0
100010f6:	429c      	cmp	r4, r3
100010f8:	d005      	beq.n	10001106 <alarm_pool_alarm_callback+0x27a>
100010fa:	4b45      	ldr	r3, [pc, #276]	; (10001210 <alarm_pool_alarm_callback+0x384>)
100010fc:	4a41      	ldr	r2, [pc, #260]	; (10001204 <alarm_pool_alarm_callback+0x378>)
100010fe:	4842      	ldr	r0, [pc, #264]	; (10001208 <alarm_pool_alarm_callback+0x37c>)
10001100:	219f      	movs	r1, #159	; 0x9f
10001102:	f004 f851 	bl	100051a8 <__assert_func>
                add_alarm_under_lock(pool, delayed_by_us(target, (uint64_t)-repeat), callback, user_data, next_id, true, NULL);
10001106:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10001108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000110a:	2000      	movs	r0, #0
1000110c:	2100      	movs	r1, #0
1000110e:	1a80      	subs	r0, r0, r2
10001110:	4199      	sbcs	r1, r3
10001112:	0002      	movs	r2, r0
10001114:	000b      	movs	r3, r1
10001116:	0010      	movs	r0, r2
10001118:	0019      	movs	r1, r3
1000111a:	2318      	movs	r3, #24
1000111c:	18fc      	adds	r4, r7, r3
1000111e:	68ba      	ldr	r2, [r7, #8]
10001120:	68fb      	ldr	r3, [r7, #12]
10001122:	9000      	str	r0, [sp, #0]
10001124:	9101      	str	r1, [sp, #4]
10001126:	0020      	movs	r0, r4
10001128:	f7ff fafc 	bl	10000724 <delayed_by_us>
1000112c:	69ba      	ldr	r2, [r7, #24]
1000112e:	69fb      	ldr	r3, [r7, #28]
10001130:	218c      	movs	r1, #140	; 0x8c
10001132:	1879      	adds	r1, r7, r1
10001134:	6808      	ldr	r0, [r1, #0]
10001136:	2100      	movs	r1, #0
10001138:	9104      	str	r1, [sp, #16]
1000113a:	2101      	movs	r1, #1
1000113c:	9103      	str	r1, [sp, #12]
1000113e:	2187      	movs	r1, #135	; 0x87
10001140:	1879      	adds	r1, r7, r1
10001142:	7809      	ldrb	r1, [r1, #0]
10001144:	9102      	str	r1, [sp, #8]
10001146:	2194      	movs	r1, #148	; 0x94
10001148:	1879      	adds	r1, r7, r1
1000114a:	6809      	ldr	r1, [r1, #0]
1000114c:	9101      	str	r1, [sp, #4]
1000114e:	2198      	movs	r1, #152	; 0x98
10001150:	1879      	adds	r1, r7, r1
10001152:	6809      	ldr	r1, [r1, #0]
10001154:	9100      	str	r1, [sp, #0]
10001156:	f7ff fe05 	bl	10000d64 <add_alarm_under_lock>
1000115a:	e073      	b.n	10001244 <alarm_pool_alarm_callback+0x3b8>
            } else if (repeat > 0 && pool->alarm_in_progress) {
1000115c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000115e:	2b00      	cmp	r3, #0
10001160:	dc05      	bgt.n	1000116e <alarm_pool_alarm_callback+0x2e2>
10001162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10001164:	2b00      	cmp	r3, #0
10001166:	d155      	bne.n	10001214 <alarm_pool_alarm_callback+0x388>
10001168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000116a:	2b00      	cmp	r3, #0
1000116c:	d052      	beq.n	10001214 <alarm_pool_alarm_callback+0x388>
1000116e:	228c      	movs	r2, #140	; 0x8c
10001170:	18bb      	adds	r3, r7, r2
10001172:	681b      	ldr	r3, [r3, #0]
10001174:	691b      	ldr	r3, [r3, #16]
10001176:	2b00      	cmp	r3, #0
10001178:	d04c      	beq.n	10001214 <alarm_pool_alarm_callback+0x388>
                assert(pool->alarm_in_progress == make_public_id(id_high, next_id));
1000117a:	18bb      	adds	r3, r7, r2
1000117c:	681b      	ldr	r3, [r3, #0]
1000117e:	691c      	ldr	r4, [r3, #16]
10001180:	2387      	movs	r3, #135	; 0x87
10001182:	18fb      	adds	r3, r7, r3
10001184:	781a      	ldrb	r2, [r3, #0]
10001186:	2393      	movs	r3, #147	; 0x93
10001188:	18fb      	adds	r3, r7, r3
1000118a:	781b      	ldrb	r3, [r3, #0]
1000118c:	0011      	movs	r1, r2
1000118e:	0018      	movs	r0, r3
10001190:	f7ff fd97 	bl	10000cc2 <make_public_id>
10001194:	0003      	movs	r3, r0
10001196:	429c      	cmp	r4, r3
10001198:	d005      	beq.n	100011a6 <alarm_pool_alarm_callback+0x31a>
1000119a:	4b1d      	ldr	r3, [pc, #116]	; (10001210 <alarm_pool_alarm_callback+0x384>)
1000119c:	4a19      	ldr	r2, [pc, #100]	; (10001204 <alarm_pool_alarm_callback+0x378>)
1000119e:	481a      	ldr	r0, [pc, #104]	; (10001208 <alarm_pool_alarm_callback+0x37c>)
100011a0:	21a2      	movs	r1, #162	; 0xa2
100011a2:	f004 f801 	bl	100051a8 <__assert_func>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), (uint64_t)repeat), callback, user_data, next_id,
100011a6:	2320      	movs	r3, #32
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	0018      	movs	r0, r3
100011ac:	f7ff faa4 	bl	100006f8 <get_absolute_time>
100011b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100011b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100011b4:	2128      	movs	r1, #40	; 0x28
100011b6:	187c      	adds	r4, r7, r1
100011b8:	6a38      	ldr	r0, [r7, #32]
100011ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
100011bc:	9200      	str	r2, [sp, #0]
100011be:	9301      	str	r3, [sp, #4]
100011c0:	0002      	movs	r2, r0
100011c2:	000b      	movs	r3, r1
100011c4:	0020      	movs	r0, r4
100011c6:	f7ff faad 	bl	10000724 <delayed_by_us>
100011ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
100011cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100011ce:	218c      	movs	r1, #140	; 0x8c
100011d0:	1879      	adds	r1, r7, r1
100011d2:	6808      	ldr	r0, [r1, #0]
100011d4:	2100      	movs	r1, #0
100011d6:	9104      	str	r1, [sp, #16]
100011d8:	2101      	movs	r1, #1
100011da:	9103      	str	r1, [sp, #12]
100011dc:	2187      	movs	r1, #135	; 0x87
100011de:	1879      	adds	r1, r7, r1
100011e0:	7809      	ldrb	r1, [r1, #0]
100011e2:	9102      	str	r1, [sp, #8]
100011e4:	2194      	movs	r1, #148	; 0x94
100011e6:	1879      	adds	r1, r7, r1
100011e8:	6809      	ldr	r1, [r1, #0]
100011ea:	9101      	str	r1, [sp, #4]
100011ec:	2198      	movs	r1, #152	; 0x98
100011ee:	1879      	adds	r1, r7, r1
100011f0:	6809      	ldr	r1, [r1, #0]
100011f2:	9100      	str	r1, [sp, #0]
100011f4:	f7ff fdb6 	bl	10000d64 <add_alarm_under_lock>
100011f8:	e024      	b.n	10001244 <alarm_pool_alarm_callback+0x3b8>
100011fa:	46c0      	nop			; (mov r8, r8)
100011fc:	20001434 	.word	0x20001434
10001200:	10006fe8 	.word	0x10006fe8
10001204:	10007180 	.word	0x10007180
10001208:	10006f50 	.word	0x10006f50
1000120c:	10007000 	.word	0x10007000
10001210:	1000700c 	.word	0x1000700c
                                     true, NULL);
            } else {
                // need to return the id to the heap
                ph_free_node(pool->heap, next_id);
10001214:	248c      	movs	r4, #140	; 0x8c
10001216:	193b      	adds	r3, r7, r4
10001218:	681b      	ldr	r3, [r3, #0]
1000121a:	681a      	ldr	r2, [r3, #0]
1000121c:	2587      	movs	r5, #135	; 0x87
1000121e:	197b      	adds	r3, r7, r5
10001220:	781b      	ldrb	r3, [r3, #0]
10001222:	0019      	movs	r1, r3
10001224:	0010      	movs	r0, r2
10001226:	f7ff fc77 	bl	10000b18 <ph_free_node>
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000122a:	197b      	adds	r3, r7, r5
1000122c:	781a      	ldrb	r2, [r3, #0]
1000122e:	193b      	adds	r3, r7, r4
10001230:	681b      	ldr	r3, [r3, #0]
10001232:	0011      	movs	r1, r2
10001234:	0018      	movs	r0, r3
10001236:	f7ff fce1 	bl	10000bfc <get_entry_id_high>
1000123a:	0003      	movs	r3, r0
1000123c:	781a      	ldrb	r2, [r3, #0]
1000123e:	3201      	adds	r2, #1
10001240:	b2d2      	uxtb	r2, r2
10001242:	701a      	strb	r2, [r3, #0]
            }
            pool->alarm_in_progress = 0;
10001244:	218c      	movs	r1, #140	; 0x8c
10001246:	187b      	adds	r3, r7, r1
10001248:	681b      	ldr	r3, [r3, #0]
1000124a:	2200      	movs	r2, #0
1000124c:	611a      	str	r2, [r3, #16]
            spin_unlock(pool->lock, save);
1000124e:	187b      	adds	r3, r7, r1
10001250:	681b      	ldr	r3, [r3, #0]
10001252:	685b      	ldr	r3, [r3, #4]
10001254:	63fb      	str	r3, [r7, #60]	; 0x3c
10001256:	2388      	movs	r3, #136	; 0x88
10001258:	18fb      	adds	r3, r7, r3
1000125a:	681b      	ldr	r3, [r3, #0]
1000125c:	63bb      	str	r3, [r7, #56]	; 0x38
1000125e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001260:	637b      	str	r3, [r7, #52]	; 0x34
    __asm volatile ("dmb" : : : "memory");
10001262:	f3bf 8f5f 	dmb	sy
}
10001266:	46c0      	nop			; (mov r8, r8)
}
10001268:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
1000126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000126c:	2200      	movs	r2, #0
1000126e:	601a      	str	r2, [r3, #0]
}
10001270:	46c0      	nop			; (mov r8, r8)
10001272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001274:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001278:	f383 8810 	msr	PRIMASK, r3
}
1000127c:	46c0      	nop			; (mov r8, r8)
}
1000127e:	46c0      	nop			; (mov r8, r8)
            again = true;
10001280:	239f      	movs	r3, #159	; 0x9f
10001282:	18fb      	adds	r3, r7, r3
10001284:	2201      	movs	r2, #1
10001286:	701a      	strb	r2, [r3, #0]
        }
    } while (again);
10001288:	239f      	movs	r3, #159	; 0x9f
1000128a:	18fb      	adds	r3, r7, r3
1000128c:	781b      	ldrb	r3, [r3, #0]
1000128e:	2b00      	cmp	r3, #0
10001290:	d000      	beq.n	10001294 <alarm_pool_alarm_callback+0x408>
10001292:	e606      	b.n	10000ea2 <alarm_pool_alarm_callback+0x16>
}
10001294:	46c0      	nop			; (mov r8, r8)
10001296:	46c0      	nop			; (mov r8, r8)
10001298:	46bd      	mov	sp, r7
1000129a:	b029      	add	sp, #164	; 0xa4
1000129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000129e:	46c0      	nop			; (mov r8, r8)

100012a0 <alarm_pool_post_alloc_init>:
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
    alarm_pool_post_alloc_init(pool, hardware_alarm_num);
    return pool;
}

void alarm_pool_post_alloc_init(alarm_pool_t *pool, uint hardware_alarm_num) {
100012a0:	b580      	push	{r7, lr}
100012a2:	b084      	sub	sp, #16
100012a4:	af00      	add	r7, sp, #0
100012a6:	6078      	str	r0, [r7, #4]
100012a8:	6039      	str	r1, [r7, #0]
    hardware_alarm_claim(hardware_alarm_num);
100012aa:	683b      	ldr	r3, [r7, #0]
100012ac:	0018      	movs	r0, r3
100012ae:	f001 fd61 	bl	10002d74 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
100012b2:	683b      	ldr	r3, [r7, #0]
100012b4:	0018      	movs	r0, r3
100012b6:	f001 ffef 	bl	10003298 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
100012ba:	4a0f      	ldr	r2, [pc, #60]	; (100012f8 <alarm_pool_post_alloc_init+0x58>)
100012bc:	683b      	ldr	r3, [r7, #0]
100012be:	0011      	movs	r1, r2
100012c0:	0018      	movs	r0, r3
100012c2:	f001 fe6d 	bl	10002fa0 <hardware_alarm_set_callback>
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100012c6:	f001 fd17 	bl	10002cf8 <next_striped_spin_lock_num>
100012ca:	0003      	movs	r3, r0
100012cc:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100012ce:	68fb      	ldr	r3, [r7, #12]
100012d0:	4a0a      	ldr	r2, [pc, #40]	; (100012fc <alarm_pool_post_alloc_init+0x5c>)
100012d2:	4694      	mov	ip, r2
100012d4:	4463      	add	r3, ip
100012d6:	009b      	lsls	r3, r3, #2
100012d8:	001a      	movs	r2, r3
100012da:	687b      	ldr	r3, [r7, #4]
100012dc:	605a      	str	r2, [r3, #4]
    pool->hardware_alarm_num = (uint8_t) hardware_alarm_num;
100012de:	683b      	ldr	r3, [r7, #0]
100012e0:	b2da      	uxtb	r2, r3
100012e2:	687b      	ldr	r3, [r7, #4]
100012e4:	751a      	strb	r2, [r3, #20]
    pools[hardware_alarm_num] = pool;
100012e6:	4b06      	ldr	r3, [pc, #24]	; (10001300 <alarm_pool_post_alloc_init+0x60>)
100012e8:	683a      	ldr	r2, [r7, #0]
100012ea:	0092      	lsls	r2, r2, #2
100012ec:	6879      	ldr	r1, [r7, #4]
100012ee:	50d1      	str	r1, [r2, r3]
}
100012f0:	46c0      	nop			; (mov r8, r8)
100012f2:	46bd      	mov	sp, r7
100012f4:	b004      	add	sp, #16
100012f6:	bd80      	pop	{r7, pc}
100012f8:	10000e8d 	.word	0x10000e8d
100012fc:	34000040 	.word	0x34000040
10001300:	20001434 	.word	0x20001434

10001304 <alarm_pool_add_alarm_at>:
    free(pool->entries);
    free(pool);
}

alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                   void *user_data, bool fire_if_past) {
10001304:	b5b0      	push	{r4, r5, r7, lr}
10001306:	b09e      	sub	sp, #120	; 0x78
10001308:	af06      	add	r7, sp, #24
1000130a:	6178      	str	r0, [r7, #20]
1000130c:	60ba      	str	r2, [r7, #8]
1000130e:	60fb      	str	r3, [r7, #12]
    bool missed = false;
10001310:	231f      	movs	r3, #31
10001312:	18fb      	adds	r3, r7, r3
10001314:	2200      	movs	r2, #0
10001316:	701a      	strb	r2, [r3, #0]

    alarm_id_t public_id;
    do {
        uint8_t id_high = 0;
10001318:	235b      	movs	r3, #91	; 0x5b
1000131a:	18fb      	adds	r3, r7, r3
1000131c:	2200      	movs	r2, #0
1000131e:	701a      	strb	r2, [r3, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10001320:	697b      	ldr	r3, [r7, #20]
10001322:	685b      	ldr	r3, [r3, #4]
10001324:	647b      	str	r3, [r7, #68]	; 0x44
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001326:	f3ef 8310 	mrs	r3, PRIMASK
1000132a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile ("cpsid i");
1000132c:	b672      	cpsid	i
    return status;
1000132e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    uint32_t save = save_and_disable_interrupts();
10001330:	63fb      	str	r3, [r7, #60]	; 0x3c
10001332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001334:	63bb      	str	r3, [r7, #56]	; 0x38
    while (__builtin_expect(!*lock, 0));
10001336:	46c0      	nop			; (mov r8, r8)
10001338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000133a:	681b      	ldr	r3, [r3, #0]
1000133c:	425a      	negs	r2, r3
1000133e:	4153      	adcs	r3, r2
10001340:	b2db      	uxtb	r3, r3
10001342:	2b00      	cmp	r3, #0
10001344:	d1f8      	bne.n	10001338 <alarm_pool_add_alarm_at+0x34>
    __asm volatile ("dmb" : : : "memory");
10001346:	f3bf 8f5f 	dmb	sy
}
1000134a:	46c0      	nop			; (mov r8, r8)
}
1000134c:	46c0      	nop			; (mov r8, r8)
}
1000134e:	46c0      	nop			; (mov r8, r8)
    return save;
10001350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10001352:	657b      	str	r3, [r7, #84]	; 0x54

        pheap_node_id_t id = add_alarm_under_lock(pool, time, callback, user_data, 0, false, &missed);
10001354:	2553      	movs	r5, #83	; 0x53
10001356:	197c      	adds	r4, r7, r5
10001358:	68ba      	ldr	r2, [r7, #8]
1000135a:	68fb      	ldr	r3, [r7, #12]
1000135c:	6978      	ldr	r0, [r7, #20]
1000135e:	211f      	movs	r1, #31
10001360:	1879      	adds	r1, r7, r1
10001362:	9104      	str	r1, [sp, #16]
10001364:	2100      	movs	r1, #0
10001366:	9103      	str	r1, [sp, #12]
10001368:	2100      	movs	r1, #0
1000136a:	9102      	str	r1, [sp, #8]
1000136c:	6f79      	ldr	r1, [r7, #116]	; 0x74
1000136e:	9101      	str	r1, [sp, #4]
10001370:	6f39      	ldr	r1, [r7, #112]	; 0x70
10001372:	9100      	str	r1, [sp, #0]
10001374:	f7ff fcf6 	bl	10000d64 <add_alarm_under_lock>
10001378:	0003      	movs	r3, r0
1000137a:	7023      	strb	r3, [r4, #0]
        if (id) id_high = *get_entry_id_high(pool, id);
1000137c:	197b      	adds	r3, r7, r5
1000137e:	781b      	ldrb	r3, [r3, #0]
10001380:	2b00      	cmp	r3, #0
10001382:	d00b      	beq.n	1000139c <alarm_pool_add_alarm_at+0x98>
10001384:	197b      	adds	r3, r7, r5
10001386:	781a      	ldrb	r2, [r3, #0]
10001388:	697b      	ldr	r3, [r7, #20]
1000138a:	0011      	movs	r1, r2
1000138c:	0018      	movs	r0, r3
1000138e:	f7ff fc35 	bl	10000bfc <get_entry_id_high>
10001392:	0002      	movs	r2, r0
10001394:	235b      	movs	r3, #91	; 0x5b
10001396:	18fb      	adds	r3, r7, r3
10001398:	7812      	ldrb	r2, [r2, #0]
1000139a:	701a      	strb	r2, [r3, #0]

        spin_unlock(pool->lock, save);
1000139c:	697b      	ldr	r3, [r7, #20]
1000139e:	685b      	ldr	r3, [r3, #4]
100013a0:	637b      	str	r3, [r7, #52]	; 0x34
100013a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100013a4:	633b      	str	r3, [r7, #48]	; 0x30
100013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("dmb" : : : "memory");
100013aa:	f3bf 8f5f 	dmb	sy
}
100013ae:	46c0      	nop			; (mov r8, r8)
}
100013b0:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
100013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100013b4:	2200      	movs	r2, #0
100013b6:	601a      	str	r2, [r3, #0]
}
100013b8:	46c0      	nop			; (mov r8, r8)
100013ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
100013c0:	f383 8810 	msr	PRIMASK, r3
}
100013c4:	46c0      	nop			; (mov r8, r8)
}
100013c6:	46c0      	nop			; (mov r8, r8)

        if (!id) {
100013c8:	2353      	movs	r3, #83	; 0x53
100013ca:	18fb      	adds	r3, r7, r3
100013cc:	781b      	ldrb	r3, [r3, #0]
100013ce:	2b00      	cmp	r3, #0
100013d0:	d102      	bne.n	100013d8 <alarm_pool_add_alarm_at+0xd4>
            // no space in pheap to allocate an alarm
            return -1;
100013d2:	2301      	movs	r3, #1
100013d4:	425b      	negs	r3, r3
100013d6:	e05a      	b.n	1000148e <alarm_pool_add_alarm_at+0x18a>
        }

        // note that if missed was true, then the id was never added to the pheap (because we
        // passed false for create_if_past arg above)
        public_id = missed ? 0 : make_public_id(id_high, id);
100013d8:	231f      	movs	r3, #31
100013da:	18fb      	adds	r3, r7, r3
100013dc:	781b      	ldrb	r3, [r3, #0]
100013de:	2b00      	cmp	r3, #0
100013e0:	d10b      	bne.n	100013fa <alarm_pool_add_alarm_at+0xf6>
100013e2:	2353      	movs	r3, #83	; 0x53
100013e4:	18fb      	adds	r3, r7, r3
100013e6:	781a      	ldrb	r2, [r3, #0]
100013e8:	235b      	movs	r3, #91	; 0x5b
100013ea:	18fb      	adds	r3, r7, r3
100013ec:	781b      	ldrb	r3, [r3, #0]
100013ee:	0011      	movs	r1, r2
100013f0:	0018      	movs	r0, r3
100013f2:	f7ff fc66 	bl	10000cc2 <make_public_id>
100013f6:	0003      	movs	r3, r0
100013f8:	e000      	b.n	100013fc <alarm_pool_add_alarm_at+0xf8>
100013fa:	2300      	movs	r3, #0
100013fc:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (missed && fire_if_past) {
100013fe:	231f      	movs	r3, #31
10001400:	18fb      	adds	r3, r7, r3
10001402:	781b      	ldrb	r3, [r3, #0]
10001404:	2b00      	cmp	r3, #0
10001406:	d041      	beq.n	1000148c <alarm_pool_add_alarm_at+0x188>
10001408:	2378      	movs	r3, #120	; 0x78
1000140a:	18fb      	adds	r3, r7, r3
1000140c:	781b      	ldrb	r3, [r3, #0]
1000140e:	2b00      	cmp	r3, #0
10001410:	d03c      	beq.n	1000148c <alarm_pool_add_alarm_at+0x188>
            // ... so if fire_if_past == true we call the callback
            int64_t repeat = callback(public_id, user_data);
10001412:	6f79      	ldr	r1, [r7, #116]	; 0x74
10001414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10001416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10001418:	0010      	movs	r0, r2
1000141a:	4798      	blx	r3
1000141c:	0002      	movs	r2, r0
1000141e:	000b      	movs	r3, r1
10001420:	64ba      	str	r2, [r7, #72]	; 0x48
10001422:	64fb      	str	r3, [r7, #76]	; 0x4c
            // if not repeated we have no id to return so set public_id to 0,
            // otherwise we need to repeat, but will assign a new id next time
            // todo arguably this does mean that the id passed to the first callback may differ from subsequent calls
            if (!repeat) {
10001424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10001426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10001428:	4313      	orrs	r3, r2
1000142a:	d102      	bne.n	10001432 <alarm_pool_add_alarm_at+0x12e>
                public_id = 0;
1000142c:	2300      	movs	r3, #0
1000142e:	65fb      	str	r3, [r7, #92]	; 0x5c
                break;
10001430:	e02c      	b.n	1000148c <alarm_pool_add_alarm_at+0x188>
            } else if (repeat < 0) {
10001432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10001434:	2b00      	cmp	r3, #0
10001436:	da13      	bge.n	10001460 <alarm_pool_add_alarm_at+0x15c>
                time = delayed_by_us(time, (uint64_t)-repeat);
10001438:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000143a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000143c:	2000      	movs	r0, #0
1000143e:	2100      	movs	r1, #0
10001440:	1a80      	subs	r0, r0, r2
10001442:	4199      	sbcs	r1, r3
10001444:	0002      	movs	r2, r0
10001446:	000b      	movs	r3, r1
10001448:	0010      	movs	r0, r2
1000144a:	0019      	movs	r1, r3
1000144c:	2308      	movs	r3, #8
1000144e:	18fc      	adds	r4, r7, r3
10001450:	68ba      	ldr	r2, [r7, #8]
10001452:	68fb      	ldr	r3, [r7, #12]
10001454:	9000      	str	r0, [sp, #0]
10001456:	9101      	str	r1, [sp, #4]
10001458:	0020      	movs	r0, r4
1000145a:	f7ff f963 	bl	10000724 <delayed_by_us>
1000145e:	e75b      	b.n	10001318 <alarm_pool_add_alarm_at+0x14>
            } else {
                time = delayed_by_us(get_absolute_time(), (uint64_t)repeat);
10001460:	2320      	movs	r3, #32
10001462:	18fb      	adds	r3, r7, r3
10001464:	0018      	movs	r0, r3
10001466:	f7ff f947 	bl	100006f8 <get_absolute_time>
1000146a:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000146c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000146e:	003c      	movs	r4, r7
10001470:	6a38      	ldr	r0, [r7, #32]
10001472:	6a79      	ldr	r1, [r7, #36]	; 0x24
10001474:	9200      	str	r2, [sp, #0]
10001476:	9301      	str	r3, [sp, #4]
10001478:	0002      	movs	r2, r0
1000147a:	000b      	movs	r3, r1
1000147c:	0020      	movs	r0, r4
1000147e:	f7ff f951 	bl	10000724 <delayed_by_us>
10001482:	683a      	ldr	r2, [r7, #0]
10001484:	687b      	ldr	r3, [r7, #4]
10001486:	60ba      	str	r2, [r7, #8]
10001488:	60fb      	str	r3, [r7, #12]
    do {
1000148a:	e745      	b.n	10001318 <alarm_pool_add_alarm_at+0x14>
            // b) missed == true && fire_if_past == false && public_id = 0
            // but we are done in either case
            break;
        }
    } while (true);
    return public_id;
1000148c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
1000148e:	0018      	movs	r0, r3
10001490:	46bd      	mov	sp, r7
10001492:	b018      	add	sp, #96	; 0x60
10001494:	bdb0      	pop	{r4, r5, r7, pc}
	...

10001498 <sleep_until_callback>:
    ph_dump(pool->heap, alarm_pool_dump_key, pool);
    spin_unlock(pool->lock, save);
}

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sleep_until_callback(__unused alarm_id_t id, __unused void *user_data) {
10001498:	b580      	push	{r7, lr}
1000149a:	b08c      	sub	sp, #48	; 0x30
1000149c:	af00      	add	r7, sp, #0
1000149e:	6078      	str	r0, [r7, #4]
100014a0:	6039      	str	r1, [r7, #0]
    uint32_t save = spin_lock_blocking(sleep_notifier.spin_lock);
100014a2:	4b1c      	ldr	r3, [pc, #112]	; (10001514 <sleep_until_callback+0x7c>)
100014a4:	681b      	ldr	r3, [r3, #0]
100014a6:	61bb      	str	r3, [r7, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100014a8:	f3ef 8310 	mrs	r3, PRIMASK
100014ac:	617b      	str	r3, [r7, #20]
    __asm volatile ("cpsid i");
100014ae:	b672      	cpsid	i
    return status;
100014b0:	697b      	ldr	r3, [r7, #20]
    uint32_t save = save_and_disable_interrupts();
100014b2:	613b      	str	r3, [r7, #16]
100014b4:	69bb      	ldr	r3, [r7, #24]
100014b6:	60fb      	str	r3, [r7, #12]
    while (__builtin_expect(!*lock, 0));
100014b8:	46c0      	nop			; (mov r8, r8)
100014ba:	68fb      	ldr	r3, [r7, #12]
100014bc:	681b      	ldr	r3, [r3, #0]
100014be:	425a      	negs	r2, r3
100014c0:	4153      	adcs	r3, r2
100014c2:	b2db      	uxtb	r3, r3
100014c4:	2b00      	cmp	r3, #0
100014c6:	d1f8      	bne.n	100014ba <sleep_until_callback+0x22>
    __asm volatile ("dmb" : : : "memory");
100014c8:	f3bf 8f5f 	dmb	sy
}
100014cc:	46c0      	nop			; (mov r8, r8)
}
100014ce:	46c0      	nop			; (mov r8, r8)
}
100014d0:	46c0      	nop			; (mov r8, r8)
    return save;
100014d2:	693b      	ldr	r3, [r7, #16]
100014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lock_internal_spin_unlock_with_notify(&sleep_notifier, save);
100014d6:	4b0f      	ldr	r3, [pc, #60]	; (10001514 <sleep_until_callback+0x7c>)
100014d8:	681b      	ldr	r3, [r3, #0]
100014da:	62bb      	str	r3, [r7, #40]	; 0x28
100014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100014de:	627b      	str	r3, [r7, #36]	; 0x24
100014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
100014e2:	623b      	str	r3, [r7, #32]
    __asm volatile ("dmb" : : : "memory");
100014e4:	f3bf 8f5f 	dmb	sy
}
100014e8:	46c0      	nop			; (mov r8, r8)
}
100014ea:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
100014ec:	6a3b      	ldr	r3, [r7, #32]
100014ee:	2200      	movs	r2, #0
100014f0:	601a      	str	r2, [r3, #0]
}
100014f2:	46c0      	nop			; (mov r8, r8)
100014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100014f6:	61fb      	str	r3, [r7, #28]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100014f8:	69fb      	ldr	r3, [r7, #28]
100014fa:	f383 8810 	msr	PRIMASK, r3
}
100014fe:	46c0      	nop			; (mov r8, r8)
}
10001500:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("sev");
10001502:	bf40      	sev
}
10001504:	46c0      	nop			; (mov r8, r8)
    return 0;
10001506:	2200      	movs	r2, #0
10001508:	2300      	movs	r3, #0
}
1000150a:	0010      	movs	r0, r2
1000150c:	0019      	movs	r1, r3
1000150e:	46bd      	mov	sp, r7
10001510:	b00c      	add	sp, #48	; 0x30
10001512:	bd80      	pop	{r7, pc}
10001514:	20001648 	.word	0x20001648

10001518 <sleep_until>:
#endif

void sleep_until(absolute_time_t t) {
10001518:	b580      	push	{r7, lr}
1000151a:	b096      	sub	sp, #88	; 0x58
1000151c:	af02      	add	r7, sp, #8
1000151e:	6038      	str	r0, [r7, #0]
10001520:	6079      	str	r1, [r7, #4]
#if PICO_ON_DEVICE && !defined(NDEBUG)
    if (__get_current_exception()) {
10001522:	f7fe feb8 	bl	10000296 <__get_current_exception>
10001526:	1e03      	subs	r3, r0, #0
10001528:	d003      	beq.n	10001532 <sleep_until+0x1a>
        panic("Attempted to sleep inside of an exception handler; use busy_wait if you must");
1000152a:	4b4a      	ldr	r3, [pc, #296]	; (10001654 <sleep_until+0x13c>)
1000152c:	0018      	movs	r0, r3
1000152e:	f003 fe61 	bl	100051f4 <panic>
    }
#endif
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    uint64_t t_us = to_us_since_boot(t);
10001532:	683a      	ldr	r2, [r7, #0]
10001534:	687b      	ldr	r3, [r7, #4]
10001536:	0010      	movs	r0, r2
10001538:	0019      	movs	r1, r3
1000153a:	f7ff f87e 	bl	1000063a <to_us_since_boot>
1000153e:	0002      	movs	r2, r0
10001540:	000b      	movs	r3, r1
10001542:	643a      	str	r2, [r7, #64]	; 0x40
10001544:	647b      	str	r3, [r7, #68]	; 0x44
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10001546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10001548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000154a:	2006      	movs	r0, #6
1000154c:	4240      	negs	r0, r0
1000154e:	17c1      	asrs	r1, r0, #31
10001550:	1812      	adds	r2, r2, r0
10001552:	414b      	adcs	r3, r1
10001554:	64ba      	str	r2, [r7, #72]	; 0x48
10001556:	64fb      	str	r3, [r7, #76]	; 0x4c
    // needs to work in the first PICO_TIME_SLEEP_OVERHEAD_ADJUST_US of boot
    if (t_before_us > t_us) t_before_us = 0;
10001558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000155a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000155c:	429a      	cmp	r2, r3
1000155e:	d807      	bhi.n	10001570 <sleep_until+0x58>
10001560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10001562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10001564:	429a      	cmp	r2, r3
10001566:	d107      	bne.n	10001578 <sleep_until+0x60>
10001568:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000156a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000156c:	429a      	cmp	r2, r3
1000156e:	d903      	bls.n	10001578 <sleep_until+0x60>
10001570:	2200      	movs	r2, #0
10001572:	2300      	movs	r3, #0
10001574:	64ba      	str	r2, [r7, #72]	; 0x48
10001576:	64fb      	str	r3, [r7, #76]	; 0x4c
    absolute_time_t t_before;
    update_us_since_boot(&t_before, t_before_us);
10001578:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000157a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000157c:	2108      	movs	r1, #8
1000157e:	1879      	adds	r1, r7, r1
10001580:	0008      	movs	r0, r1
10001582:	f7ff f867 	bl	10000654 <update_us_since_boot>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10001586:	2310      	movs	r3, #16
10001588:	18fb      	adds	r3, r7, r3
1000158a:	0018      	movs	r0, r3
1000158c:	f7ff f8b4 	bl	100006f8 <get_absolute_time>
10001590:	68ba      	ldr	r2, [r7, #8]
10001592:	68fb      	ldr	r3, [r7, #12]
10001594:	6938      	ldr	r0, [r7, #16]
10001596:	6979      	ldr	r1, [r7, #20]
10001598:	f7ff f918 	bl	100007cc <absolute_time_diff_us>
1000159c:	0002      	movs	r2, r0
1000159e:	000b      	movs	r3, r1
100015a0:	2b00      	cmp	r3, #0
100015a2:	dc02      	bgt.n	100015aa <sleep_until+0x92>
100015a4:	d14b      	bne.n	1000163e <sleep_until+0x126>
100015a6:	2a00      	cmp	r2, #0
100015a8:	d049      	beq.n	1000163e <sleep_until+0x126>
        if (add_alarm_at(t_before, sleep_until_callback, NULL, false) >= 0) {
100015aa:	4a2b      	ldr	r2, [pc, #172]	; (10001658 <sleep_until+0x140>)
100015ac:	68b8      	ldr	r0, [r7, #8]
100015ae:	68f9      	ldr	r1, [r7, #12]
100015b0:	2300      	movs	r3, #0
100015b2:	9300      	str	r3, [sp, #0]
100015b4:	2300      	movs	r3, #0
100015b6:	f7ff f929 	bl	1000080c <add_alarm_at>
100015ba:	1e03      	subs	r3, r0, #0
100015bc:	db3f      	blt.n	1000163e <sleep_until+0x126>
            // able to add alarm for just before the time
            while (!time_reached(t_before)) {
100015be:	e031      	b.n	10001624 <sleep_until+0x10c>
                uint32_t save = spin_lock_blocking(sleep_notifier.spin_lock);
100015c0:	4b26      	ldr	r3, [pc, #152]	; (1000165c <sleep_until+0x144>)
100015c2:	681b      	ldr	r3, [r3, #0]
100015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100015c6:	f3ef 8310 	mrs	r3, PRIMASK
100015ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("cpsid i");
100015cc:	b672      	cpsid	i
    return status;
100015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    uint32_t save = save_and_disable_interrupts();
100015d0:	623b      	str	r3, [r7, #32]
100015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100015d4:	61fb      	str	r3, [r7, #28]
    while (__builtin_expect(!*lock, 0));
100015d6:	46c0      	nop			; (mov r8, r8)
100015d8:	69fb      	ldr	r3, [r7, #28]
100015da:	681b      	ldr	r3, [r3, #0]
100015dc:	425a      	negs	r2, r3
100015de:	4153      	adcs	r3, r2
100015e0:	b2db      	uxtb	r3, r3
100015e2:	2b00      	cmp	r3, #0
100015e4:	d1f8      	bne.n	100015d8 <sleep_until+0xc0>
    __asm volatile ("dmb" : : : "memory");
100015e6:	f3bf 8f5f 	dmb	sy
}
100015ea:	46c0      	nop			; (mov r8, r8)
}
100015ec:	46c0      	nop			; (mov r8, r8)
}
100015ee:	46c0      	nop			; (mov r8, r8)
    return save;
100015f0:	6a3b      	ldr	r3, [r7, #32]
100015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                lock_internal_spin_unlock_with_wait(&sleep_notifier, save);
100015f4:	4b19      	ldr	r3, [pc, #100]	; (1000165c <sleep_until+0x144>)
100015f6:	681b      	ldr	r3, [r3, #0]
100015f8:	63bb      	str	r3, [r7, #56]	; 0x38
100015fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100015fc:	637b      	str	r3, [r7, #52]	; 0x34
100015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10001600:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("dmb" : : : "memory");
10001602:	f3bf 8f5f 	dmb	sy
}
10001606:	46c0      	nop			; (mov r8, r8)
}
10001608:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
1000160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000160c:	2200      	movs	r2, #0
1000160e:	601a      	str	r2, [r3, #0]
}
10001610:	46c0      	nop			; (mov r8, r8)
10001612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001618:	f383 8810 	msr	PRIMASK, r3
}
1000161c:	46c0      	nop			; (mov r8, r8)
}
1000161e:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("wfe");
10001620:	bf20      	wfe
}
10001622:	46c0      	nop			; (mov r8, r8)
            while (!time_reached(t_before)) {
10001624:	68ba      	ldr	r2, [r7, #8]
10001626:	68fb      	ldr	r3, [r7, #12]
10001628:	0010      	movs	r0, r2
1000162a:	0019      	movs	r1, r3
1000162c:	f7ff f832 	bl	10000694 <time_reached>
10001630:	0003      	movs	r3, r0
10001632:	001a      	movs	r2, r3
10001634:	2301      	movs	r3, #1
10001636:	4053      	eors	r3, r2
10001638:	b2db      	uxtb	r3, r3
1000163a:	2b00      	cmp	r3, #0
1000163c:	d1c0      	bne.n	100015c0 <sleep_until+0xa8>
#else
    // hook in case we're in RTOS; note we assume using the alarm pool is better always if available.
    sync_internal_yield_until_before(t);
#endif
    // now wait until the exact time
    busy_wait_until(t);
1000163e:	683a      	ldr	r2, [r7, #0]
10001640:	687b      	ldr	r3, [r7, #4]
10001642:	0010      	movs	r0, r2
10001644:	0019      	movs	r1, r3
10001646:	f001 fbdb 	bl	10002e00 <busy_wait_until>
}
1000164a:	46c0      	nop			; (mov r8, r8)
1000164c:	46bd      	mov	sp, r7
1000164e:	b014      	add	sp, #80	; 0x50
10001650:	bd80      	pop	{r7, pc}
10001652:	46c0      	nop			; (mov r8, r8)
10001654:	100070c4 	.word	0x100070c4
10001658:	10001499 	.word	0x10001499
1000165c:	20001648 	.word	0x20001648

10001660 <sleep_us>:

void sleep_us(uint64_t us) {
10001660:	b580      	push	{r7, lr}
10001662:	b084      	sub	sp, #16
10001664:	af00      	add	r7, sp, #0
10001666:	6038      	str	r0, [r7, #0]
10001668:	6079      	str	r1, [r7, #4]
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    sleep_until(make_timeout_time_us(us));
1000166a:	2308      	movs	r3, #8
1000166c:	18f9      	adds	r1, r7, r3
1000166e:	683a      	ldr	r2, [r7, #0]
10001670:	687b      	ldr	r3, [r7, #4]
10001672:	0008      	movs	r0, r1
10001674:	f7ff f88f 	bl	10000796 <make_timeout_time_us>
10001678:	68ba      	ldr	r2, [r7, #8]
1000167a:	68fb      	ldr	r3, [r7, #12]
1000167c:	0010      	movs	r0, r2
1000167e:	0019      	movs	r1, r3
10001680:	f7ff ff4a 	bl	10001518 <sleep_until>

        // then wait the rest of thw way
        busy_wait_until(t);
    }
#endif
}
10001684:	46c0      	nop			; (mov r8, r8)
10001686:	46bd      	mov	sp, r7
10001688:	b004      	add	sp, #16
1000168a:	bd80      	pop	{r7, pc}

1000168c <sleep_ms>:

void sleep_ms(uint32_t ms) {
1000168c:	b5b0      	push	{r4, r5, r7, lr}
1000168e:	b082      	sub	sp, #8
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
    sleep_us(ms * 1000ull);
10001694:	687b      	ldr	r3, [r7, #4]
10001696:	001c      	movs	r4, r3
10001698:	2300      	movs	r3, #0
1000169a:	001d      	movs	r5, r3
1000169c:	22fa      	movs	r2, #250	; 0xfa
1000169e:	0092      	lsls	r2, r2, #2
100016a0:	2300      	movs	r3, #0
100016a2:	0020      	movs	r0, r4
100016a4:	0029      	movs	r1, r5
100016a6:	f004 fe67 	bl	10006378 <__wrap___aeabi_lmul>
100016aa:	0002      	movs	r2, r0
100016ac:	000b      	movs	r3, r1
100016ae:	0010      	movs	r0, r2
100016b0:	0019      	movs	r1, r3
100016b2:	f7ff ffd5 	bl	10001660 <sleep_us>
}
100016b6:	46c0      	nop			; (mov r8, r8)
100016b8:	46bd      	mov	sp, r7
100016ba:	b002      	add	sp, #8
100016bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

100016c0 <ph_get_node>:
static inline pheap_node_t *ph_get_node(pheap_t *heap, pheap_node_id_t id) {
100016c0:	b580      	push	{r7, lr}
100016c2:	b082      	sub	sp, #8
100016c4:	af00      	add	r7, sp, #0
100016c6:	6078      	str	r0, [r7, #4]
100016c8:	000a      	movs	r2, r1
100016ca:	1cfb      	adds	r3, r7, #3
100016cc:	701a      	strb	r2, [r3, #0]
    assert(id && id <= heap->max_nodes);
100016ce:	1cfb      	adds	r3, r7, #3
100016d0:	781b      	ldrb	r3, [r3, #0]
100016d2:	2b00      	cmp	r3, #0
100016d4:	d005      	beq.n	100016e2 <ph_get_node+0x22>
100016d6:	687b      	ldr	r3, [r7, #4]
100016d8:	7b1b      	ldrb	r3, [r3, #12]
100016da:	1cfa      	adds	r2, r7, #3
100016dc:	7812      	ldrb	r2, [r2, #0]
100016de:	429a      	cmp	r2, r3
100016e0:	d905      	bls.n	100016ee <ph_get_node+0x2e>
100016e2:	4b09      	ldr	r3, [pc, #36]	; (10001708 <ph_get_node+0x48>)
100016e4:	4a09      	ldr	r2, [pc, #36]	; (1000170c <ph_get_node+0x4c>)
100016e6:	480a      	ldr	r0, [pc, #40]	; (10001710 <ph_get_node+0x50>)
100016e8:	2168      	movs	r1, #104	; 0x68
100016ea:	f003 fd5d 	bl	100051a8 <__assert_func>
    return heap->nodes + id - 1;
100016ee:	687b      	ldr	r3, [r7, #4]
100016f0:	6819      	ldr	r1, [r3, #0]
100016f2:	1cfb      	adds	r3, r7, #3
100016f4:	781a      	ldrb	r2, [r3, #0]
100016f6:	0013      	movs	r3, r2
100016f8:	005b      	lsls	r3, r3, #1
100016fa:	189b      	adds	r3, r3, r2
100016fc:	3b03      	subs	r3, #3
100016fe:	18cb      	adds	r3, r1, r3
}
10001700:	0018      	movs	r0, r3
10001702:	46bd      	mov	sp, r7
10001704:	b002      	add	sp, #8
10001706:	bd80      	pop	{r7, pc}
10001708:	100071d8 	.word	0x100071d8
1000170c:	10007384 	.word	0x10007384
10001710:	100071f4 	.word	0x100071f4

10001714 <ph_add_child_node>:
static void ph_add_child_node(pheap_t *heap, pheap_node_id_t parent_id, pheap_node_id_t child_id) {
10001714:	b580      	push	{r7, lr}
10001716:	b084      	sub	sp, #16
10001718:	af00      	add	r7, sp, #0
1000171a:	6078      	str	r0, [r7, #4]
1000171c:	0008      	movs	r0, r1
1000171e:	0011      	movs	r1, r2
10001720:	1cfb      	adds	r3, r7, #3
10001722:	1c02      	adds	r2, r0, #0
10001724:	701a      	strb	r2, [r3, #0]
10001726:	1cbb      	adds	r3, r7, #2
10001728:	1c0a      	adds	r2, r1, #0
1000172a:	701a      	strb	r2, [r3, #0]
    pheap_node_t *n = ph_get_node(heap, parent_id);
1000172c:	1cfb      	adds	r3, r7, #3
1000172e:	781a      	ldrb	r2, [r3, #0]
10001730:	687b      	ldr	r3, [r7, #4]
10001732:	0011      	movs	r1, r2
10001734:	0018      	movs	r0, r3
10001736:	f7ff ffc3 	bl	100016c0 <ph_get_node>
1000173a:	0003      	movs	r3, r0
1000173c:	60fb      	str	r3, [r7, #12]
    assert(parent_id);
1000173e:	1cfb      	adds	r3, r7, #3
10001740:	781b      	ldrb	r3, [r3, #0]
10001742:	2b00      	cmp	r3, #0
10001744:	d105      	bne.n	10001752 <ph_add_child_node+0x3e>
10001746:	4b1f      	ldr	r3, [pc, #124]	; (100017c4 <ph_add_child_node+0xb0>)
10001748:	4a1f      	ldr	r2, [pc, #124]	; (100017c8 <ph_add_child_node+0xb4>)
1000174a:	4820      	ldr	r0, [pc, #128]	; (100017cc <ph_add_child_node+0xb8>)
1000174c:	216f      	movs	r1, #111	; 0x6f
1000174e:	f003 fd2b 	bl	100051a8 <__assert_func>
    assert(child_id);
10001752:	1cbb      	adds	r3, r7, #2
10001754:	781b      	ldrb	r3, [r3, #0]
10001756:	2b00      	cmp	r3, #0
10001758:	d105      	bne.n	10001766 <ph_add_child_node+0x52>
1000175a:	4b1d      	ldr	r3, [pc, #116]	; (100017d0 <ph_add_child_node+0xbc>)
1000175c:	4a1a      	ldr	r2, [pc, #104]	; (100017c8 <ph_add_child_node+0xb4>)
1000175e:	481b      	ldr	r0, [pc, #108]	; (100017cc <ph_add_child_node+0xb8>)
10001760:	2170      	movs	r1, #112	; 0x70
10001762:	f003 fd21 	bl	100051a8 <__assert_func>
    assert(parent_id != child_id);
10001766:	1cfa      	adds	r2, r7, #3
10001768:	1cbb      	adds	r3, r7, #2
1000176a:	7812      	ldrb	r2, [r2, #0]
1000176c:	781b      	ldrb	r3, [r3, #0]
1000176e:	429a      	cmp	r2, r3
10001770:	d105      	bne.n	1000177e <ph_add_child_node+0x6a>
10001772:	4b18      	ldr	r3, [pc, #96]	; (100017d4 <ph_add_child_node+0xc0>)
10001774:	4a14      	ldr	r2, [pc, #80]	; (100017c8 <ph_add_child_node+0xb4>)
10001776:	4815      	ldr	r0, [pc, #84]	; (100017cc <ph_add_child_node+0xb8>)
10001778:	2171      	movs	r1, #113	; 0x71
1000177a:	f003 fd15 	bl	100051a8 <__assert_func>
    pheap_node_t *c = ph_get_node(heap, child_id);
1000177e:	1cbb      	adds	r3, r7, #2
10001780:	781a      	ldrb	r2, [r3, #0]
10001782:	687b      	ldr	r3, [r7, #4]
10001784:	0011      	movs	r1, r2
10001786:	0018      	movs	r0, r3
10001788:	f7ff ff9a 	bl	100016c0 <ph_get_node>
1000178c:	0003      	movs	r3, r0
1000178e:	60bb      	str	r3, [r7, #8]
    c->parent = parent_id;
10001790:	68bb      	ldr	r3, [r7, #8]
10001792:	1cfa      	adds	r2, r7, #3
10001794:	7812      	ldrb	r2, [r2, #0]
10001796:	709a      	strb	r2, [r3, #2]
    if (!n->child) {
10001798:	68fb      	ldr	r3, [r7, #12]
1000179a:	781b      	ldrb	r3, [r3, #0]
1000179c:	2b00      	cmp	r3, #0
1000179e:	d104      	bne.n	100017aa <ph_add_child_node+0x96>
        n->child = child_id;
100017a0:	68fb      	ldr	r3, [r7, #12]
100017a2:	1cba      	adds	r2, r7, #2
100017a4:	7812      	ldrb	r2, [r2, #0]
100017a6:	701a      	strb	r2, [r3, #0]
}
100017a8:	e007      	b.n	100017ba <ph_add_child_node+0xa6>
        c->sibling = n->child;
100017aa:	68fb      	ldr	r3, [r7, #12]
100017ac:	781a      	ldrb	r2, [r3, #0]
100017ae:	68bb      	ldr	r3, [r7, #8]
100017b0:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100017b2:	68fb      	ldr	r3, [r7, #12]
100017b4:	1cba      	adds	r2, r7, #2
100017b6:	7812      	ldrb	r2, [r2, #0]
100017b8:	701a      	strb	r2, [r3, #0]
}
100017ba:	46c0      	nop			; (mov r8, r8)
100017bc:	46bd      	mov	sp, r7
100017be:	b004      	add	sp, #16
100017c0:	bd80      	pop	{r7, pc}
100017c2:	46c0      	nop			; (mov r8, r8)
100017c4:	1000724c 	.word	0x1000724c
100017c8:	10007370 	.word	0x10007370
100017cc:	100071f4 	.word	0x100071f4
100017d0:	10007258 	.word	0x10007258
100017d4:	10007264 	.word	0x10007264

100017d8 <ph_merge_nodes>:
static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
100017d8:	b590      	push	{r4, r7, lr}
100017da:	b083      	sub	sp, #12
100017dc:	af00      	add	r7, sp, #0
100017de:	6078      	str	r0, [r7, #4]
100017e0:	0008      	movs	r0, r1
100017e2:	0011      	movs	r1, r2
100017e4:	1cfb      	adds	r3, r7, #3
100017e6:	1c02      	adds	r2, r0, #0
100017e8:	701a      	strb	r2, [r3, #0]
100017ea:	1cbb      	adds	r3, r7, #2
100017ec:	1c0a      	adds	r2, r1, #0
100017ee:	701a      	strb	r2, [r3, #0]
    if (!a) return b;
100017f0:	1cfb      	adds	r3, r7, #3
100017f2:	781b      	ldrb	r3, [r3, #0]
100017f4:	2b00      	cmp	r3, #0
100017f6:	d102      	bne.n	100017fe <ph_merge_nodes+0x26>
100017f8:	1cbb      	adds	r3, r7, #2
100017fa:	781b      	ldrb	r3, [r3, #0]
100017fc:	e027      	b.n	1000184e <ph_merge_nodes+0x76>
    if (!b) return a;
100017fe:	1cbb      	adds	r3, r7, #2
10001800:	781b      	ldrb	r3, [r3, #0]
10001802:	2b00      	cmp	r3, #0
10001804:	d102      	bne.n	1000180c <ph_merge_nodes+0x34>
10001806:	1cfb      	adds	r3, r7, #3
10001808:	781b      	ldrb	r3, [r3, #0]
1000180a:	e020      	b.n	1000184e <ph_merge_nodes+0x76>
    if (heap->comparator(heap->user_data, a, b)) {
1000180c:	687b      	ldr	r3, [r7, #4]
1000180e:	685c      	ldr	r4, [r3, #4]
10001810:	687b      	ldr	r3, [r7, #4]
10001812:	6898      	ldr	r0, [r3, #8]
10001814:	1cbb      	adds	r3, r7, #2
10001816:	781a      	ldrb	r2, [r3, #0]
10001818:	1cfb      	adds	r3, r7, #3
1000181a:	781b      	ldrb	r3, [r3, #0]
1000181c:	0019      	movs	r1, r3
1000181e:	47a0      	blx	r4
10001820:	1e03      	subs	r3, r0, #0
10001822:	d00a      	beq.n	1000183a <ph_merge_nodes+0x62>
        ph_add_child_node(heap, a, b);
10001824:	1cbb      	adds	r3, r7, #2
10001826:	781a      	ldrb	r2, [r3, #0]
10001828:	1cfb      	adds	r3, r7, #3
1000182a:	7819      	ldrb	r1, [r3, #0]
1000182c:	687b      	ldr	r3, [r7, #4]
1000182e:	0018      	movs	r0, r3
10001830:	f7ff ff70 	bl	10001714 <ph_add_child_node>
        return a;
10001834:	1cfb      	adds	r3, r7, #3
10001836:	781b      	ldrb	r3, [r3, #0]
10001838:	e009      	b.n	1000184e <ph_merge_nodes+0x76>
        ph_add_child_node(heap, b, a);
1000183a:	1cfb      	adds	r3, r7, #3
1000183c:	781a      	ldrb	r2, [r3, #0]
1000183e:	1cbb      	adds	r3, r7, #2
10001840:	7819      	ldrb	r1, [r3, #0]
10001842:	687b      	ldr	r3, [r7, #4]
10001844:	0018      	movs	r0, r3
10001846:	f7ff ff65 	bl	10001714 <ph_add_child_node>
        return b;
1000184a:	1cbb      	adds	r3, r7, #2
1000184c:	781b      	ldrb	r3, [r3, #0]
}
1000184e:	0018      	movs	r0, r3
10001850:	46bd      	mov	sp, r7
10001852:	b003      	add	sp, #12
10001854:	bd90      	pop	{r4, r7, pc}

10001856 <ph_peek_head>:
static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
10001856:	b580      	push	{r7, lr}
10001858:	b082      	sub	sp, #8
1000185a:	af00      	add	r7, sp, #0
1000185c:	6078      	str	r0, [r7, #4]
    return heap->root_id;
1000185e:	687b      	ldr	r3, [r7, #4]
10001860:	7b5b      	ldrb	r3, [r3, #13]
}
10001862:	0018      	movs	r0, r3
10001864:	46bd      	mov	sp, r7
10001866:	b002      	add	sp, #8
10001868:	bd80      	pop	{r7, pc}

1000186a <ph_remove_and_free_head>:
static inline pheap_node_id_t ph_remove_and_free_head(pheap_t *heap) {
1000186a:	b580      	push	{r7, lr}
1000186c:	b082      	sub	sp, #8
1000186e:	af00      	add	r7, sp, #0
10001870:	6078      	str	r0, [r7, #4]
    return ph_remove_head(heap, true);
10001872:	687b      	ldr	r3, [r7, #4]
10001874:	2101      	movs	r1, #1
10001876:	0018      	movs	r0, r3
10001878:	f000 f94e 	bl	10001b18 <ph_remove_head>
1000187c:	0003      	movs	r3, r0
}
1000187e:	0018      	movs	r0, r3
10001880:	46bd      	mov	sp, r7
10001882:	b002      	add	sp, #8
10001884:	bd80      	pop	{r7, pc}

10001886 <ph_post_alloc_init>:
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
    ph_post_alloc_init(heap, max_nodes, comparator, user_data);
    return heap;
}

void ph_post_alloc_init(pheap_t *heap, uint max_nodes, pheap_comparator comparator, void *user_data) {
10001886:	b580      	push	{r7, lr}
10001888:	b084      	sub	sp, #16
1000188a:	af00      	add	r7, sp, #0
1000188c:	60f8      	str	r0, [r7, #12]
1000188e:	60b9      	str	r1, [r7, #8]
10001890:	607a      	str	r2, [r7, #4]
10001892:	603b      	str	r3, [r7, #0]
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << (8 * sizeof(pheap_node_id_t))));
    heap->max_nodes = (pheap_node_id_t) max_nodes;
10001894:	68bb      	ldr	r3, [r7, #8]
10001896:	b2da      	uxtb	r2, r3
10001898:	68fb      	ldr	r3, [r7, #12]
1000189a:	731a      	strb	r2, [r3, #12]
    heap->comparator = comparator;
1000189c:	68fb      	ldr	r3, [r7, #12]
1000189e:	687a      	ldr	r2, [r7, #4]
100018a0:	605a      	str	r2, [r3, #4]
    heap->user_data = user_data;
100018a2:	68fb      	ldr	r3, [r7, #12]
100018a4:	683a      	ldr	r2, [r7, #0]
100018a6:	609a      	str	r2, [r3, #8]
    ph_clear(heap);
100018a8:	68fb      	ldr	r3, [r7, #12]
100018aa:	0018      	movs	r0, r3
100018ac:	f000 f804 	bl	100018b8 <ph_clear>
}
100018b0:	46c0      	nop			; (mov r8, r8)
100018b2:	46bd      	mov	sp, r7
100018b4:	b004      	add	sp, #16
100018b6:	bd80      	pop	{r7, pc}

100018b8 <ph_clear>:

void ph_clear(pheap_t *heap) {
100018b8:	b590      	push	{r4, r7, lr}
100018ba:	b085      	sub	sp, #20
100018bc:	af00      	add	r7, sp, #0
100018be:	6078      	str	r0, [r7, #4]
    heap->root_id = 0;
100018c0:	687b      	ldr	r3, [r7, #4]
100018c2:	2200      	movs	r2, #0
100018c4:	735a      	strb	r2, [r3, #13]
    heap->free_head_id = 1;
100018c6:	687b      	ldr	r3, [r7, #4]
100018c8:	2201      	movs	r2, #1
100018ca:	739a      	strb	r2, [r3, #14]
    heap->free_tail_id = heap->max_nodes;
100018cc:	687b      	ldr	r3, [r7, #4]
100018ce:	7b1a      	ldrb	r2, [r3, #12]
100018d0:	687b      	ldr	r3, [r7, #4]
100018d2:	73da      	strb	r2, [r3, #15]
    for(pheap_node_id_t i = 1; i < heap->max_nodes; i++) {
100018d4:	230f      	movs	r3, #15
100018d6:	18fb      	adds	r3, r7, r3
100018d8:	2201      	movs	r2, #1
100018da:	701a      	strb	r2, [r3, #0]
100018dc:	e013      	b.n	10001906 <ph_clear+0x4e>
        ph_get_node(heap, i)->sibling = (pheap_node_id_t)(i + 1);
100018de:	240f      	movs	r4, #15
100018e0:	193b      	adds	r3, r7, r4
100018e2:	781a      	ldrb	r2, [r3, #0]
100018e4:	687b      	ldr	r3, [r7, #4]
100018e6:	0011      	movs	r1, r2
100018e8:	0018      	movs	r0, r3
100018ea:	f7ff fee9 	bl	100016c0 <ph_get_node>
100018ee:	0002      	movs	r2, r0
100018f0:	0021      	movs	r1, r4
100018f2:	187b      	adds	r3, r7, r1
100018f4:	781b      	ldrb	r3, [r3, #0]
100018f6:	3301      	adds	r3, #1
100018f8:	b2db      	uxtb	r3, r3
100018fa:	7053      	strb	r3, [r2, #1]
    for(pheap_node_id_t i = 1; i < heap->max_nodes; i++) {
100018fc:	187b      	adds	r3, r7, r1
100018fe:	781a      	ldrb	r2, [r3, #0]
10001900:	187b      	adds	r3, r7, r1
10001902:	3201      	adds	r2, #1
10001904:	701a      	strb	r2, [r3, #0]
10001906:	687b      	ldr	r3, [r7, #4]
10001908:	7b1b      	ldrb	r3, [r3, #12]
1000190a:	220f      	movs	r2, #15
1000190c:	18ba      	adds	r2, r7, r2
1000190e:	7812      	ldrb	r2, [r2, #0]
10001910:	429a      	cmp	r2, r3
10001912:	d3e4      	bcc.n	100018de <ph_clear+0x26>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001914:	687b      	ldr	r3, [r7, #4]
10001916:	7b1a      	ldrb	r2, [r3, #12]
10001918:	687b      	ldr	r3, [r7, #4]
1000191a:	0011      	movs	r1, r2
1000191c:	0018      	movs	r0, r3
1000191e:	f7ff fecf 	bl	100016c0 <ph_get_node>
10001922:	0003      	movs	r3, r0
10001924:	2200      	movs	r2, #0
10001926:	705a      	strb	r2, [r3, #1]
}
10001928:	46c0      	nop			; (mov r8, r8)
1000192a:	46bd      	mov	sp, r7
1000192c:	b005      	add	sp, #20
1000192e:	bd90      	pop	{r4, r7, pc}

10001930 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001930:	b5f0      	push	{r4, r5, r6, r7, lr}
10001932:	b085      	sub	sp, #20
10001934:	af00      	add	r7, sp, #0
10001936:	6078      	str	r0, [r7, #4]
10001938:	000a      	movs	r2, r1
1000193a:	1cfb      	adds	r3, r7, #3
1000193c:	701a      	strb	r2, [r3, #0]
    if (!id || !ph_get_node(heap, id)->sibling) {
1000193e:	1cfb      	adds	r3, r7, #3
10001940:	781b      	ldrb	r3, [r3, #0]
10001942:	2b00      	cmp	r3, #0
10001944:	d00a      	beq.n	1000195c <ph_merge_two_pass+0x2c>
10001946:	1cfb      	adds	r3, r7, #3
10001948:	781a      	ldrb	r2, [r3, #0]
1000194a:	687b      	ldr	r3, [r7, #4]
1000194c:	0011      	movs	r1, r2
1000194e:	0018      	movs	r0, r3
10001950:	f7ff feb6 	bl	100016c0 <ph_get_node>
10001954:	0003      	movs	r3, r0
10001956:	785b      	ldrb	r3, [r3, #1]
10001958:	2b00      	cmp	r3, #0
1000195a:	d102      	bne.n	10001962 <ph_merge_two_pass+0x32>
        return id;
1000195c:	1cfb      	adds	r3, r7, #3
1000195e:	781b      	ldrb	r3, [r3, #0]
10001960:	e04a      	b.n	100019f8 <ph_merge_two_pass+0xc8>
    } else {
        pheap_node_id_t a, b, new_node;
        a = id;
10001962:	260f      	movs	r6, #15
10001964:	19bb      	adds	r3, r7, r6
10001966:	1cfa      	adds	r2, r7, #3
10001968:	7812      	ldrb	r2, [r2, #0]
1000196a:	701a      	strb	r2, [r3, #0]
        b = ph_get_node(heap, id)->sibling;
1000196c:	1cfb      	adds	r3, r7, #3
1000196e:	781a      	ldrb	r2, [r3, #0]
10001970:	687b      	ldr	r3, [r7, #4]
10001972:	0011      	movs	r1, r2
10001974:	0018      	movs	r0, r3
10001976:	f7ff fea3 	bl	100016c0 <ph_get_node>
1000197a:	0002      	movs	r2, r0
1000197c:	250e      	movs	r5, #14
1000197e:	197b      	adds	r3, r7, r5
10001980:	7852      	ldrb	r2, [r2, #1]
10001982:	701a      	strb	r2, [r3, #0]
        new_node = ph_get_node(heap, b)->sibling;
10001984:	197b      	adds	r3, r7, r5
10001986:	781a      	ldrb	r2, [r3, #0]
10001988:	687b      	ldr	r3, [r7, #4]
1000198a:	0011      	movs	r1, r2
1000198c:	0018      	movs	r0, r3
1000198e:	f7ff fe97 	bl	100016c0 <ph_get_node>
10001992:	0002      	movs	r2, r0
10001994:	230d      	movs	r3, #13
10001996:	18fb      	adds	r3, r7, r3
10001998:	7852      	ldrb	r2, [r2, #1]
1000199a:	701a      	strb	r2, [r3, #0]
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000199c:	197b      	adds	r3, r7, r5
1000199e:	781a      	ldrb	r2, [r3, #0]
100019a0:	687b      	ldr	r3, [r7, #4]
100019a2:	0011      	movs	r1, r2
100019a4:	0018      	movs	r0, r3
100019a6:	f7ff fe8b 	bl	100016c0 <ph_get_node>
100019aa:	0004      	movs	r4, r0
100019ac:	2300      	movs	r3, #0
100019ae:	7063      	strb	r3, [r4, #1]
100019b0:	19bb      	adds	r3, r7, r6
100019b2:	781a      	ldrb	r2, [r3, #0]
100019b4:	687b      	ldr	r3, [r7, #4]
100019b6:	0011      	movs	r1, r2
100019b8:	0018      	movs	r0, r3
100019ba:	f7ff fe81 	bl	100016c0 <ph_get_node>
100019be:	0003      	movs	r3, r0
100019c0:	7862      	ldrb	r2, [r4, #1]
100019c2:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100019c4:	197b      	adds	r3, r7, r5
100019c6:	781a      	ldrb	r2, [r3, #0]
100019c8:	19bb      	adds	r3, r7, r6
100019ca:	7819      	ldrb	r1, [r3, #0]
100019cc:	687b      	ldr	r3, [r7, #4]
100019ce:	0018      	movs	r0, r3
100019d0:	f7ff ff02 	bl	100017d8 <ph_merge_nodes>
100019d4:	0003      	movs	r3, r0
100019d6:	001c      	movs	r4, r3
100019d8:	230d      	movs	r3, #13
100019da:	18fb      	adds	r3, r7, r3
100019dc:	781a      	ldrb	r2, [r3, #0]
100019de:	687b      	ldr	r3, [r7, #4]
100019e0:	0011      	movs	r1, r2
100019e2:	0018      	movs	r0, r3
100019e4:	f7ff ffa4 	bl	10001930 <ph_merge_two_pass>
100019e8:	0003      	movs	r3, r0
100019ea:	001a      	movs	r2, r3
100019ec:	687b      	ldr	r3, [r7, #4]
100019ee:	0021      	movs	r1, r4
100019f0:	0018      	movs	r0, r3
100019f2:	f7ff fef1 	bl	100017d8 <ph_merge_nodes>
100019f6:	0003      	movs	r3, r0
    }
}
100019f8:	0018      	movs	r0, r3
100019fa:	46bd      	mov	sp, r7
100019fc:	b005      	add	sp, #20
100019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001a00 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool free) {
10001a00:	b590      	push	{r4, r7, lr}
10001a02:	b085      	sub	sp, #20
10001a04:	af00      	add	r7, sp, #0
10001a06:	6078      	str	r0, [r7, #4]
10001a08:	0008      	movs	r0, r1
10001a0a:	0011      	movs	r1, r2
10001a0c:	1cfb      	adds	r3, r7, #3
10001a0e:	1c02      	adds	r2, r0, #0
10001a10:	701a      	strb	r2, [r3, #0]
10001a12:	1cbb      	adds	r3, r7, #2
10001a14:	1c0a      	adds	r2, r1, #0
10001a16:	701a      	strb	r2, [r3, #0]
    assert(root_id);
10001a18:	1cfb      	adds	r3, r7, #3
10001a1a:	781b      	ldrb	r3, [r3, #0]
10001a1c:	2b00      	cmp	r3, #0
10001a1e:	d105      	bne.n	10001a2c <ph_remove_any_head+0x2c>
10001a20:	4b38      	ldr	r3, [pc, #224]	; (10001b04 <ph_remove_any_head+0x104>)
10001a22:	4a39      	ldr	r2, [pc, #228]	; (10001b08 <ph_remove_any_head+0x108>)
10001a24:	4839      	ldr	r0, [pc, #228]	; (10001b0c <ph_remove_any_head+0x10c>)
10001a26:	2138      	movs	r1, #56	; 0x38
10001a28:	f003 fbbe 	bl	100051a8 <__assert_func>
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
10001a2c:	1cfb      	adds	r3, r7, #3
10001a2e:	781a      	ldrb	r2, [r3, #0]
10001a30:	687b      	ldr	r3, [r7, #4]
10001a32:	0011      	movs	r1, r2
10001a34:	0018      	movs	r0, r3
10001a36:	f7ff fe43 	bl	100016c0 <ph_get_node>
10001a3a:	0003      	movs	r3, r0
10001a3c:	785b      	ldrb	r3, [r3, #1]
10001a3e:	2b00      	cmp	r3, #0
10001a40:	d005      	beq.n	10001a4e <ph_remove_any_head+0x4e>
10001a42:	4b33      	ldr	r3, [pc, #204]	; (10001b10 <ph_remove_any_head+0x110>)
10001a44:	4a30      	ldr	r2, [pc, #192]	; (10001b08 <ph_remove_any_head+0x108>)
10001a46:	4831      	ldr	r0, [pc, #196]	; (10001b0c <ph_remove_any_head+0x10c>)
10001a48:	213a      	movs	r1, #58	; 0x3a
10001a4a:	f003 fbad 	bl	100051a8 <__assert_func>
    assert(!ph_get_node(heap, root_id)->parent);
10001a4e:	1cfb      	adds	r3, r7, #3
10001a50:	781a      	ldrb	r2, [r3, #0]
10001a52:	687b      	ldr	r3, [r7, #4]
10001a54:	0011      	movs	r1, r2
10001a56:	0018      	movs	r0, r3
10001a58:	f7ff fe32 	bl	100016c0 <ph_get_node>
10001a5c:	0003      	movs	r3, r0
10001a5e:	789b      	ldrb	r3, [r3, #2]
10001a60:	2b00      	cmp	r3, #0
10001a62:	d005      	beq.n	10001a70 <ph_remove_any_head+0x70>
10001a64:	4b2b      	ldr	r3, [pc, #172]	; (10001b14 <ph_remove_any_head+0x114>)
10001a66:	4a28      	ldr	r2, [pc, #160]	; (10001b08 <ph_remove_any_head+0x108>)
10001a68:	4828      	ldr	r0, [pc, #160]	; (10001b0c <ph_remove_any_head+0x10c>)
10001a6a:	213b      	movs	r1, #59	; 0x3b
10001a6c:	f003 fb9c 	bl	100051a8 <__assert_func>
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001a70:	1cfb      	adds	r3, r7, #3
10001a72:	781a      	ldrb	r2, [r3, #0]
10001a74:	687b      	ldr	r3, [r7, #4]
10001a76:	0011      	movs	r1, r2
10001a78:	0018      	movs	r0, r3
10001a7a:	f7ff fe21 	bl	100016c0 <ph_get_node>
10001a7e:	0003      	movs	r3, r0
10001a80:	781a      	ldrb	r2, [r3, #0]
10001a82:	230f      	movs	r3, #15
10001a84:	18fc      	adds	r4, r7, r3
10001a86:	687b      	ldr	r3, [r7, #4]
10001a88:	0011      	movs	r1, r2
10001a8a:	0018      	movs	r0, r3
10001a8c:	f7ff ff50 	bl	10001930 <ph_merge_two_pass>
10001a90:	0003      	movs	r3, r0
10001a92:	7023      	strb	r3, [r4, #0]
    if (free) {
10001a94:	1cbb      	adds	r3, r7, #2
10001a96:	781b      	ldrb	r3, [r3, #0]
10001a98:	2b00      	cmp	r3, #0
10001a9a:	d012      	beq.n	10001ac2 <ph_remove_any_head+0xc2>
        if (heap->free_tail_id) {
10001a9c:	687b      	ldr	r3, [r7, #4]
10001a9e:	7bdb      	ldrb	r3, [r3, #15]
10001aa0:	2b00      	cmp	r3, #0
10001aa2:	d00a      	beq.n	10001aba <ph_remove_any_head+0xba>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001aa4:	687b      	ldr	r3, [r7, #4]
10001aa6:	7bda      	ldrb	r2, [r3, #15]
10001aa8:	687b      	ldr	r3, [r7, #4]
10001aaa:	0011      	movs	r1, r2
10001aac:	0018      	movs	r0, r3
10001aae:	f7ff fe07 	bl	100016c0 <ph_get_node>
10001ab2:	0002      	movs	r2, r0
10001ab4:	1cfb      	adds	r3, r7, #3
10001ab6:	781b      	ldrb	r3, [r3, #0]
10001ab8:	7053      	strb	r3, [r2, #1]
        }
        heap->free_tail_id = root_id;
10001aba:	687b      	ldr	r3, [r7, #4]
10001abc:	1cfa      	adds	r2, r7, #3
10001abe:	7812      	ldrb	r2, [r2, #0]
10001ac0:	73da      	strb	r2, [r3, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001ac2:	220f      	movs	r2, #15
10001ac4:	18bb      	adds	r3, r7, r2
10001ac6:	781b      	ldrb	r3, [r3, #0]
10001ac8:	2b00      	cmp	r3, #0
10001aca:	d009      	beq.n	10001ae0 <ph_remove_any_head+0xe0>
10001acc:	18bb      	adds	r3, r7, r2
10001ace:	781a      	ldrb	r2, [r3, #0]
10001ad0:	687b      	ldr	r3, [r7, #4]
10001ad2:	0011      	movs	r1, r2
10001ad4:	0018      	movs	r0, r3
10001ad6:	f7ff fdf3 	bl	100016c0 <ph_get_node>
10001ada:	0003      	movs	r3, r0
10001adc:	2200      	movs	r2, #0
10001ade:	709a      	strb	r2, [r3, #2]
    ph_get_node(heap, root_id)->sibling = 0;
10001ae0:	1cfb      	adds	r3, r7, #3
10001ae2:	781a      	ldrb	r2, [r3, #0]
10001ae4:	687b      	ldr	r3, [r7, #4]
10001ae6:	0011      	movs	r1, r2
10001ae8:	0018      	movs	r0, r3
10001aea:	f7ff fde9 	bl	100016c0 <ph_get_node>
10001aee:	0003      	movs	r3, r0
10001af0:	2200      	movs	r2, #0
10001af2:	705a      	strb	r2, [r3, #1]
    return new_root_id;
10001af4:	230f      	movs	r3, #15
10001af6:	18fb      	adds	r3, r7, r3
10001af8:	781b      	ldrb	r3, [r3, #0]
}
10001afa:	0018      	movs	r0, r3
10001afc:	46bd      	mov	sp, r7
10001afe:	b005      	add	sp, #20
10001b00:	bd90      	pop	{r4, r7, pc}
10001b02:	46c0      	nop			; (mov r8, r8)
10001b04:	1000727c 	.word	0x1000727c
10001b08:	10007390 	.word	0x10007390
10001b0c:	10007284 	.word	0x10007284
10001b10:	100072d4 	.word	0x100072d4
10001b14:	100072fc 	.word	0x100072fc

10001b18 <ph_remove_head>:

pheap_node_id_t ph_remove_head(pheap_t *heap, bool free) {
10001b18:	b5b0      	push	{r4, r5, r7, lr}
10001b1a:	b084      	sub	sp, #16
10001b1c:	af00      	add	r7, sp, #0
10001b1e:	6078      	str	r0, [r7, #4]
10001b20:	000a      	movs	r2, r1
10001b22:	1cfb      	adds	r3, r7, #3
10001b24:	701a      	strb	r2, [r3, #0]
    pheap_node_id_t old_root_id = ph_peek_head(heap);
10001b26:	250f      	movs	r5, #15
10001b28:	197c      	adds	r4, r7, r5
10001b2a:	687b      	ldr	r3, [r7, #4]
10001b2c:	0018      	movs	r0, r3
10001b2e:	f7ff fe92 	bl	10001856 <ph_peek_head>
10001b32:	0003      	movs	r3, r0
10001b34:	7023      	strb	r3, [r4, #0]
    heap->root_id = ph_remove_any_head(heap, old_root_id, free);
10001b36:	1cfb      	adds	r3, r7, #3
10001b38:	781a      	ldrb	r2, [r3, #0]
10001b3a:	002c      	movs	r4, r5
10001b3c:	193b      	adds	r3, r7, r4
10001b3e:	7819      	ldrb	r1, [r3, #0]
10001b40:	687b      	ldr	r3, [r7, #4]
10001b42:	0018      	movs	r0, r3
10001b44:	f7ff ff5c 	bl	10001a00 <ph_remove_any_head>
10001b48:	0003      	movs	r3, r0
10001b4a:	001a      	movs	r2, r3
10001b4c:	687b      	ldr	r3, [r7, #4]
10001b4e:	735a      	strb	r2, [r3, #13]
    return old_root_id;
10001b50:	193b      	adds	r3, r7, r4
10001b52:	781b      	ldrb	r3, [r3, #0]
}
10001b54:	0018      	movs	r0, r3
10001b56:	46bd      	mov	sp, r7
10001b58:	b004      	add	sp, #16
10001b5a:	bdb0      	pop	{r4, r5, r7, pc}

10001b5c <ph_remove_and_free_node>:

bool ph_remove_and_free_node(pheap_t *heap, pheap_node_id_t id) {
10001b5c:	b5b0      	push	{r4, r5, r7, lr}
10001b5e:	b088      	sub	sp, #32
10001b60:	af00      	add	r7, sp, #0
10001b62:	6078      	str	r0, [r7, #4]
10001b64:	000a      	movs	r2, r1
10001b66:	1cfb      	adds	r3, r7, #3
10001b68:	701a      	strb	r2, [r3, #0]
    // 1) trivial cases
    if (!id) return false;
10001b6a:	1cfb      	adds	r3, r7, #3
10001b6c:	781b      	ldrb	r3, [r3, #0]
10001b6e:	2b00      	cmp	r3, #0
10001b70:	d101      	bne.n	10001b76 <ph_remove_and_free_node+0x1a>
10001b72:	2300      	movs	r3, #0
10001b74:	e090      	b.n	10001c98 <ph_remove_and_free_node+0x13c>
    if (id == heap->root_id) {
10001b76:	687b      	ldr	r3, [r7, #4]
10001b78:	7b5b      	ldrb	r3, [r3, #13]
10001b7a:	1cfa      	adds	r2, r7, #3
10001b7c:	7812      	ldrb	r2, [r2, #0]
10001b7e:	429a      	cmp	r2, r3
10001b80:	d105      	bne.n	10001b8e <ph_remove_and_free_node+0x32>
        ph_remove_and_free_head(heap);
10001b82:	687b      	ldr	r3, [r7, #4]
10001b84:	0018      	movs	r0, r3
10001b86:	f7ff fe70 	bl	1000186a <ph_remove_and_free_head>
        return true;
10001b8a:	2301      	movs	r3, #1
10001b8c:	e084      	b.n	10001c98 <ph_remove_and_free_node+0x13c>
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
10001b8e:	1cfb      	adds	r3, r7, #3
10001b90:	781a      	ldrb	r2, [r3, #0]
10001b92:	687b      	ldr	r3, [r7, #4]
10001b94:	0011      	movs	r1, r2
10001b96:	0018      	movs	r0, r3
10001b98:	f7ff fd92 	bl	100016c0 <ph_get_node>
10001b9c:	0003      	movs	r3, r0
10001b9e:	61bb      	str	r3, [r7, #24]
    if (!node->parent) return false; // not in tree
10001ba0:	69bb      	ldr	r3, [r7, #24]
10001ba2:	789b      	ldrb	r3, [r3, #2]
10001ba4:	2b00      	cmp	r3, #0
10001ba6:	d101      	bne.n	10001bac <ph_remove_and_free_node+0x50>
10001ba8:	2300      	movs	r3, #0
10001baa:	e075      	b.n	10001c98 <ph_remove_and_free_node+0x13c>
    pheap_node_t *parent = ph_get_node(heap, node->parent);
10001bac:	69bb      	ldr	r3, [r7, #24]
10001bae:	789a      	ldrb	r2, [r3, #2]
10001bb0:	687b      	ldr	r3, [r7, #4]
10001bb2:	0011      	movs	r1, r2
10001bb4:	0018      	movs	r0, r3
10001bb6:	f7ff fd83 	bl	100016c0 <ph_get_node>
10001bba:	0003      	movs	r3, r0
10001bbc:	617b      	str	r3, [r7, #20]
    if (parent->child == id) {
10001bbe:	697b      	ldr	r3, [r7, #20]
10001bc0:	781b      	ldrb	r3, [r3, #0]
10001bc2:	1cfa      	adds	r2, r7, #3
10001bc4:	7812      	ldrb	r2, [r2, #0]
10001bc6:	429a      	cmp	r2, r3
10001bc8:	d104      	bne.n	10001bd4 <ph_remove_and_free_node+0x78>
        parent->child = node->sibling;
10001bca:	69bb      	ldr	r3, [r7, #24]
10001bcc:	785a      	ldrb	r2, [r3, #1]
10001bce:	697b      	ldr	r3, [r7, #20]
10001bd0:	701a      	strb	r2, [r3, #0]
10001bd2:	e035      	b.n	10001c40 <ph_remove_and_free_node+0xe4>
    } else {
        pheap_node_id_t prev_sibling_id = parent->child;
10001bd4:	231f      	movs	r3, #31
10001bd6:	18fb      	adds	r3, r7, r3
10001bd8:	697a      	ldr	r2, [r7, #20]
10001bda:	7812      	ldrb	r2, [r2, #0]
10001bdc:	701a      	strb	r2, [r3, #0]
        bool __unused found = false;
10001bde:	231e      	movs	r3, #30
10001be0:	18fb      	adds	r3, r7, r3
10001be2:	2200      	movs	r2, #0
10001be4:	701a      	strb	r2, [r3, #0]
        do {
            pheap_node_t *prev_sibling = ph_get_node(heap, prev_sibling_id);
10001be6:	231f      	movs	r3, #31
10001be8:	18fb      	adds	r3, r7, r3
10001bea:	781a      	ldrb	r2, [r3, #0]
10001bec:	687b      	ldr	r3, [r7, #4]
10001bee:	0011      	movs	r1, r2
10001bf0:	0018      	movs	r0, r3
10001bf2:	f7ff fd65 	bl	100016c0 <ph_get_node>
10001bf6:	0003      	movs	r3, r0
10001bf8:	613b      	str	r3, [r7, #16]
            if (prev_sibling->sibling == id) {
10001bfa:	693b      	ldr	r3, [r7, #16]
10001bfc:	785b      	ldrb	r3, [r3, #1]
10001bfe:	1cfa      	adds	r2, r7, #3
10001c00:	7812      	ldrb	r2, [r2, #0]
10001c02:	429a      	cmp	r2, r3
10001c04:	d108      	bne.n	10001c18 <ph_remove_and_free_node+0xbc>
                prev_sibling->sibling = node->sibling;
10001c06:	69bb      	ldr	r3, [r7, #24]
10001c08:	785a      	ldrb	r2, [r3, #1]
10001c0a:	693b      	ldr	r3, [r7, #16]
10001c0c:	705a      	strb	r2, [r3, #1]
                found = true;
10001c0e:	231e      	movs	r3, #30
10001c10:	18fb      	adds	r3, r7, r3
10001c12:	2201      	movs	r2, #1
10001c14:	701a      	strb	r2, [r3, #0]
                break;
10001c16:	e008      	b.n	10001c2a <ph_remove_and_free_node+0xce>
            }
            prev_sibling_id = prev_sibling->sibling;
10001c18:	211f      	movs	r1, #31
10001c1a:	187b      	adds	r3, r7, r1
10001c1c:	693a      	ldr	r2, [r7, #16]
10001c1e:	7852      	ldrb	r2, [r2, #1]
10001c20:	701a      	strb	r2, [r3, #0]
        } while (prev_sibling_id);
10001c22:	187b      	adds	r3, r7, r1
10001c24:	781b      	ldrb	r3, [r3, #0]
10001c26:	2b00      	cmp	r3, #0
10001c28:	d1dd      	bne.n	10001be6 <ph_remove_and_free_node+0x8a>
        assert(found);
10001c2a:	231e      	movs	r3, #30
10001c2c:	18fb      	adds	r3, r7, r3
10001c2e:	781b      	ldrb	r3, [r3, #0]
10001c30:	2b00      	cmp	r3, #0
10001c32:	d105      	bne.n	10001c40 <ph_remove_and_free_node+0xe4>
10001c34:	4b1a      	ldr	r3, [pc, #104]	; (10001ca0 <ph_remove_and_free_node+0x144>)
10001c36:	4a1b      	ldr	r2, [pc, #108]	; (10001ca4 <ph_remove_and_free_node+0x148>)
10001c38:	481b      	ldr	r0, [pc, #108]	; (10001ca8 <ph_remove_and_free_node+0x14c>)
10001c3a:	2167      	movs	r1, #103	; 0x67
10001c3c:	f003 fab4 	bl	100051a8 <__assert_func>
    }
    node->sibling = node->parent = 0;
10001c40:	69bb      	ldr	r3, [r7, #24]
10001c42:	2200      	movs	r2, #0
10001c44:	709a      	strb	r2, [r3, #2]
10001c46:	69bb      	ldr	r3, [r7, #24]
10001c48:	789a      	ldrb	r2, [r3, #2]
10001c4a:	69bb      	ldr	r3, [r7, #24]
10001c4c:	705a      	strb	r2, [r3, #1]
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, true);
10001c4e:	250f      	movs	r5, #15
10001c50:	197c      	adds	r4, r7, r5
10001c52:	1cfb      	adds	r3, r7, #3
10001c54:	7819      	ldrb	r1, [r3, #0]
10001c56:	687b      	ldr	r3, [r7, #4]
10001c58:	2201      	movs	r2, #1
10001c5a:	0018      	movs	r0, r3
10001c5c:	f7ff fed0 	bl	10001a00 <ph_remove_any_head>
10001c60:	0003      	movs	r3, r0
10001c62:	7023      	strb	r3, [r4, #0]
    assert(new_sub_tree != heap->root_id);
10001c64:	687b      	ldr	r3, [r7, #4]
10001c66:	7b5b      	ldrb	r3, [r3, #13]
10001c68:	197a      	adds	r2, r7, r5
10001c6a:	7812      	ldrb	r2, [r2, #0]
10001c6c:	429a      	cmp	r2, r3
10001c6e:	d105      	bne.n	10001c7c <ph_remove_and_free_node+0x120>
10001c70:	4b0e      	ldr	r3, [pc, #56]	; (10001cac <ph_remove_and_free_node+0x150>)
10001c72:	4a0c      	ldr	r2, [pc, #48]	; (10001ca4 <ph_remove_and_free_node+0x148>)
10001c74:	480c      	ldr	r0, [pc, #48]	; (10001ca8 <ph_remove_and_free_node+0x14c>)
10001c76:	216d      	movs	r1, #109	; 0x6d
10001c78:	f003 fa96 	bl	100051a8 <__assert_func>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10001c7c:	687b      	ldr	r3, [r7, #4]
10001c7e:	7b59      	ldrb	r1, [r3, #13]
10001c80:	230f      	movs	r3, #15
10001c82:	18fb      	adds	r3, r7, r3
10001c84:	781a      	ldrb	r2, [r3, #0]
10001c86:	687b      	ldr	r3, [r7, #4]
10001c88:	0018      	movs	r0, r3
10001c8a:	f7ff fda5 	bl	100017d8 <ph_merge_nodes>
10001c8e:	0003      	movs	r3, r0
10001c90:	001a      	movs	r2, r3
10001c92:	687b      	ldr	r3, [r7, #4]
10001c94:	735a      	strb	r2, [r3, #13]
    return true;
10001c96:	2301      	movs	r3, #1
}
10001c98:	0018      	movs	r0, r3
10001c9a:	46bd      	mov	sp, r7
10001c9c:	b008      	add	sp, #32
10001c9e:	bdb0      	pop	{r4, r5, r7, pc}
10001ca0:	10007320 	.word	0x10007320
10001ca4:	100073a4 	.word	0x100073a4
10001ca8:	10007284 	.word	0x10007284
10001cac:	10007328 	.word	0x10007328

10001cb0 <hw_claim_lock>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
10001cb0:	b580      	push	{r7, lr}
10001cb2:	b086      	sub	sp, #24
10001cb4:	af00      	add	r7, sp, #0
10001cb6:	230b      	movs	r3, #11
10001cb8:	607b      	str	r3, [r7, #4]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001cba:	687b      	ldr	r3, [r7, #4]
10001cbc:	4a0f      	ldr	r2, [pc, #60]	; (10001cfc <hw_claim_lock+0x4c>)
10001cbe:	4694      	mov	ip, r2
10001cc0:	4463      	add	r3, ip
10001cc2:	009b      	lsls	r3, r3, #2
10001cc4:	617b      	str	r3, [r7, #20]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001cc6:	f3ef 8310 	mrs	r3, PRIMASK
10001cca:	613b      	str	r3, [r7, #16]
    __asm volatile ("cpsid i");
10001ccc:	b672      	cpsid	i
    return status;
10001cce:	693b      	ldr	r3, [r7, #16]
    uint32_t save = save_and_disable_interrupts();
10001cd0:	60fb      	str	r3, [r7, #12]
10001cd2:	697b      	ldr	r3, [r7, #20]
10001cd4:	60bb      	str	r3, [r7, #8]
    while (__builtin_expect(!*lock, 0));
10001cd6:	46c0      	nop			; (mov r8, r8)
10001cd8:	68bb      	ldr	r3, [r7, #8]
10001cda:	681b      	ldr	r3, [r3, #0]
10001cdc:	425a      	negs	r2, r3
10001cde:	4153      	adcs	r3, r2
10001ce0:	b2db      	uxtb	r3, r3
10001ce2:	2b00      	cmp	r3, #0
10001ce4:	d1f8      	bne.n	10001cd8 <hw_claim_lock+0x28>
    __asm volatile ("dmb" : : : "memory");
10001ce6:	f3bf 8f5f 	dmb	sy
}
10001cea:	46c0      	nop			; (mov r8, r8)
}
10001cec:	46c0      	nop			; (mov r8, r8)
}
10001cee:	46c0      	nop			; (mov r8, r8)
    return save;
10001cf0:	68fb      	ldr	r3, [r7, #12]
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
10001cf2:	0018      	movs	r0, r3
10001cf4:	46bd      	mov	sp, r7
10001cf6:	b006      	add	sp, #24
10001cf8:	bd80      	pop	{r7, pc}
10001cfa:	46c0      	nop			; (mov r8, r8)
10001cfc:	34000040 	.word	0x34000040

10001d00 <hw_claim_unlock>:

void hw_claim_unlock(uint32_t save) {
10001d00:	b580      	push	{r7, lr}
10001d02:	b088      	sub	sp, #32
10001d04:	af00      	add	r7, sp, #0
10001d06:	6078      	str	r0, [r7, #4]
10001d08:	230b      	movs	r3, #11
10001d0a:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001d0c:	68fb      	ldr	r3, [r7, #12]
10001d0e:	4a0e      	ldr	r2, [pc, #56]	; (10001d48 <hw_claim_unlock+0x48>)
10001d10:	4694      	mov	ip, r2
10001d12:	4463      	add	r3, ip
10001d14:	009b      	lsls	r3, r3, #2
10001d16:	61fb      	str	r3, [r7, #28]
10001d18:	687b      	ldr	r3, [r7, #4]
10001d1a:	61bb      	str	r3, [r7, #24]
10001d1c:	69fb      	ldr	r3, [r7, #28]
10001d1e:	617b      	str	r3, [r7, #20]
    __asm volatile ("dmb" : : : "memory");
10001d20:	f3bf 8f5f 	dmb	sy
}
10001d24:	46c0      	nop			; (mov r8, r8)
}
10001d26:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10001d28:	697b      	ldr	r3, [r7, #20]
10001d2a:	2200      	movs	r2, #0
10001d2c:	601a      	str	r2, [r3, #0]
}
10001d2e:	46c0      	nop			; (mov r8, r8)
10001d30:	69bb      	ldr	r3, [r7, #24]
10001d32:	613b      	str	r3, [r7, #16]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001d34:	693b      	ldr	r3, [r7, #16]
10001d36:	f383 8810 	msr	PRIMASK, r3
}
10001d3a:	46c0      	nop			; (mov r8, r8)
}
10001d3c:	46c0      	nop			; (mov r8, r8)
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10001d3e:	46c0      	nop			; (mov r8, r8)
10001d40:	46bd      	mov	sp, r7
10001d42:	b008      	add	sp, #32
10001d44:	bd80      	pop	{r7, pc}
10001d46:	46c0      	nop			; (mov r8, r8)
10001d48:	34000040 	.word	0x34000040

10001d4c <hw_is_claimed>:

inline bool hw_is_claimed(const uint8_t *bits, uint bit_index) {
10001d4c:	b580      	push	{r7, lr}
10001d4e:	b082      	sub	sp, #8
10001d50:	af00      	add	r7, sp, #0
10001d52:	6078      	str	r0, [r7, #4]
10001d54:	6039      	str	r1, [r7, #0]
    return (bits[bit_index >> 3u] & (1u << (bit_index & 7u)));
10001d56:	683b      	ldr	r3, [r7, #0]
10001d58:	08db      	lsrs	r3, r3, #3
10001d5a:	687a      	ldr	r2, [r7, #4]
10001d5c:	18d3      	adds	r3, r2, r3
10001d5e:	781b      	ldrb	r3, [r3, #0]
10001d60:	0019      	movs	r1, r3
10001d62:	683b      	ldr	r3, [r7, #0]
10001d64:	2207      	movs	r2, #7
10001d66:	4013      	ands	r3, r2
10001d68:	2201      	movs	r2, #1
10001d6a:	409a      	lsls	r2, r3
10001d6c:	0013      	movs	r3, r2
10001d6e:	400b      	ands	r3, r1
10001d70:	1e5a      	subs	r2, r3, #1
10001d72:	4193      	sbcs	r3, r2
10001d74:	b2db      	uxtb	r3, r3
}
10001d76:	0018      	movs	r0, r3
10001d78:	46bd      	mov	sp, r7
10001d7a:	b002      	add	sp, #8
10001d7c:	bd80      	pop	{r7, pc}

10001d7e <hw_claim_or_assert>:

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10001d7e:	b580      	push	{r7, lr}
10001d80:	b086      	sub	sp, #24
10001d82:	af00      	add	r7, sp, #0
10001d84:	60f8      	str	r0, [r7, #12]
10001d86:	60b9      	str	r1, [r7, #8]
10001d88:	607a      	str	r2, [r7, #4]
    uint32_t save = hw_claim_lock();
10001d8a:	f7ff ff91 	bl	10001cb0 <hw_claim_lock>
10001d8e:	0003      	movs	r3, r0
10001d90:	617b      	str	r3, [r7, #20]
    if (hw_is_claimed(bits, bit_index)) {
10001d92:	68ba      	ldr	r2, [r7, #8]
10001d94:	68fb      	ldr	r3, [r7, #12]
10001d96:	0011      	movs	r1, r2
10001d98:	0018      	movs	r0, r3
10001d9a:	f7ff ffd7 	bl	10001d4c <hw_is_claimed>
10001d9e:	1e03      	subs	r3, r0, #0
10001da0:	d005      	beq.n	10001dae <hw_claim_or_assert+0x30>
        panic(message, bit_index);
10001da2:	68ba      	ldr	r2, [r7, #8]
10001da4:	687b      	ldr	r3, [r7, #4]
10001da6:	0011      	movs	r1, r2
10001da8:	0018      	movs	r0, r3
10001daa:	f003 fa23 	bl	100051f4 <panic>
    } else {
        bits[bit_index >> 3u] |= (uint8_t)(1u << (bit_index & 7u));
10001dae:	68bb      	ldr	r3, [r7, #8]
10001db0:	08db      	lsrs	r3, r3, #3
10001db2:	68fa      	ldr	r2, [r7, #12]
10001db4:	18d3      	adds	r3, r2, r3
10001db6:	7819      	ldrb	r1, [r3, #0]
10001db8:	68bb      	ldr	r3, [r7, #8]
10001dba:	2207      	movs	r2, #7
10001dbc:	4013      	ands	r3, r2
10001dbe:	2201      	movs	r2, #1
10001dc0:	409a      	lsls	r2, r3
10001dc2:	0013      	movs	r3, r2
10001dc4:	b2da      	uxtb	r2, r3
10001dc6:	68bb      	ldr	r3, [r7, #8]
10001dc8:	08db      	lsrs	r3, r3, #3
10001dca:	68f8      	ldr	r0, [r7, #12]
10001dcc:	18c3      	adds	r3, r0, r3
10001dce:	430a      	orrs	r2, r1
10001dd0:	b2d2      	uxtb	r2, r2
10001dd2:	701a      	strb	r2, [r3, #0]
    }
    hw_claim_unlock(save);
10001dd4:	697b      	ldr	r3, [r7, #20]
10001dd6:	0018      	movs	r0, r3
10001dd8:	f7ff ff92 	bl	10001d00 <hw_claim_unlock>
}
10001ddc:	46c0      	nop			; (mov r8, r8)
10001dde:	46bd      	mov	sp, r7
10001de0:	b006      	add	sp, #24
10001de2:	bd80      	pop	{r7, pc}

10001de4 <has_glitchless_mux>:
// - A glitchless mux, which can be switched freely, but whose inputs must be
//   free-running
// - An auxiliary (glitchy) mux, whose output glitches when switched, but has
//   no constraints on its inputs
// Not all clocks have both types of mux.
static inline bool has_glitchless_mux(enum clock_index clk_index) {
10001de4:	b580      	push	{r7, lr}
10001de6:	b082      	sub	sp, #8
10001de8:	af00      	add	r7, sp, #0
10001dea:	0002      	movs	r2, r0
10001dec:	1dfb      	adds	r3, r7, #7
10001dee:	701a      	strb	r2, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
10001df0:	1dfb      	adds	r3, r7, #7
10001df2:	781b      	ldrb	r3, [r3, #0]
10001df4:	2b05      	cmp	r3, #5
10001df6:	d003      	beq.n	10001e00 <has_glitchless_mux+0x1c>
10001df8:	1dfb      	adds	r3, r7, #7
10001dfa:	781b      	ldrb	r3, [r3, #0]
10001dfc:	2b04      	cmp	r3, #4
10001dfe:	d101      	bne.n	10001e04 <has_glitchless_mux+0x20>
10001e00:	2301      	movs	r3, #1
10001e02:	e000      	b.n	10001e06 <has_glitchless_mux+0x22>
10001e04:	2300      	movs	r3, #0
10001e06:	1c1a      	adds	r2, r3, #0
10001e08:	2301      	movs	r3, #1
10001e0a:	4013      	ands	r3, r2
10001e0c:	b2db      	uxtb	r3, r3
}
10001e0e:	0018      	movs	r0, r3
10001e10:	46bd      	mov	sp, r7
10001e12:	b002      	add	sp, #8
10001e14:	bd80      	pop	{r7, pc}
	...

10001e18 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e1a:	b0a3      	sub	sp, #140	; 0x8c
10001e1c:	af00      	add	r7, sp, #0
10001e1e:	6339      	str	r1, [r7, #48]	; 0x30
10001e20:	62fa      	str	r2, [r7, #44]	; 0x2c
10001e22:	62bb      	str	r3, [r7, #40]	; 0x28
10001e24:	230f      	movs	r3, #15
10001e26:	2228      	movs	r2, #40	; 0x28
10001e28:	189b      	adds	r3, r3, r2
10001e2a:	19da      	adds	r2, r3, r7
10001e2c:	1c03      	adds	r3, r0, #0
10001e2e:	7013      	strb	r3, [r2, #0]
    uint32_t div;

    assert(src_freq >= freq);
10001e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
10001e32:	2398      	movs	r3, #152	; 0x98
10001e34:	2108      	movs	r1, #8
10001e36:	185b      	adds	r3, r3, r1
10001e38:	19db      	adds	r3, r3, r7
10001e3a:	681b      	ldr	r3, [r3, #0]
10001e3c:	429a      	cmp	r2, r3
10001e3e:	d205      	bcs.n	10001e4c <clock_configure+0x34>
10001e40:	4b8d      	ldr	r3, [pc, #564]	; (10002078 <clock_configure+0x260>)
10001e42:	4a8e      	ldr	r2, [pc, #568]	; (1000207c <clock_configure+0x264>)
10001e44:	488e      	ldr	r0, [pc, #568]	; (10002080 <clock_configure+0x268>)
10001e46:	212d      	movs	r1, #45	; 0x2d
10001e48:	f003 f9ae 	bl	100051a8 <__assert_func>

    if (freq > src_freq)
10001e4c:	2398      	movs	r3, #152	; 0x98
10001e4e:	2208      	movs	r2, #8
10001e50:	189b      	adds	r3, r3, r2
10001e52:	19db      	adds	r3, r3, r7
10001e54:	681a      	ldr	r2, [r3, #0]
10001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001e58:	429a      	cmp	r2, r3
10001e5a:	d901      	bls.n	10001e60 <clock_configure+0x48>
        return false;
10001e5c:	2300      	movs	r3, #0
10001e5e:	e107      	b.n	10002070 <clock_configure+0x258>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001e62:	623b      	str	r3, [r7, #32]
10001e64:	2300      	movs	r3, #0
10001e66:	627b      	str	r3, [r7, #36]	; 0x24
10001e68:	6a3a      	ldr	r2, [r7, #32]
10001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001e6c:	0011      	movs	r1, r2
10001e6e:	0e09      	lsrs	r1, r1, #24
10001e70:	61f9      	str	r1, [r7, #28]
10001e72:	0013      	movs	r3, r2
10001e74:	021b      	lsls	r3, r3, #8
10001e76:	61bb      	str	r3, [r7, #24]
10001e78:	2398      	movs	r3, #152	; 0x98
10001e7a:	2208      	movs	r2, #8
10001e7c:	189b      	adds	r3, r3, r2
10001e7e:	19db      	adds	r3, r3, r7
10001e80:	681b      	ldr	r3, [r3, #0]
10001e82:	613b      	str	r3, [r7, #16]
10001e84:	2300      	movs	r3, #0
10001e86:	617b      	str	r3, [r7, #20]
10001e88:	693a      	ldr	r2, [r7, #16]
10001e8a:	697b      	ldr	r3, [r7, #20]
10001e8c:	69b8      	ldr	r0, [r7, #24]
10001e8e:	69f9      	ldr	r1, [r7, #28]
10001e90:	f003 fcc2 	bl	10005818 <__wrap___aeabi_uldivmod>
10001e94:	0002      	movs	r2, r0
10001e96:	000b      	movs	r3, r1
10001e98:	0013      	movs	r3, r2
10001e9a:	2084      	movs	r0, #132	; 0x84
10001e9c:	183a      	adds	r2, r7, r0
10001e9e:	6013      	str	r3, [r2, #0]

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001ea0:	230f      	movs	r3, #15
10001ea2:	2228      	movs	r2, #40	; 0x28
10001ea4:	189b      	adds	r3, r3, r2
10001ea6:	19db      	adds	r3, r3, r7
10001ea8:	781a      	ldrb	r2, [r3, #0]
10001eaa:	0013      	movs	r3, r2
10001eac:	005b      	lsls	r3, r3, #1
10001eae:	189b      	adds	r3, r3, r2
10001eb0:	009b      	lsls	r3, r3, #2
10001eb2:	4a74      	ldr	r2, [pc, #464]	; (10002084 <clock_configure+0x26c>)
10001eb4:	4694      	mov	ip, r2
10001eb6:	4463      	add	r3, ip
10001eb8:	2180      	movs	r1, #128	; 0x80
10001eba:	187a      	adds	r2, r7, r1
10001ebc:	6013      	str	r3, [r2, #0]

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001ebe:	187b      	adds	r3, r7, r1
10001ec0:	681b      	ldr	r3, [r3, #0]
10001ec2:	685b      	ldr	r3, [r3, #4]
10001ec4:	183a      	adds	r2, r7, r0
10001ec6:	6812      	ldr	r2, [r2, #0]
10001ec8:	429a      	cmp	r2, r3
10001eca:	d904      	bls.n	10001ed6 <clock_configure+0xbe>
        clock->div = div;
10001ecc:	187b      	adds	r3, r7, r1
10001ece:	681b      	ldr	r3, [r3, #0]
10001ed0:	183a      	adds	r2, r7, r0
10001ed2:	6812      	ldr	r2, [r2, #0]
10001ed4:	605a      	str	r2, [r3, #4]

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001ed6:	230f      	movs	r3, #15
10001ed8:	2228      	movs	r2, #40	; 0x28
10001eda:	189b      	adds	r3, r3, r2
10001edc:	19db      	adds	r3, r3, r7
10001ede:	781b      	ldrb	r3, [r3, #0]
10001ee0:	0018      	movs	r0, r3
10001ee2:	f7ff ff7f 	bl	10001de4 <has_glitchless_mux>
10001ee6:	1e03      	subs	r3, r0, #0
10001ee8:	d019      	beq.n	10001f1e <clock_configure+0x106>
10001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001eec:	2b01      	cmp	r3, #1
10001eee:	d116      	bne.n	10001f1e <clock_configure+0x106>
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
10001ef0:	2380      	movs	r3, #128	; 0x80
10001ef2:	18fb      	adds	r3, r7, r3
10001ef4:	681b      	ldr	r3, [r3, #0]
10001ef6:	67bb      	str	r3, [r7, #120]	; 0x78
10001ef8:	2303      	movs	r3, #3
10001efa:	677b      	str	r3, [r7, #116]	; 0x74
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10001efe:	22c0      	movs	r2, #192	; 0xc0
10001f00:	0192      	lsls	r2, r2, #6
10001f02:	4313      	orrs	r3, r2
10001f04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10001f06:	601a      	str	r2, [r3, #0]
}
10001f08:	46c0      	nop			; (mov r8, r8)
        while (!(clock->selected & 1u))
10001f0a:	e000      	b.n	10001f0e <clock_configure+0xf6>
 *
 * No-op function intended to be called by any tight hardware polling loop. Using this ubiquitously
 * makes it much easier to find tight loops, but also in the future \#ifdef-ed support for lockup
 * debugging might be added
 */
static __force_inline void tight_loop_contents(void) {}
10001f0c:	46c0      	nop			; (mov r8, r8)
10001f0e:	2380      	movs	r3, #128	; 0x80
10001f10:	18fb      	adds	r3, r7, r3
10001f12:	681b      	ldr	r3, [r3, #0]
10001f14:	689b      	ldr	r3, [r3, #8]
10001f16:	2201      	movs	r2, #1
10001f18:	4013      	ands	r3, r2
10001f1a:	d0f7      	beq.n	10001f0c <clock_configure+0xf4>
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001f1c:	e029      	b.n	10001f72 <clock_configure+0x15a>
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        // Disable clock. On clk_ref and clk_sys this does nothing,
        // all other clocks have the ENABLE bit in the same position.
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10001f1e:	2380      	movs	r3, #128	; 0x80
10001f20:	18fb      	adds	r3, r7, r3
10001f22:	681b      	ldr	r3, [r3, #0]
10001f24:	673b      	str	r3, [r7, #112]	; 0x70
10001f26:	2380      	movs	r3, #128	; 0x80
10001f28:	011b      	lsls	r3, r3, #4
10001f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10001f2e:	22c0      	movs	r2, #192	; 0xc0
10001f30:	0192      	lsls	r2, r2, #6
10001f32:	4313      	orrs	r3, r2
10001f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10001f36:	601a      	str	r2, [r3, #0]
}
10001f38:	46c0      	nop			; (mov r8, r8)
        if (configured_freq[clk_index] > 0) {
10001f3a:	210f      	movs	r1, #15
10001f3c:	2628      	movs	r6, #40	; 0x28
10001f3e:	198b      	adds	r3, r1, r6
10001f40:	19db      	adds	r3, r3, r7
10001f42:	781a      	ldrb	r2, [r3, #0]
10001f44:	4b50      	ldr	r3, [pc, #320]	; (10002088 <clock_configure+0x270>)
10001f46:	0092      	lsls	r2, r2, #2
10001f48:	58d3      	ldr	r3, [r2, r3]
10001f4a:	2b00      	cmp	r3, #0
10001f4c:	d011      	beq.n	10001f72 <clock_configure+0x15a>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001f4e:	4b4e      	ldr	r3, [pc, #312]	; (10002088 <clock_configure+0x270>)
10001f50:	6958      	ldr	r0, [r3, #20]
10001f52:	198b      	adds	r3, r1, r6
10001f54:	19db      	adds	r3, r3, r7
10001f56:	781a      	ldrb	r2, [r3, #0]
10001f58:	4b4b      	ldr	r3, [pc, #300]	; (10002088 <clock_configure+0x270>)
10001f5a:	0092      	lsls	r2, r2, #2
10001f5c:	58d3      	ldr	r3, [r2, r3]
10001f5e:	0019      	movs	r1, r3
10001f60:	f003 fc18 	bl	10005794 <__wrap___aeabi_uidiv>
10001f64:	0003      	movs	r3, r0
10001f66:	3301      	adds	r3, #1
10001f68:	67fb      	str	r3, [r7, #124]	; 0x7c
            asm volatile (
10001f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10001f6c:	3b01      	subs	r3, #1
10001f6e:	d1fd      	bne.n	10001f6c <clock_configure+0x154>
10001f70:	67fb      	str	r3, [r7, #124]	; 0x7c
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001f72:	2680      	movs	r6, #128	; 0x80
10001f74:	19bb      	adds	r3, r7, r6
10001f76:	681a      	ldr	r2, [r3, #0]
10001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001f7a:	015b      	lsls	r3, r3, #5
10001f7c:	66ba      	str	r2, [r7, #104]	; 0x68
10001f7e:	667b      	str	r3, [r7, #100]	; 0x64
10001f80:	23e0      	movs	r3, #224	; 0xe0
10001f82:	663b      	str	r3, [r7, #96]	; 0x60
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10001f86:	681a      	ldr	r2, [r3, #0]
10001f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10001f8a:	4053      	eors	r3, r2
10001f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10001f8e:	4013      	ands	r3, r2
10001f90:	6eba      	ldr	r2, [r7, #104]	; 0x68
10001f92:	65fa      	str	r2, [r7, #92]	; 0x5c
10001f94:	65bb      	str	r3, [r7, #88]	; 0x58
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10001f98:	2280      	movs	r2, #128	; 0x80
10001f9a:	0152      	lsls	r2, r2, #5
10001f9c:	4313      	orrs	r3, r2
10001f9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
10001fa0:	601a      	str	r2, [r3, #0]
}
10001fa2:	46c0      	nop			; (mov r8, r8)
}
10001fa4:	46c0      	nop			; (mov r8, r8)
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10001fa6:	230f      	movs	r3, #15
10001fa8:	2228      	movs	r2, #40	; 0x28
10001faa:	189b      	adds	r3, r3, r2
10001fac:	19db      	adds	r3, r3, r7
10001fae:	781b      	ldrb	r3, [r3, #0]
10001fb0:	0018      	movs	r0, r3
10001fb2:	f7ff ff17 	bl	10001de4 <has_glitchless_mux>
10001fb6:	1e03      	subs	r3, r0, #0
10001fb8:	d023      	beq.n	10002002 <clock_configure+0x1ea>
        hw_write_masked(&clock->ctrl,
10001fba:	19bb      	adds	r3, r7, r6
10001fbc:	681b      	ldr	r3, [r3, #0]
10001fbe:	657b      	str	r3, [r7, #84]	; 0x54
10001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001fc2:	653b      	str	r3, [r7, #80]	; 0x50
10001fc4:	2303      	movs	r3, #3
10001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10001fca:	681a      	ldr	r2, [r3, #0]
10001fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10001fce:	4053      	eors	r3, r2
10001fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10001fd2:	4013      	ands	r3, r2
10001fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
10001fd6:	64ba      	str	r2, [r7, #72]	; 0x48
10001fd8:	647b      	str	r3, [r7, #68]	; 0x44
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10001fdc:	2280      	movs	r2, #128	; 0x80
10001fde:	0152      	lsls	r2, r2, #5
10001fe0:	4313      	orrs	r3, r2
10001fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10001fe4:	601a      	str	r2, [r3, #0]
}
10001fe6:	46c0      	nop			; (mov r8, r8)
}
10001fe8:	46c0      	nop			; (mov r8, r8)
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10001fea:	e000      	b.n	10001fee <clock_configure+0x1d6>
10001fec:	46c0      	nop			; (mov r8, r8)
10001fee:	2380      	movs	r3, #128	; 0x80
10001ff0:	18fb      	adds	r3, r7, r3
10001ff2:	681b      	ldr	r3, [r3, #0]
10001ff4:	689b      	ldr	r3, [r3, #8]
10001ff6:	2101      	movs	r1, #1
10001ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10001ffa:	4091      	lsls	r1, r2
10001ffc:	000a      	movs	r2, r1
10001ffe:	4013      	ands	r3, r2
10002000:	d0f4      	beq.n	10001fec <clock_configure+0x1d4>
            tight_loop_contents();
    }

    // Enable clock. On clk_ref and clk_sys this does nothing,
    // all other clocks have the ENABLE bit in the same position.
    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10002002:	2180      	movs	r1, #128	; 0x80
10002004:	187b      	adds	r3, r7, r1
10002006:	681b      	ldr	r3, [r3, #0]
10002008:	643b      	str	r3, [r7, #64]	; 0x40
1000200a:	2380      	movs	r3, #128	; 0x80
1000200c:	011b      	lsls	r3, r3, #4
1000200e:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002012:	2280      	movs	r2, #128	; 0x80
10002014:	0192      	lsls	r2, r2, #6
10002016:	4313      	orrs	r3, r2
10002018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000201a:	601a      	str	r2, [r3, #0]
}
1000201c:	46c0      	nop			; (mov r8, r8)

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
1000201e:	187b      	adds	r3, r7, r1
10002020:	681b      	ldr	r3, [r3, #0]
10002022:	2084      	movs	r0, #132	; 0x84
10002024:	183a      	adds	r2, r7, r0
10002026:	6812      	ldr	r2, [r2, #0]
10002028:	605a      	str	r2, [r3, #4]

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000202c:	60bb      	str	r3, [r7, #8]
1000202e:	2300      	movs	r3, #0
10002030:	60fb      	str	r3, [r7, #12]
10002032:	68ba      	ldr	r2, [r7, #8]
10002034:	68fb      	ldr	r3, [r7, #12]
10002036:	0011      	movs	r1, r2
10002038:	0e0d      	lsrs	r5, r1, #24
1000203a:	0013      	movs	r3, r2
1000203c:	021c      	lsls	r4, r3, #8
1000203e:	183b      	adds	r3, r7, r0
10002040:	681b      	ldr	r3, [r3, #0]
10002042:	603b      	str	r3, [r7, #0]
10002044:	2300      	movs	r3, #0
10002046:	607b      	str	r3, [r7, #4]
10002048:	683a      	ldr	r2, [r7, #0]
1000204a:	687b      	ldr	r3, [r7, #4]
1000204c:	0020      	movs	r0, r4
1000204e:	0029      	movs	r1, r5
10002050:	f003 fbe2 	bl	10005818 <__wrap___aeabi_uldivmod>
10002054:	0002      	movs	r2, r0
10002056:	000b      	movs	r3, r1
10002058:	0010      	movs	r0, r2
1000205a:	0019      	movs	r1, r3
1000205c:	230f      	movs	r3, #15
1000205e:	2228      	movs	r2, #40	; 0x28
10002060:	189b      	adds	r3, r3, r2
10002062:	19db      	adds	r3, r3, r7
10002064:	781a      	ldrb	r2, [r3, #0]
10002066:	0001      	movs	r1, r0
10002068:	4b07      	ldr	r3, [pc, #28]	; (10002088 <clock_configure+0x270>)
1000206a:	0092      	lsls	r2, r2, #2
1000206c:	50d1      	str	r1, [r2, r3]

    return true;
1000206e:	2301      	movs	r3, #1
}
10002070:	0018      	movs	r0, r3
10002072:	46bd      	mov	sp, r7
10002074:	b023      	add	sp, #140	; 0x8c
10002076:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002078:	100073bc 	.word	0x100073bc
1000207c:	100074cc 	.word	0x100074cc
10002080:	100073d0 	.word	0x100073d0
10002084:	40008000 	.word	0x40008000
10002088:	20000f24 	.word	0x20000f24

1000208c <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
1000208c:	b580      	push	{r7, lr}
1000208e:	b088      	sub	sp, #32
10002090:	af02      	add	r7, sp, #8
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10002092:	200c      	movs	r0, #12
10002094:	f001 f95c 	bl	10003350 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10002098:	f001 fb66 	bl	10003768 <running_on_fpga>
1000209c:	1e03      	subs	r3, r0, #0
1000209e:	d011      	beq.n	100020c4 <clocks_init+0x38>
        for (uint i = 0; i < CLK_COUNT; i++) {
100020a0:	2300      	movs	r3, #0
100020a2:	617b      	str	r3, [r7, #20]
100020a4:	e007      	b.n	100020b6 <clocks_init+0x2a>
            configured_freq[i] = 48 * MHZ;
100020a6:	4b3f      	ldr	r3, [pc, #252]	; (100021a4 <clocks_init+0x118>)
100020a8:	697a      	ldr	r2, [r7, #20]
100020aa:	0092      	lsls	r2, r2, #2
100020ac:	493e      	ldr	r1, [pc, #248]	; (100021a8 <clocks_init+0x11c>)
100020ae:	50d1      	str	r1, [r2, r3]
        for (uint i = 0; i < CLK_COUNT; i++) {
100020b0:	697b      	ldr	r3, [r7, #20]
100020b2:	3301      	adds	r3, #1
100020b4:	617b      	str	r3, [r7, #20]
100020b6:	697b      	ldr	r3, [r7, #20]
100020b8:	2b09      	cmp	r3, #9
100020ba:	d9f4      	bls.n	100020a6 <clocks_init+0x1a>
        }
        configured_freq[clk_rtc] = 46875;
100020bc:	4b39      	ldr	r3, [pc, #228]	; (100021a4 <clocks_init+0x118>)
100020be:	4a3b      	ldr	r2, [pc, #236]	; (100021ac <clocks_init+0x120>)
100020c0:	625a      	str	r2, [r3, #36]	; 0x24
        return;
100020c2:	e06c      	b.n	1000219e <clocks_init+0x112>
    }

    // Disable resus that may be enabled from previous software
    clocks_hw->resus.ctrl = 0;
100020c4:	4b3a      	ldr	r3, [pc, #232]	; (100021b0 <clocks_init+0x124>)
100020c6:	2200      	movs	r2, #0
100020c8:	679a      	str	r2, [r3, #120]	; 0x78

    // Enable the xosc
    xosc_init();
100020ca:	f001 f951 	bl	10003370 <xosc_init>
100020ce:	4b39      	ldr	r3, [pc, #228]	; (100021b4 <clocks_init+0x128>)
100020d0:	613b      	str	r3, [r7, #16]
100020d2:	2301      	movs	r3, #1
100020d4:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100020d6:	693b      	ldr	r3, [r7, #16]
100020d8:	22c0      	movs	r2, #192	; 0xc0
100020da:	0192      	lsls	r2, r2, #6
100020dc:	4313      	orrs	r3, r2
100020de:	68fa      	ldr	r2, [r7, #12]
100020e0:	601a      	str	r2, [r3, #0]
}
100020e2:	46c0      	nop			; (mov r8, r8)

    // Before we touch PLLs, switch sys and ref cleanly away from their aux sources.
    hw_clear_bits(&clocks_hw->clk[clk_sys].ctrl, CLOCKS_CLK_SYS_CTRL_SRC_BITS);
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100020e4:	e000      	b.n	100020e8 <clocks_init+0x5c>
100020e6:	46c0      	nop			; (mov r8, r8)
100020e8:	4b31      	ldr	r3, [pc, #196]	; (100021b0 <clocks_init+0x124>)
100020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100020ec:	2b01      	cmp	r3, #1
100020ee:	d1fa      	bne.n	100020e6 <clocks_init+0x5a>
100020f0:	4b31      	ldr	r3, [pc, #196]	; (100021b8 <clocks_init+0x12c>)
100020f2:	60bb      	str	r3, [r7, #8]
100020f4:	2303      	movs	r3, #3
100020f6:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100020f8:	68bb      	ldr	r3, [r7, #8]
100020fa:	22c0      	movs	r2, #192	; 0xc0
100020fc:	0192      	lsls	r2, r2, #6
100020fe:	4313      	orrs	r3, r2
10002100:	687a      	ldr	r2, [r7, #4]
10002102:	601a      	str	r2, [r3, #0]
}
10002104:	46c0      	nop			; (mov r8, r8)
        tight_loop_contents();
    hw_clear_bits(&clocks_hw->clk[clk_ref].ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10002106:	e000      	b.n	1000210a <clocks_init+0x7e>
10002108:	46c0      	nop			; (mov r8, r8)
1000210a:	4b29      	ldr	r3, [pc, #164]	; (100021b0 <clocks_init+0x124>)
1000210c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000210e:	2b01      	cmp	r3, #1
10002110:	d1fa      	bne.n	10002108 <clocks_init+0x7c>
    // PLL SYS: 12 / 1 = 12MHz * 125 = 1500MHz / 6 / 2 = 125MHz
    // PLL USB: 12 / 1 = 12MHz * 100 = 1200MHz / 5 / 5 =  48MHz
    /// \end::pll_settings[]

    /// \tag::pll_init[]
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10002112:	4a2a      	ldr	r2, [pc, #168]	; (100021bc <clocks_init+0x130>)
10002114:	482a      	ldr	r0, [pc, #168]	; (100021c0 <clocks_init+0x134>)
10002116:	2302      	movs	r3, #2
10002118:	9300      	str	r3, [sp, #0]
1000211a:	2306      	movs	r3, #6
1000211c:	2101      	movs	r1, #1
1000211e:	f000 fcf5 	bl	10002b0c <pll_init>
    pll_init(pll_usb, 1, 1200 * MHZ, 5, 5);
10002122:	4a28      	ldr	r2, [pc, #160]	; (100021c4 <clocks_init+0x138>)
10002124:	4828      	ldr	r0, [pc, #160]	; (100021c8 <clocks_init+0x13c>)
10002126:	2305      	movs	r3, #5
10002128:	9300      	str	r3, [sp, #0]
1000212a:	2305      	movs	r3, #5
1000212c:	2101      	movs	r1, #1
1000212e:	f000 fced 	bl	10002b0c <pll_init>
    /// \end::pll_init[]

    // Configure clocks
    // CLK_REF = XOSC (12MHz) / 1 = 12MHz
    clock_configure(clk_ref,
10002132:	4a26      	ldr	r2, [pc, #152]	; (100021cc <clocks_init+0x140>)
10002134:	4b25      	ldr	r3, [pc, #148]	; (100021cc <clocks_init+0x140>)
10002136:	9300      	str	r3, [sp, #0]
10002138:	0013      	movs	r3, r2
1000213a:	2200      	movs	r2, #0
1000213c:	2102      	movs	r1, #2
1000213e:	2004      	movs	r0, #4
10002140:	f7ff fe6a 	bl	10001e18 <clock_configure>
                    12 * MHZ,
                    12 * MHZ);

    /// \tag::configure_clk_sys[]
    // CLK SYS = PLL SYS (125MHz) / 1 = 125MHz
    clock_configure(clk_sys,
10002144:	4a22      	ldr	r2, [pc, #136]	; (100021d0 <clocks_init+0x144>)
10002146:	4b22      	ldr	r3, [pc, #136]	; (100021d0 <clocks_init+0x144>)
10002148:	9300      	str	r3, [sp, #0]
1000214a:	0013      	movs	r3, r2
1000214c:	2200      	movs	r2, #0
1000214e:	2101      	movs	r1, #1
10002150:	2005      	movs	r0, #5
10002152:	f7ff fe61 	bl	10001e18 <clock_configure>
                    125 * MHZ,
                    125 * MHZ);
    /// \end::configure_clk_sys[]

    // CLK USB = PLL USB (48MHz) / 1 = 48MHz
    clock_configure(clk_usb,
10002156:	4a14      	ldr	r2, [pc, #80]	; (100021a8 <clocks_init+0x11c>)
10002158:	4b13      	ldr	r3, [pc, #76]	; (100021a8 <clocks_init+0x11c>)
1000215a:	9300      	str	r3, [sp, #0]
1000215c:	0013      	movs	r3, r2
1000215e:	2200      	movs	r2, #0
10002160:	2100      	movs	r1, #0
10002162:	2007      	movs	r0, #7
10002164:	f7ff fe58 	bl	10001e18 <clock_configure>
                    CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                    48 * MHZ,
                    48 * MHZ);

    // CLK ADC = PLL USB (48MHZ) / 1 = 48MHz
    clock_configure(clk_adc,
10002168:	4a0f      	ldr	r2, [pc, #60]	; (100021a8 <clocks_init+0x11c>)
1000216a:	4b0f      	ldr	r3, [pc, #60]	; (100021a8 <clocks_init+0x11c>)
1000216c:	9300      	str	r3, [sp, #0]
1000216e:	0013      	movs	r3, r2
10002170:	2200      	movs	r2, #0
10002172:	2100      	movs	r1, #0
10002174:	2008      	movs	r0, #8
10002176:	f7ff fe4f 	bl	10001e18 <clock_configure>
                    CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                    48 * MHZ,
                    48 * MHZ);

    // CLK RTC = PLL USB (48MHz) / 1024 = 46875Hz
    clock_configure(clk_rtc,
1000217a:	4a0b      	ldr	r2, [pc, #44]	; (100021a8 <clocks_init+0x11c>)
1000217c:	4b0b      	ldr	r3, [pc, #44]	; (100021ac <clocks_init+0x120>)
1000217e:	9300      	str	r3, [sp, #0]
10002180:	0013      	movs	r3, r2
10002182:	2200      	movs	r2, #0
10002184:	2100      	movs	r1, #0
10002186:	2009      	movs	r0, #9
10002188:	f7ff fe46 	bl	10001e18 <clock_configure>
                    48 * MHZ,
                    46875);

    // CLK PERI = clk_sys. Used as reference clock for Peripherals. No dividers so just select and enable
    // Normally choose clk_sys or clk_usb
    clock_configure(clk_peri,
1000218c:	4a10      	ldr	r2, [pc, #64]	; (100021d0 <clocks_init+0x144>)
1000218e:	4b10      	ldr	r3, [pc, #64]	; (100021d0 <clocks_init+0x144>)
10002190:	9300      	str	r3, [sp, #0]
10002192:	0013      	movs	r3, r2
10002194:	2200      	movs	r2, #0
10002196:	2100      	movs	r1, #0
10002198:	2006      	movs	r0, #6
1000219a:	f7ff fe3d 	bl	10001e18 <clock_configure>
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
1000219e:	46bd      	mov	sp, r7
100021a0:	b006      	add	sp, #24
100021a2:	bd80      	pop	{r7, pc}
100021a4:	20000f24 	.word	0x20000f24
100021a8:	02dc6c00 	.word	0x02dc6c00
100021ac:	0000b71b 	.word	0x0000b71b
100021b0:	40008000 	.word	0x40008000
100021b4:	4000803c 	.word	0x4000803c
100021b8:	40008030 	.word	0x40008030
100021bc:	59682f00 	.word	0x59682f00
100021c0:	40028000 	.word	0x40028000
100021c4:	47868c00 	.word	0x47868c00
100021c8:	4002c000 	.word	0x4002c000
100021cc:	00b71b00 	.word	0x00b71b00
100021d0:	07735940 	.word	0x07735940

100021d4 <check_gpio_param>:
    GPIO_DRIVE_STRENGTH_4MA = 1, ///< 4 mA nominal drive strength
    GPIO_DRIVE_STRENGTH_8MA = 2, ///< 8 mA nominal drive strength
    GPIO_DRIVE_STRENGTH_12MA = 3 ///< 12 mA nominal drive strength
};

static inline void check_gpio_param(__unused uint gpio) {
100021d4:	b580      	push	{r7, lr}
100021d6:	b082      	sub	sp, #8
100021d8:	af00      	add	r7, sp, #0
100021da:	6078      	str	r0, [r7, #4]
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
}
100021dc:	46c0      	nop			; (mov r8, r8)
100021de:	46bd      	mov	sp, r7
100021e0:	b002      	add	sp, #8
100021e2:	bd80      	pop	{r7, pc}

100021e4 <gpio_set_function>:
}

/// \tag::gpio_set_function[]
// Select function for this GPIO, and ensure input/output are enabled at the pad.
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
100021e4:	b580      	push	{r7, lr}
100021e6:	b088      	sub	sp, #32
100021e8:	af00      	add	r7, sp, #0
100021ea:	6078      	str	r0, [r7, #4]
100021ec:	000a      	movs	r2, r1
100021ee:	1cfb      	adds	r3, r7, #3
100021f0:	701a      	strb	r2, [r3, #0]
    check_gpio_param(gpio);
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	0018      	movs	r0, r3
100021f6:	f7ff ffed 	bl	100021d4 <check_gpio_param>
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100021fa:	687b      	ldr	r3, [r7, #4]
100021fc:	009b      	lsls	r3, r3, #2
100021fe:	4a12      	ldr	r2, [pc, #72]	; (10002248 <gpio_set_function+0x64>)
10002200:	4694      	mov	ip, r2
10002202:	4463      	add	r3, ip
10002204:	61fb      	str	r3, [r7, #28]
10002206:	2340      	movs	r3, #64	; 0x40
10002208:	61bb      	str	r3, [r7, #24]
1000220a:	23c0      	movs	r3, #192	; 0xc0
1000220c:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000220e:	69fb      	ldr	r3, [r7, #28]
10002210:	681a      	ldr	r2, [r3, #0]
10002212:	69bb      	ldr	r3, [r7, #24]
10002214:	4053      	eors	r3, r2
10002216:	697a      	ldr	r2, [r7, #20]
10002218:	4013      	ands	r3, r2
1000221a:	69fa      	ldr	r2, [r7, #28]
1000221c:	613a      	str	r2, [r7, #16]
1000221e:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002220:	693b      	ldr	r3, [r7, #16]
10002222:	2280      	movs	r2, #128	; 0x80
10002224:	0152      	lsls	r2, r2, #5
10002226:	4313      	orrs	r3, r2
10002228:	68fa      	ldr	r2, [r7, #12]
1000222a:	601a      	str	r2, [r3, #0]
}
1000222c:	46c0      	nop			; (mov r8, r8)
}
1000222e:	46c0      	nop			; (mov r8, r8)
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10002230:	4906      	ldr	r1, [pc, #24]	; (1000224c <gpio_set_function+0x68>)
10002232:	1cfb      	adds	r3, r7, #3
10002234:	781a      	ldrb	r2, [r3, #0]
10002236:	687b      	ldr	r3, [r7, #4]
10002238:	00db      	lsls	r3, r3, #3
1000223a:	18cb      	adds	r3, r1, r3
1000223c:	3304      	adds	r3, #4
1000223e:	601a      	str	r2, [r3, #0]
}
10002240:	46c0      	nop			; (mov r8, r8)
10002242:	46bd      	mov	sp, r7
10002244:	b008      	add	sp, #32
10002246:	bd80      	pop	{r7, pc}
10002248:	4001c004 	.word	0x4001c004
1000224c:	40014000 	.word	0x40014000

10002250 <gpio_init>:
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
10002250:	b580      	push	{r7, lr}
10002252:	b082      	sub	sp, #8
10002254:	af00      	add	r7, sp, #0
10002256:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_clr = 1ul << gpio;
10002258:	23d0      	movs	r3, #208	; 0xd0
1000225a:	061b      	lsls	r3, r3, #24
1000225c:	2101      	movs	r1, #1
1000225e:	687a      	ldr	r2, [r7, #4]
10002260:	4091      	lsls	r1, r2
10002262:	000a      	movs	r2, r1
10002264:	629a      	str	r2, [r3, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
10002266:	23d0      	movs	r3, #208	; 0xd0
10002268:	061b      	lsls	r3, r3, #24
1000226a:	2101      	movs	r1, #1
1000226c:	687a      	ldr	r2, [r7, #4]
1000226e:	4091      	lsls	r1, r2
10002270:	000a      	movs	r2, r1
10002272:	619a      	str	r2, [r3, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10002274:	687b      	ldr	r3, [r7, #4]
10002276:	2105      	movs	r1, #5
10002278:	0018      	movs	r0, r3
1000227a:	f7ff ffb3 	bl	100021e4 <gpio_set_function>
}
1000227e:	46c0      	nop			; (mov r8, r8)
10002280:	46bd      	mov	sp, r7
10002282:	b002      	add	sp, #8
10002284:	bd80      	pop	{r7, pc}

10002286 <check_irq_param>:
 *
 * All interrupts handlers should be of this type, and follow normal ARM EABI register saving conventions
 */
typedef void (*irq_handler_t)(void);

static inline void check_irq_param(__unused uint num) {
10002286:	b580      	push	{r7, lr}
10002288:	b082      	sub	sp, #8
1000228a:	af00      	add	r7, sp, #0
1000228c:	6078      	str	r0, [r7, #4]
    invalid_params_if(IRQ, num >= NUM_IRQS);
}
1000228e:	46c0      	nop			; (mov r8, r8)
10002290:	46bd      	mov	sp, r7
10002292:	b002      	add	sp, #8
10002294:	bd80      	pop	{r7, pc}
	...

10002298 <get_vtable>:

extern void __unhandled_user_irq(void);

static uint8_t user_irq_claimed[NUM_CORES];

static inline irq_handler_t *get_vtable(void) {
10002298:	b580      	push	{r7, lr}
1000229a:	af00      	add	r7, sp, #0
    return (irq_handler_t *) scb_hw->vtor;
1000229c:	4b02      	ldr	r3, [pc, #8]	; (100022a8 <get_vtable+0x10>)
1000229e:	689b      	ldr	r3, [r3, #8]
}
100022a0:	0018      	movs	r0, r3
100022a2:	46bd      	mov	sp, r7
100022a4:	bd80      	pop	{r7, pc}
100022a6:	46c0      	nop			; (mov r8, r8)
100022a8:	e000ed00 	.word	0xe000ed00

100022ac <add_thumb_bit>:

static inline void *add_thumb_bit(void *addr) {
100022ac:	b580      	push	{r7, lr}
100022ae:	b082      	sub	sp, #8
100022b0:	af00      	add	r7, sp, #0
100022b2:	6078      	str	r0, [r7, #4]
    return (void *) (((uintptr_t) addr) | 0x1);
100022b4:	687b      	ldr	r3, [r7, #4]
100022b6:	2201      	movs	r2, #1
100022b8:	4313      	orrs	r3, r2
}
100022ba:	0018      	movs	r0, r3
100022bc:	46bd      	mov	sp, r7
100022be:	b002      	add	sp, #8
100022c0:	bd80      	pop	{r7, pc}

100022c2 <remove_thumb_bit>:

static inline void *remove_thumb_bit(void *addr) {
100022c2:	b580      	push	{r7, lr}
100022c4:	b082      	sub	sp, #8
100022c6:	af00      	add	r7, sp, #0
100022c8:	6078      	str	r0, [r7, #4]
    return (void *) (((uintptr_t) addr) & (uint)~0x1);
100022ca:	687b      	ldr	r3, [r7, #4]
100022cc:	2201      	movs	r2, #1
100022ce:	4393      	bics	r3, r2
}
100022d0:	0018      	movs	r0, r3
100022d2:	46bd      	mov	sp, r7
100022d4:	b002      	add	sp, #8
100022d6:	bd80      	pop	{r7, pc}

100022d8 <set_raw_irq_handler_and_unlock>:

static void set_raw_irq_handler_and_unlock(uint num, irq_handler_t handler, uint32_t save) {
100022d8:	b580      	push	{r7, lr}
100022da:	b08a      	sub	sp, #40	; 0x28
100022dc:	af00      	add	r7, sp, #0
100022de:	60f8      	str	r0, [r7, #12]
100022e0:	60b9      	str	r1, [r7, #8]
100022e2:	607a      	str	r2, [r7, #4]
    // update vtable (vtable_handler may be same or updated depending on cases, but we do it anyway for compactness)
    get_vtable()[16 + num] = handler;
100022e4:	f7ff ffd8 	bl	10002298 <get_vtable>
100022e8:	0002      	movs	r2, r0
100022ea:	68fb      	ldr	r3, [r7, #12]
100022ec:	3310      	adds	r3, #16
100022ee:	009b      	lsls	r3, r3, #2
100022f0:	18d3      	adds	r3, r2, r3
100022f2:	68ba      	ldr	r2, [r7, #8]
100022f4:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb" : : : "memory");
100022f6:	f3bf 8f5f 	dmb	sy
}
100022fa:	46c0      	nop			; (mov r8, r8)
100022fc:	2309      	movs	r3, #9
100022fe:	617b      	str	r3, [r7, #20]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002300:	697b      	ldr	r3, [r7, #20]
10002302:	4a0e      	ldr	r2, [pc, #56]	; (1000233c <set_raw_irq_handler_and_unlock+0x64>)
10002304:	4694      	mov	ip, r2
10002306:	4463      	add	r3, ip
10002308:	009b      	lsls	r3, r3, #2
1000230a:	627b      	str	r3, [r7, #36]	; 0x24
1000230c:	687b      	ldr	r3, [r7, #4]
1000230e:	623b      	str	r3, [r7, #32]
10002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002312:	61fb      	str	r3, [r7, #28]
    __asm volatile ("dmb" : : : "memory");
10002314:	f3bf 8f5f 	dmb	sy
}
10002318:	46c0      	nop			; (mov r8, r8)
}
1000231a:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
1000231c:	69fb      	ldr	r3, [r7, #28]
1000231e:	2200      	movs	r2, #0
10002320:	601a      	str	r2, [r3, #0]
}
10002322:	46c0      	nop			; (mov r8, r8)
10002324:	6a3b      	ldr	r3, [r7, #32]
10002326:	61bb      	str	r3, [r7, #24]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002328:	69bb      	ldr	r3, [r7, #24]
1000232a:	f383 8810 	msr	PRIMASK, r3
}
1000232e:	46c0      	nop			; (mov r8, r8)
}
10002330:	46c0      	nop			; (mov r8, r8)
    __dmb();
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_IRQ), save);
}
10002332:	46c0      	nop			; (mov r8, r8)
10002334:	46bd      	mov	sp, r7
10002336:	b00a      	add	sp, #40	; 0x28
10002338:	bd80      	pop	{r7, pc}
1000233a:	46c0      	nop			; (mov r8, r8)
1000233c:	34000040 	.word	0x34000040

10002340 <irq_set_enabled>:

void irq_set_enabled(uint num, bool enabled) {
10002340:	b580      	push	{r7, lr}
10002342:	b082      	sub	sp, #8
10002344:	af00      	add	r7, sp, #0
10002346:	6078      	str	r0, [r7, #4]
10002348:	000a      	movs	r2, r1
1000234a:	1cfb      	adds	r3, r7, #3
1000234c:	701a      	strb	r2, [r3, #0]
    check_irq_param(num);
1000234e:	687b      	ldr	r3, [r7, #4]
10002350:	0018      	movs	r0, r3
10002352:	f7ff ff98 	bl	10002286 <check_irq_param>
    irq_set_mask_enabled(1u << num, enabled);
10002356:	2201      	movs	r2, #1
10002358:	687b      	ldr	r3, [r7, #4]
1000235a:	409a      	lsls	r2, r3
1000235c:	1cfb      	adds	r3, r7, #3
1000235e:	781b      	ldrb	r3, [r3, #0]
10002360:	0019      	movs	r1, r3
10002362:	0010      	movs	r0, r2
10002364:	f000 f81c 	bl	100023a0 <irq_set_mask_enabled>
}
10002368:	46c0      	nop			; (mov r8, r8)
1000236a:	46bd      	mov	sp, r7
1000236c:	b002      	add	sp, #8
1000236e:	bd80      	pop	{r7, pc}

10002370 <irq_is_enabled>:

bool irq_is_enabled(uint num) {
10002370:	b580      	push	{r7, lr}
10002372:	b082      	sub	sp, #8
10002374:	af00      	add	r7, sp, #0
10002376:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
10002378:	687b      	ldr	r3, [r7, #4]
1000237a:	0018      	movs	r0, r3
1000237c:	f7ff ff83 	bl	10002286 <check_irq_param>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
10002380:	2201      	movs	r2, #1
10002382:	687b      	ldr	r3, [r7, #4]
10002384:	409a      	lsls	r2, r3
10002386:	4b05      	ldr	r3, [pc, #20]	; (1000239c <irq_is_enabled+0x2c>)
10002388:	681b      	ldr	r3, [r3, #0]
1000238a:	4013      	ands	r3, r2
1000238c:	1e5a      	subs	r2, r3, #1
1000238e:	4193      	sbcs	r3, r2
10002390:	b2db      	uxtb	r3, r3
}
10002392:	0018      	movs	r0, r3
10002394:	46bd      	mov	sp, r7
10002396:	b002      	add	sp, #8
10002398:	bd80      	pop	{r7, pc}
1000239a:	46c0      	nop			; (mov r8, r8)
1000239c:	e000e100 	.word	0xe000e100

100023a0 <irq_set_mask_enabled>:

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
100023a0:	b580      	push	{r7, lr}
100023a2:	b082      	sub	sp, #8
100023a4:	af00      	add	r7, sp, #0
100023a6:	6078      	str	r0, [r7, #4]
100023a8:	000a      	movs	r2, r1
100023aa:	1cfb      	adds	r3, r7, #3
100023ac:	701a      	strb	r2, [r3, #0]
    if (enabled) {
100023ae:	1cfb      	adds	r3, r7, #3
100023b0:	781b      	ldrb	r3, [r3, #0]
100023b2:	2b00      	cmp	r3, #0
100023b4:	d006      	beq.n	100023c4 <irq_set_mask_enabled+0x24>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
100023b6:	4b07      	ldr	r3, [pc, #28]	; (100023d4 <irq_set_mask_enabled+0x34>)
100023b8:	687a      	ldr	r2, [r7, #4]
100023ba:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
100023bc:	4b06      	ldr	r3, [pc, #24]	; (100023d8 <irq_set_mask_enabled+0x38>)
100023be:	687a      	ldr	r2, [r7, #4]
100023c0:	601a      	str	r2, [r3, #0]
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
    }
}
100023c2:	e002      	b.n	100023ca <irq_set_mask_enabled+0x2a>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100023c4:	4b05      	ldr	r3, [pc, #20]	; (100023dc <irq_set_mask_enabled+0x3c>)
100023c6:	687a      	ldr	r2, [r7, #4]
100023c8:	601a      	str	r2, [r3, #0]
}
100023ca:	46c0      	nop			; (mov r8, r8)
100023cc:	46bd      	mov	sp, r7
100023ce:	b002      	add	sp, #8
100023d0:	bd80      	pop	{r7, pc}
100023d2:	46c0      	nop			; (mov r8, r8)
100023d4:	e000e280 	.word	0xe000e280
100023d8:	e000e100 	.word	0xe000e100
100023dc:	e000e180 	.word	0xe000e180

100023e0 <is_shared_irq_raw_handler>:
    irq_handler_t handler;
} irq_handler_chain_slots[PICO_MAX_SHARED_IRQ_HANDLERS];

static int8_t irq_hander_chain_free_slot_head;

static inline bool is_shared_irq_raw_handler(irq_handler_t raw_handler) {
100023e0:	b580      	push	{r7, lr}
100023e2:	b082      	sub	sp, #8
100023e4:	af00      	add	r7, sp, #0
100023e6:	6078      	str	r0, [r7, #4]
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
100023e8:	687a      	ldr	r2, [r7, #4]
100023ea:	4b05      	ldr	r3, [pc, #20]	; (10002400 <is_shared_irq_raw_handler+0x20>)
100023ec:	1ad2      	subs	r2, r2, r3
100023ee:	212f      	movs	r1, #47	; 0x2f
100023f0:	2300      	movs	r3, #0
100023f2:	4291      	cmp	r1, r2
100023f4:	415b      	adcs	r3, r3
100023f6:	b2db      	uxtb	r3, r3
}
100023f8:	0018      	movs	r0, r3
100023fa:	46bd      	mov	sp, r7
100023fc:	b002      	add	sp, #8
100023fe:	bd80      	pop	{r7, pc}
10002400:	2000030c 	.word	0x2000030c

10002404 <irq_get_vtable_handler>:
    return false;
}
#endif


irq_handler_t irq_get_vtable_handler(uint num) {
10002404:	b580      	push	{r7, lr}
10002406:	b082      	sub	sp, #8
10002408:	af00      	add	r7, sp, #0
1000240a:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
1000240c:	687b      	ldr	r3, [r7, #4]
1000240e:	0018      	movs	r0, r3
10002410:	f7ff ff39 	bl	10002286 <check_irq_param>
    return get_vtable()[16 + num];
10002414:	f7ff ff40 	bl	10002298 <get_vtable>
10002418:	0002      	movs	r2, r0
1000241a:	687b      	ldr	r3, [r7, #4]
1000241c:	3310      	adds	r3, #16
1000241e:	009b      	lsls	r3, r3, #2
10002420:	18d3      	adds	r3, r2, r3
10002422:	681b      	ldr	r3, [r3, #0]
}
10002424:	0018      	movs	r0, r3
10002426:	46bd      	mov	sp, r7
10002428:	b002      	add	sp, #8
1000242a:	bd80      	pop	{r7, pc}

1000242c <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
1000242c:	b580      	push	{r7, lr}
1000242e:	b08a      	sub	sp, #40	; 0x28
10002430:	af00      	add	r7, sp, #0
10002432:	6078      	str	r0, [r7, #4]
10002434:	6039      	str	r1, [r7, #0]
    check_irq_param(num);
10002436:	687b      	ldr	r3, [r7, #4]
10002438:	0018      	movs	r0, r3
1000243a:	f7ff ff24 	bl	10002286 <check_irq_param>
1000243e:	2309      	movs	r3, #9
10002440:	60bb      	str	r3, [r7, #8]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002442:	68bb      	ldr	r3, [r7, #8]
10002444:	4a1d      	ldr	r2, [pc, #116]	; (100024bc <irq_set_exclusive_handler+0x90>)
10002446:	4694      	mov	ip, r2
10002448:	4463      	add	r3, ip
1000244a:	009b      	lsls	r3, r3, #2
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
1000244c:	627b      	str	r3, [r7, #36]	; 0x24
1000244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002450:	61bb      	str	r3, [r7, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002452:	f3ef 8310 	mrs	r3, PRIMASK
10002456:	617b      	str	r3, [r7, #20]
    __asm volatile ("cpsid i");
10002458:	b672      	cpsid	i
    return status;
1000245a:	697b      	ldr	r3, [r7, #20]
    uint32_t save = save_and_disable_interrupts();
1000245c:	613b      	str	r3, [r7, #16]
1000245e:	69bb      	ldr	r3, [r7, #24]
10002460:	60fb      	str	r3, [r7, #12]
    while (__builtin_expect(!*lock, 0));
10002462:	46c0      	nop			; (mov r8, r8)
10002464:	68fb      	ldr	r3, [r7, #12]
10002466:	681b      	ldr	r3, [r3, #0]
10002468:	425a      	negs	r2, r3
1000246a:	4153      	adcs	r3, r2
1000246c:	b2db      	uxtb	r3, r3
1000246e:	2b00      	cmp	r3, #0
10002470:	d1f8      	bne.n	10002464 <irq_set_exclusive_handler+0x38>
    __asm volatile ("dmb" : : : "memory");
10002472:	f3bf 8f5f 	dmb	sy
}
10002476:	46c0      	nop			; (mov r8, r8)
}
10002478:	46c0      	nop			; (mov r8, r8)
}
1000247a:	46c0      	nop			; (mov r8, r8)
    return save;
1000247c:	693b      	ldr	r3, [r7, #16]
    uint32_t save = spin_lock_blocking(lock);
1000247e:	623b      	str	r3, [r7, #32]
    __unused irq_handler_t current = irq_get_vtable_handler(num);
10002480:	687b      	ldr	r3, [r7, #4]
10002482:	0018      	movs	r0, r3
10002484:	f7ff ffbe 	bl	10002404 <irq_get_vtable_handler>
10002488:	0003      	movs	r3, r0
1000248a:	61fb      	str	r3, [r7, #28]
    hard_assert(current == __unhandled_user_irq || current == handler);
1000248c:	69fa      	ldr	r2, [r7, #28]
1000248e:	4b0c      	ldr	r3, [pc, #48]	; (100024c0 <irq_set_exclusive_handler+0x94>)
10002490:	429a      	cmp	r2, r3
10002492:	d009      	beq.n	100024a8 <irq_set_exclusive_handler+0x7c>
10002494:	69fa      	ldr	r2, [r7, #28]
10002496:	683b      	ldr	r3, [r7, #0]
10002498:	429a      	cmp	r2, r3
1000249a:	d005      	beq.n	100024a8 <irq_set_exclusive_handler+0x7c>
1000249c:	4b09      	ldr	r3, [pc, #36]	; (100024c4 <irq_set_exclusive_handler+0x98>)
1000249e:	4a0a      	ldr	r2, [pc, #40]	; (100024c8 <irq_set_exclusive_handler+0x9c>)
100024a0:	480a      	ldr	r0, [pc, #40]	; (100024cc <irq_set_exclusive_handler+0xa0>)
100024a2:	217c      	movs	r1, #124	; 0x7c
100024a4:	f002 fe80 	bl	100051a8 <__assert_func>
    set_raw_irq_handler_and_unlock(num, handler, save);
100024a8:	6a3a      	ldr	r2, [r7, #32]
100024aa:	6839      	ldr	r1, [r7, #0]
100024ac:	687b      	ldr	r3, [r7, #4]
100024ae:	0018      	movs	r0, r3
100024b0:	f7ff ff12 	bl	100022d8 <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
100024b4:	46c0      	nop			; (mov r8, r8)
100024b6:	46bd      	mov	sp, r7
100024b8:	b00a      	add	sp, #40	; 0x28
100024ba:	bd80      	pop	{r7, pc}
100024bc:	34000040 	.word	0x34000040
100024c0:	100001cd 	.word	0x100001cd
100024c4:	100074dc 	.word	0x100074dc
100024c8:	10007724 	.word	0x10007724
100024cc:	10007514 	.word	0x10007514

100024d0 <make_branch>:
#endif
}


#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
static uint16_t make_branch(uint16_t *from, void *to) {
100024d0:	b580      	push	{r7, lr}
100024d2:	b086      	sub	sp, #24
100024d4:	af00      	add	r7, sp, #0
100024d6:	6078      	str	r0, [r7, #4]
100024d8:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
100024da:	687b      	ldr	r3, [r7, #4]
100024dc:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
100024de:	683b      	ldr	r3, [r7, #0]
100024e0:	613b      	str	r3, [r7, #16]
    int32_t delta = (int32_t)(ui_to - ui_from - 4);
100024e2:	693a      	ldr	r2, [r7, #16]
100024e4:	697b      	ldr	r3, [r7, #20]
100024e6:	1ad3      	subs	r3, r2, r3
100024e8:	3b04      	subs	r3, #4
100024ea:	60fb      	str	r3, [r7, #12]
    assert(delta >= -2048 && delta <= 2046 && !(delta & 1));
100024ec:	68fb      	ldr	r3, [r7, #12]
100024ee:	4a0f      	ldr	r2, [pc, #60]	; (1000252c <make_branch+0x5c>)
100024f0:	4293      	cmp	r3, r2
100024f2:	db07      	blt.n	10002504 <make_branch+0x34>
100024f4:	68fb      	ldr	r3, [r7, #12]
100024f6:	4a0e      	ldr	r2, [pc, #56]	; (10002530 <make_branch+0x60>)
100024f8:	4293      	cmp	r3, r2
100024fa:	dc03      	bgt.n	10002504 <make_branch+0x34>
100024fc:	68fb      	ldr	r3, [r7, #12]
100024fe:	2201      	movs	r2, #1
10002500:	4013      	ands	r3, r2
10002502:	d005      	beq.n	10002510 <make_branch+0x40>
10002504:	4b0b      	ldr	r3, [pc, #44]	; (10002534 <make_branch+0x64>)
10002506:	4a0c      	ldr	r2, [pc, #48]	; (10002538 <make_branch+0x68>)
10002508:	480c      	ldr	r0, [pc, #48]	; (1000253c <make_branch+0x6c>)
1000250a:	2199      	movs	r1, #153	; 0x99
1000250c:	f002 fe4c 	bl	100051a8 <__assert_func>
    return (uint16_t)(0xe000 | ((delta >> 1) & 0x7ff));
10002510:	68fb      	ldr	r3, [r7, #12]
10002512:	105b      	asrs	r3, r3, #1
10002514:	b21b      	sxth	r3, r3
10002516:	055b      	lsls	r3, r3, #21
10002518:	0d5b      	lsrs	r3, r3, #21
1000251a:	b21b      	sxth	r3, r3
1000251c:	4a08      	ldr	r2, [pc, #32]	; (10002540 <make_branch+0x70>)
1000251e:	4313      	orrs	r3, r2
10002520:	b21b      	sxth	r3, r3
10002522:	b29b      	uxth	r3, r3
}
10002524:	0018      	movs	r0, r3
10002526:	46bd      	mov	sp, r7
10002528:	b006      	add	sp, #24
1000252a:	bd80      	pop	{r7, pc}
1000252c:	fffff800 	.word	0xfffff800
10002530:	000007fe 	.word	0x000007fe
10002534:	10007568 	.word	0x10007568
10002538:	10007740 	.word	0x10007740
1000253c:	10007514 	.word	0x10007514
10002540:	ffffe000 	.word	0xffffe000

10002544 <insert_branch_and_link>:

static void insert_branch_and_link(uint16_t *from, void *to) {
10002544:	b580      	push	{r7, lr}
10002546:	b086      	sub	sp, #24
10002548:	af00      	add	r7, sp, #0
1000254a:	6078      	str	r0, [r7, #4]
1000254c:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
1000254e:	687b      	ldr	r3, [r7, #4]
10002550:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
10002552:	683b      	ldr	r3, [r7, #0]
10002554:	613b      	str	r3, [r7, #16]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10002556:	693a      	ldr	r2, [r7, #16]
10002558:	697b      	ldr	r3, [r7, #20]
1000255a:	1ad3      	subs	r3, r2, r3
1000255c:	3b04      	subs	r3, #4
1000255e:	085b      	lsrs	r3, r3, #1
10002560:	60fb      	str	r3, [r7, #12]
    assert(!(delta >> 11u));
10002562:	68fb      	ldr	r3, [r7, #12]
10002564:	0adb      	lsrs	r3, r3, #11
10002566:	d005      	beq.n	10002574 <insert_branch_and_link+0x30>
10002568:	4b0e      	ldr	r3, [pc, #56]	; (100025a4 <insert_branch_and_link+0x60>)
1000256a:	4a0f      	ldr	r2, [pc, #60]	; (100025a8 <insert_branch_and_link+0x64>)
1000256c:	480f      	ldr	r0, [pc, #60]	; (100025ac <insert_branch_and_link+0x68>)
1000256e:	21a1      	movs	r1, #161	; 0xa1
10002570:	f002 fe1a 	bl	100051a8 <__assert_func>
    from[0] = (uint16_t)(0xf000 | ((delta >> 11u) & 0x7ffu));
10002574:	68fb      	ldr	r3, [r7, #12]
10002576:	0adb      	lsrs	r3, r3, #11
10002578:	b29b      	uxth	r3, r3
1000257a:	055b      	lsls	r3, r3, #21
1000257c:	0d5b      	lsrs	r3, r3, #21
1000257e:	b29b      	uxth	r3, r3
10002580:	4a0b      	ldr	r2, [pc, #44]	; (100025b0 <insert_branch_and_link+0x6c>)
10002582:	4313      	orrs	r3, r2
10002584:	b29a      	uxth	r2, r3
10002586:	687b      	ldr	r3, [r7, #4]
10002588:	801a      	strh	r2, [r3, #0]
    from[1] = (uint16_t)(0xf800 | (delta & 0x7ffu));
1000258a:	68fb      	ldr	r3, [r7, #12]
1000258c:	b29a      	uxth	r2, r3
1000258e:	687b      	ldr	r3, [r7, #4]
10002590:	3302      	adds	r3, #2
10002592:	4908      	ldr	r1, [pc, #32]	; (100025b4 <insert_branch_and_link+0x70>)
10002594:	430a      	orrs	r2, r1
10002596:	b292      	uxth	r2, r2
10002598:	801a      	strh	r2, [r3, #0]
}
1000259a:	46c0      	nop			; (mov r8, r8)
1000259c:	46bd      	mov	sp, r7
1000259e:	b006      	add	sp, #24
100025a0:	bd80      	pop	{r7, pc}
100025a2:	46c0      	nop			; (mov r8, r8)
100025a4:	10007598 	.word	0x10007598
100025a8:	1000774c 	.word	0x1000774c
100025ac:	10007514 	.word	0x10007514
100025b0:	fffff000 	.word	0xfffff000
100025b4:	fffff800 	.word	0xfffff800

100025b8 <resolve_branch>:

static inline void *resolve_branch(uint16_t *inst) {
100025b8:	b580      	push	{r7, lr}
100025ba:	b084      	sub	sp, #16
100025bc:	af00      	add	r7, sp, #0
100025be:	6078      	str	r0, [r7, #4]
    assert(0x1c == (*inst)>>11u);
100025c0:	687b      	ldr	r3, [r7, #4]
100025c2:	881b      	ldrh	r3, [r3, #0]
100025c4:	0adb      	lsrs	r3, r3, #11
100025c6:	b29b      	uxth	r3, r3
100025c8:	2b1c      	cmp	r3, #28
100025ca:	d005      	beq.n	100025d8 <resolve_branch+0x20>
100025cc:	4b0d      	ldr	r3, [pc, #52]	; (10002604 <resolve_branch+0x4c>)
100025ce:	4a0e      	ldr	r2, [pc, #56]	; (10002608 <resolve_branch+0x50>)
100025d0:	480e      	ldr	r0, [pc, #56]	; (1000260c <resolve_branch+0x54>)
100025d2:	21a7      	movs	r1, #167	; 0xa7
100025d4:	f002 fde8 	bl	100051a8 <__assert_func>
    int32_t i_addr = (*inst) << 21u;
100025d8:	687b      	ldr	r3, [r7, #4]
100025da:	881b      	ldrh	r3, [r3, #0]
100025dc:	055b      	lsls	r3, r3, #21
100025de:	60fb      	str	r3, [r7, #12]
    i_addr /= (int32_t)(1u<<21u);
100025e0:	68fb      	ldr	r3, [r7, #12]
100025e2:	2b00      	cmp	r3, #0
100025e4:	da02      	bge.n	100025ec <resolve_branch+0x34>
100025e6:	4a0a      	ldr	r2, [pc, #40]	; (10002610 <resolve_branch+0x58>)
100025e8:	4694      	mov	ip, r2
100025ea:	4463      	add	r3, ip
100025ec:	155b      	asrs	r3, r3, #21
100025ee:	60fb      	str	r3, [r7, #12]
    return inst + 2 + i_addr;
100025f0:	68fb      	ldr	r3, [r7, #12]
100025f2:	3302      	adds	r3, #2
100025f4:	005b      	lsls	r3, r3, #1
100025f6:	687a      	ldr	r2, [r7, #4]
100025f8:	18d3      	adds	r3, r2, r3
}
100025fa:	0018      	movs	r0, r3
100025fc:	46bd      	mov	sp, r7
100025fe:	b004      	add	sp, #16
10002600:	bd80      	pop	{r7, pc}
10002602:	46c0      	nop			; (mov r8, r8)
10002604:	100075a8 	.word	0x100075a8
10002608:	10007764 	.word	0x10007764
1000260c:	10007514 	.word	0x10007514
10002610:	001fffff 	.word	0x001fffff

10002614 <slot_diff>:

// GCC produces horrible code for subtraction of pointers here, and it was bugging me
static inline int8_t slot_diff(struct irq_handler_chain_slot *to, struct irq_handler_chain_slot *from) {
10002614:	b580      	push	{r7, lr}
10002616:	b084      	sub	sp, #16
10002618:	af00      	add	r7, sp, #0
1000261a:	6078      	str	r0, [r7, #4]
1000261c:	6039      	str	r1, [r7, #0]
    static_assert(sizeof(struct irq_handler_chain_slot) == 12, "");
    int32_t result = 0xaaaa;
1000261e:	4b08      	ldr	r3, [pc, #32]	; (10002640 <slot_diff+0x2c>)
10002620:	60fb      	str	r3, [r7, #12]
    // return (to - from);
    // note this implementation has limited range, but is fine for plenty more than -128->127 result
    asm (".syntax unified\n"
10002622:	6839      	ldr	r1, [r7, #0]
10002624:	68fa      	ldr	r2, [r7, #12]
10002626:	687b      	ldr	r3, [r7, #4]
10002628:	1a5b      	subs	r3, r3, r1
1000262a:	415b      	adcs	r3, r3
1000262c:	435a      	muls	r2, r3
1000262e:	0d12      	lsrs	r2, r2, #20
10002630:	60fa      	str	r2, [r7, #12]
10002632:	607b      	str	r3, [r7, #4]
         "lsrs %0, 20\n"
         : "+l" (result), "+l" (to)
         : "l" (from)
         :
         );
    return (int8_t)result;
10002634:	68fb      	ldr	r3, [r7, #12]
10002636:	b25b      	sxtb	r3, r3
}
10002638:	0018      	movs	r0, r3
1000263a:	46bd      	mov	sp, r7
1000263c:	b004      	add	sp, #16
1000263e:	bd80      	pop	{r7, pc}
10002640:	0000aaaa 	.word	0x0000aaaa

10002644 <get_slot_index>:

static inline int8_t get_slot_index(struct irq_handler_chain_slot *slot) {
10002644:	b580      	push	{r7, lr}
10002646:	b082      	sub	sp, #8
10002648:	af00      	add	r7, sp, #0
1000264a:	6078      	str	r0, [r7, #4]
    return slot_diff(slot, irq_handler_chain_slots);
1000264c:	4a05      	ldr	r2, [pc, #20]	; (10002664 <get_slot_index+0x20>)
1000264e:	687b      	ldr	r3, [r7, #4]
10002650:	0011      	movs	r1, r2
10002652:	0018      	movs	r0, r3
10002654:	f7ff ffde 	bl	10002614 <slot_diff>
10002658:	0003      	movs	r3, r0
}
1000265a:	0018      	movs	r0, r3
1000265c:	46bd      	mov	sp, r7
1000265e:	b002      	add	sp, #8
10002660:	bd80      	pop	{r7, pc}
10002662:	46c0      	nop			; (mov r8, r8)
10002664:	2000030c 	.word	0x2000030c

10002668 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10002668:	b590      	push	{r4, r7, lr}
1000266a:	b093      	sub	sp, #76	; 0x4c
1000266c:	af00      	add	r7, sp, #0
1000266e:	6078      	str	r0, [r7, #4]
10002670:	6039      	str	r1, [r7, #0]
10002672:	2309      	movs	r3, #9
10002674:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002676:	68fb      	ldr	r3, [r7, #12]
10002678:	4a84      	ldr	r2, [pc, #528]	; (1000288c <irq_remove_handler+0x224>)
1000267a:	4694      	mov	ip, r2
1000267c:	4463      	add	r3, ip
1000267e:	009b      	lsls	r3, r3, #2
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
10002680:	63bb      	str	r3, [r7, #56]	; 0x38
10002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10002684:	61fb      	str	r3, [r7, #28]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002686:	f3ef 8310 	mrs	r3, PRIMASK
1000268a:	61bb      	str	r3, [r7, #24]
    __asm volatile ("cpsid i");
1000268c:	b672      	cpsid	i
    return status;
1000268e:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
10002690:	617b      	str	r3, [r7, #20]
10002692:	69fb      	ldr	r3, [r7, #28]
10002694:	613b      	str	r3, [r7, #16]
    while (__builtin_expect(!*lock, 0));
10002696:	46c0      	nop			; (mov r8, r8)
10002698:	693b      	ldr	r3, [r7, #16]
1000269a:	681b      	ldr	r3, [r3, #0]
1000269c:	425a      	negs	r2, r3
1000269e:	4153      	adcs	r3, r2
100026a0:	b2db      	uxtb	r3, r3
100026a2:	2b00      	cmp	r3, #0
100026a4:	d1f8      	bne.n	10002698 <irq_remove_handler+0x30>
    __asm volatile ("dmb" : : : "memory");
100026a6:	f3bf 8f5f 	dmb	sy
}
100026aa:	46c0      	nop			; (mov r8, r8)
}
100026ac:	46c0      	nop			; (mov r8, r8)
}
100026ae:	46c0      	nop			; (mov r8, r8)
    return save;
100026b0:	697b      	ldr	r3, [r7, #20]
    uint32_t save = spin_lock_blocking(lock);
100026b2:	637b      	str	r3, [r7, #52]	; 0x34
    irq_handler_t vtable_handler = get_vtable()[16 + num];
100026b4:	f7ff fdf0 	bl	10002298 <get_vtable>
100026b8:	0002      	movs	r2, r0
100026ba:	687b      	ldr	r3, [r7, #4]
100026bc:	3310      	adds	r3, #16
100026be:	009b      	lsls	r3, r3, #2
100026c0:	18d3      	adds	r3, r2, r3
100026c2:	681b      	ldr	r3, [r3, #0]
100026c4:	647b      	str	r3, [r7, #68]	; 0x44
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
100026c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
100026c8:	4b71      	ldr	r3, [pc, #452]	; (10002890 <irq_remove_handler+0x228>)
100026ca:	429a      	cmp	r2, r3
100026cc:	d100      	bne.n	100026d0 <irq_remove_handler+0x68>
100026ce:	e0d0      	b.n	10002872 <irq_remove_handler+0x20a>
100026d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
100026d2:	683b      	ldr	r3, [r7, #0]
100026d4:	429a      	cmp	r2, r3
100026d6:	d100      	bne.n	100026da <irq_remove_handler+0x72>
100026d8:	e0cb      	b.n	10002872 <irq_remove_handler+0x20a>
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
100026da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100026dc:	0018      	movs	r0, r3
100026de:	f7ff fe7f 	bl	100023e0 <is_shared_irq_raw_handler>
100026e2:	1e03      	subs	r3, r0, #0
100026e4:	d100      	bne.n	100026e8 <irq_remove_handler+0x80>
100026e6:	e0c6      	b.n	10002876 <irq_remove_handler+0x20e>
            // This is a bit tricky, as an executing IRQ handler doesn't take a lock.

            // First thing to do is to disable the IRQ in question; that takes care of calls from user code.
            // Note that a irq handler chain is local to our own core, so we don't need to worry about the other core
            bool was_enabled = irq_is_enabled(num);
100026e8:	2333      	movs	r3, #51	; 0x33
100026ea:	18fc      	adds	r4, r7, r3
100026ec:	687b      	ldr	r3, [r7, #4]
100026ee:	0018      	movs	r0, r3
100026f0:	f7ff fe3e 	bl	10002370 <irq_is_enabled>
100026f4:	0003      	movs	r3, r0
100026f6:	7023      	strb	r3, [r4, #0]
            irq_set_enabled(num, false);
100026f8:	687b      	ldr	r3, [r7, #4]
100026fa:	2100      	movs	r1, #0
100026fc:	0018      	movs	r0, r3
100026fe:	f7ff fe1f 	bl	10002340 <irq_set_enabled>
    __asm volatile ("dmb" : : : "memory");
10002702:	f3bf 8f5f 	dmb	sy
}
10002706:	46c0      	nop			; (mov r8, r8)
            // Note we expect that the slot we are deleting is the one that is executing.
            // In particular, bad things happen if the caller were to delete the handler in the chain
            // before it. This is not an allowed use case though, and I can't imagine anyone wanting to in practice.
            // Sadly this is not something we can detect.

            uint exception = __get_current_exception();
10002708:	f7fd fdc5 	bl	10000296 <__get_current_exception>
1000270c:	0003      	movs	r3, r0
1000270e:	62fb      	str	r3, [r7, #44]	; 0x2c
            hard_assert(!exception || exception == num + 16);
10002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002712:	2b00      	cmp	r3, #0
10002714:	d00b      	beq.n	1000272e <irq_remove_handler+0xc6>
10002716:	687b      	ldr	r3, [r7, #4]
10002718:	3310      	adds	r3, #16
1000271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000271c:	429a      	cmp	r2, r3
1000271e:	d006      	beq.n	1000272e <irq_remove_handler+0xc6>
10002720:	4b5c      	ldr	r3, [pc, #368]	; (10002894 <irq_remove_handler+0x22c>)
10002722:	4a5d      	ldr	r2, [pc, #372]	; (10002898 <irq_remove_handler+0x230>)
10002724:	212c      	movs	r1, #44	; 0x2c
10002726:	31ff      	adds	r1, #255	; 0xff
10002728:	485c      	ldr	r0, [pc, #368]	; (1000289c <irq_remove_handler+0x234>)
1000272a:	f002 fd3d 	bl	100051a8 <__assert_func>

            struct irq_handler_chain_slot *prev_slot = NULL;
1000272e:	2300      	movs	r3, #0
10002730:	643b      	str	r3, [r7, #64]	; 0x40
            struct irq_handler_chain_slot *existing_vtable_slot = remove_thumb_bit(vtable_handler);
10002732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10002734:	0018      	movs	r0, r3
10002736:	f7ff fdc4 	bl	100022c2 <remove_thumb_bit>
1000273a:	0003      	movs	r3, r0
1000273c:	62bb      	str	r3, [r7, #40]	; 0x28
            struct irq_handler_chain_slot *to_free_slot = existing_vtable_slot;
1000273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002740:	63fb      	str	r3, [r7, #60]	; 0x3c
            while (to_free_slot->handler != handler) {
10002742:	e011      	b.n	10002768 <irq_remove_handler+0x100>
                prev_slot = to_free_slot;
10002744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002746:	643b      	str	r3, [r7, #64]	; 0x40
                if (to_free_slot->link < 0) break;
10002748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000274a:	799b      	ldrb	r3, [r3, #6]
1000274c:	b25b      	sxtb	r3, r3
1000274e:	2b00      	cmp	r3, #0
10002750:	db10      	blt.n	10002774 <irq_remove_handler+0x10c>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002754:	799b      	ldrb	r3, [r3, #6]
10002756:	b25b      	sxtb	r3, r3
10002758:	001a      	movs	r2, r3
1000275a:	0013      	movs	r3, r2
1000275c:	005b      	lsls	r3, r3, #1
1000275e:	189b      	adds	r3, r3, r2
10002760:	009b      	lsls	r3, r3, #2
10002762:	4a4f      	ldr	r2, [pc, #316]	; (100028a0 <irq_remove_handler+0x238>)
10002764:	189b      	adds	r3, r3, r2
10002766:	63fb      	str	r3, [r7, #60]	; 0x3c
            while (to_free_slot->handler != handler) {
10002768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000276a:	689b      	ldr	r3, [r3, #8]
1000276c:	683a      	ldr	r2, [r7, #0]
1000276e:	429a      	cmp	r2, r3
10002770:	d1e8      	bne.n	10002744 <irq_remove_handler+0xdc>
10002772:	e000      	b.n	10002776 <irq_remove_handler+0x10e>
                if (to_free_slot->link < 0) break;
10002774:	46c0      	nop			; (mov r8, r8)
            }
            if (to_free_slot->handler == handler) {
10002776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002778:	689b      	ldr	r3, [r3, #8]
1000277a:	683a      	ldr	r2, [r7, #0]
1000277c:	429a      	cmp	r2, r3
1000277e:	d168      	bne.n	10002852 <irq_remove_handler+0x1ea>
                int8_t next_slot_index = to_free_slot->link;
10002780:	2127      	movs	r1, #39	; 0x27
10002782:	187b      	adds	r3, r7, r1
10002784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10002786:	7992      	ldrb	r2, [r2, #6]
10002788:	701a      	strb	r2, [r3, #0]
                if (next_slot_index >= 0) {
1000278a:	000a      	movs	r2, r1
1000278c:	18bb      	adds	r3, r7, r2
1000278e:	781b      	ldrb	r3, [r3, #0]
10002790:	2b7f      	cmp	r3, #127	; 0x7f
10002792:	d839      	bhi.n	10002808 <irq_remove_handler+0x1a0>
                    // There is another slot in the chain, so copy that over us, so that our inst3 points at something valid
                    // Note this only matters in the exception case anyway, and it that case, we will skip the next handler,
                    // however in that case it's IRQ cause should immediately cause re-entry of the IRQ and the only side
                    // effect will be that there was potentially brief out of priority order execution of the handlers
                    struct irq_handler_chain_slot *next_slot = &irq_handler_chain_slots[next_slot_index];
10002794:	18bb      	adds	r3, r7, r2
10002796:	2200      	movs	r2, #0
10002798:	569a      	ldrsb	r2, [r3, r2]
1000279a:	0013      	movs	r3, r2
1000279c:	005b      	lsls	r3, r3, #1
1000279e:	189b      	adds	r3, r3, r2
100027a0:	009b      	lsls	r3, r3, #2
100027a2:	4a3f      	ldr	r2, [pc, #252]	; (100028a0 <irq_remove_handler+0x238>)
100027a4:	189b      	adds	r3, r3, r2
100027a6:	623b      	str	r3, [r7, #32]
                    to_free_slot->handler = next_slot->handler;
100027a8:	6a3b      	ldr	r3, [r7, #32]
100027aa:	689a      	ldr	r2, [r3, #8]
100027ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100027ae:	609a      	str	r2, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
100027b0:	6a3b      	ldr	r3, [r7, #32]
100027b2:	79da      	ldrb	r2, [r3, #7]
100027b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100027b6:	71da      	strb	r2, [r3, #7]
                    to_free_slot->link = next_slot->link;
100027b8:	6a3b      	ldr	r3, [r7, #32]
100027ba:	2206      	movs	r2, #6
100027bc:	569a      	ldrsb	r2, [r3, r2]
100027be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100027c0:	719a      	strb	r2, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
100027c2:	6a3b      	ldr	r3, [r7, #32]
100027c4:	799b      	ldrb	r3, [r3, #6]
100027c6:	b25b      	sxtb	r3, r3
100027c8:	2b00      	cmp	r3, #0
100027ca:	db0e      	blt.n	100027ea <irq_remove_handler+0x182>
                            make_branch(&to_free_slot->inst3, resolve_branch(&next_slot->inst3)) : // b mext_>slot->next_slot
100027cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100027ce:	1d1c      	adds	r4, r3, #4
100027d0:	6a3b      	ldr	r3, [r7, #32]
100027d2:	3304      	adds	r3, #4
100027d4:	0018      	movs	r0, r3
100027d6:	f7ff feef 	bl	100025b8 <resolve_branch>
100027da:	0003      	movs	r3, r0
100027dc:	0019      	movs	r1, r3
100027de:	0020      	movs	r0, r4
100027e0:	f7ff fe76 	bl	100024d0 <make_branch>
100027e4:	0003      	movs	r3, r0
100027e6:	001a      	movs	r2, r3
100027e8:	e001      	b.n	100027ee <irq_remove_handler+0x186>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
100027ea:	23bd      	movs	r3, #189	; 0xbd
100027ec:	021a      	lsls	r2, r3, #8
100027ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100027f0:	809a      	strh	r2, [r3, #4]
                            0xbd00;                                                                // pop {pc}

                    // add old next slot back to free list
                    next_slot->link = irq_hander_chain_free_slot_head;
100027f2:	4b2c      	ldr	r3, [pc, #176]	; (100028a4 <irq_remove_handler+0x23c>)
100027f4:	2200      	movs	r2, #0
100027f6:	569a      	ldrsb	r2, [r3, r2]
100027f8:	6a3b      	ldr	r3, [r7, #32]
100027fa:	719a      	strb	r2, [r3, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
100027fc:	4b29      	ldr	r3, [pc, #164]	; (100028a4 <irq_remove_handler+0x23c>)
100027fe:	2227      	movs	r2, #39	; 0x27
10002800:	18ba      	adds	r2, r7, r2
10002802:	7812      	ldrb	r2, [r2, #0]
10002804:	701a      	strb	r2, [r3, #0]
10002806:	e02b      	b.n	10002860 <irq_remove_handler+0x1f8>
                } else {
                    // Slot being removed is at the end of the chain
                    if (!exception) {
10002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000280a:	2b00      	cmp	r3, #0
1000280c:	d119      	bne.n	10002842 <irq_remove_handler+0x1da>
                        // case when we're not in exception, we physically unlink now
                        if (prev_slot) {
1000280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002810:	2b00      	cmp	r3, #0
10002812:	d006      	beq.n	10002822 <irq_remove_handler+0x1ba>
                            // chain is not empty
                            prev_slot->link = -1;
10002814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002816:	22ff      	movs	r2, #255	; 0xff
10002818:	719a      	strb	r2, [r3, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
1000281a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000281c:	4a22      	ldr	r2, [pc, #136]	; (100028a8 <irq_remove_handler+0x240>)
1000281e:	809a      	strh	r2, [r3, #4]
10002820:	e001      	b.n	10002826 <irq_remove_handler+0x1be>
                        } else {
                            // chain is not empty
                            vtable_handler = __unhandled_user_irq;
10002822:	4b1b      	ldr	r3, [pc, #108]	; (10002890 <irq_remove_handler+0x228>)
10002824:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        // add slot back to free list
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10002826:	4b1f      	ldr	r3, [pc, #124]	; (100028a4 <irq_remove_handler+0x23c>)
10002828:	2200      	movs	r2, #0
1000282a:	569a      	ldrsb	r2, [r3, r2]
1000282c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000282e:	719a      	strb	r2, [r3, #6]
                        irq_hander_chain_free_slot_head = get_slot_index(to_free_slot);
10002830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002832:	0018      	movs	r0, r3
10002834:	f7ff ff06 	bl	10002644 <get_slot_index>
10002838:	0003      	movs	r3, r0
1000283a:	001a      	movs	r2, r3
1000283c:	4b19      	ldr	r3, [pc, #100]	; (100028a4 <irq_remove_handler+0x23c>)
1000283e:	701a      	strb	r2, [r3, #0]
10002840:	e00e      	b.n	10002860 <irq_remove_handler+0x1f8>
                    } else {
                        // since we are the last slot we know that our inst3 hasn't executed yet, so we change
                        // it to bl to irq_handler_chain_remove_tail which will remove the slot.
                        // NOTE THAT THIS TRASHES PRIORITY AND LINK SINCE THIS IS A 4 BYTE INSTRUCTION
                        //      BUT THEY ARE NOT NEEDED NOW
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10002844:	3304      	adds	r3, #4
10002846:	4a19      	ldr	r2, [pc, #100]	; (100028ac <irq_remove_handler+0x244>)
10002848:	0011      	movs	r1, r2
1000284a:	0018      	movs	r0, r3
1000284c:	f7ff fe7a 	bl	10002544 <insert_branch_and_link>
10002850:	e006      	b.n	10002860 <irq_remove_handler+0x1f8>
                    }
                }
            } else {
                assert(false); // not found
10002852:	4b17      	ldr	r3, [pc, #92]	; (100028b0 <irq_remove_handler+0x248>)
10002854:	4a10      	ldr	r2, [pc, #64]	; (10002898 <irq_remove_handler+0x230>)
10002856:	2160      	movs	r1, #96	; 0x60
10002858:	31ff      	adds	r1, #255	; 0xff
1000285a:	4810      	ldr	r0, [pc, #64]	; (1000289c <irq_remove_handler+0x234>)
1000285c:	f002 fca4 	bl	100051a8 <__assert_func>
            }
            irq_set_enabled(num, was_enabled);
10002860:	2333      	movs	r3, #51	; 0x33
10002862:	18fb      	adds	r3, r7, r3
10002864:	781a      	ldrb	r2, [r3, #0]
10002866:	687b      	ldr	r3, [r7, #4]
10002868:	0011      	movs	r1, r2
1000286a:	0018      	movs	r0, r3
1000286c:	f7ff fd68 	bl	10002340 <irq_set_enabled>
        if (is_shared_irq_raw_handler(vtable_handler)) {
10002870:	e001      	b.n	10002876 <irq_remove_handler+0x20e>
        }
#else
        assert(false); // not found
#endif
    } else {
        vtable_handler = __unhandled_user_irq;
10002872:	4b07      	ldr	r3, [pc, #28]	; (10002890 <irq_remove_handler+0x228>)
10002874:	647b      	str	r3, [r7, #68]	; 0x44
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
10002876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10002878:	6c79      	ldr	r1, [r7, #68]	; 0x44
1000287a:	687b      	ldr	r3, [r7, #4]
1000287c:	0018      	movs	r0, r3
1000287e:	f7ff fd2b 	bl	100022d8 <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
10002882:	46c0      	nop			; (mov r8, r8)
10002884:	46bd      	mov	sp, r7
10002886:	b013      	add	sp, #76	; 0x4c
10002888:	bd90      	pop	{r4, r7, pc}
1000288a:	46c0      	nop			; (mov r8, r8)
1000288c:	34000040 	.word	0x34000040
10002890:	100001cd 	.word	0x100001cd
10002894:	10007684 	.word	0x10007684
10002898:	10007774 	.word	0x10007774
1000289c:	10007514 	.word	0x10007514
100028a0:	2000030c 	.word	0x2000030c
100028a4:	2000165d 	.word	0x2000165d
100028a8:	ffffbd00 	.word	0xffffbd00
100028ac:	20000346 	.word	0x20000346
100028b0:	100076a8 	.word	0x100076a8

100028b4 <irq_add_tail_to_free_list>:
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
100028b4:	b590      	push	{r4, r7, lr}
100028b6:	b093      	sub	sp, #76	; 0x4c
100028b8:	af00      	add	r7, sp, #0
100028ba:	6078      	str	r0, [r7, #4]
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
100028bc:	687b      	ldr	r3, [r7, #4]
100028be:	0018      	movs	r0, r3
100028c0:	f7ff fcf4 	bl	100022ac <add_thumb_bit>
100028c4:	0003      	movs	r3, r0
100028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    assert(is_shared_irq_raw_handler(slot_handler));
100028c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100028ca:	0018      	movs	r0, r3
100028cc:	f7ff fd88 	bl	100023e0 <is_shared_irq_raw_handler>
100028d0:	1e03      	subs	r3, r0, #0
100028d2:	d106      	bne.n	100028e2 <irq_add_tail_to_free_list+0x2e>
100028d4:	4b5a      	ldr	r3, [pc, #360]	; (10002a40 <irq_add_tail_to_free_list+0x18c>)
100028d6:	4a5b      	ldr	r2, [pc, #364]	; (10002a44 <irq_add_tail_to_free_list+0x190>)
100028d8:	21c2      	movs	r1, #194	; 0xc2
100028da:	0049      	lsls	r1, r1, #1
100028dc:	485a      	ldr	r0, [pc, #360]	; (10002a48 <irq_add_tail_to_free_list+0x194>)
100028de:	f002 fc63 	bl	100051a8 <__assert_func>

    uint exception = __get_current_exception();
100028e2:	f7fd fcd8 	bl	10000296 <__get_current_exception>
100028e6:	0003      	movs	r3, r0
100028e8:	63bb      	str	r3, [r7, #56]	; 0x38
    assert(exception);
100028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100028ec:	2b00      	cmp	r3, #0
100028ee:	d106      	bne.n	100028fe <irq_add_tail_to_free_list+0x4a>
100028f0:	4b56      	ldr	r3, [pc, #344]	; (10002a4c <irq_add_tail_to_free_list+0x198>)
100028f2:	4a54      	ldr	r2, [pc, #336]	; (10002a44 <irq_add_tail_to_free_list+0x190>)
100028f4:	2188      	movs	r1, #136	; 0x88
100028f6:	31ff      	adds	r1, #255	; 0xff
100028f8:	4853      	ldr	r0, [pc, #332]	; (10002a48 <irq_add_tail_to_free_list+0x194>)
100028fa:	f002 fc55 	bl	100051a8 <__assert_func>
100028fe:	2309      	movs	r3, #9
10002900:	61bb      	str	r3, [r7, #24]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002902:	69bb      	ldr	r3, [r7, #24]
10002904:	4a52      	ldr	r2, [pc, #328]	; (10002a50 <irq_add_tail_to_free_list+0x19c>)
10002906:	4694      	mov	ip, r2
10002908:	4463      	add	r3, ip
1000290a:	009b      	lsls	r3, r3, #2
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
1000290c:	637b      	str	r3, [r7, #52]	; 0x34
1000290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002910:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002912:	f3ef 8310 	mrs	r3, PRIMASK
10002916:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("cpsid i");
10002918:	b672      	cpsid	i
    return status;
1000291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    uint32_t save = save_and_disable_interrupts();
1000291c:	623b      	str	r3, [r7, #32]
1000291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002920:	61fb      	str	r3, [r7, #28]
    while (__builtin_expect(!*lock, 0));
10002922:	46c0      	nop			; (mov r8, r8)
10002924:	69fb      	ldr	r3, [r7, #28]
10002926:	681b      	ldr	r3, [r3, #0]
10002928:	425a      	negs	r2, r3
1000292a:	4153      	adcs	r3, r2
1000292c:	b2db      	uxtb	r3, r3
1000292e:	2b00      	cmp	r3, #0
10002930:	d1f8      	bne.n	10002924 <irq_add_tail_to_free_list+0x70>
    __asm volatile ("dmb" : : : "memory");
10002932:	f3bf 8f5f 	dmb	sy
}
10002936:	46c0      	nop			; (mov r8, r8)
}
10002938:	46c0      	nop			; (mov r8, r8)
}
1000293a:	46c0      	nop			; (mov r8, r8)
    return save;
1000293c:	6a3b      	ldr	r3, [r7, #32]
    uint32_t save = spin_lock_blocking(lock);
1000293e:	633b      	str	r3, [r7, #48]	; 0x30
    int8_t slot_index = get_slot_index(slot);
10002940:	232f      	movs	r3, #47	; 0x2f
10002942:	18fc      	adds	r4, r7, r3
10002944:	687b      	ldr	r3, [r7, #4]
10002946:	0018      	movs	r0, r3
10002948:	f7ff fe7c 	bl	10002644 <get_slot_index>
1000294c:	0003      	movs	r3, r0
1000294e:	7023      	strb	r3, [r4, #0]
    if (slot_handler == get_vtable()[exception]) {
10002950:	f7ff fca2 	bl	10002298 <get_vtable>
10002954:	0002      	movs	r2, r0
10002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10002958:	009b      	lsls	r3, r3, #2
1000295a:	18d3      	adds	r3, r2, r3
1000295c:	681b      	ldr	r3, [r3, #0]
1000295e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10002960:	429a      	cmp	r2, r3
10002962:	d108      	bne.n	10002976 <irq_add_tail_to_free_list+0xc2>
        get_vtable()[exception] = __unhandled_user_irq;
10002964:	f7ff fc98 	bl	10002298 <get_vtable>
10002968:	0002      	movs	r2, r0
1000296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000296c:	009b      	lsls	r3, r3, #2
1000296e:	18d3      	adds	r3, r2, r3
10002970:	4a38      	ldr	r2, [pc, #224]	; (10002a54 <irq_add_tail_to_free_list+0x1a0>)
10002972:	601a      	str	r2, [r3, #0]
10002974:	e041      	b.n	100029fa <irq_add_tail_to_free_list+0x146>
    } else {
        bool __unused found = false;
10002976:	2347      	movs	r3, #71	; 0x47
10002978:	18fb      	adds	r3, r7, r3
1000297a:	2200      	movs	r2, #0
1000297c:	701a      	strb	r2, [r3, #0]
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
1000297e:	2300      	movs	r3, #0
10002980:	643b      	str	r3, [r7, #64]	; 0x40
10002982:	e02b      	b.n	100029dc <irq_add_tail_to_free_list+0x128>
            if (irq_handler_chain_slots[i].link == slot_index) {
10002984:	4934      	ldr	r1, [pc, #208]	; (10002a58 <irq_add_tail_to_free_list+0x1a4>)
10002986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10002988:	0013      	movs	r3, r2
1000298a:	005b      	lsls	r3, r3, #1
1000298c:	189b      	adds	r3, r3, r2
1000298e:	009b      	lsls	r3, r3, #2
10002990:	18cb      	adds	r3, r1, r3
10002992:	3306      	adds	r3, #6
10002994:	781b      	ldrb	r3, [r3, #0]
10002996:	b25b      	sxtb	r3, r3
10002998:	222f      	movs	r2, #47	; 0x2f
1000299a:	18ba      	adds	r2, r7, r2
1000299c:	7812      	ldrb	r2, [r2, #0]
1000299e:	b252      	sxtb	r2, r2
100029a0:	429a      	cmp	r2, r3
100029a2:	d118      	bne.n	100029d6 <irq_add_tail_to_free_list+0x122>
                irq_handler_chain_slots[i].link = -1;
100029a4:	492c      	ldr	r1, [pc, #176]	; (10002a58 <irq_add_tail_to_free_list+0x1a4>)
100029a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
100029a8:	0013      	movs	r3, r2
100029aa:	005b      	lsls	r3, r3, #1
100029ac:	189b      	adds	r3, r3, r2
100029ae:	009b      	lsls	r3, r3, #2
100029b0:	18cb      	adds	r3, r1, r3
100029b2:	3306      	adds	r3, #6
100029b4:	22ff      	movs	r2, #255	; 0xff
100029b6:	701a      	strb	r2, [r3, #0]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
100029b8:	4927      	ldr	r1, [pc, #156]	; (10002a58 <irq_add_tail_to_free_list+0x1a4>)
100029ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
100029bc:	0013      	movs	r3, r2
100029be:	005b      	lsls	r3, r3, #1
100029c0:	189b      	adds	r3, r3, r2
100029c2:	009b      	lsls	r3, r3, #2
100029c4:	18cb      	adds	r3, r1, r3
100029c6:	3304      	adds	r3, #4
100029c8:	4a24      	ldr	r2, [pc, #144]	; (10002a5c <irq_add_tail_to_free_list+0x1a8>)
100029ca:	801a      	strh	r2, [r3, #0]
                found = true;
100029cc:	2347      	movs	r3, #71	; 0x47
100029ce:	18fb      	adds	r3, r7, r3
100029d0:	2201      	movs	r2, #1
100029d2:	701a      	strb	r2, [r3, #0]
                break;
100029d4:	e005      	b.n	100029e2 <irq_add_tail_to_free_list+0x12e>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100029d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100029d8:	3301      	adds	r3, #1
100029da:	643b      	str	r3, [r7, #64]	; 0x40
100029dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
100029de:	2b03      	cmp	r3, #3
100029e0:	d9d0      	bls.n	10002984 <irq_add_tail_to_free_list+0xd0>
            }
        }
        assert(found);
100029e2:	2347      	movs	r3, #71	; 0x47
100029e4:	18fb      	adds	r3, r7, r3
100029e6:	781b      	ldrb	r3, [r3, #0]
100029e8:	2b00      	cmp	r3, #0
100029ea:	d106      	bne.n	100029fa <irq_add_tail_to_free_list+0x146>
100029ec:	4b1c      	ldr	r3, [pc, #112]	; (10002a60 <irq_add_tail_to_free_list+0x1ac>)
100029ee:	4a15      	ldr	r2, [pc, #84]	; (10002a44 <irq_add_tail_to_free_list+0x190>)
100029f0:	21cc      	movs	r1, #204	; 0xcc
100029f2:	0049      	lsls	r1, r1, #1
100029f4:	4814      	ldr	r0, [pc, #80]	; (10002a48 <irq_add_tail_to_free_list+0x194>)
100029f6:	f002 fbd7 	bl	100051a8 <__assert_func>
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
100029fa:	4b1a      	ldr	r3, [pc, #104]	; (10002a64 <irq_add_tail_to_free_list+0x1b0>)
100029fc:	2200      	movs	r2, #0
100029fe:	569a      	ldrsb	r2, [r3, r2]
10002a00:	687b      	ldr	r3, [r7, #4]
10002a02:	719a      	strb	r2, [r3, #6]
    irq_hander_chain_free_slot_head = slot_index;
10002a04:	4b17      	ldr	r3, [pc, #92]	; (10002a64 <irq_add_tail_to_free_list+0x1b0>)
10002a06:	222f      	movs	r2, #47	; 0x2f
10002a08:	18ba      	adds	r2, r7, r2
10002a0a:	7812      	ldrb	r2, [r2, #0]
10002a0c:	701a      	strb	r2, [r3, #0]
10002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002a10:	617b      	str	r3, [r7, #20]
10002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002a14:	613b      	str	r3, [r7, #16]
10002a16:	697b      	ldr	r3, [r7, #20]
10002a18:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
10002a1a:	f3bf 8f5f 	dmb	sy
}
10002a1e:	46c0      	nop			; (mov r8, r8)
}
10002a20:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10002a22:	68fb      	ldr	r3, [r7, #12]
10002a24:	2200      	movs	r2, #0
10002a26:	601a      	str	r2, [r3, #0]
}
10002a28:	46c0      	nop			; (mov r8, r8)
10002a2a:	693b      	ldr	r3, [r7, #16]
10002a2c:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002a2e:	68bb      	ldr	r3, [r7, #8]
10002a30:	f383 8810 	msr	PRIMASK, r3
}
10002a34:	46c0      	nop			; (mov r8, r8)
}
10002a36:	46c0      	nop			; (mov r8, r8)
    spin_unlock(lock, save);
}
10002a38:	46c0      	nop			; (mov r8, r8)
10002a3a:	46bd      	mov	sp, r7
10002a3c:	b013      	add	sp, #76	; 0x4c
10002a3e:	bd90      	pop	{r4, r7, pc}
10002a40:	100076b0 	.word	0x100076b0
10002a44:	10007788 	.word	0x10007788
10002a48:	10007514 	.word	0x10007514
10002a4c:	100076d8 	.word	0x100076d8
10002a50:	34000040 	.word	0x34000040
10002a54:	100001cd 	.word	0x100001cd
10002a58:	2000030c 	.word	0x2000030c
10002a5c:	ffffbd00 	.word	0xffffbd00
10002a60:	100076e4 	.word	0x100076e4
10002a64:	2000165d 	.word	0x2000165d

10002a68 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10002a68:	b580      	push	{r7, lr}
10002a6a:	b084      	sub	sp, #16
10002a6c:	af00      	add	r7, sp, #0
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    static_assert(!(NUM_IRQS & 3), "");
    uint32_t prio4 = (PICO_DEFAULT_IRQ_PRIORITY & 0xff) * 0x1010101u;
10002a6e:	4b0b      	ldr	r3, [pc, #44]	; (10002a9c <irq_init_priorities+0x34>)
10002a70:	607b      	str	r3, [r7, #4]
    io_rw_32 * p = (io_rw_32 *)(PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET);
10002a72:	4b0b      	ldr	r3, [pc, #44]	; (10002aa0 <irq_init_priorities+0x38>)
10002a74:	60fb      	str	r3, [r7, #12]
    for (uint i = 0; i < NUM_IRQS / 4; i++) {
10002a76:	2300      	movs	r3, #0
10002a78:	60bb      	str	r3, [r7, #8]
10002a7a:	e007      	b.n	10002a8c <irq_init_priorities+0x24>
        *p++ = prio4;
10002a7c:	68fb      	ldr	r3, [r7, #12]
10002a7e:	1d1a      	adds	r2, r3, #4
10002a80:	60fa      	str	r2, [r7, #12]
10002a82:	687a      	ldr	r2, [r7, #4]
10002a84:	601a      	str	r2, [r3, #0]
    for (uint i = 0; i < NUM_IRQS / 4; i++) {
10002a86:	68bb      	ldr	r3, [r7, #8]
10002a88:	3301      	adds	r3, #1
10002a8a:	60bb      	str	r3, [r7, #8]
10002a8c:	68bb      	ldr	r3, [r7, #8]
10002a8e:	2b07      	cmp	r3, #7
10002a90:	d9f4      	bls.n	10002a7c <irq_init_priorities+0x14>
    }
#endif
}
10002a92:	46c0      	nop			; (mov r8, r8)
10002a94:	46c0      	nop			; (mov r8, r8)
10002a96:	46bd      	mov	sp, r7
10002a98:	b004      	add	sp, #16
10002a9a:	bd80      	pop	{r7, pc}
10002a9c:	80808080 	.word	0x80808080
10002aa0:	e000e400 	.word	0xe000e400

10002aa4 <reset_block>:
/*! \brief Reset the specified HW blocks
 *  \ingroup hardware_resets
 *
 * \param bits Bit pattern indicating blocks to reset. See \ref reset_bitmask
 */
static inline void reset_block(uint32_t bits) {
10002aa4:	b580      	push	{r7, lr}
10002aa6:	b084      	sub	sp, #16
10002aa8:	af00      	add	r7, sp, #0
10002aaa:	6078      	str	r0, [r7, #4]
10002aac:	4b07      	ldr	r3, [pc, #28]	; (10002acc <reset_block+0x28>)
10002aae:	60fb      	str	r3, [r7, #12]
10002ab0:	687b      	ldr	r3, [r7, #4]
10002ab2:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002ab4:	68fb      	ldr	r3, [r7, #12]
10002ab6:	2280      	movs	r2, #128	; 0x80
10002ab8:	0192      	lsls	r2, r2, #6
10002aba:	4313      	orrs	r3, r2
10002abc:	68ba      	ldr	r2, [r7, #8]
10002abe:	601a      	str	r2, [r3, #0]
}
10002ac0:	46c0      	nop			; (mov r8, r8)
    hw_set_bits(&resets_hw->reset, bits);
}
10002ac2:	46c0      	nop			; (mov r8, r8)
10002ac4:	46bd      	mov	sp, r7
10002ac6:	b004      	add	sp, #16
10002ac8:	bd80      	pop	{r7, pc}
10002aca:	46c0      	nop			; (mov r8, r8)
10002acc:	4000c000 	.word	0x4000c000

10002ad0 <unreset_block_wait>:
/*! \brief Bring specified HW blocks out of reset and wait for completion
 *  \ingroup hardware_resets
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
10002ad0:	b580      	push	{r7, lr}
10002ad2:	b084      	sub	sp, #16
10002ad4:	af00      	add	r7, sp, #0
10002ad6:	6078      	str	r0, [r7, #4]
10002ad8:	4b0b      	ldr	r3, [pc, #44]	; (10002b08 <unreset_block_wait+0x38>)
10002ada:	60fb      	str	r3, [r7, #12]
10002adc:	687b      	ldr	r3, [r7, #4]
10002ade:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002ae0:	68fb      	ldr	r3, [r7, #12]
10002ae2:	22c0      	movs	r2, #192	; 0xc0
10002ae4:	0192      	lsls	r2, r2, #6
10002ae6:	4313      	orrs	r3, r2
10002ae8:	68ba      	ldr	r2, [r7, #8]
10002aea:	601a      	str	r2, [r3, #0]
}
10002aec:	46c0      	nop			; (mov r8, r8)
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10002aee:	e000      	b.n	10002af2 <unreset_block_wait+0x22>
10002af0:	46c0      	nop			; (mov r8, r8)
10002af2:	4b05      	ldr	r3, [pc, #20]	; (10002b08 <unreset_block_wait+0x38>)
10002af4:	689b      	ldr	r3, [r3, #8]
10002af6:	43db      	mvns	r3, r3
10002af8:	687a      	ldr	r2, [r7, #4]
10002afa:	4013      	ands	r3, r2
10002afc:	d1f8      	bne.n	10002af0 <unreset_block_wait+0x20>
        tight_loop_contents();
}
10002afe:	46c0      	nop			; (mov r8, r8)
10002b00:	46c0      	nop			; (mov r8, r8)
10002b02:	46bd      	mov	sp, r7
10002b04:	b004      	add	sp, #16
10002b06:	bd80      	pop	{r7, pc}
10002b08:	4000c000 	.word	0x4000c000

10002b0c <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10002b0c:	b580      	push	{r7, lr}
10002b0e:	b08e      	sub	sp, #56	; 0x38
10002b10:	af00      	add	r7, sp, #0
10002b12:	60f8      	str	r0, [r7, #12]
10002b14:	60b9      	str	r1, [r7, #8]
10002b16:	607a      	str	r2, [r7, #4]
10002b18:	603b      	str	r3, [r7, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002b1a:	68b9      	ldr	r1, [r7, #8]
10002b1c:	200c      	movs	r0, #12
10002b1e:	f002 fe39 	bl	10005794 <__wrap___aeabi_uidiv>
10002b22:	0003      	movs	r3, r0
10002b24:	637b      	str	r3, [r7, #52]	; 0x34

    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * MHZ));
10002b26:	687b      	ldr	r3, [r7, #4]
10002b28:	4a57      	ldr	r2, [pc, #348]	; (10002c88 <pll_init+0x17c>)
10002b2a:	4293      	cmp	r3, r2
10002b2c:	d903      	bls.n	10002b36 <pll_init+0x2a>
10002b2e:	687b      	ldr	r3, [r7, #4]
10002b30:	4a56      	ldr	r2, [pc, #344]	; (10002c8c <pll_init+0x180>)
10002b32:	4293      	cmp	r3, r2
10002b34:	d905      	bls.n	10002b42 <pll_init+0x36>
10002b36:	4b56      	ldr	r3, [pc, #344]	; (10002c90 <pll_init+0x184>)
10002b38:	4a56      	ldr	r2, [pc, #344]	; (10002c94 <pll_init+0x188>)
10002b3a:	4857      	ldr	r0, [pc, #348]	; (10002c98 <pll_init+0x18c>)
10002b3c:	2111      	movs	r1, #17
10002b3e:	f002 fb33 	bl	100051a8 <__assert_func>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10002b42:	6b79      	ldr	r1, [r7, #52]	; 0x34
10002b44:	000a      	movs	r2, r1
10002b46:	0152      	lsls	r2, r2, #5
10002b48:	1a52      	subs	r2, r2, r1
10002b4a:	0193      	lsls	r3, r2, #6
10002b4c:	1a9b      	subs	r3, r3, r2
10002b4e:	00db      	lsls	r3, r3, #3
10002b50:	185b      	adds	r3, r3, r1
10002b52:	019b      	lsls	r3, r3, #6
10002b54:	0019      	movs	r1, r3
10002b56:	6878      	ldr	r0, [r7, #4]
10002b58:	f002 fe1c 	bl	10005794 <__wrap___aeabi_uidiv>
10002b5c:	0003      	movs	r3, r0
10002b5e:	633b      	str	r3, [r7, #48]	; 0x30
/// \end::pll_init_calculations[]

    // fbdiv
    assert(fbdiv >= 16 && fbdiv <= 320);
10002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002b62:	2b0f      	cmp	r3, #15
10002b64:	d904      	bls.n	10002b70 <pll_init+0x64>
10002b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10002b68:	23a0      	movs	r3, #160	; 0xa0
10002b6a:	005b      	lsls	r3, r3, #1
10002b6c:	429a      	cmp	r2, r3
10002b6e:	d905      	bls.n	10002b7c <pll_init+0x70>
10002b70:	4b4a      	ldr	r3, [pc, #296]	; (10002c9c <pll_init+0x190>)
10002b72:	4a48      	ldr	r2, [pc, #288]	; (10002c94 <pll_init+0x188>)
10002b74:	4848      	ldr	r0, [pc, #288]	; (10002c98 <pll_init+0x18c>)
10002b76:	2119      	movs	r1, #25
10002b78:	f002 fb16 	bl	100051a8 <__assert_func>

    // Check divider ranges
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
10002b7c:	683b      	ldr	r3, [r7, #0]
10002b7e:	2b00      	cmp	r3, #0
10002b80:	d008      	beq.n	10002b94 <pll_init+0x88>
10002b82:	683b      	ldr	r3, [r7, #0]
10002b84:	2b07      	cmp	r3, #7
10002b86:	d805      	bhi.n	10002b94 <pll_init+0x88>
10002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002b8a:	2b00      	cmp	r3, #0
10002b8c:	d002      	beq.n	10002b94 <pll_init+0x88>
10002b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002b90:	2b07      	cmp	r3, #7
10002b92:	d905      	bls.n	10002ba0 <pll_init+0x94>
10002b94:	4b42      	ldr	r3, [pc, #264]	; (10002ca0 <pll_init+0x194>)
10002b96:	4a3f      	ldr	r2, [pc, #252]	; (10002c94 <pll_init+0x188>)
10002b98:	483f      	ldr	r0, [pc, #252]	; (10002c98 <pll_init+0x18c>)
10002b9a:	211c      	movs	r1, #28
10002b9c:	f002 fb04 	bl	100051a8 <__assert_func>

    // post_div1 should be >= post_div2
    // from appnote page 11
    // postdiv1 is designed to operate with a higher input frequency
    // than postdiv2
    assert(post_div2 <= post_div1);
10002ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10002ba2:	683b      	ldr	r3, [r7, #0]
10002ba4:	429a      	cmp	r2, r3
10002ba6:	d905      	bls.n	10002bb4 <pll_init+0xa8>
10002ba8:	4b3e      	ldr	r3, [pc, #248]	; (10002ca4 <pll_init+0x198>)
10002baa:	4a3a      	ldr	r2, [pc, #232]	; (10002c94 <pll_init+0x188>)
10002bac:	483a      	ldr	r0, [pc, #232]	; (10002c98 <pll_init+0x18c>)
10002bae:	2122      	movs	r1, #34	; 0x22
10002bb0:	f002 fafa 	bl	100051a8 <__assert_func>

    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));
10002bb4:	687b      	ldr	r3, [r7, #4]
10002bb6:	091b      	lsrs	r3, r3, #4
10002bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10002bba:	429a      	cmp	r2, r3
10002bbc:	d905      	bls.n	10002bca <pll_init+0xbe>
10002bbe:	4b3a      	ldr	r3, [pc, #232]	; (10002ca8 <pll_init+0x19c>)
10002bc0:	4a34      	ldr	r2, [pc, #208]	; (10002c94 <pll_init+0x188>)
10002bc2:	4835      	ldr	r0, [pc, #212]	; (10002c98 <pll_init+0x18c>)
10002bc4:	2125      	movs	r1, #37	; 0x25
10002bc6:	f002 faef 	bl	100051a8 <__assert_func>

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002bca:	683b      	ldr	r3, [r7, #0]
10002bcc:	041a      	lsls	r2, r3, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10002bd0:	031b      	lsls	r3, r3, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002bd2:	4313      	orrs	r3, r2
10002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002bd6:	68fb      	ldr	r3, [r7, #12]
10002bd8:	681b      	ldr	r3, [r3, #0]
10002bda:	2b00      	cmp	r3, #0
10002bdc:	da15      	bge.n	10002c0a <pll_init+0xfe>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002bde:	68fb      	ldr	r3, [r7, #12]
10002be0:	681b      	ldr	r3, [r3, #0]
10002be2:	223f      	movs	r2, #63	; 0x3f
10002be4:	4013      	ands	r3, r2
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002be6:	68ba      	ldr	r2, [r7, #8]
10002be8:	429a      	cmp	r2, r3
10002bea:	d10e      	bne.n	10002c0a <pll_init+0xfe>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002bec:	68fb      	ldr	r3, [r7, #12]
10002bee:	689b      	ldr	r3, [r3, #8]
10002bf0:	051b      	lsls	r3, r3, #20
10002bf2:	0d1b      	lsrs	r3, r3, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10002bf6:	429a      	cmp	r2, r3
10002bf8:	d107      	bne.n	10002c0a <pll_init+0xfe>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10002bfa:	68fb      	ldr	r3, [r7, #12]
10002bfc:	68da      	ldr	r2, [r3, #12]
10002bfe:	23ee      	movs	r3, #238	; 0xee
10002c00:	02db      	lsls	r3, r3, #11
10002c02:	4013      	ands	r3, r2
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002c06:	429a      	cmp	r2, r3
10002c08:	d03a      	beq.n	10002c80 <pll_init+0x174>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10002c0a:	68fb      	ldr	r3, [r7, #12]
10002c0c:	4a27      	ldr	r2, [pc, #156]	; (10002cac <pll_init+0x1a0>)
10002c0e:	4293      	cmp	r3, r2
10002c10:	d102      	bne.n	10002c18 <pll_init+0x10c>
10002c12:	2380      	movs	r3, #128	; 0x80
10002c14:	019b      	lsls	r3, r3, #6
10002c16:	e001      	b.n	10002c1c <pll_init+0x110>
10002c18:	2380      	movs	r3, #128	; 0x80
10002c1a:	015b      	lsls	r3, r3, #5
10002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    reset_block(pll_reset);
10002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002c20:	0018      	movs	r0, r3
10002c22:	f7ff ff3f 	bl	10002aa4 <reset_block>
    unreset_block_wait(pll_reset);
10002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002c28:	0018      	movs	r0, r3
10002c2a:	f7ff ff51 	bl	10002ad0 <unreset_block_wait>

    // Load VCO-related dividers before starting VCO
    pll->cs = refdiv;
10002c2e:	68fb      	ldr	r3, [r7, #12]
10002c30:	68ba      	ldr	r2, [r7, #8]
10002c32:	601a      	str	r2, [r3, #0]
    pll->fbdiv_int = fbdiv;
10002c34:	68fb      	ldr	r3, [r7, #12]
10002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10002c38:	609a      	str	r2, [r3, #8]

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
10002c3a:	2321      	movs	r3, #33	; 0x21
10002c3c:	627b      	str	r3, [r7, #36]	; 0x24
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002c3e:	68fb      	ldr	r3, [r7, #12]
10002c40:	3304      	adds	r3, #4
10002c42:	623b      	str	r3, [r7, #32]
10002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002c46:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002c48:	6a3b      	ldr	r3, [r7, #32]
10002c4a:	22c0      	movs	r2, #192	; 0xc0
10002c4c:	0192      	lsls	r2, r2, #6
10002c4e:	4313      	orrs	r3, r2
10002c50:	69fa      	ldr	r2, [r7, #28]
10002c52:	601a      	str	r2, [r3, #0]
}
10002c54:	46c0      	nop			; (mov r8, r8)

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002c56:	e000      	b.n	10002c5a <pll_init+0x14e>
10002c58:	46c0      	nop			; (mov r8, r8)
10002c5a:	68fb      	ldr	r3, [r7, #12]
10002c5c:	681b      	ldr	r3, [r3, #0]
10002c5e:	2b00      	cmp	r3, #0
10002c60:	dafa      	bge.n	10002c58 <pll_init+0x14c>

    // Set up post dividers
    pll->prim = pdiv;
10002c62:	68fb      	ldr	r3, [r7, #12]
10002c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002c66:	60da      	str	r2, [r3, #12]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
10002c68:	68fb      	ldr	r3, [r7, #12]
10002c6a:	3304      	adds	r3, #4
10002c6c:	61bb      	str	r3, [r7, #24]
10002c6e:	2308      	movs	r3, #8
10002c70:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002c72:	69bb      	ldr	r3, [r7, #24]
10002c74:	22c0      	movs	r2, #192	; 0xc0
10002c76:	0192      	lsls	r2, r2, #6
10002c78:	4313      	orrs	r3, r2
10002c7a:	697a      	ldr	r2, [r7, #20]
10002c7c:	601a      	str	r2, [r3, #0]
}
10002c7e:	e000      	b.n	10002c82 <pll_init+0x176>
        return;
10002c80:	46c0      	nop			; (mov r8, r8)
/// \end::pll_init_finish[]
}
10002c82:	46bd      	mov	sp, r7
10002c84:	b00e      	add	sp, #56	; 0x38
10002c86:	bd80      	pop	{r7, pc}
10002c88:	2cb4177f 	.word	0x2cb4177f
10002c8c:	5f5e1000 	.word	0x5f5e1000
10002c90:	100077a4 	.word	0x100077a4
10002c94:	100078f4 	.word	0x100078f4
10002c98:	10007804 	.word	0x10007804
10002c9c:	10007858 	.word	0x10007858
10002ca0:	10007874 	.word	0x10007874
10002ca4:	100078c0 	.word	0x100078c0
10002ca8:	100078d8 	.word	0x100078d8
10002cac:	4002c000 	.word	0x4002c000

10002cb0 <spin_locks_reset>:

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
10002cb0:	b580      	push	{r7, lr}
10002cb2:	b084      	sub	sp, #16
10002cb4:	af00      	add	r7, sp, #0
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10002cb6:	2300      	movs	r3, #0
10002cb8:	60fb      	str	r3, [r7, #12]
10002cba:	e012      	b.n	10002ce2 <spin_locks_reset+0x32>
10002cbc:	68fb      	ldr	r3, [r7, #12]
10002cbe:	607b      	str	r3, [r7, #4]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002cc0:	687b      	ldr	r3, [r7, #4]
10002cc2:	4a0c      	ldr	r2, [pc, #48]	; (10002cf4 <spin_locks_reset+0x44>)
10002cc4:	4694      	mov	ip, r2
10002cc6:	4463      	add	r3, ip
10002cc8:	009b      	lsls	r3, r3, #2
10002cca:	60bb      	str	r3, [r7, #8]
    __asm volatile ("dmb" : : : "memory");
10002ccc:	f3bf 8f5f 	dmb	sy
}
10002cd0:	46c0      	nop			; (mov r8, r8)
}
10002cd2:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10002cd4:	68bb      	ldr	r3, [r7, #8]
10002cd6:	2200      	movs	r2, #0
10002cd8:	601a      	str	r2, [r3, #0]
}
10002cda:	46c0      	nop			; (mov r8, r8)
10002cdc:	68fb      	ldr	r3, [r7, #12]
10002cde:	3301      	adds	r3, #1
10002ce0:	60fb      	str	r3, [r7, #12]
10002ce2:	68fb      	ldr	r3, [r7, #12]
10002ce4:	2b1f      	cmp	r3, #31
10002ce6:	d9e9      	bls.n	10002cbc <spin_locks_reset+0xc>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10002ce8:	46c0      	nop			; (mov r8, r8)
10002cea:	46c0      	nop			; (mov r8, r8)
10002cec:	46bd      	mov	sp, r7
10002cee:	b004      	add	sp, #16
10002cf0:	bd80      	pop	{r7, pc}
10002cf2:	46c0      	nop			; (mov r8, r8)
10002cf4:	34000040 	.word	0x34000040

10002cf8 <next_striped_spin_lock_num>:
    spin_lock_t *lock = spin_lock_instance(lock_num);
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
10002cf8:	b580      	push	{r7, lr}
10002cfa:	b082      	sub	sp, #8
10002cfc:	af00      	add	r7, sp, #0
    uint rc = striped_spin_lock_num++;
10002cfe:	4b09      	ldr	r3, [pc, #36]	; (10002d24 <next_striped_spin_lock_num+0x2c>)
10002d00:	781b      	ldrb	r3, [r3, #0]
10002d02:	1c5a      	adds	r2, r3, #1
10002d04:	b2d1      	uxtb	r1, r2
10002d06:	4a07      	ldr	r2, [pc, #28]	; (10002d24 <next_striped_spin_lock_num+0x2c>)
10002d08:	7011      	strb	r1, [r2, #0]
10002d0a:	607b      	str	r3, [r7, #4]
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10002d0c:	4b05      	ldr	r3, [pc, #20]	; (10002d24 <next_striped_spin_lock_num+0x2c>)
10002d0e:	781b      	ldrb	r3, [r3, #0]
10002d10:	2b17      	cmp	r3, #23
10002d12:	d902      	bls.n	10002d1a <next_striped_spin_lock_num+0x22>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10002d14:	4b03      	ldr	r3, [pc, #12]	; (10002d24 <next_striped_spin_lock_num+0x2c>)
10002d16:	2210      	movs	r2, #16
10002d18:	701a      	strb	r2, [r3, #0]
    }
    return rc;
10002d1a:	687b      	ldr	r3, [r7, #4]
}
10002d1c:	0018      	movs	r0, r3
10002d1e:	46bd      	mov	sp, r7
10002d20:	b002      	add	sp, #8
10002d22:	bd80      	pop	{r7, pc}
10002d24:	20000308 	.word	0x20000308

10002d28 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10002d28:	b580      	push	{r7, lr}
10002d2a:	b082      	sub	sp, #8
10002d2c:	af00      	add	r7, sp, #0
10002d2e:	6038      	str	r0, [r7, #0]
10002d30:	6079      	str	r1, [r7, #4]
    return t._private_us_since_boot;
10002d32:	683a      	ldr	r2, [r7, #0]
10002d34:	687b      	ldr	r3, [r7, #4]
}
10002d36:	0010      	movs	r0, r2
10002d38:	0019      	movs	r1, r3
10002d3a:	46bd      	mov	sp, r7
10002d3c:	b002      	add	sp, #8
10002d3e:	bd80      	pop	{r7, pc}

10002d40 <check_hardware_alarm_num_param>:
static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
10002d40:	b580      	push	{r7, lr}
10002d42:	b082      	sub	sp, #8
10002d44:	af00      	add	r7, sp, #0
10002d46:	6078      	str	r0, [r7, #4]
}
10002d48:	46c0      	nop			; (mov r8, r8)
10002d4a:	46bd      	mov	sp, r7
10002d4c:	b002      	add	sp, #8
10002d4e:	bd80      	pop	{r7, pc}

10002d50 <irq_clear>:
 * as the the NVIC always reflects the current state of the IRQ state of the hardware for hardware IRQs, and clearing
 * of the IRQ state of the hardware is performed via the hardware's registers instead.
 *
 * \param int_num Interrupt number \ref interrupt_nums
 */
static inline void irq_clear(uint int_num) {
10002d50:	b580      	push	{r7, lr}
10002d52:	b082      	sub	sp, #8
10002d54:	af00      	add	r7, sp, #0
10002d56:	6078      	str	r0, [r7, #4]
    *((volatile uint32_t *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = (1u << ((uint32_t) (int_num & 0x1F)));
10002d58:	687b      	ldr	r3, [r7, #4]
10002d5a:	221f      	movs	r2, #31
10002d5c:	401a      	ands	r2, r3
10002d5e:	4b04      	ldr	r3, [pc, #16]	; (10002d70 <irq_clear+0x20>)
10002d60:	2101      	movs	r1, #1
10002d62:	4091      	lsls	r1, r2
10002d64:	000a      	movs	r2, r1
10002d66:	601a      	str	r2, [r3, #0]
}
10002d68:	46c0      	nop			; (mov r8, r8)
10002d6a:	46bd      	mov	sp, r7
10002d6c:	b002      	add	sp, #8
10002d6e:	bd80      	pop	{r7, pc}
10002d70:	e000e280 	.word	0xe000e280

10002d74 <hardware_alarm_claim>:
static uint8_t timer_callbacks_pending;

static_assert(NUM_TIMERS <= 4, "");
static uint8_t claimed;

void hardware_alarm_claim(uint alarm_num) {
10002d74:	b580      	push	{r7, lr}
10002d76:	b082      	sub	sp, #8
10002d78:	af00      	add	r7, sp, #0
10002d7a:	6078      	str	r0, [r7, #4]
    check_hardware_alarm_num_param(alarm_num);
10002d7c:	687b      	ldr	r3, [r7, #4]
10002d7e:	0018      	movs	r0, r3
10002d80:	f7ff ffde 	bl	10002d40 <check_hardware_alarm_num_param>
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10002d84:	4a04      	ldr	r2, [pc, #16]	; (10002d98 <hardware_alarm_claim+0x24>)
10002d86:	6879      	ldr	r1, [r7, #4]
10002d88:	4b04      	ldr	r3, [pc, #16]	; (10002d9c <hardware_alarm_claim+0x28>)
10002d8a:	0018      	movs	r0, r3
10002d8c:	f7fe fff7 	bl	10001d7e <hw_claim_or_assert>
}
10002d90:	46c0      	nop			; (mov r8, r8)
10002d92:	46bd      	mov	sp, r7
10002d94:	b002      	add	sp, #8
10002d96:	bd80      	pop	{r7, pc}
10002d98:	10007970 	.word	0x10007970
10002d9c:	2000165c 	.word	0x2000165c

10002da0 <time_us_64>:
    check_hardware_alarm_num_param(alarm_num);
    return hw_is_claimed(&claimed, alarm_num);
}

/// tag::time_us_64[]
uint64_t time_us_64() {
10002da0:	b5f0      	push	{r4, r5, r6, r7, lr}
10002da2:	b087      	sub	sp, #28
10002da4:	af00      	add	r7, sp, #0
    // Need to make sure that the upper 32 bits of the timer
    // don't change, so read that first
    uint32_t hi = timer_hw->timerawh;
10002da6:	4e15      	ldr	r6, [pc, #84]	; (10002dfc <time_us_64+0x5c>)
10002da8:	6a76      	ldr	r6, [r6, #36]	; 0x24
10002daa:	617e      	str	r6, [r7, #20]
    uint32_t lo;
    do {
        // Read the lower 32 bits
        lo = timer_hw->timerawl;
10002dac:	4e13      	ldr	r6, [pc, #76]	; (10002dfc <time_us_64+0x5c>)
10002dae:	6ab6      	ldr	r6, [r6, #40]	; 0x28
10002db0:	613e      	str	r6, [r7, #16]
        // Now read the upper 32 bits again and
        // check that it hasn't incremented. If it has loop around
        // and read the lower 32 bits again to get an accurate value
        uint32_t next_hi = timer_hw->timerawh;
10002db2:	4e12      	ldr	r6, [pc, #72]	; (10002dfc <time_us_64+0x5c>)
10002db4:	6a76      	ldr	r6, [r6, #36]	; 0x24
10002db6:	60fe      	str	r6, [r7, #12]
        if (hi == next_hi) break;
10002db8:	697e      	ldr	r6, [r7, #20]
10002dba:	46b4      	mov	ip, r6
10002dbc:	68fe      	ldr	r6, [r7, #12]
10002dbe:	45b4      	cmp	ip, r6
10002dc0:	d002      	beq.n	10002dc8 <time_us_64+0x28>
        hi = next_hi;
10002dc2:	68fe      	ldr	r6, [r7, #12]
10002dc4:	617e      	str	r6, [r7, #20]
    do {
10002dc6:	e7f1      	b.n	10002dac <time_us_64+0xc>
        if (hi == next_hi) break;
10002dc8:	46c0      	nop			; (mov r8, r8)
    } while (true);
    return ((uint64_t) hi << 32u) | lo;
10002dca:	697e      	ldr	r6, [r7, #20]
10002dcc:	603e      	str	r6, [r7, #0]
10002dce:	2600      	movs	r6, #0
10002dd0:	607e      	str	r6, [r7, #4]
10002dd2:	683e      	ldr	r6, [r7, #0]
10002dd4:	0033      	movs	r3, r6
10002dd6:	2600      	movs	r6, #0
10002dd8:	0032      	movs	r2, r6
10002dda:	693e      	ldr	r6, [r7, #16]
10002ddc:	0030      	movs	r0, r6
10002dde:	2600      	movs	r6, #0
10002de0:	0031      	movs	r1, r6
10002de2:	0016      	movs	r6, r2
10002de4:	4306      	orrs	r6, r0
10002de6:	0034      	movs	r4, r6
10002de8:	430b      	orrs	r3, r1
10002dea:	001d      	movs	r5, r3
10002dec:	0022      	movs	r2, r4
10002dee:	002b      	movs	r3, r5
}
10002df0:	0010      	movs	r0, r2
10002df2:	0019      	movs	r1, r3
10002df4:	46bd      	mov	sp, r7
10002df6:	b007      	add	sp, #28
10002df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002dfa:	46c0      	nop			; (mov r8, r8)
10002dfc:	40054000 	.word	0x40054000

10002e00 <busy_wait_until>:
    } else {
        busy_wait_us(delay_ms * 1000ull);
    }
}

void busy_wait_until(absolute_time_t t) {
10002e00:	b5b0      	push	{r4, r5, r7, lr}
10002e02:	b088      	sub	sp, #32
10002e04:	af00      	add	r7, sp, #0
10002e06:	6038      	str	r0, [r7, #0]
10002e08:	6079      	str	r1, [r7, #4]
    uint64_t target = to_us_since_boot(t);
10002e0a:	683a      	ldr	r2, [r7, #0]
10002e0c:	687b      	ldr	r3, [r7, #4]
10002e0e:	0010      	movs	r0, r2
10002e10:	0019      	movs	r1, r3
10002e12:	f7ff ff89 	bl	10002d28 <to_us_since_boot>
10002e16:	0002      	movs	r2, r0
10002e18:	000b      	movs	r3, r1
10002e1a:	613a      	str	r2, [r7, #16]
10002e1c:	617b      	str	r3, [r7, #20]
    uint32_t hi_target = (uint32_t)(target >> 32u);
10002e1e:	697b      	ldr	r3, [r7, #20]
10002e20:	001c      	movs	r4, r3
10002e22:	2300      	movs	r3, #0
10002e24:	001d      	movs	r5, r3
10002e26:	0023      	movs	r3, r4
10002e28:	60fb      	str	r3, [r7, #12]
    uint32_t hi = timer_hw->timerawh;
10002e2a:	4b0f      	ldr	r3, [pc, #60]	; (10002e68 <busy_wait_until+0x68>)
10002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002e2e:	61fb      	str	r3, [r7, #28]
    while (hi < hi_target) {
10002e30:	e003      	b.n	10002e3a <busy_wait_until+0x3a>
        hi = timer_hw->timerawh;
10002e32:	4b0d      	ldr	r3, [pc, #52]	; (10002e68 <busy_wait_until+0x68>)
10002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002e36:	61fb      	str	r3, [r7, #28]
10002e38:	46c0      	nop			; (mov r8, r8)
    while (hi < hi_target) {
10002e3a:	69fa      	ldr	r2, [r7, #28]
10002e3c:	68fb      	ldr	r3, [r7, #12]
10002e3e:	429a      	cmp	r2, r3
10002e40:	d3f7      	bcc.n	10002e32 <busy_wait_until+0x32>
        tight_loop_contents();
    }
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10002e42:	e003      	b.n	10002e4c <busy_wait_until+0x4c>
        hi = timer_hw->timerawh;
10002e44:	4b08      	ldr	r3, [pc, #32]	; (10002e68 <busy_wait_until+0x68>)
10002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002e48:	61fb      	str	r3, [r7, #28]
10002e4a:	46c0      	nop			; (mov r8, r8)
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10002e4c:	69fa      	ldr	r2, [r7, #28]
10002e4e:	68fb      	ldr	r3, [r7, #12]
10002e50:	429a      	cmp	r2, r3
10002e52:	d104      	bne.n	10002e5e <busy_wait_until+0x5e>
10002e54:	4b04      	ldr	r3, [pc, #16]	; (10002e68 <busy_wait_until+0x68>)
10002e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10002e58:	693b      	ldr	r3, [r7, #16]
10002e5a:	429a      	cmp	r2, r3
10002e5c:	d3f2      	bcc.n	10002e44 <busy_wait_until+0x44>
        tight_loop_contents();
    }
}
10002e5e:	46c0      	nop			; (mov r8, r8)
10002e60:	46bd      	mov	sp, r7
10002e62:	b008      	add	sp, #32
10002e64:	bdb0      	pop	{r4, r5, r7, pc}
10002e66:	46c0      	nop			; (mov r8, r8)
10002e68:	40054000 	.word	0x40054000

10002e6c <harware_alarm_irq_number>:
/// \end::busy_wait[]

static inline uint harware_alarm_irq_number(uint alarm_num) {
10002e6c:	b580      	push	{r7, lr}
10002e6e:	b082      	sub	sp, #8
10002e70:	af00      	add	r7, sp, #0
10002e72:	6078      	str	r0, [r7, #4]
    return TIMER_IRQ_0 + alarm_num;
10002e74:	687b      	ldr	r3, [r7, #4]
}
10002e76:	0018      	movs	r0, r3
10002e78:	46bd      	mov	sp, r7
10002e7a:	b002      	add	sp, #8
10002e7c:	bd80      	pop	{r7, pc}
	...

10002e80 <hardware_alarm_irq_handler>:

static void hardware_alarm_irq_handler(void) {
10002e80:	b580      	push	{r7, lr}
10002e82:	b08e      	sub	sp, #56	; 0x38
10002e84:	af00      	add	r7, sp, #0
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10002e86:	f3ef 8305 	mrs	r3, IPSR
10002e8a:	633b      	str	r3, [r7, #48]	; 0x30
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002e8e:	223f      	movs	r2, #63	; 0x3f
10002e90:	4013      	ands	r3, r2
10002e92:	3b10      	subs	r3, #16
10002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    check_hardware_alarm_num_param(alarm_num);
10002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002e98:	0018      	movs	r0, r3
10002e9a:	f7ff ff51 	bl	10002d40 <check_hardware_alarm_num_param>

    hardware_alarm_callback_t callback = NULL;
10002e9e:	2300      	movs	r3, #0
10002ea0:	637b      	str	r3, [r7, #52]	; 0x34
10002ea2:	230a      	movs	r3, #10
10002ea4:	613b      	str	r3, [r7, #16]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002ea6:	693b      	ldr	r3, [r7, #16]
10002ea8:	4a38      	ldr	r2, [pc, #224]	; (10002f8c <hardware_alarm_irq_handler+0x10c>)
10002eaa:	4694      	mov	ip, r2
10002eac:	4463      	add	r3, ip
10002eae:	009b      	lsls	r3, r3, #2

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
10002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
10002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002eb4:	623b      	str	r3, [r7, #32]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002eb6:	f3ef 8310 	mrs	r3, PRIMASK
10002eba:	61fb      	str	r3, [r7, #28]
    __asm volatile ("cpsid i");
10002ebc:	b672      	cpsid	i
    return status;
10002ebe:	69fb      	ldr	r3, [r7, #28]
    uint32_t save = save_and_disable_interrupts();
10002ec0:	61bb      	str	r3, [r7, #24]
10002ec2:	6a3b      	ldr	r3, [r7, #32]
10002ec4:	617b      	str	r3, [r7, #20]
    while (__builtin_expect(!*lock, 0));
10002ec6:	46c0      	nop			; (mov r8, r8)
10002ec8:	697b      	ldr	r3, [r7, #20]
10002eca:	681b      	ldr	r3, [r3, #0]
10002ecc:	425a      	negs	r2, r3
10002ece:	4153      	adcs	r3, r2
10002ed0:	b2db      	uxtb	r3, r3
10002ed2:	2b00      	cmp	r3, #0
10002ed4:	d1f8      	bne.n	10002ec8 <hardware_alarm_irq_handler+0x48>
    __asm volatile ("dmb" : : : "memory");
10002ed6:	f3bf 8f5f 	dmb	sy
}
10002eda:	46c0      	nop			; (mov r8, r8)
}
10002edc:	46c0      	nop			; (mov r8, r8)
}
10002ede:	46c0      	nop			; (mov r8, r8)
    return save;
10002ee0:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = spin_lock_blocking(lock);
10002ee2:	627b      	str	r3, [r7, #36]	; 0x24
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10002ee4:	4b2a      	ldr	r3, [pc, #168]	; (10002f90 <hardware_alarm_irq_handler+0x110>)
10002ee6:	2101      	movs	r1, #1
10002ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002eea:	4091      	lsls	r1, r2
10002eec:	000a      	movs	r2, r1
10002eee:	635a      	str	r2, [r3, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10002ef0:	4b28      	ldr	r3, [pc, #160]	; (10002f94 <hardware_alarm_irq_handler+0x114>)
10002ef2:	781b      	ldrb	r3, [r3, #0]
10002ef4:	001a      	movs	r2, r3
10002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002ef8:	40da      	lsrs	r2, r3
10002efa:	0013      	movs	r3, r2
10002efc:	2201      	movs	r2, #1
10002efe:	4013      	ands	r3, r2
10002f00:	d024      	beq.n	10002f4c <hardware_alarm_irq_handler+0xcc>
        // Now check whether we have a timer event to handle that isn't already obsolete (this could happen if we
        // were already in the IRQ handler before someone else changed the timer setup
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10002f02:	4b23      	ldr	r3, [pc, #140]	; (10002f90 <hardware_alarm_irq_handler+0x110>)
10002f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10002f06:	4b24      	ldr	r3, [pc, #144]	; (10002f98 <hardware_alarm_irq_handler+0x118>)
10002f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002f0a:	0089      	lsls	r1, r1, #2
10002f0c:	58cb      	ldr	r3, [r1, r3]
10002f0e:	429a      	cmp	r2, r3
10002f10:	d312      	bcc.n	10002f38 <hardware_alarm_irq_handler+0xb8>
            // we have reached the right high word as well as low word value
            callback = alarm_callbacks[alarm_num];
10002f12:	4b22      	ldr	r3, [pc, #136]	; (10002f9c <hardware_alarm_irq_handler+0x11c>)
10002f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002f16:	0092      	lsls	r2, r2, #2
10002f18:	58d3      	ldr	r3, [r2, r3]
10002f1a:	637b      	str	r3, [r7, #52]	; 0x34
            timer_callbacks_pending &= (uint8_t)~(1u << alarm_num);
10002f1c:	2201      	movs	r2, #1
10002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002f20:	409a      	lsls	r2, r3
10002f22:	0013      	movs	r3, r2
10002f24:	b2db      	uxtb	r3, r3
10002f26:	43db      	mvns	r3, r3
10002f28:	b2db      	uxtb	r3, r3
10002f2a:	4a1a      	ldr	r2, [pc, #104]	; (10002f94 <hardware_alarm_irq_handler+0x114>)
10002f2c:	7812      	ldrb	r2, [r2, #0]
10002f2e:	4013      	ands	r3, r2
10002f30:	b2da      	uxtb	r2, r3
10002f32:	4b18      	ldr	r3, [pc, #96]	; (10002f94 <hardware_alarm_irq_handler+0x114>)
10002f34:	701a      	strb	r2, [r3, #0]
10002f36:	e009      	b.n	10002f4c <hardware_alarm_irq_handler+0xcc>
        } else {
            // try again in 2^32 us
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10002f38:	4a15      	ldr	r2, [pc, #84]	; (10002f90 <hardware_alarm_irq_handler+0x110>)
10002f3a:	4915      	ldr	r1, [pc, #84]	; (10002f90 <hardware_alarm_irq_handler+0x110>)
10002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002f3e:	3304      	adds	r3, #4
10002f40:	009b      	lsls	r3, r3, #2
10002f42:	589a      	ldr	r2, [r3, r2]
10002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002f46:	3304      	adds	r3, #4
10002f48:	009b      	lsls	r3, r3, #2
10002f4a:	505a      	str	r2, [r3, r1]
10002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002f4e:	60fb      	str	r3, [r7, #12]
10002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002f52:	60bb      	str	r3, [r7, #8]
10002f54:	68fb      	ldr	r3, [r7, #12]
10002f56:	607b      	str	r3, [r7, #4]
    __asm volatile ("dmb" : : : "memory");
10002f58:	f3bf 8f5f 	dmb	sy
}
10002f5c:	46c0      	nop			; (mov r8, r8)
}
10002f5e:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10002f60:	687b      	ldr	r3, [r7, #4]
10002f62:	2200      	movs	r2, #0
10002f64:	601a      	str	r2, [r3, #0]
}
10002f66:	46c0      	nop			; (mov r8, r8)
10002f68:	68bb      	ldr	r3, [r7, #8]
10002f6a:	603b      	str	r3, [r7, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002f6c:	683b      	ldr	r3, [r7, #0]
10002f6e:	f383 8810 	msr	PRIMASK, r3
}
10002f72:	46c0      	nop			; (mov r8, r8)
}
10002f74:	46c0      	nop			; (mov r8, r8)
        }
    }

    spin_unlock(lock, save);

    if (callback) {
10002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002f78:	2b00      	cmp	r3, #0
10002f7a:	d003      	beq.n	10002f84 <hardware_alarm_irq_handler+0x104>
        callback(alarm_num);
10002f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002f80:	0010      	movs	r0, r2
10002f82:	4798      	blx	r3
    }
}
10002f84:	46c0      	nop			; (mov r8, r8)
10002f86:	46bd      	mov	sp, r7
10002f88:	b00e      	add	sp, #56	; 0x38
10002f8a:	bd80      	pop	{r7, pc}
10002f8c:	34000040 	.word	0x34000040
10002f90:	40054000 	.word	0x40054000
10002f94:	2000165e 	.word	0x2000165e
10002f98:	2000164c 	.word	0x2000164c
10002f9c:	20000f14 	.word	0x20000f14

10002fa0 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10002fa0:	b580      	push	{r7, lr}
10002fa2:	b090      	sub	sp, #64	; 0x40
10002fa4:	af00      	add	r7, sp, #0
10002fa6:	6078      	str	r0, [r7, #4]
10002fa8:	6039      	str	r1, [r7, #0]
    // todo check current core owner
    //  note this should probably be subsumed by irq_set_exclusive_handler anyway, since that
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
10002faa:	687b      	ldr	r3, [r7, #4]
10002fac:	0018      	movs	r0, r3
10002fae:	f7ff fec7 	bl	10002d40 <check_hardware_alarm_num_param>
    uint irq_num = harware_alarm_irq_number(alarm_num);
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	0018      	movs	r0, r3
10002fb6:	f7ff ff59 	bl	10002e6c <harware_alarm_irq_number>
10002fba:	0003      	movs	r3, r0
10002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
10002fbe:	230a      	movs	r3, #10
10002fc0:	623b      	str	r3, [r7, #32]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002fc2:	6a3b      	ldr	r3, [r7, #32]
10002fc4:	4a3e      	ldr	r2, [pc, #248]	; (100030c0 <hardware_alarm_set_callback+0x120>)
10002fc6:	4694      	mov	ip, r2
10002fc8:	4463      	add	r3, ip
10002fca:	009b      	lsls	r3, r3, #2
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
10002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
10002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10002fd0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002fd2:	f3ef 8310 	mrs	r3, PRIMASK
10002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("cpsid i");
10002fd8:	b672      	cpsid	i
    return status;
10002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    uint32_t save = save_and_disable_interrupts();
10002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
10002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    while (__builtin_expect(!*lock, 0));
10002fe2:	46c0      	nop			; (mov r8, r8)
10002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002fe6:	681b      	ldr	r3, [r3, #0]
10002fe8:	425a      	negs	r2, r3
10002fea:	4153      	adcs	r3, r2
10002fec:	b2db      	uxtb	r3, r3
10002fee:	2b00      	cmp	r3, #0
10002ff0:	d1f8      	bne.n	10002fe4 <hardware_alarm_set_callback+0x44>
    __asm volatile ("dmb" : : : "memory");
10002ff2:	f3bf 8f5f 	dmb	sy
}
10002ff6:	46c0      	nop			; (mov r8, r8)
}
10002ff8:	46c0      	nop			; (mov r8, r8)
}
10002ffa:	46c0      	nop			; (mov r8, r8)
    return save;
10002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    uint32_t save = spin_lock_blocking(lock);
10002ffe:	637b      	str	r3, [r7, #52]	; 0x34
    if (callback) {
10003000:	683b      	ldr	r3, [r7, #0]
10003002:	2b00      	cmp	r3, #0
10003004:	d026      	beq.n	10003054 <hardware_alarm_set_callback+0xb4>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10003008:	0018      	movs	r0, r3
1000300a:	f7ff f9fb 	bl	10002404 <irq_get_vtable_handler>
1000300e:	0002      	movs	r2, r0
10003010:	4b2c      	ldr	r3, [pc, #176]	; (100030c4 <hardware_alarm_set_callback+0x124>)
10003012:	429a      	cmp	r2, r3
10003014:	d018      	beq.n	10003048 <hardware_alarm_set_callback+0xa8>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10003016:	4a2b      	ldr	r2, [pc, #172]	; (100030c4 <hardware_alarm_set_callback+0x124>)
10003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000301a:	0011      	movs	r1, r2
1000301c:	0018      	movs	r0, r3
1000301e:	f7ff fa05 	bl	1000242c <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10003022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10003024:	2101      	movs	r1, #1
10003026:	0018      	movs	r0, r3
10003028:	f7ff f98a 	bl	10002340 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
1000302c:	2201      	movs	r2, #1
1000302e:	687b      	ldr	r3, [r7, #4]
10003030:	409a      	lsls	r2, r3
10003032:	0013      	movs	r3, r2
10003034:	4a24      	ldr	r2, [pc, #144]	; (100030c8 <hardware_alarm_set_callback+0x128>)
10003036:	61fa      	str	r2, [r7, #28]
10003038:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000303a:	69fb      	ldr	r3, [r7, #28]
1000303c:	2280      	movs	r2, #128	; 0x80
1000303e:	0192      	lsls	r2, r2, #6
10003040:	4313      	orrs	r3, r2
10003042:	69ba      	ldr	r2, [r7, #24]
10003044:	601a      	str	r2, [r3, #0]
}
10003046:	46c0      	nop			; (mov r8, r8)
        }
        alarm_callbacks[alarm_num] = callback;
10003048:	4b20      	ldr	r3, [pc, #128]	; (100030cc <hardware_alarm_set_callback+0x12c>)
1000304a:	687a      	ldr	r2, [r7, #4]
1000304c:	0092      	lsls	r2, r2, #2
1000304e:	6839      	ldr	r1, [r7, #0]
10003050:	50d1      	str	r1, [r2, r3]
10003052:	e01c      	b.n	1000308e <hardware_alarm_set_callback+0xee>
    } else {
        alarm_callbacks[alarm_num] = NULL;
10003054:	4b1d      	ldr	r3, [pc, #116]	; (100030cc <hardware_alarm_set_callback+0x12c>)
10003056:	687a      	ldr	r2, [r7, #4]
10003058:	0092      	lsls	r2, r2, #2
1000305a:	2100      	movs	r1, #0
1000305c:	50d1      	str	r1, [r2, r3]
        timer_callbacks_pending &= (uint8_t)~(1u << alarm_num);
1000305e:	2201      	movs	r2, #1
10003060:	687b      	ldr	r3, [r7, #4]
10003062:	409a      	lsls	r2, r3
10003064:	0013      	movs	r3, r2
10003066:	b2db      	uxtb	r3, r3
10003068:	43db      	mvns	r3, r3
1000306a:	b2db      	uxtb	r3, r3
1000306c:	4a18      	ldr	r2, [pc, #96]	; (100030d0 <hardware_alarm_set_callback+0x130>)
1000306e:	7812      	ldrb	r2, [r2, #0]
10003070:	4013      	ands	r3, r2
10003072:	b2da      	uxtb	r2, r3
10003074:	4b16      	ldr	r3, [pc, #88]	; (100030d0 <hardware_alarm_set_callback+0x130>)
10003076:	701a      	strb	r2, [r3, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10003078:	4a12      	ldr	r2, [pc, #72]	; (100030c4 <hardware_alarm_set_callback+0x124>)
1000307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000307c:	0011      	movs	r1, r2
1000307e:	0018      	movs	r0, r3
10003080:	f7ff faf2 	bl	10002668 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10003084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10003086:	2100      	movs	r1, #0
10003088:	0018      	movs	r0, r3
1000308a:	f7ff f959 	bl	10002340 <irq_set_enabled>
1000308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10003090:	617b      	str	r3, [r7, #20]
10003092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003094:	613b      	str	r3, [r7, #16]
10003096:	697b      	ldr	r3, [r7, #20]
10003098:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
1000309a:	f3bf 8f5f 	dmb	sy
}
1000309e:	46c0      	nop			; (mov r8, r8)
}
100030a0:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
100030a2:	68fb      	ldr	r3, [r7, #12]
100030a4:	2200      	movs	r2, #0
100030a6:	601a      	str	r2, [r3, #0]
}
100030a8:	46c0      	nop			; (mov r8, r8)
100030aa:	693b      	ldr	r3, [r7, #16]
100030ac:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100030ae:	68bb      	ldr	r3, [r7, #8]
100030b0:	f383 8810 	msr	PRIMASK, r3
}
100030b4:	46c0      	nop			; (mov r8, r8)
}
100030b6:	46c0      	nop			; (mov r8, r8)
    }
    spin_unlock(lock, save);
}
100030b8:	46c0      	nop			; (mov r8, r8)
100030ba:	46bd      	mov	sp, r7
100030bc:	b010      	add	sp, #64	; 0x40
100030be:	bd80      	pop	{r7, pc}
100030c0:	34000040 	.word	0x34000040
100030c4:	10002e81 	.word	0x10002e81
100030c8:	40054038 	.word	0x40054038
100030cc:	20000f14 	.word	0x20000f14
100030d0:	2000165e 	.word	0x2000165e

100030d4 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
100030d4:	b5b0      	push	{r4, r5, r7, lr}
100030d6:	b096      	sub	sp, #88	; 0x58
100030d8:	af00      	add	r7, sp, #0
100030da:	60f8      	str	r0, [r7, #12]
100030dc:	603a      	str	r2, [r7, #0]
100030de:	607b      	str	r3, [r7, #4]
    bool missed;
    uint64_t now = time_us_64();
100030e0:	f7ff fe5e 	bl	10002da0 <time_us_64>
100030e4:	0002      	movs	r2, r0
100030e6:	000b      	movs	r3, r1
100030e8:	64ba      	str	r2, [r7, #72]	; 0x48
100030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint64_t t = to_us_since_boot(target);
100030ec:	683a      	ldr	r2, [r7, #0]
100030ee:	687b      	ldr	r3, [r7, #4]
100030f0:	0010      	movs	r0, r2
100030f2:	0019      	movs	r1, r3
100030f4:	f7ff fe18 	bl	10002d28 <to_us_since_boot>
100030f8:	0002      	movs	r2, r0
100030fa:	000b      	movs	r3, r1
100030fc:	643a      	str	r2, [r7, #64]	; 0x40
100030fe:	647b      	str	r3, [r7, #68]	; 0x44
    if (now >= t) {
10003100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10003104:	429a      	cmp	r2, r3
10003106:	d80c      	bhi.n	10003122 <hardware_alarm_set_target+0x4e>
10003108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000310c:	429a      	cmp	r2, r3
1000310e:	d103      	bne.n	10003118 <hardware_alarm_set_target+0x44>
10003110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003114:	429a      	cmp	r2, r3
10003116:	d804      	bhi.n	10003122 <hardware_alarm_set_target+0x4e>
        missed = true;
10003118:	2357      	movs	r3, #87	; 0x57
1000311a:	18fb      	adds	r3, r7, r3
1000311c:	2201      	movs	r2, #1
1000311e:	701a      	strb	r2, [r3, #0]
10003120:	e0a4      	b.n	1000326c <hardware_alarm_set_target+0x198>
    } else {
        missed = false;
10003122:	2357      	movs	r3, #87	; 0x57
10003124:	18fb      	adds	r3, r7, r3
10003126:	2200      	movs	r2, #0
10003128:	701a      	strb	r2, [r3, #0]
1000312a:	230a      	movs	r3, #10
1000312c:	623b      	str	r3, [r7, #32]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000312e:	6a3b      	ldr	r3, [r7, #32]
10003130:	4a52      	ldr	r2, [pc, #328]	; (1000327c <hardware_alarm_set_target+0x1a8>)
10003132:	4694      	mov	ip, r2
10003134:	4463      	add	r3, ip
10003136:	009b      	lsls	r3, r3, #2

        // 1) actually set the hardware timer
        spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
10003138:	63fb      	str	r3, [r7, #60]	; 0x3c
1000313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000313c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000313e:	f3ef 8310 	mrs	r3, PRIMASK
10003142:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("cpsid i");
10003144:	b672      	cpsid	i
    return status;
10003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    uint32_t save = save_and_disable_interrupts();
10003148:	62bb      	str	r3, [r7, #40]	; 0x28
1000314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000314c:	627b      	str	r3, [r7, #36]	; 0x24
    while (__builtin_expect(!*lock, 0));
1000314e:	46c0      	nop			; (mov r8, r8)
10003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003152:	681b      	ldr	r3, [r3, #0]
10003154:	425a      	negs	r2, r3
10003156:	4153      	adcs	r3, r2
10003158:	b2db      	uxtb	r3, r3
1000315a:	2b00      	cmp	r3, #0
1000315c:	d1f8      	bne.n	10003150 <hardware_alarm_set_target+0x7c>
    __asm volatile ("dmb" : : : "memory");
1000315e:	f3bf 8f5f 	dmb	sy
}
10003162:	46c0      	nop			; (mov r8, r8)
}
10003164:	46c0      	nop			; (mov r8, r8)
}
10003166:	46c0      	nop			; (mov r8, r8)
    return save;
10003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
        uint32_t save = spin_lock_blocking(lock);
1000316a:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t old_timer_callbacks_pending = timer_callbacks_pending;
1000316c:	2337      	movs	r3, #55	; 0x37
1000316e:	18fb      	adds	r3, r7, r3
10003170:	4a43      	ldr	r2, [pc, #268]	; (10003280 <hardware_alarm_set_target+0x1ac>)
10003172:	7812      	ldrb	r2, [r2, #0]
10003174:	701a      	strb	r2, [r3, #0]
        timer_callbacks_pending |= (uint8_t)(1u << alarm_num);
10003176:	2201      	movs	r2, #1
10003178:	68fb      	ldr	r3, [r7, #12]
1000317a:	409a      	lsls	r2, r3
1000317c:	0013      	movs	r3, r2
1000317e:	b2da      	uxtb	r2, r3
10003180:	4b3f      	ldr	r3, [pc, #252]	; (10003280 <hardware_alarm_set_target+0x1ac>)
10003182:	781b      	ldrb	r3, [r3, #0]
10003184:	4313      	orrs	r3, r2
10003186:	b2da      	uxtb	r2, r3
10003188:	4b3d      	ldr	r3, [pc, #244]	; (10003280 <hardware_alarm_set_target+0x1ac>)
1000318a:	701a      	strb	r2, [r3, #0]
        timer_hw->intr = 1u << alarm_num; // clear any IRQ
1000318c:	4b3d      	ldr	r3, [pc, #244]	; (10003284 <hardware_alarm_set_target+0x1b0>)
1000318e:	2101      	movs	r1, #1
10003190:	68fa      	ldr	r2, [r7, #12]
10003192:	4091      	lsls	r1, r2
10003194:	000a      	movs	r2, r1
10003196:	635a      	str	r2, [r3, #52]	; 0x34
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10003198:	493a      	ldr	r1, [pc, #232]	; (10003284 <hardware_alarm_set_target+0x1b0>)
1000319a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000319c:	68fb      	ldr	r3, [r7, #12]
1000319e:	3304      	adds	r3, #4
100031a0:	009b      	lsls	r3, r3, #2
100031a2:	505a      	str	r2, [r3, r1]
        // Set the alarm. Writing time should arm it
        target_hi[alarm_num] = (uint32_t)(t >> 32u);
100031a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
100031a6:	001c      	movs	r4, r3
100031a8:	2300      	movs	r3, #0
100031aa:	001d      	movs	r5, r3
100031ac:	0021      	movs	r1, r4
100031ae:	4b36      	ldr	r3, [pc, #216]	; (10003288 <hardware_alarm_set_target+0x1b4>)
100031b0:	68fa      	ldr	r2, [r7, #12]
100031b2:	0092      	lsls	r2, r2, #2
100031b4:	50d1      	str	r1, [r2, r3]

        // 2) check for races
        if (!(timer_hw->armed & 1u << alarm_num)) {
100031b6:	4b33      	ldr	r3, [pc, #204]	; (10003284 <hardware_alarm_set_target+0x1b0>)
100031b8:	6a1b      	ldr	r3, [r3, #32]
100031ba:	2101      	movs	r1, #1
100031bc:	68fa      	ldr	r2, [r7, #12]
100031be:	4091      	lsls	r1, r2
100031c0:	000a      	movs	r2, r1
100031c2:	4013      	ands	r3, r2
100031c4:	d10d      	bne.n	100031e2 <hardware_alarm_set_target+0x10e>
            // not armed, so has already fired .. IRQ must be pending (we are still under lock)
            assert(timer_hw->ints & 1u << alarm_num);
100031c6:	4b2f      	ldr	r3, [pc, #188]	; (10003284 <hardware_alarm_set_target+0x1b0>)
100031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100031ca:	2101      	movs	r1, #1
100031cc:	68fa      	ldr	r2, [r7, #12]
100031ce:	4091      	lsls	r1, r2
100031d0:	000a      	movs	r2, r1
100031d2:	4013      	ands	r3, r2
100031d4:	d135      	bne.n	10003242 <hardware_alarm_set_target+0x16e>
100031d6:	4b2d      	ldr	r3, [pc, #180]	; (1000328c <hardware_alarm_set_target+0x1b8>)
100031d8:	4a2d      	ldr	r2, [pc, #180]	; (10003290 <hardware_alarm_set_target+0x1bc>)
100031da:	482e      	ldr	r0, [pc, #184]	; (10003294 <hardware_alarm_set_target+0x1c0>)
100031dc:	21c1      	movs	r1, #193	; 0xc1
100031de:	f001 ffe3 	bl	100051a8 <__assert_func>
        } else {
            if (time_us_64() >= t) {
100031e2:	f7ff fddd 	bl	10002da0 <time_us_64>
100031e6:	0002      	movs	r2, r0
100031e8:	000b      	movs	r3, r1
100031ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
100031ec:	4299      	cmp	r1, r3
100031ee:	d828      	bhi.n	10003242 <hardware_alarm_set_target+0x16e>
100031f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
100031f2:	4299      	cmp	r1, r3
100031f4:	d102      	bne.n	100031fc <hardware_alarm_set_target+0x128>
100031f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
100031f8:	4291      	cmp	r1, r2
100031fa:	d822      	bhi.n	10003242 <hardware_alarm_set_target+0x16e>
                // we are already at or past the right time; there is no point in us racing against the IRQ
                // we are about to generate. note however that, if there was already a timer pending before,
                // then we still let the IRQ fire, as whatever it was, is not handled by our setting missed=true here
                missed = true;
100031fc:	2357      	movs	r3, #87	; 0x57
100031fe:	18fb      	adds	r3, r7, r3
10003200:	2201      	movs	r2, #1
10003202:	701a      	strb	r2, [r3, #0]
                if (timer_callbacks_pending != old_timer_callbacks_pending) {
10003204:	4b1e      	ldr	r3, [pc, #120]	; (10003280 <hardware_alarm_set_target+0x1ac>)
10003206:	781b      	ldrb	r3, [r3, #0]
10003208:	2437      	movs	r4, #55	; 0x37
1000320a:	193a      	adds	r2, r7, r4
1000320c:	7812      	ldrb	r2, [r2, #0]
1000320e:	429a      	cmp	r2, r3
10003210:	d017      	beq.n	10003242 <hardware_alarm_set_target+0x16e>
                    // disarm the timer
                    timer_hw->armed = 1u << alarm_num;
10003212:	4b1c      	ldr	r3, [pc, #112]	; (10003284 <hardware_alarm_set_target+0x1b0>)
10003214:	2101      	movs	r1, #1
10003216:	68fa      	ldr	r2, [r7, #12]
10003218:	4091      	lsls	r1, r2
1000321a:	000a      	movs	r2, r1
1000321c:	621a      	str	r2, [r3, #32]
                    // clear the IRQ...
                    timer_hw->intr = 1u << alarm_num;
1000321e:	4b19      	ldr	r3, [pc, #100]	; (10003284 <hardware_alarm_set_target+0x1b0>)
10003220:	2101      	movs	r1, #1
10003222:	68fa      	ldr	r2, [r7, #12]
10003224:	4091      	lsls	r1, r2
10003226:	000a      	movs	r2, r1
10003228:	635a      	str	r2, [r3, #52]	; 0x34
                    // ... including anything pending on the processor - perhaps unnecessary, but
                    // our timer flag says we aren't expecting anything.
                    irq_clear(harware_alarm_irq_number(alarm_num));
1000322a:	68fb      	ldr	r3, [r7, #12]
1000322c:	0018      	movs	r0, r3
1000322e:	f7ff fe1d 	bl	10002e6c <harware_alarm_irq_number>
10003232:	0003      	movs	r3, r0
10003234:	0018      	movs	r0, r3
10003236:	f7ff fd8b 	bl	10002d50 <irq_clear>
                    // and clear our flag so that if the IRQ handler is already active (because it is on
                    // the other core) it will also skip doing anything
                    timer_callbacks_pending = old_timer_callbacks_pending;
1000323a:	4b11      	ldr	r3, [pc, #68]	; (10003280 <hardware_alarm_set_target+0x1ac>)
1000323c:	193a      	adds	r2, r7, r4
1000323e:	7812      	ldrb	r2, [r2, #0]
10003240:	701a      	strb	r2, [r3, #0]
10003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10003244:	61fb      	str	r3, [r7, #28]
10003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10003248:	61bb      	str	r3, [r7, #24]
1000324a:	69fb      	ldr	r3, [r7, #28]
1000324c:	617b      	str	r3, [r7, #20]
    __asm volatile ("dmb" : : : "memory");
1000324e:	f3bf 8f5f 	dmb	sy
}
10003252:	46c0      	nop			; (mov r8, r8)
}
10003254:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10003256:	697b      	ldr	r3, [r7, #20]
10003258:	2200      	movs	r2, #0
1000325a:	601a      	str	r2, [r3, #0]
}
1000325c:	46c0      	nop			; (mov r8, r8)
1000325e:	69bb      	ldr	r3, [r7, #24]
10003260:	613b      	str	r3, [r7, #16]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10003262:	693b      	ldr	r3, [r7, #16]
10003264:	f383 8810 	msr	PRIMASK, r3
}
10003268:	46c0      	nop			; (mov r8, r8)
}
1000326a:	46c0      	nop			; (mov r8, r8)
            }
        }
        spin_unlock(lock, save);
        // note at this point any pending timer IRQ can likely run
    }
    return missed;
1000326c:	2357      	movs	r3, #87	; 0x57
1000326e:	18fb      	adds	r3, r7, r3
10003270:	781b      	ldrb	r3, [r3, #0]
}
10003272:	0018      	movs	r0, r3
10003274:	46bd      	mov	sp, r7
10003276:	b016      	add	sp, #88	; 0x58
10003278:	bdb0      	pop	{r4, r5, r7, pc}
1000327a:	46c0      	nop			; (mov r8, r8)
1000327c:	34000040 	.word	0x34000040
10003280:	2000165e 	.word	0x2000165e
10003284:	40054000 	.word	0x40054000
10003288:	2000164c 	.word	0x2000164c
1000328c:	10007994 	.word	0x10007994
10003290:	10007a10 	.word	0x10007a10
10003294:	100079b8 	.word	0x100079b8

10003298 <hardware_alarm_cancel>:

void hardware_alarm_cancel(uint alarm_num) {
10003298:	b580      	push	{r7, lr}
1000329a:	b08e      	sub	sp, #56	; 0x38
1000329c:	af00      	add	r7, sp, #0
1000329e:	6078      	str	r0, [r7, #4]
    check_hardware_alarm_num_param(alarm_num);
100032a0:	687b      	ldr	r3, [r7, #4]
100032a2:	0018      	movs	r0, r3
100032a4:	f7ff fd4c 	bl	10002d40 <check_hardware_alarm_num_param>
100032a8:	230a      	movs	r3, #10
100032aa:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100032ac:	68fb      	ldr	r3, [r7, #12]
100032ae:	4a25      	ldr	r2, [pc, #148]	; (10003344 <hardware_alarm_cancel+0xac>)
100032b0:	4694      	mov	ip, r2
100032b2:	4463      	add	r3, ip
100032b4:	009b      	lsls	r3, r3, #2

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
100032b6:	637b      	str	r3, [r7, #52]	; 0x34
100032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100032ba:	61fb      	str	r3, [r7, #28]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100032bc:	f3ef 8310 	mrs	r3, PRIMASK
100032c0:	61bb      	str	r3, [r7, #24]
    __asm volatile ("cpsid i");
100032c2:	b672      	cpsid	i
    return status;
100032c4:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
100032c6:	617b      	str	r3, [r7, #20]
100032c8:	69fb      	ldr	r3, [r7, #28]
100032ca:	613b      	str	r3, [r7, #16]
    while (__builtin_expect(!*lock, 0));
100032cc:	46c0      	nop			; (mov r8, r8)
100032ce:	693b      	ldr	r3, [r7, #16]
100032d0:	681b      	ldr	r3, [r3, #0]
100032d2:	425a      	negs	r2, r3
100032d4:	4153      	adcs	r3, r2
100032d6:	b2db      	uxtb	r3, r3
100032d8:	2b00      	cmp	r3, #0
100032da:	d1f8      	bne.n	100032ce <hardware_alarm_cancel+0x36>
    __asm volatile ("dmb" : : : "memory");
100032dc:	f3bf 8f5f 	dmb	sy
}
100032e0:	46c0      	nop			; (mov r8, r8)
}
100032e2:	46c0      	nop			; (mov r8, r8)
}
100032e4:	46c0      	nop			; (mov r8, r8)
    return save;
100032e6:	697b      	ldr	r3, [r7, #20]
    uint32_t save = spin_lock_blocking(lock);
100032e8:	633b      	str	r3, [r7, #48]	; 0x30
    timer_hw->armed = 1u << alarm_num;
100032ea:	4b17      	ldr	r3, [pc, #92]	; (10003348 <hardware_alarm_cancel+0xb0>)
100032ec:	2101      	movs	r1, #1
100032ee:	687a      	ldr	r2, [r7, #4]
100032f0:	4091      	lsls	r1, r2
100032f2:	000a      	movs	r2, r1
100032f4:	621a      	str	r2, [r3, #32]
    timer_callbacks_pending &= (uint8_t)~(1u << alarm_num);
100032f6:	2201      	movs	r2, #1
100032f8:	687b      	ldr	r3, [r7, #4]
100032fa:	409a      	lsls	r2, r3
100032fc:	0013      	movs	r3, r2
100032fe:	b2db      	uxtb	r3, r3
10003300:	43db      	mvns	r3, r3
10003302:	b2db      	uxtb	r3, r3
10003304:	4a11      	ldr	r2, [pc, #68]	; (1000334c <hardware_alarm_cancel+0xb4>)
10003306:	7812      	ldrb	r2, [r2, #0]
10003308:	4013      	ands	r3, r2
1000330a:	b2da      	uxtb	r2, r3
1000330c:	4b0f      	ldr	r3, [pc, #60]	; (1000334c <hardware_alarm_cancel+0xb4>)
1000330e:	701a      	strb	r2, [r3, #0]
10003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003312:	62fb      	str	r3, [r7, #44]	; 0x2c
10003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10003316:	62bb      	str	r3, [r7, #40]	; 0x28
10003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000331a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("dmb" : : : "memory");
1000331c:	f3bf 8f5f 	dmb	sy
}
10003320:	46c0      	nop			; (mov r8, r8)
}
10003322:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003326:	2200      	movs	r2, #0
10003328:	601a      	str	r2, [r3, #0]
}
1000332a:	46c0      	nop			; (mov r8, r8)
1000332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000332e:	623b      	str	r3, [r7, #32]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10003330:	6a3b      	ldr	r3, [r7, #32]
10003332:	f383 8810 	msr	PRIMASK, r3
}
10003336:	46c0      	nop			; (mov r8, r8)
}
10003338:	46c0      	nop			; (mov r8, r8)
    spin_unlock(lock, save);
}
1000333a:	46c0      	nop			; (mov r8, r8)
1000333c:	46bd      	mov	sp, r7
1000333e:	b00e      	add	sp, #56	; 0x38
10003340:	bd80      	pop	{r7, pc}
10003342:	46c0      	nop			; (mov r8, r8)
10003344:	34000040 	.word	0x34000040
10003348:	40054000 	.word	0x40054000
1000334c:	2000165e 	.word	0x2000165e

10003350 <watchdog_start_tick>:
#include "hardware/watchdog.h"
#include "hardware/structs/watchdog.h"
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
10003350:	b580      	push	{r7, lr}
10003352:	b082      	sub	sp, #8
10003354:	af00      	add	r7, sp, #0
10003356:	6078      	str	r0, [r7, #4]
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10003358:	4b04      	ldr	r3, [pc, #16]	; (1000336c <watchdog_start_tick+0x1c>)
1000335a:	687a      	ldr	r2, [r7, #4]
1000335c:	2180      	movs	r1, #128	; 0x80
1000335e:	0089      	lsls	r1, r1, #2
10003360:	430a      	orrs	r2, r1
10003362:	62da      	str	r2, [r3, #44]	; 0x2c
}
10003364:	46c0      	nop			; (mov r8, r8)
10003366:	46bd      	mov	sp, r7
10003368:	b002      	add	sp, #8
1000336a:	bd80      	pop	{r7, pc}
1000336c:	40058000 	.word	0x40058000

10003370 <xosc_init>:
// The DELAY field in xosc_hw->startup is 14 bits wide.
#if STARTUP_DELAY >= (1 << 13)
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
10003370:	b580      	push	{r7, lr}
10003372:	b082      	sub	sp, #8
10003374:	af00      	add	r7, sp, #0
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10003376:	4b0e      	ldr	r3, [pc, #56]	; (100033b0 <xosc_init+0x40>)
10003378:	22aa      	movs	r2, #170	; 0xaa
1000337a:	0112      	lsls	r2, r2, #4
1000337c:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
1000337e:	4b0c      	ldr	r3, [pc, #48]	; (100033b0 <xosc_init+0x40>)
10003380:	222f      	movs	r2, #47	; 0x2f
10003382:	60da      	str	r2, [r3, #12]
10003384:	4b0a      	ldr	r3, [pc, #40]	; (100033b0 <xosc_init+0x40>)
10003386:	607b      	str	r3, [r7, #4]
10003388:	4b0a      	ldr	r3, [pc, #40]	; (100033b4 <xosc_init+0x44>)
1000338a:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000338c:	687b      	ldr	r3, [r7, #4]
1000338e:	2280      	movs	r2, #128	; 0x80
10003390:	0192      	lsls	r2, r2, #6
10003392:	4313      	orrs	r3, r2
10003394:	683a      	ldr	r2, [r7, #0]
10003396:	601a      	str	r2, [r3, #0]
}
10003398:	46c0      	nop			; (mov r8, r8)

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
1000339a:	46c0      	nop			; (mov r8, r8)
1000339c:	4b04      	ldr	r3, [pc, #16]	; (100033b0 <xosc_init+0x40>)
1000339e:	685b      	ldr	r3, [r3, #4]
100033a0:	2b00      	cmp	r3, #0
100033a2:	dafb      	bge.n	1000339c <xosc_init+0x2c>
}
100033a4:	46c0      	nop			; (mov r8, r8)
100033a6:	46c0      	nop			; (mov r8, r8)
100033a8:	46bd      	mov	sp, r7
100033aa:	b002      	add	sp, #8
100033ac:	bd80      	pop	{r7, pc}
100033ae:	46c0      	nop			; (mov r8, r8)
100033b0:	40024000 	.word	0x40024000
100033b4:	00fab000 	.word	0x00fab000

100033b8 <rom_func_lookup>:

// Bootrom function: rom_table_lookup
// Returns the 32 bit pointer into the ROM if found or NULL otherwise.
typedef void *(*rom_table_lookup_fn)(uint16_t *table, uint32_t code);

void *rom_func_lookup(uint32_t code) {
100033b8:	b580      	push	{r7, lr}
100033ba:	b086      	sub	sp, #24
100033bc:	af00      	add	r7, sp, #0
100033be:	6078      	str	r0, [r7, #4]
100033c0:	687b      	ldr	r3, [r7, #4]
100033c2:	617b      	str	r3, [r7, #20]
 * \ingroup pico_bootrom
 * \param code the code
 * \return a pointer to the function, or NULL if the code does not match any bootrom function
 */
static __force_inline void *rom_func_lookup_inline(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100033c4:	2318      	movs	r3, #24
100033c6:	881b      	ldrh	r3, [r3, #0]
100033c8:	613b      	str	r3, [r7, #16]
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100033ca:	2314      	movs	r3, #20
100033cc:	881b      	ldrh	r3, [r3, #0]
100033ce:	60fb      	str	r3, [r7, #12]
    return rom_table_lookup(func_table, code);
100033d0:	6979      	ldr	r1, [r7, #20]
100033d2:	68fa      	ldr	r2, [r7, #12]
100033d4:	693b      	ldr	r3, [r7, #16]
100033d6:	0010      	movs	r0, r2
100033d8:	4798      	blx	r3
100033da:	0003      	movs	r3, r0
    return rom_func_lookup_inline(code);
}
100033dc:	0018      	movs	r0, r3
100033de:	46bd      	mov	sp, r7
100033e0:	b006      	add	sp, #24
100033e2:	bd80      	pop	{r7, pc}

100033e4 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
100033e4:	b580      	push	{r7, lr}
100033e6:	b084      	sub	sp, #16
100033e8:	af00      	add	r7, sp, #0
100033ea:	6078      	str	r0, [r7, #4]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100033ec:	2318      	movs	r3, #24
100033ee:	881b      	ldrh	r3, [r3, #0]
100033f0:	60fb      	str	r3, [r7, #12]
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100033f2:	2316      	movs	r3, #22
100033f4:	881b      	ldrh	r3, [r3, #0]
100033f6:	60bb      	str	r3, [r7, #8]
    return rom_table_lookup(data_table, code);
100033f8:	6879      	ldr	r1, [r7, #4]
100033fa:	68ba      	ldr	r2, [r7, #8]
100033fc:	68fb      	ldr	r3, [r7, #12]
100033fe:	0010      	movs	r0, r2
10003400:	4798      	blx	r3
10003402:	0003      	movs	r3, r0
}
10003404:	0018      	movs	r0, r3
10003406:	46bd      	mov	sp, r7
10003408:	b004      	add	sp, #16
1000340a:	bd80      	pop	{r7, pc}

1000340c <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
1000340c:	b580      	push	{r7, lr}
1000340e:	b084      	sub	sp, #16
10003410:	af00      	add	r7, sp, #0
10003412:	6078      	str	r0, [r7, #4]
10003414:	6039      	str	r1, [r7, #0]
    bool ok = true;
10003416:	230f      	movs	r3, #15
10003418:	18fb      	adds	r3, r7, r3
1000341a:	2201      	movs	r2, #1
1000341c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < count; i++) {
1000341e:	2300      	movs	r3, #0
10003420:	60bb      	str	r3, [r7, #8]
10003422:	e01c      	b.n	1000345e <rom_funcs_lookup+0x52>
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10003424:	68bb      	ldr	r3, [r7, #8]
10003426:	009b      	lsls	r3, r3, #2
10003428:	687a      	ldr	r2, [r7, #4]
1000342a:	18d3      	adds	r3, r2, r3
1000342c:	681b      	ldr	r3, [r3, #0]
1000342e:	0018      	movs	r0, r3
10003430:	f7ff ffc2 	bl	100033b8 <rom_func_lookup>
10003434:	0001      	movs	r1, r0
10003436:	68bb      	ldr	r3, [r7, #8]
10003438:	009b      	lsls	r3, r3, #2
1000343a:	687a      	ldr	r2, [r7, #4]
1000343c:	18d3      	adds	r3, r2, r3
1000343e:	000a      	movs	r2, r1
10003440:	601a      	str	r2, [r3, #0]
        if (!table[i]) ok = false;
10003442:	68bb      	ldr	r3, [r7, #8]
10003444:	009b      	lsls	r3, r3, #2
10003446:	687a      	ldr	r2, [r7, #4]
10003448:	18d3      	adds	r3, r2, r3
1000344a:	681b      	ldr	r3, [r3, #0]
1000344c:	2b00      	cmp	r3, #0
1000344e:	d103      	bne.n	10003458 <rom_funcs_lookup+0x4c>
10003450:	230f      	movs	r3, #15
10003452:	18fb      	adds	r3, r7, r3
10003454:	2200      	movs	r2, #0
10003456:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < count; i++) {
10003458:	68bb      	ldr	r3, [r7, #8]
1000345a:	3301      	adds	r3, #1
1000345c:	60bb      	str	r3, [r7, #8]
1000345e:	68ba      	ldr	r2, [r7, #8]
10003460:	683b      	ldr	r3, [r7, #0]
10003462:	429a      	cmp	r2, r3
10003464:	d3de      	bcc.n	10003424 <rom_funcs_lookup+0x18>
    }
    return ok;
10003466:	230f      	movs	r3, #15
10003468:	18fb      	adds	r3, r7, r3
1000346a:	781b      	ldrb	r3, [r3, #0]
}
1000346c:	0018      	movs	r0, r3
1000346e:	46bd      	mov	sp, r7
10003470:	b004      	add	sp, #16
10003472:	bd80      	pop	{r7, pc}

10003474 <rp2040_rom_version>:
static inline uint8_t rp2040_rom_version(void) {
10003474:	b580      	push	{r7, lr}
10003476:	af00      	add	r7, sp, #0
    return *(uint8_t*)0x13;
10003478:	2313      	movs	r3, #19
1000347a:	781b      	ldrb	r3, [r3, #0]
}
1000347c:	0018      	movs	r0, r3
1000347e:	46bd      	mov	sp, r7
10003480:	bd80      	pop	{r7, pc}

10003482 <rom_table_code>:
static inline uint32_t rom_table_code(uint8_t c1, uint8_t c2) {
10003482:	b580      	push	{r7, lr}
10003484:	b082      	sub	sp, #8
10003486:	af00      	add	r7, sp, #0
10003488:	0002      	movs	r2, r0
1000348a:	1dfb      	adds	r3, r7, #7
1000348c:	701a      	strb	r2, [r3, #0]
1000348e:	1dbb      	adds	r3, r7, #6
10003490:	1c0a      	adds	r2, r1, #0
10003492:	701a      	strb	r2, [r3, #0]
    return ROM_TABLE_CODE((uint32_t) c1, (uint32_t) c2);
10003494:	1dfb      	adds	r3, r7, #7
10003496:	781a      	ldrb	r2, [r3, #0]
10003498:	1dbb      	adds	r3, r7, #6
1000349a:	781b      	ldrb	r3, [r3, #0]
1000349c:	021b      	lsls	r3, r3, #8
1000349e:	4313      	orrs	r3, r2
}
100034a0:	0018      	movs	r0, r3
100034a2:	46bd      	mov	sp, r7
100034a4:	b002      	add	sp, #8
100034a6:	bd80      	pop	{r7, pc}

100034a8 <__aeabi_double_init>:
#endif
extern void double_table_shim_on_use_helper(void);

void __attribute__((weak)) *sf_clz_func;

void __aeabi_double_init(void) {
100034a8:	b580      	push	{r7, lr}
100034aa:	b084      	sub	sp, #16
100034ac:	af00      	add	r7, sp, #0
    int rom_version = rp2040_rom_version();
100034ae:	f7ff ffe1 	bl	10003474 <rp2040_rom_version>
100034b2:	0003      	movs	r3, r0
100034b4:	60bb      	str	r3, [r7, #8]
#if PICO_DOUBLE_SUPPORT_ROM_V1 && PICO_RP2040_B0_SUPPORTED
    if (rom_version == 1) {
100034b6:	68bb      	ldr	r3, [r7, #8]
100034b8:	2b01      	cmp	r3, #1
100034ba:	d10d      	bne.n	100034d8 <__aeabi_double_init+0x30>
        // followed by the shim function pointer inside the actual wrapper function. that way if the wrapper
        // function is garbage collected, so is the shim function.
        //
        // double_table_shim_on_use_helper expects this SVC instruction in the calling code soon after the address
        // pointed to by IP and patches the double_table entry with the real shim the first time the function is called.
        for(uint i=0; i<SF_TABLE_V2_SIZE/4; i++) {
100034bc:	2300      	movs	r3, #0
100034be:	60fb      	str	r3, [r7, #12]
100034c0:	e007      	b.n	100034d2 <__aeabi_double_init+0x2a>
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
100034c2:	492c      	ldr	r1, [pc, #176]	; (10003574 <__aeabi_double_init+0xcc>)
100034c4:	4b2c      	ldr	r3, [pc, #176]	; (10003578 <__aeabi_double_init+0xd0>)
100034c6:	68fa      	ldr	r2, [r7, #12]
100034c8:	0092      	lsls	r2, r2, #2
100034ca:	50d1      	str	r1, [r2, r3]
        for(uint i=0; i<SF_TABLE_V2_SIZE/4; i++) {
100034cc:	68fb      	ldr	r3, [r7, #12]
100034ce:	3301      	adds	r3, #1
100034d0:	60fb      	str	r3, [r7, #12]
100034d2:	68fb      	ldr	r3, [r7, #12]
100034d4:	2b1f      	cmp	r3, #31
100034d6:	d9f4      	bls.n	100034c2 <__aeabi_double_init+0x1a>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
100034d8:	68bb      	ldr	r3, [r7, #8]
100034da:	2b01      	cmp	r3, #1
100034dc:	dd39      	ble.n	10003552 <__aeabi_double_init+0xaa>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100034de:	2144      	movs	r1, #68	; 0x44
100034e0:	2053      	movs	r0, #83	; 0x53
100034e2:	f7ff ffce 	bl	10003482 <rom_table_code>
100034e6:	0003      	movs	r3, r0
100034e8:	0018      	movs	r0, r3
100034ea:	f7ff ff7b 	bl	100033e4 <rom_data_lookup>
100034ee:	0003      	movs	r3, r0
100034f0:	607b      	str	r3, [r7, #4]
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
100034f2:	2146      	movs	r1, #70	; 0x46
100034f4:	2053      	movs	r0, #83	; 0x53
100034f6:	f7ff ffc4 	bl	10003482 <rom_table_code>
100034fa:	0003      	movs	r3, r0
100034fc:	0018      	movs	r0, r3
100034fe:	f7ff ff71 	bl	100033e4 <rom_data_lookup>
10003502:	0003      	movs	r3, r0
10003504:	3b02      	subs	r3, #2
10003506:	781b      	ldrb	r3, [r3, #0]
10003508:	009b      	lsls	r3, r3, #2
1000350a:	2b7f      	cmp	r3, #127	; 0x7f
1000350c:	dc05      	bgt.n	1000351a <__aeabi_double_init+0x72>
1000350e:	4b1b      	ldr	r3, [pc, #108]	; (1000357c <__aeabi_double_init+0xd4>)
10003510:	4a1b      	ldr	r2, [pc, #108]	; (10003580 <__aeabi_double_init+0xd8>)
10003512:	481c      	ldr	r0, [pc, #112]	; (10003584 <__aeabi_double_init+0xdc>)
10003514:	2132      	movs	r1, #50	; 0x32
10003516:	f001 fe47 	bl	100051a8 <__assert_func>
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
1000351a:	6879      	ldr	r1, [r7, #4]
1000351c:	4b16      	ldr	r3, [pc, #88]	; (10003578 <__aeabi_double_init+0xd0>)
1000351e:	2280      	movs	r2, #128	; 0x80
10003520:	0018      	movs	r0, r3
10003522:	f002 ff51 	bl	100063c8 <__wrap___aeabi_memcpy>
        if (rom_version == 2) {
10003526:	68bb      	ldr	r3, [r7, #8]
10003528:	2b02      	cmp	r3, #2
1000352a:	d112      	bne.n	10003552 <__aeabi_double_init+0xaa>
#ifndef NDEBUG
            if (*(uint16_t *)0x3854 != 0xb500 || // this is dsincos(_internal)
1000352c:	4b16      	ldr	r3, [pc, #88]	; (10003588 <__aeabi_double_init+0xe0>)
1000352e:	881a      	ldrh	r2, [r3, #0]
10003530:	23b5      	movs	r3, #181	; 0xb5
10003532:	021b      	lsls	r3, r3, #8
10003534:	429a      	cmp	r2, r3
10003536:	d109      	bne.n	1000354c <__aeabi_double_init+0xa4>

                *(uint16_t *)0x38d8 != 0x4649 || // this is dsin_finish
10003538:	4b14      	ldr	r3, [pc, #80]	; (1000358c <__aeabi_double_init+0xe4>)
1000353a:	881b      	ldrh	r3, [r3, #0]
            if (*(uint16_t *)0x3854 != 0xb500 || // this is dsincos(_internal)
1000353c:	4a14      	ldr	r2, [pc, #80]	; (10003590 <__aeabi_double_init+0xe8>)
1000353e:	4293      	cmp	r3, r2
10003540:	d104      	bne.n	1000354c <__aeabi_double_init+0xa4>
                *(uint16_t *)0x389c != 0x4659  // this is dcos_finish
10003542:	4b14      	ldr	r3, [pc, #80]	; (10003594 <__aeabi_double_init+0xec>)
10003544:	881b      	ldrh	r3, [r3, #0]
                *(uint16_t *)0x38d8 != 0x4649 || // this is dsin_finish
10003546:	4a14      	ldr	r2, [pc, #80]	; (10003598 <__aeabi_double_init+0xf0>)
10003548:	4293      	cmp	r3, r2
1000354a:	d002      	beq.n	10003552 <__aeabi_double_init+0xaa>
                    ) {
                panic(NULL);
1000354c:	2000      	movs	r0, #0
1000354e:	f001 fe51 	bl	100051f4 <panic>
            }
#endif
        }
    }
    if (rom_version < 3) {
10003552:	68bb      	ldr	r3, [r7, #8]
10003554:	2b02      	cmp	r3, #2
10003556:	dc02      	bgt.n	1000355e <__aeabi_double_init+0xb6>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10003558:	4a06      	ldr	r2, [pc, #24]	; (10003574 <__aeabi_double_init+0xcc>)
1000355a:	4b07      	ldr	r3, [pc, #28]	; (10003578 <__aeabi_double_init+0xd0>)
1000355c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    sf_clz_func = rom_func_lookup(ROM_FUNC_CLZ32);
1000355e:	4b0f      	ldr	r3, [pc, #60]	; (1000359c <__aeabi_double_init+0xf4>)
10003560:	0018      	movs	r0, r3
10003562:	f7ff ff29 	bl	100033b8 <rom_func_lookup>
10003566:	0002      	movs	r2, r0
10003568:	4b0d      	ldr	r3, [pc, #52]	; (100035a0 <__aeabi_double_init+0xf8>)
1000356a:	601a      	str	r2, [r3, #0]
}
1000356c:	46c0      	nop			; (mov r8, r8)
1000356e:	46bd      	mov	sp, r7
10003570:	b004      	add	sp, #16
10003572:	bd80      	pop	{r7, pc}
10003574:	10005ddd 	.word	0x10005ddd
10003578:	20001444 	.word	0x20001444
1000357c:	10007a2c 	.word	0x10007a2c
10003580:	10007aec 	.word	0x10007aec
10003584:	10007a8c 	.word	0x10007a8c
10003588:	00003854 	.word	0x00003854
1000358c:	000038d8 	.word	0x000038d8
10003590:	00004649 	.word	0x00004649
10003594:	0000389c 	.word	0x0000389c
10003598:	00004659 	.word	0x00004659
1000359c:	0000334c 	.word	0x0000334c
100035a0:	20001544 	.word	0x20001544

100035a4 <rp2040_rom_version>:
static inline uint8_t rp2040_rom_version(void) {
100035a4:	b580      	push	{r7, lr}
100035a6:	af00      	add	r7, sp, #0
    return *(uint8_t*)0x13;
100035a8:	2313      	movs	r3, #19
100035aa:	781b      	ldrb	r3, [r3, #0]
}
100035ac:	0018      	movs	r0, r3
100035ae:	46bd      	mov	sp, r7
100035b0:	bd80      	pop	{r7, pc}

100035b2 <rom_table_code>:
static inline uint32_t rom_table_code(uint8_t c1, uint8_t c2) {
100035b2:	b580      	push	{r7, lr}
100035b4:	b082      	sub	sp, #8
100035b6:	af00      	add	r7, sp, #0
100035b8:	0002      	movs	r2, r0
100035ba:	1dfb      	adds	r3, r7, #7
100035bc:	701a      	strb	r2, [r3, #0]
100035be:	1dbb      	adds	r3, r7, #6
100035c0:	1c0a      	adds	r2, r1, #0
100035c2:	701a      	strb	r2, [r3, #0]
    return ROM_TABLE_CODE((uint32_t) c1, (uint32_t) c2);
100035c4:	1dfb      	adds	r3, r7, #7
100035c6:	781a      	ldrb	r2, [r3, #0]
100035c8:	1dbb      	adds	r3, r7, #6
100035ca:	781b      	ldrb	r3, [r3, #0]
100035cc:	021b      	lsls	r3, r3, #8
100035ce:	4313      	orrs	r3, r2
}
100035d0:	0018      	movs	r0, r3
100035d2:	46bd      	mov	sp, r7
100035d4:	b002      	add	sp, #8
100035d6:	bd80      	pop	{r7, pc}

100035d8 <__aeabi_float_init>:
static __attribute__((noreturn)) void missing_float_func_shim(void) {
    panic("");
}
#endif

void __aeabi_float_init(void) {
100035d8:	b580      	push	{r7, lr}
100035da:	b084      	sub	sp, #16
100035dc:	af00      	add	r7, sp, #0
    int rom_version = rp2040_rom_version();
100035de:	f7ff ffe1 	bl	100035a4 <rp2040_rom_version>
100035e2:	0003      	movs	r3, r0
100035e4:	60bb      	str	r3, [r7, #8]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
100035e6:	2146      	movs	r1, #70	; 0x46
100035e8:	2053      	movs	r0, #83	; 0x53
100035ea:	f7ff ffe2 	bl	100035b2 <rom_table_code>
100035ee:	0003      	movs	r3, r0
100035f0:	0018      	movs	r0, r3
100035f2:	f7ff fef7 	bl	100033e4 <rom_data_lookup>
100035f6:	0003      	movs	r3, r0
100035f8:	607b      	str	r3, [r7, #4]
#if PICO_FLOAT_SUPPORT_ROM_V1 && PICO_RP2040_B0_SUPPORTED
    if (rom_version == 1) {
100035fa:	68bb      	ldr	r3, [r7, #8]
100035fc:	2b01      	cmp	r3, #1
100035fe:	d13e      	bne.n	1000367e <__aeabi_float_init+0xa6>
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10003600:	6879      	ldr	r1, [r7, #4]
10003602:	4b2f      	ldr	r3, [pc, #188]	; (100036c0 <__aeabi_float_init+0xe8>)
10003604:	2254      	movs	r2, #84	; 0x54
10003606:	0018      	movs	r0, r3
10003608:	f002 fede 	bl	100063c8 <__wrap___aeabi_memcpy>
        extern void float_table_shim_on_use_helper(void);
        // todo replace NDEBUG with a more exclusive assertion guard
#ifndef NDEBUG
        if (*(uint16_t *)0x29ee != 0x0fc4 || // this is packx
1000360c:	4b2d      	ldr	r3, [pc, #180]	; (100036c4 <__aeabi_float_init+0xec>)
1000360e:	881b      	ldrh	r3, [r3, #0]
10003610:	4a2d      	ldr	r2, [pc, #180]	; (100036c8 <__aeabi_float_init+0xf0>)
10003612:	4293      	cmp	r3, r2
10003614:	d11a      	bne.n	1000364c <__aeabi_float_init+0x74>
            *(uint16_t *)0x29c0 != 0x0dc2 || // this is upackx
10003616:	23a7      	movs	r3, #167	; 0xa7
10003618:	019b      	lsls	r3, r3, #6
1000361a:	881b      	ldrh	r3, [r3, #0]
        if (*(uint16_t *)0x29ee != 0x0fc4 || // this is packx
1000361c:	4a2b      	ldr	r2, [pc, #172]	; (100036cc <__aeabi_float_init+0xf4>)
1000361e:	4293      	cmp	r3, r2
10003620:	d114      	bne.n	1000364c <__aeabi_float_init+0x74>
            *(uint16_t *)0x2b96 != 0xb5c0 || // this is cordic_vec
10003622:	4b2b      	ldr	r3, [pc, #172]	; (100036d0 <__aeabi_float_init+0xf8>)
10003624:	881b      	ldrh	r3, [r3, #0]
            *(uint16_t *)0x29c0 != 0x0dc2 || // this is upackx
10003626:	4a2b      	ldr	r2, [pc, #172]	; (100036d4 <__aeabi_float_init+0xfc>)
10003628:	4293      	cmp	r3, r2
1000362a:	d10f      	bne.n	1000364c <__aeabi_float_init+0x74>
            *(uint16_t *)0x2b18 != 0x2500 || // this is packretns
1000362c:	4b2a      	ldr	r3, [pc, #168]	; (100036d8 <__aeabi_float_init+0x100>)
1000362e:	881a      	ldrh	r2, [r3, #0]
            *(uint16_t *)0x2b96 != 0xb5c0 || // this is cordic_vec
10003630:	2394      	movs	r3, #148	; 0x94
10003632:	019b      	lsls	r3, r3, #6
10003634:	429a      	cmp	r2, r3
10003636:	d109      	bne.n	1000364c <__aeabi_float_init+0x74>
            *(uint16_t *)0x2acc != 0xb510 || // this is float2fix
10003638:	4b28      	ldr	r3, [pc, #160]	; (100036dc <__aeabi_float_init+0x104>)
1000363a:	881b      	ldrh	r3, [r3, #0]
            *(uint16_t *)0x2b18 != 0x2500 || // this is packretns
1000363c:	4a28      	ldr	r2, [pc, #160]	; (100036e0 <__aeabi_float_init+0x108>)
1000363e:	4293      	cmp	r3, r2
10003640:	d104      	bne.n	1000364c <__aeabi_float_init+0x74>
            *(uint32_t *)0x2cfc != 0x6487ed51 // pi_q29
10003642:	4b28      	ldr	r3, [pc, #160]	; (100036e4 <__aeabi_float_init+0x10c>)
10003644:	681b      	ldr	r3, [r3, #0]
            *(uint16_t *)0x2acc != 0xb510 || // this is float2fix
10003646:	4a28      	ldr	r2, [pc, #160]	; (100036e8 <__aeabi_float_init+0x110>)
10003648:	4293      	cmp	r3, r2
1000364a:	d003      	beq.n	10003654 <__aeabi_float_init+0x7c>
        ) {
            panic("");
1000364c:	4b27      	ldr	r3, [pc, #156]	; (100036ec <__aeabi_float_init+0x114>)
1000364e:	0018      	movs	r0, r3
10003650:	f001 fdd0 	bl	100051f4 <panic>
        // function is garbage collected, so is the shim function.
        //
        // float_table_shim_on_use_helper expects this SVC instruction in the calling code soon after the address
        // pointed to by IP and patches the float_table entry with the real shim the first time the function is called.

        for(uint i=SF_TABLE_V1_SIZE/4; i<SF_TABLE_V2_SIZE/4; i++) {
10003654:	2315      	movs	r3, #21
10003656:	60fb      	str	r3, [r7, #12]
10003658:	e007      	b.n	1000366a <__aeabi_float_init+0x92>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
1000365a:	4925      	ldr	r1, [pc, #148]	; (100036f0 <__aeabi_float_init+0x118>)
1000365c:	4b18      	ldr	r3, [pc, #96]	; (100036c0 <__aeabi_float_init+0xe8>)
1000365e:	68fa      	ldr	r2, [r7, #12]
10003660:	0092      	lsls	r2, r2, #2
10003662:	50d1      	str	r1, [r2, r3]
        for(uint i=SF_TABLE_V1_SIZE/4; i<SF_TABLE_V2_SIZE/4; i++) {
10003664:	68fb      	ldr	r3, [r7, #12]
10003666:	3301      	adds	r3, #1
10003668:	60fb      	str	r3, [r7, #12]
1000366a:	68fb      	ldr	r3, [r7, #12]
1000366c:	2b1f      	cmp	r3, #31
1000366e:	d9f4      	bls.n	1000365a <__aeabi_float_init+0x82>
        }
        // we shim these for -0 and -denormal handling
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
10003670:	4a1f      	ldr	r2, [pc, #124]	; (100036f0 <__aeabi_float_init+0x118>)
10003672:	4b13      	ldr	r3, [pc, #76]	; (100036c0 <__aeabi_float_init+0xe8>)
10003674:	621a      	str	r2, [r3, #32]
10003676:	4b12      	ldr	r3, [pc, #72]	; (100036c0 <__aeabi_float_init+0xe8>)
10003678:	6a1a      	ldr	r2, [r3, #32]
1000367a:	4b11      	ldr	r3, [pc, #68]	; (100036c0 <__aeabi_float_init+0xe8>)
1000367c:	61da      	str	r2, [r3, #28]
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
1000367e:	68bb      	ldr	r3, [r7, #8]
10003680:	2b01      	cmp	r3, #1
10003682:	dd11      	ble.n	100036a8 <__aeabi_float_init+0xd0>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
10003684:	687b      	ldr	r3, [r7, #4]
10003686:	3b02      	subs	r3, #2
10003688:	781b      	ldrb	r3, [r3, #0]
1000368a:	009b      	lsls	r3, r3, #2
1000368c:	2b7f      	cmp	r3, #127	; 0x7f
1000368e:	dc05      	bgt.n	1000369c <__aeabi_float_init+0xc4>
10003690:	4b18      	ldr	r3, [pc, #96]	; (100036f4 <__aeabi_float_init+0x11c>)
10003692:	4a19      	ldr	r2, [pc, #100]	; (100036f8 <__aeabi_float_init+0x120>)
10003694:	4819      	ldr	r0, [pc, #100]	; (100036fc <__aeabi_float_init+0x124>)
10003696:	2142      	movs	r1, #66	; 0x42
10003698:	f001 fd86 	bl	100051a8 <__assert_func>
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
1000369c:	6879      	ldr	r1, [r7, #4]
1000369e:	4b08      	ldr	r3, [pc, #32]	; (100036c0 <__aeabi_float_init+0xe8>)
100036a0:	2280      	movs	r2, #128	; 0x80
100036a2:	0018      	movs	r0, r3
100036a4:	f002 fe90 	bl	100063c8 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(ROM_FUNC_CLZ32);
100036a8:	4b15      	ldr	r3, [pc, #84]	; (10003700 <__aeabi_float_init+0x128>)
100036aa:	0018      	movs	r0, r3
100036ac:	f7ff fe84 	bl	100033b8 <rom_func_lookup>
100036b0:	0002      	movs	r2, r0
100036b2:	4b14      	ldr	r3, [pc, #80]	; (10003704 <__aeabi_float_init+0x12c>)
100036b4:	601a      	str	r2, [r3, #0]
}
100036b6:	46c0      	nop			; (mov r8, r8)
100036b8:	46bd      	mov	sp, r7
100036ba:	b004      	add	sp, #16
100036bc:	bd80      	pop	{r7, pc}
100036be:	46c0      	nop			; (mov r8, r8)
100036c0:	20001548 	.word	0x20001548
100036c4:	000029ee 	.word	0x000029ee
100036c8:	00000fc4 	.word	0x00000fc4
100036cc:	00000dc2 	.word	0x00000dc2
100036d0:	00002b96 	.word	0x00002b96
100036d4:	0000b5c0 	.word	0x0000b5c0
100036d8:	00002b18 	.word	0x00002b18
100036dc:	00002acc 	.word	0x00002acc
100036e0:	0000b510 	.word	0x0000b510
100036e4:	00002cfc 	.word	0x00002cfc
100036e8:	6487ed51 	.word	0x6487ed51
100036ec:	10007b00 	.word	0x10007b00
100036f0:	10006345 	.word	0x10006345
100036f4:	10007b04 	.word	0x10007b04
100036f8:	10007b94 	.word	0x10007b94
100036fc:	10007b38 	.word	0x10007b38
10003700:	0000334c 	.word	0x0000334c
10003704:	20001544 	.word	0x20001544

10003708 <check_alloc>:
extern void *__real_realloc(void *mem, size_t size);
extern void __real_free(void *mem);

extern char __StackLimit; /* Set by linker.  */

static inline void check_alloc(__unused void *mem, __unused uint size) {
10003708:	b580      	push	{r7, lr}
1000370a:	b082      	sub	sp, #8
1000370c:	af00      	add	r7, sp, #0
1000370e:	6078      	str	r0, [r7, #4]
10003710:	6039      	str	r1, [r7, #0]
#if PICO_MALLOC_PANIC
    if (!mem || (((char *)mem) + size) > &__StackLimit) {
10003712:	687b      	ldr	r3, [r7, #4]
10003714:	2b00      	cmp	r3, #0
10003716:	d005      	beq.n	10003724 <check_alloc+0x1c>
10003718:	687a      	ldr	r2, [r7, #4]
1000371a:	683b      	ldr	r3, [r7, #0]
1000371c:	18d2      	adds	r2, r2, r3
1000371e:	4b05      	ldr	r3, [pc, #20]	; (10003734 <check_alloc+0x2c>)
10003720:	429a      	cmp	r2, r3
10003722:	d903      	bls.n	1000372c <check_alloc+0x24>
        panic("Out of memory");
10003724:	4b04      	ldr	r3, [pc, #16]	; (10003738 <check_alloc+0x30>)
10003726:	0018      	movs	r0, r3
10003728:	f001 fd64 	bl	100051f4 <panic>
    }
#endif
}
1000372c:	46c0      	nop			; (mov r8, r8)
1000372e:	46bd      	mov	sp, r7
10003730:	b002      	add	sp, #8
10003732:	bd80      	pop	{r7, pc}
10003734:	20040000 	.word	0x20040000
10003738:	10007ba8 	.word	0x10007ba8

1000373c <__wrap_malloc>:

void *__wrap_malloc(size_t size) {
1000373c:	b580      	push	{r7, lr}
1000373e:	b084      	sub	sp, #16
10003740:	af00      	add	r7, sp, #0
10003742:	6078      	str	r0, [r7, #4]
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
10003744:	687b      	ldr	r3, [r7, #4]
10003746:	0018      	movs	r0, r3
10003748:	f002 fe5e 	bl	10006408 <malloc>
1000374c:	0003      	movs	r3, r0
1000374e:	60fb      	str	r3, [r7, #12]
#if PICO_DEBUG_MALLOC
    if (!rc || ((uint8_t *)rc) + size > (uint8_t*)PICO_DEBUG_MALLOC_LOW_WATER) {
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
10003750:	687a      	ldr	r2, [r7, #4]
10003752:	68fb      	ldr	r3, [r7, #12]
10003754:	0011      	movs	r1, r2
10003756:	0018      	movs	r0, r3
10003758:	f7ff ffd6 	bl	10003708 <check_alloc>
    return rc;
1000375c:	68fb      	ldr	r3, [r7, #12]
}
1000375e:	0018      	movs	r0, r3
10003760:	46bd      	mov	sp, r7
10003762:	b004      	add	sp, #16
10003764:	bd80      	pop	{r7, pc}
	...

10003768 <running_on_fpga>:
// (mainly clock generators and oscillators) that aren't present on FPGA.

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
10003768:	b580      	push	{r7, lr}
1000376a:	af00      	add	r7, sp, #0
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
1000376c:	4b04      	ldr	r3, [pc, #16]	; (10003780 <running_on_fpga+0x18>)
1000376e:	681b      	ldr	r3, [r3, #0]
10003770:	2202      	movs	r2, #2
10003772:	4013      	ands	r3, r2
10003774:	1e5a      	subs	r2, r3, #1
10003776:	4193      	sbcs	r3, r2
10003778:	b2db      	uxtb	r3, r3
}
1000377a:	0018      	movs	r0, r3
1000377c:	46bd      	mov	sp, r7
1000377e:	bd80      	pop	{r7, pc}
10003780:	4006c000 	.word	0x4006c000

10003784 <_out_null>:
        ((char *) buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
10003784:	b580      	push	{r7, lr}
10003786:	b084      	sub	sp, #16
10003788:	af00      	add	r7, sp, #0
1000378a:	60b9      	str	r1, [r7, #8]
1000378c:	607a      	str	r2, [r7, #4]
1000378e:	603b      	str	r3, [r7, #0]
10003790:	230f      	movs	r3, #15
10003792:	18fb      	adds	r3, r7, r3
10003794:	1c02      	adds	r2, r0, #0
10003796:	701a      	strb	r2, [r3, #0]
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
10003798:	46c0      	nop			; (mov r8, r8)
1000379a:	46bd      	mov	sp, r7
1000379c:	b004      	add	sp, #16
1000379e:	bd80      	pop	{r7, pc}

100037a0 <_out_fct>:
    }
}


// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
100037a0:	b580      	push	{r7, lr}
100037a2:	b084      	sub	sp, #16
100037a4:	af00      	add	r7, sp, #0
100037a6:	60b9      	str	r1, [r7, #8]
100037a8:	607a      	str	r2, [r7, #4]
100037aa:	603b      	str	r3, [r7, #0]
100037ac:	210f      	movs	r1, #15
100037ae:	187b      	adds	r3, r7, r1
100037b0:	1c02      	adds	r2, r0, #0
100037b2:	701a      	strb	r2, [r3, #0]
    (void) idx;
    (void) maxlen;
    if (character) {
100037b4:	0008      	movs	r0, r1
100037b6:	187b      	adds	r3, r7, r1
100037b8:	781b      	ldrb	r3, [r3, #0]
100037ba:	2b00      	cmp	r3, #0
100037bc:	d007      	beq.n	100037ce <_out_fct+0x2e>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
100037be:	68bb      	ldr	r3, [r7, #8]
100037c0:	681a      	ldr	r2, [r3, #0]
100037c2:	68bb      	ldr	r3, [r7, #8]
100037c4:	6859      	ldr	r1, [r3, #4]
100037c6:	183b      	adds	r3, r7, r0
100037c8:	781b      	ldrb	r3, [r3, #0]
100037ca:	0018      	movs	r0, r3
100037cc:	4790      	blx	r2
    }
}
100037ce:	46c0      	nop			; (mov r8, r8)
100037d0:	46bd      	mov	sp, r7
100037d2:	b004      	add	sp, #16
100037d4:	bd80      	pop	{r7, pc}

100037d6 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
100037d6:	b580      	push	{r7, lr}
100037d8:	b084      	sub	sp, #16
100037da:	af00      	add	r7, sp, #0
100037dc:	6078      	str	r0, [r7, #4]
100037de:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s);
100037e0:	687b      	ldr	r3, [r7, #4]
100037e2:	60fb      	str	r3, [r7, #12]
100037e4:	e002      	b.n	100037ec <_strnlen_s+0x16>
100037e6:	68fb      	ldr	r3, [r7, #12]
100037e8:	3301      	adds	r3, #1
100037ea:	60fb      	str	r3, [r7, #12]
100037ec:	68fb      	ldr	r3, [r7, #12]
100037ee:	781b      	ldrb	r3, [r3, #0]
100037f0:	2b00      	cmp	r3, #0
100037f2:	d004      	beq.n	100037fe <_strnlen_s+0x28>
100037f4:	683b      	ldr	r3, [r7, #0]
100037f6:	1e5a      	subs	r2, r3, #1
100037f8:	603a      	str	r2, [r7, #0]
100037fa:	2b00      	cmp	r3, #0
100037fc:	d1f3      	bne.n	100037e6 <_strnlen_s+0x10>
    return (unsigned int) (s - str);
100037fe:	68fa      	ldr	r2, [r7, #12]
10003800:	687b      	ldr	r3, [r7, #4]
10003802:	1ad3      	subs	r3, r2, r3
}
10003804:	0018      	movs	r0, r3
10003806:	46bd      	mov	sp, r7
10003808:	b004      	add	sp, #16
1000380a:	bd80      	pop	{r7, pc}

1000380c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) {
1000380c:	b580      	push	{r7, lr}
1000380e:	b082      	sub	sp, #8
10003810:	af00      	add	r7, sp, #0
10003812:	0002      	movs	r2, r0
10003814:	1dfb      	adds	r3, r7, #7
10003816:	701a      	strb	r2, [r3, #0]
    return (ch >= '0') && (ch <= '9');
10003818:	1dfb      	adds	r3, r7, #7
1000381a:	781b      	ldrb	r3, [r3, #0]
1000381c:	2b2f      	cmp	r3, #47	; 0x2f
1000381e:	d905      	bls.n	1000382c <_is_digit+0x20>
10003820:	1dfb      	adds	r3, r7, #7
10003822:	781b      	ldrb	r3, [r3, #0]
10003824:	2b39      	cmp	r3, #57	; 0x39
10003826:	d801      	bhi.n	1000382c <_is_digit+0x20>
10003828:	2301      	movs	r3, #1
1000382a:	e000      	b.n	1000382e <_is_digit+0x22>
1000382c:	2300      	movs	r3, #0
1000382e:	1c1a      	adds	r2, r3, #0
10003830:	2301      	movs	r3, #1
10003832:	4013      	ands	r3, r2
10003834:	b2db      	uxtb	r3, r3
}
10003836:	0018      	movs	r0, r3
10003838:	46bd      	mov	sp, r7
1000383a:	b002      	add	sp, #8
1000383c:	bd80      	pop	{r7, pc}

1000383e <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
1000383e:	b580      	push	{r7, lr}
10003840:	b084      	sub	sp, #16
10003842:	af00      	add	r7, sp, #0
10003844:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
10003846:	2300      	movs	r3, #0
10003848:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
1000384a:	e00e      	b.n	1000386a <_atoi+0x2c>
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000384c:	68fa      	ldr	r2, [r7, #12]
1000384e:	0013      	movs	r3, r2
10003850:	009b      	lsls	r3, r3, #2
10003852:	189b      	adds	r3, r3, r2
10003854:	005b      	lsls	r3, r3, #1
10003856:	0018      	movs	r0, r3
10003858:	687b      	ldr	r3, [r7, #4]
1000385a:	681b      	ldr	r3, [r3, #0]
1000385c:	1c59      	adds	r1, r3, #1
1000385e:	687a      	ldr	r2, [r7, #4]
10003860:	6011      	str	r1, [r2, #0]
10003862:	781b      	ldrb	r3, [r3, #0]
10003864:	18c3      	adds	r3, r0, r3
10003866:	3b30      	subs	r3, #48	; 0x30
10003868:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
1000386a:	687b      	ldr	r3, [r7, #4]
1000386c:	681b      	ldr	r3, [r3, #0]
1000386e:	781b      	ldrb	r3, [r3, #0]
10003870:	0018      	movs	r0, r3
10003872:	f7ff ffcb 	bl	1000380c <_is_digit>
10003876:	1e03      	subs	r3, r0, #0
10003878:	d1e8      	bne.n	1000384c <_atoi+0xe>
    }
    return i;
1000387a:	68fb      	ldr	r3, [r7, #12]
}
1000387c:	0018      	movs	r0, r3
1000387e:	46bd      	mov	sp, r7
10003880:	b004      	add	sp, #16
10003882:	bd80      	pop	{r7, pc}

10003884 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
10003884:	b590      	push	{r4, r7, lr}
10003886:	b087      	sub	sp, #28
10003888:	af00      	add	r7, sp, #0
1000388a:	60f8      	str	r0, [r7, #12]
1000388c:	60b9      	str	r1, [r7, #8]
1000388e:	607a      	str	r2, [r7, #4]
10003890:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
10003892:	687b      	ldr	r3, [r7, #4]
10003894:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
10003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003898:	2202      	movs	r2, #2
1000389a:	4013      	ands	r3, r2
1000389c:	d124      	bne.n	100038e8 <_out_rev+0x64>
1000389e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100038a0:	2201      	movs	r2, #1
100038a2:	4013      	ands	r3, r2
100038a4:	d120      	bne.n	100038e8 <_out_rev+0x64>
        for (size_t i = len; i < width; i++) {
100038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100038a8:	617b      	str	r3, [r7, #20]
100038aa:	e00a      	b.n	100038c2 <_out_rev+0x3e>
            out(' ', buffer, idx++, maxlen);
100038ac:	687a      	ldr	r2, [r7, #4]
100038ae:	1c53      	adds	r3, r2, #1
100038b0:	607b      	str	r3, [r7, #4]
100038b2:	683b      	ldr	r3, [r7, #0]
100038b4:	68b9      	ldr	r1, [r7, #8]
100038b6:	68fc      	ldr	r4, [r7, #12]
100038b8:	2020      	movs	r0, #32
100038ba:	47a0      	blx	r4
        for (size_t i = len; i < width; i++) {
100038bc:	697b      	ldr	r3, [r7, #20]
100038be:	3301      	adds	r3, #1
100038c0:	617b      	str	r3, [r7, #20]
100038c2:	697a      	ldr	r2, [r7, #20]
100038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100038c6:	429a      	cmp	r2, r3
100038c8:	d3f0      	bcc.n	100038ac <_out_rev+0x28>
        }
    }

    // reverse string
    while (len) {
100038ca:	e00d      	b.n	100038e8 <_out_rev+0x64>
        out(buf[--len], buffer, idx++, maxlen);
100038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100038ce:	3b01      	subs	r3, #1
100038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
100038d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
100038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100038d6:	18d3      	adds	r3, r2, r3
100038d8:	7818      	ldrb	r0, [r3, #0]
100038da:	687a      	ldr	r2, [r7, #4]
100038dc:	1c53      	adds	r3, r2, #1
100038de:	607b      	str	r3, [r7, #4]
100038e0:	683b      	ldr	r3, [r7, #0]
100038e2:	68b9      	ldr	r1, [r7, #8]
100038e4:	68fc      	ldr	r4, [r7, #12]
100038e6:	47a0      	blx	r4
    while (len) {
100038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100038ea:	2b00      	cmp	r3, #0
100038ec:	d1ee      	bne.n	100038cc <_out_rev+0x48>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
100038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100038f0:	2202      	movs	r2, #2
100038f2:	4013      	ands	r3, r2
100038f4:	d00e      	beq.n	10003914 <_out_rev+0x90>
        while (idx - start_idx < width) {
100038f6:	e007      	b.n	10003908 <_out_rev+0x84>
            out(' ', buffer, idx++, maxlen);
100038f8:	687a      	ldr	r2, [r7, #4]
100038fa:	1c53      	adds	r3, r2, #1
100038fc:	607b      	str	r3, [r7, #4]
100038fe:	683b      	ldr	r3, [r7, #0]
10003900:	68b9      	ldr	r1, [r7, #8]
10003902:	68fc      	ldr	r4, [r7, #12]
10003904:	2020      	movs	r0, #32
10003906:	47a0      	blx	r4
        while (idx - start_idx < width) {
10003908:	687a      	ldr	r2, [r7, #4]
1000390a:	693b      	ldr	r3, [r7, #16]
1000390c:	1ad3      	subs	r3, r2, r3
1000390e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10003910:	429a      	cmp	r2, r3
10003912:	d8f1      	bhi.n	100038f8 <_out_rev+0x74>
        }
    }

    return idx;
10003914:	687b      	ldr	r3, [r7, #4]
}
10003916:	0018      	movs	r0, r3
10003918:	46bd      	mov	sp, r7
1000391a:	b007      	add	sp, #28
1000391c:	bd90      	pop	{r4, r7, pc}

1000391e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
1000391e:	b590      	push	{r4, r7, lr}
10003920:	b089      	sub	sp, #36	; 0x24
10003922:	af04      	add	r7, sp, #16
10003924:	60f8      	str	r0, [r7, #12]
10003926:	60b9      	str	r1, [r7, #8]
10003928:	607a      	str	r2, [r7, #4]
1000392a:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
1000392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000392e:	2202      	movs	r2, #2
10003930:	4013      	ands	r3, r2
10003932:	d134      	bne.n	1000399e <_ntoa_format+0x80>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10003934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003936:	2b00      	cmp	r3, #0
10003938:	d017      	beq.n	1000396a <_ntoa_format+0x4c>
1000393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000393c:	2201      	movs	r2, #1
1000393e:	4013      	ands	r3, r2
10003940:	d013      	beq.n	1000396a <_ntoa_format+0x4c>
10003942:	2328      	movs	r3, #40	; 0x28
10003944:	18fb      	adds	r3, r7, r3
10003946:	781b      	ldrb	r3, [r3, #0]
10003948:	2b00      	cmp	r3, #0
1000394a:	d103      	bne.n	10003954 <_ntoa_format+0x36>
1000394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000394e:	220c      	movs	r2, #12
10003950:	4013      	ands	r3, r2
10003952:	d00a      	beq.n	1000396a <_ntoa_format+0x4c>
            width--;
10003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003956:	3b01      	subs	r3, #1
10003958:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000395a:	e006      	b.n	1000396a <_ntoa_format+0x4c>
            buf[len++] = '0';
1000395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000395e:	1c5a      	adds	r2, r3, #1
10003960:	627a      	str	r2, [r7, #36]	; 0x24
10003962:	6a3a      	ldr	r2, [r7, #32]
10003964:	18d3      	adds	r3, r2, r3
10003966:	2230      	movs	r2, #48	; 0x30
10003968:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000396e:	429a      	cmp	r2, r3
10003970:	d20a      	bcs.n	10003988 <_ntoa_format+0x6a>
10003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003974:	2b1f      	cmp	r3, #31
10003976:	d9f1      	bls.n	1000395c <_ntoa_format+0x3e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003978:	e006      	b.n	10003988 <_ntoa_format+0x6a>
            buf[len++] = '0';
1000397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000397c:	1c5a      	adds	r2, r3, #1
1000397e:	627a      	str	r2, [r7, #36]	; 0x24
10003980:	6a3a      	ldr	r2, [r7, #32]
10003982:	18d3      	adds	r3, r2, r3
10003984:	2230      	movs	r2, #48	; 0x30
10003986:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000398a:	2201      	movs	r2, #1
1000398c:	4013      	ands	r3, r2
1000398e:	d006      	beq.n	1000399e <_ntoa_format+0x80>
10003990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10003992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003994:	429a      	cmp	r2, r3
10003996:	d202      	bcs.n	1000399e <_ntoa_format+0x80>
10003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000399a:	2b1f      	cmp	r3, #31
1000399c:	d9ed      	bls.n	1000397a <_ntoa_format+0x5c>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
1000399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100039a0:	2210      	movs	r2, #16
100039a2:	4013      	ands	r3, r2
100039a4:	d056      	beq.n	10003a54 <_ntoa_format+0x136>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
100039a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
100039a8:	2380      	movs	r3, #128	; 0x80
100039aa:	00db      	lsls	r3, r3, #3
100039ac:	4013      	ands	r3, r2
100039ae:	d116      	bne.n	100039de <_ntoa_format+0xc0>
100039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100039b2:	2b00      	cmp	r3, #0
100039b4:	d013      	beq.n	100039de <_ntoa_format+0xc0>
100039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100039ba:	429a      	cmp	r2, r3
100039bc:	d003      	beq.n	100039c6 <_ntoa_format+0xa8>
100039be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100039c2:	429a      	cmp	r2, r3
100039c4:	d10b      	bne.n	100039de <_ntoa_format+0xc0>
            len--;
100039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100039c8:	3b01      	subs	r3, #1
100039ca:	627b      	str	r3, [r7, #36]	; 0x24
            if (len && (base == 16U)) {
100039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100039ce:	2b00      	cmp	r3, #0
100039d0:	d005      	beq.n	100039de <_ntoa_format+0xc0>
100039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100039d4:	2b10      	cmp	r3, #16
100039d6:	d102      	bne.n	100039de <_ntoa_format+0xc0>
                len--;
100039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100039da:	3b01      	subs	r3, #1
100039dc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100039e0:	2b10      	cmp	r3, #16
100039e2:	d10e      	bne.n	10003a02 <_ntoa_format+0xe4>
100039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100039e6:	2220      	movs	r2, #32
100039e8:	4013      	ands	r3, r2
100039ea:	d10a      	bne.n	10003a02 <_ntoa_format+0xe4>
100039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100039ee:	2b1f      	cmp	r3, #31
100039f0:	d807      	bhi.n	10003a02 <_ntoa_format+0xe4>
            buf[len++] = 'x';
100039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100039f4:	1c5a      	adds	r2, r3, #1
100039f6:	627a      	str	r2, [r7, #36]	; 0x24
100039f8:	6a3a      	ldr	r2, [r7, #32]
100039fa:	18d3      	adds	r3, r2, r3
100039fc:	2278      	movs	r2, #120	; 0x78
100039fe:	701a      	strb	r2, [r3, #0]
10003a00:	e01e      	b.n	10003a40 <_ntoa_format+0x122>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003a04:	2b10      	cmp	r3, #16
10003a06:	d10e      	bne.n	10003a26 <_ntoa_format+0x108>
10003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10003a0a:	2220      	movs	r2, #32
10003a0c:	4013      	ands	r3, r2
10003a0e:	d00a      	beq.n	10003a26 <_ntoa_format+0x108>
10003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a12:	2b1f      	cmp	r3, #31
10003a14:	d807      	bhi.n	10003a26 <_ntoa_format+0x108>
            buf[len++] = 'X';
10003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a18:	1c5a      	adds	r2, r3, #1
10003a1a:	627a      	str	r2, [r7, #36]	; 0x24
10003a1c:	6a3a      	ldr	r2, [r7, #32]
10003a1e:	18d3      	adds	r3, r2, r3
10003a20:	2258      	movs	r2, #88	; 0x58
10003a22:	701a      	strb	r2, [r3, #0]
10003a24:	e00c      	b.n	10003a40 <_ntoa_format+0x122>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003a28:	2b02      	cmp	r3, #2
10003a2a:	d109      	bne.n	10003a40 <_ntoa_format+0x122>
10003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a2e:	2b1f      	cmp	r3, #31
10003a30:	d806      	bhi.n	10003a40 <_ntoa_format+0x122>
            buf[len++] = 'b';
10003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a34:	1c5a      	adds	r2, r3, #1
10003a36:	627a      	str	r2, [r7, #36]	; 0x24
10003a38:	6a3a      	ldr	r2, [r7, #32]
10003a3a:	18d3      	adds	r3, r2, r3
10003a3c:	2262      	movs	r2, #98	; 0x62
10003a3e:	701a      	strb	r2, [r3, #0]
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a42:	2b1f      	cmp	r3, #31
10003a44:	d806      	bhi.n	10003a54 <_ntoa_format+0x136>
            buf[len++] = '0';
10003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a48:	1c5a      	adds	r2, r3, #1
10003a4a:	627a      	str	r2, [r7, #36]	; 0x24
10003a4c:	6a3a      	ldr	r2, [r7, #32]
10003a4e:	18d3      	adds	r3, r2, r3
10003a50:	2230      	movs	r2, #48	; 0x30
10003a52:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a56:	2b1f      	cmp	r3, #31
10003a58:	d823      	bhi.n	10003aa2 <_ntoa_format+0x184>
        if (negative) {
10003a5a:	2328      	movs	r3, #40	; 0x28
10003a5c:	18fb      	adds	r3, r7, r3
10003a5e:	781b      	ldrb	r3, [r3, #0]
10003a60:	2b00      	cmp	r3, #0
10003a62:	d007      	beq.n	10003a74 <_ntoa_format+0x156>
            buf[len++] = '-';
10003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a66:	1c5a      	adds	r2, r3, #1
10003a68:	627a      	str	r2, [r7, #36]	; 0x24
10003a6a:	6a3a      	ldr	r2, [r7, #32]
10003a6c:	18d3      	adds	r3, r2, r3
10003a6e:	222d      	movs	r2, #45	; 0x2d
10003a70:	701a      	strb	r2, [r3, #0]
10003a72:	e016      	b.n	10003aa2 <_ntoa_format+0x184>
        } else if (flags & FLAGS_PLUS) {
10003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10003a76:	2204      	movs	r2, #4
10003a78:	4013      	ands	r3, r2
10003a7a:	d007      	beq.n	10003a8c <_ntoa_format+0x16e>
            buf[len++] = '+';  // ignore the space if the '+' exists
10003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a7e:	1c5a      	adds	r2, r3, #1
10003a80:	627a      	str	r2, [r7, #36]	; 0x24
10003a82:	6a3a      	ldr	r2, [r7, #32]
10003a84:	18d3      	adds	r3, r2, r3
10003a86:	222b      	movs	r2, #43	; 0x2b
10003a88:	701a      	strb	r2, [r3, #0]
10003a8a:	e00a      	b.n	10003aa2 <_ntoa_format+0x184>
        } else if (flags & FLAGS_SPACE) {
10003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10003a8e:	2208      	movs	r2, #8
10003a90:	4013      	ands	r3, r2
10003a92:	d006      	beq.n	10003aa2 <_ntoa_format+0x184>
            buf[len++] = ' ';
10003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003a96:	1c5a      	adds	r2, r3, #1
10003a98:	627a      	str	r2, [r7, #36]	; 0x24
10003a9a:	6a3a      	ldr	r2, [r7, #32]
10003a9c:	18d3      	adds	r3, r2, r3
10003a9e:	2220      	movs	r2, #32
10003aa0:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10003aa2:	683c      	ldr	r4, [r7, #0]
10003aa4:	687a      	ldr	r2, [r7, #4]
10003aa6:	68b9      	ldr	r1, [r7, #8]
10003aa8:	68f8      	ldr	r0, [r7, #12]
10003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10003aac:	9303      	str	r3, [sp, #12]
10003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003ab0:	9302      	str	r3, [sp, #8]
10003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003ab4:	9301      	str	r3, [sp, #4]
10003ab6:	6a3b      	ldr	r3, [r7, #32]
10003ab8:	9300      	str	r3, [sp, #0]
10003aba:	0023      	movs	r3, r4
10003abc:	f7ff fee2 	bl	10003884 <_out_rev>
10003ac0:	0003      	movs	r3, r0
}
10003ac2:	0018      	movs	r0, r3
10003ac4:	46bd      	mov	sp, r7
10003ac6:	b005      	add	sp, #20
10003ac8:	bd90      	pop	{r4, r7, pc}

10003aca <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags) {
10003aca:	b590      	push	{r4, r7, lr}
10003acc:	b097      	sub	sp, #92	; 0x5c
10003ace:	af08      	add	r7, sp, #32
10003ad0:	60f8      	str	r0, [r7, #12]
10003ad2:	60b9      	str	r1, [r7, #8]
10003ad4:	607a      	str	r2, [r7, #4]
10003ad6:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
10003ad8:	2300      	movs	r3, #0
10003ada:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
10003adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003ade:	2b00      	cmp	r3, #0
10003ae0:	d103      	bne.n	10003aea <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
10003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10003ae4:	2210      	movs	r2, #16
10003ae6:	4393      	bics	r3, r2
10003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
10003aea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10003aec:	2380      	movs	r3, #128	; 0x80
10003aee:	00db      	lsls	r3, r3, #3
10003af0:	4013      	ands	r3, r2
10003af2:	d002      	beq.n	10003afa <_ntoa_long+0x30>
10003af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003af6:	2b00      	cmp	r3, #0
10003af8:	d033      	beq.n	10003b62 <_ntoa_long+0x98>
        do {
            const char digit = (char) (value % base);
10003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
10003afe:	0018      	movs	r0, r3
10003b00:	f001 fe48 	bl	10005794 <__wrap___aeabi_uidiv>
10003b04:	000b      	movs	r3, r1
10003b06:	001a      	movs	r2, r3
10003b08:	2133      	movs	r1, #51	; 0x33
10003b0a:	187b      	adds	r3, r7, r1
10003b0c:	701a      	strb	r2, [r3, #0]
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
10003b0e:	000a      	movs	r2, r1
10003b10:	18bb      	adds	r3, r7, r2
10003b12:	781b      	ldrb	r3, [r3, #0]
10003b14:	2b09      	cmp	r3, #9
10003b16:	d804      	bhi.n	10003b22 <_ntoa_long+0x58>
10003b18:	18bb      	adds	r3, r7, r2
10003b1a:	781b      	ldrb	r3, [r3, #0]
10003b1c:	3330      	adds	r3, #48	; 0x30
10003b1e:	b2da      	uxtb	r2, r3
10003b20:	e00d      	b.n	10003b3e <_ntoa_long+0x74>
10003b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10003b24:	2220      	movs	r2, #32
10003b26:	4013      	ands	r3, r2
10003b28:	d001      	beq.n	10003b2e <_ntoa_long+0x64>
10003b2a:	2341      	movs	r3, #65	; 0x41
10003b2c:	e000      	b.n	10003b30 <_ntoa_long+0x66>
10003b2e:	2361      	movs	r3, #97	; 0x61
10003b30:	2233      	movs	r2, #51	; 0x33
10003b32:	18ba      	adds	r2, r7, r2
10003b34:	7812      	ldrb	r2, [r2, #0]
10003b36:	189b      	adds	r3, r3, r2
10003b38:	b2db      	uxtb	r3, r3
10003b3a:	3b0a      	subs	r3, #10
10003b3c:	b2da      	uxtb	r2, r3
10003b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003b40:	1c59      	adds	r1, r3, #1
10003b42:	6379      	str	r1, [r7, #52]	; 0x34
10003b44:	2110      	movs	r1, #16
10003b46:	1879      	adds	r1, r7, r1
10003b48:	54ca      	strb	r2, [r1, r3]
            value /= base;
10003b4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
10003b4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10003b4e:	f001 fe21 	bl	10005794 <__wrap___aeabi_uidiv>
10003b52:	0003      	movs	r3, r0
10003b54:	64bb      	str	r3, [r7, #72]	; 0x48
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003b58:	2b00      	cmp	r3, #0
10003b5a:	d002      	beq.n	10003b62 <_ntoa_long+0x98>
10003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003b5e:	2b1f      	cmp	r3, #31
10003b60:	d9cb      	bls.n	10003afa <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003b62:	683c      	ldr	r4, [r7, #0]
10003b64:	687a      	ldr	r2, [r7, #4]
10003b66:	68b9      	ldr	r1, [r7, #8]
10003b68:	68f8      	ldr	r0, [r7, #12]
10003b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10003b6c:	9306      	str	r3, [sp, #24]
10003b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10003b70:	9305      	str	r3, [sp, #20]
10003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003b74:	9304      	str	r3, [sp, #16]
10003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10003b78:	9303      	str	r3, [sp, #12]
10003b7a:	234c      	movs	r3, #76	; 0x4c
10003b7c:	18fb      	adds	r3, r7, r3
10003b7e:	781b      	ldrb	r3, [r3, #0]
10003b80:	9302      	str	r3, [sp, #8]
10003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003b84:	9301      	str	r3, [sp, #4]
10003b86:	2310      	movs	r3, #16
10003b88:	18fb      	adds	r3, r7, r3
10003b8a:	9300      	str	r3, [sp, #0]
10003b8c:	0023      	movs	r3, r4
10003b8e:	f7ff fec6 	bl	1000391e <_ntoa_format>
10003b92:	0003      	movs	r3, r0
}
10003b94:	0018      	movs	r0, r3
10003b96:	46bd      	mov	sp, r7
10003b98:	b00f      	add	sp, #60	; 0x3c
10003b9a:	bd90      	pop	{r4, r7, pc}

10003b9c <_ntoa_long_long>:
// internal itoa for 'long long' type
#if PICO_PRINTF_SUPPORT_LONG_LONG

static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
10003b9c:	b5b0      	push	{r4, r5, r7, lr}
10003b9e:	b096      	sub	sp, #88	; 0x58
10003ba0:	af08      	add	r7, sp, #32
10003ba2:	60f8      	str	r0, [r7, #12]
10003ba4:	60b9      	str	r1, [r7, #8]
10003ba6:	607a      	str	r2, [r7, #4]
10003ba8:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
10003baa:	2300      	movs	r3, #0
10003bac:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
10003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10003bb2:	4313      	orrs	r3, r2
10003bb4:	d103      	bne.n	10003bbe <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
10003bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10003bb8:	2210      	movs	r2, #16
10003bba:	4393      	bics	r3, r2
10003bbc:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
10003bbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
10003bc0:	2380      	movs	r3, #128	; 0x80
10003bc2:	00db      	lsls	r3, r3, #3
10003bc4:	4013      	ands	r3, r2
10003bc6:	d003      	beq.n	10003bd0 <_ntoa_long_long+0x34>
10003bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10003bcc:	4313      	orrs	r3, r2
10003bce:	d03a      	beq.n	10003c46 <_ntoa_long_long+0xaa>
        do {
            const char digit = (char) (value % base);
10003bd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10003bd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10003bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
10003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10003bd8:	f001 fe1e 	bl	10005818 <__wrap___aeabi_uldivmod>
10003bdc:	0010      	movs	r0, r2
10003bde:	0019      	movs	r1, r3
10003be0:	2433      	movs	r4, #51	; 0x33
10003be2:	193b      	adds	r3, r7, r4
10003be4:	1c02      	adds	r2, r0, #0
10003be6:	701a      	strb	r2, [r3, #0]
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
10003be8:	0022      	movs	r2, r4
10003bea:	18bb      	adds	r3, r7, r2
10003bec:	781b      	ldrb	r3, [r3, #0]
10003bee:	2b09      	cmp	r3, #9
10003bf0:	d804      	bhi.n	10003bfc <_ntoa_long_long+0x60>
10003bf2:	18bb      	adds	r3, r7, r2
10003bf4:	781b      	ldrb	r3, [r3, #0]
10003bf6:	3330      	adds	r3, #48	; 0x30
10003bf8:	b2da      	uxtb	r2, r3
10003bfa:	e00d      	b.n	10003c18 <_ntoa_long_long+0x7c>
10003bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10003bfe:	2220      	movs	r2, #32
10003c00:	4013      	ands	r3, r2
10003c02:	d001      	beq.n	10003c08 <_ntoa_long_long+0x6c>
10003c04:	2341      	movs	r3, #65	; 0x41
10003c06:	e000      	b.n	10003c0a <_ntoa_long_long+0x6e>
10003c08:	2361      	movs	r3, #97	; 0x61
10003c0a:	2233      	movs	r2, #51	; 0x33
10003c0c:	18ba      	adds	r2, r7, r2
10003c0e:	7812      	ldrb	r2, [r2, #0]
10003c10:	189b      	adds	r3, r3, r2
10003c12:	b2db      	uxtb	r3, r3
10003c14:	3b0a      	subs	r3, #10
10003c16:	b2da      	uxtb	r2, r3
10003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003c1a:	1c59      	adds	r1, r3, #1
10003c1c:	6379      	str	r1, [r7, #52]	; 0x34
10003c1e:	2110      	movs	r1, #16
10003c20:	1879      	adds	r1, r7, r1
10003c22:	54ca      	strb	r2, [r1, r3]
            value /= base;
10003c24:	6dba      	ldr	r2, [r7, #88]	; 0x58
10003c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10003c28:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10003c2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10003c2c:	f001 fdf4 	bl	10005818 <__wrap___aeabi_uldivmod>
10003c30:	0002      	movs	r2, r0
10003c32:	000b      	movs	r3, r1
10003c34:	64ba      	str	r2, [r7, #72]	; 0x48
10003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10003c3c:	4313      	orrs	r3, r2
10003c3e:	d002      	beq.n	10003c46 <_ntoa_long_long+0xaa>
10003c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003c42:	2b1f      	cmp	r3, #31
10003c44:	d9c4      	bls.n	10003bd0 <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10003c48:	683d      	ldr	r5, [r7, #0]
10003c4a:	687c      	ldr	r4, [r7, #4]
10003c4c:	68b9      	ldr	r1, [r7, #8]
10003c4e:	68f8      	ldr	r0, [r7, #12]
10003c50:	6eba      	ldr	r2, [r7, #104]	; 0x68
10003c52:	9206      	str	r2, [sp, #24]
10003c54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
10003c56:	9205      	str	r2, [sp, #20]
10003c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10003c5a:	9204      	str	r2, [sp, #16]
10003c5c:	9303      	str	r3, [sp, #12]
10003c5e:	2350      	movs	r3, #80	; 0x50
10003c60:	18fb      	adds	r3, r7, r3
10003c62:	781b      	ldrb	r3, [r3, #0]
10003c64:	9302      	str	r3, [sp, #8]
10003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10003c68:	9301      	str	r3, [sp, #4]
10003c6a:	2310      	movs	r3, #16
10003c6c:	18fb      	adds	r3, r7, r3
10003c6e:	9300      	str	r3, [sp, #0]
10003c70:	002b      	movs	r3, r5
10003c72:	0022      	movs	r2, r4
10003c74:	f7ff fe53 	bl	1000391e <_ntoa_format>
10003c78:	0003      	movs	r3, r0
}
10003c7a:	0018      	movs	r0, r3
10003c7c:	46bd      	mov	sp, r7
10003c7e:	b00e      	add	sp, #56	; 0x38
10003c80:	bdb0      	pop	{r4, r5, r7, pc}
	...

10003c84 <_ftoa>:

#define is_nan __builtin_isnan

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
10003c86:	b09d      	sub	sp, #116	; 0x74
10003c88:	af06      	add	r7, sp, #24
10003c8a:	60f8      	str	r0, [r7, #12]
10003c8c:	60b9      	str	r1, [r7, #8]
10003c8e:	607a      	str	r2, [r7, #4]
10003c90:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
10003c92:	2300      	movs	r3, #0
10003c94:	657b      	str	r3, [r7, #84]	; 0x54
    double diff = 0.0;
10003c96:	2200      	movs	r2, #0
10003c98:	2300      	movs	r3, #0
10003c9a:	63ba      	str	r2, [r7, #56]	; 0x38
10003c9c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (is_nan(value))
10003c9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10003ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10003ca2:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003ca4:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003ca6:	f002 f83e 	bl	10005d26 <__wrap___aeabi_dcmpun>
10003caa:	1e03      	subs	r3, r0, #0
10003cac:	d012      	beq.n	10003cd4 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10003cae:	683c      	ldr	r4, [r7, #0]
10003cb0:	687a      	ldr	r2, [r7, #4]
10003cb2:	68b9      	ldr	r1, [r7, #8]
10003cb4:	68f8      	ldr	r0, [r7, #12]
10003cb6:	2380      	movs	r3, #128	; 0x80
10003cb8:	18fb      	adds	r3, r7, r3
10003cba:	681b      	ldr	r3, [r3, #0]
10003cbc:	9303      	str	r3, [sp, #12]
10003cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003cc0:	9302      	str	r3, [sp, #8]
10003cc2:	2303      	movs	r3, #3
10003cc4:	9301      	str	r3, [sp, #4]
10003cc6:	4bc5      	ldr	r3, [pc, #788]	; (10003fdc <_ftoa+0x358>)
10003cc8:	9300      	str	r3, [sp, #0]
10003cca:	0023      	movs	r3, r4
10003ccc:	f7ff fdda 	bl	10003884 <_out_rev>
10003cd0:	0003      	movs	r3, r0
10003cd2:	e21d      	b.n	10004110 <_ftoa+0x48c>
    if (value < -DBL_MAX)
10003cd4:	2201      	movs	r2, #1
10003cd6:	4252      	negs	r2, r2
10003cd8:	4bc1      	ldr	r3, [pc, #772]	; (10003fe0 <_ftoa+0x35c>)
10003cda:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003cdc:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003cde:	f002 f80f 	bl	10005d00 <__wrap___aeabi_dcmplt>
10003ce2:	1e03      	subs	r3, r0, #0
10003ce4:	d012      	beq.n	10003d0c <_ftoa+0x88>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
10003ce6:	683c      	ldr	r4, [r7, #0]
10003ce8:	687a      	ldr	r2, [r7, #4]
10003cea:	68b9      	ldr	r1, [r7, #8]
10003cec:	68f8      	ldr	r0, [r7, #12]
10003cee:	2380      	movs	r3, #128	; 0x80
10003cf0:	18fb      	adds	r3, r7, r3
10003cf2:	681b      	ldr	r3, [r3, #0]
10003cf4:	9303      	str	r3, [sp, #12]
10003cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003cf8:	9302      	str	r3, [sp, #8]
10003cfa:	2304      	movs	r3, #4
10003cfc:	9301      	str	r3, [sp, #4]
10003cfe:	4bb9      	ldr	r3, [pc, #740]	; (10003fe4 <_ftoa+0x360>)
10003d00:	9300      	str	r3, [sp, #0]
10003d02:	0023      	movs	r3, r4
10003d04:	f7ff fdbe 	bl	10003884 <_out_rev>
10003d08:	0003      	movs	r3, r0
10003d0a:	e201      	b.n	10004110 <_ftoa+0x48c>
    if (value > DBL_MAX)
10003d0c:	2201      	movs	r2, #1
10003d0e:	4252      	negs	r2, r2
10003d10:	4bb5      	ldr	r3, [pc, #724]	; (10003fe8 <_ftoa+0x364>)
10003d12:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003d14:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003d16:	f002 f801 	bl	10005d1c <__wrap___aeabi_dcmpgt>
10003d1a:	1e03      	subs	r3, r0, #0
10003d1c:	d024      	beq.n	10003d68 <_ftoa+0xe4>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10003d1e:	2380      	movs	r3, #128	; 0x80
10003d20:	18fb      	adds	r3, r7, r3
10003d22:	681b      	ldr	r3, [r3, #0]
10003d24:	2204      	movs	r2, #4
10003d26:	4013      	ands	r3, r2
10003d28:	d001      	beq.n	10003d2e <_ftoa+0xaa>
10003d2a:	4bb0      	ldr	r3, [pc, #704]	; (10003fec <_ftoa+0x368>)
10003d2c:	e000      	b.n	10003d30 <_ftoa+0xac>
10003d2e:	4bb0      	ldr	r3, [pc, #704]	; (10003ff0 <_ftoa+0x36c>)
10003d30:	2280      	movs	r2, #128	; 0x80
10003d32:	18ba      	adds	r2, r7, r2
10003d34:	6812      	ldr	r2, [r2, #0]
10003d36:	2104      	movs	r1, #4
10003d38:	400a      	ands	r2, r1
10003d3a:	d001      	beq.n	10003d40 <_ftoa+0xbc>
10003d3c:	2204      	movs	r2, #4
10003d3e:	e000      	b.n	10003d42 <_ftoa+0xbe>
10003d40:	2203      	movs	r2, #3
10003d42:	683e      	ldr	r6, [r7, #0]
10003d44:	687d      	ldr	r5, [r7, #4]
10003d46:	68bc      	ldr	r4, [r7, #8]
10003d48:	68f8      	ldr	r0, [r7, #12]
10003d4a:	2180      	movs	r1, #128	; 0x80
10003d4c:	1879      	adds	r1, r7, r1
10003d4e:	6809      	ldr	r1, [r1, #0]
10003d50:	9103      	str	r1, [sp, #12]
10003d52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
10003d54:	9102      	str	r1, [sp, #8]
10003d56:	9201      	str	r2, [sp, #4]
10003d58:	9300      	str	r3, [sp, #0]
10003d5a:	0033      	movs	r3, r6
10003d5c:	002a      	movs	r2, r5
10003d5e:	0021      	movs	r1, r4
10003d60:	f7ff fd90 	bl	10003884 <_out_rev>
10003d64:	0003      	movs	r3, r0
10003d66:	e1d3      	b.n	10004110 <_ftoa+0x48c>
                        width, flags);

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10003d68:	2200      	movs	r2, #0
10003d6a:	4ba2      	ldr	r3, [pc, #648]	; (10003ff4 <_ftoa+0x370>)
10003d6c:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003d6e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003d70:	f001 ffd4 	bl	10005d1c <__wrap___aeabi_dcmpgt>
10003d74:	1e03      	subs	r3, r0, #0
10003d76:	d107      	bne.n	10003d88 <_ftoa+0x104>
10003d78:	2200      	movs	r2, #0
10003d7a:	4b9f      	ldr	r3, [pc, #636]	; (10003ff8 <_ftoa+0x374>)
10003d7c:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003d7e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003d80:	f001 ffbe 	bl	10005d00 <__wrap___aeabi_dcmplt>
10003d84:	1e03      	subs	r3, r0, #0
10003d86:	d015      	beq.n	10003db4 <_ftoa+0x130>
#if PICO_PRINTF_SUPPORT_EXPONENTIAL
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10003d88:	683d      	ldr	r5, [r7, #0]
10003d8a:	687c      	ldr	r4, [r7, #4]
10003d8c:	68b9      	ldr	r1, [r7, #8]
10003d8e:	68f8      	ldr	r0, [r7, #12]
10003d90:	2380      	movs	r3, #128	; 0x80
10003d92:	18fb      	adds	r3, r7, r3
10003d94:	681b      	ldr	r3, [r3, #0]
10003d96:	9304      	str	r3, [sp, #16]
10003d98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10003d9a:	9303      	str	r3, [sp, #12]
10003d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003d9e:	9302      	str	r3, [sp, #8]
10003da0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10003da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10003da4:	9200      	str	r2, [sp, #0]
10003da6:	9301      	str	r3, [sp, #4]
10003da8:	002b      	movs	r3, r5
10003daa:	0022      	movs	r2, r4
10003dac:	f000 f9b4 	bl	10004118 <_etoa>
10003db0:	0003      	movs	r3, r0
10003db2:	e1ad      	b.n	10004110 <_ftoa+0x48c>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
10003db4:	2453      	movs	r4, #83	; 0x53
10003db6:	193b      	adds	r3, r7, r4
10003db8:	2200      	movs	r2, #0
10003dba:	701a      	strb	r2, [r3, #0]
    if (value < 0) {
10003dbc:	2200      	movs	r2, #0
10003dbe:	2300      	movs	r3, #0
10003dc0:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003dc2:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003dc4:	f001 ff9c 	bl	10005d00 <__wrap___aeabi_dcmplt>
10003dc8:	1e03      	subs	r3, r0, #0
10003dca:	d00c      	beq.n	10003de6 <_ftoa+0x162>
        negative = true;
10003dcc:	193b      	adds	r3, r7, r4
10003dce:	2201      	movs	r2, #1
10003dd0:	701a      	strb	r2, [r3, #0]
        value = 0 - value;
10003dd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10003dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10003dd6:	2000      	movs	r0, #0
10003dd8:	2100      	movs	r1, #0
10003dda:	f001 ff1e 	bl	10005c1a <__wrap___aeabi_dsub>
10003dde:	0002      	movs	r2, r0
10003de0:	000b      	movs	r3, r1
10003de2:	673a      	str	r2, [r7, #112]	; 0x70
10003de4:	677b      	str	r3, [r7, #116]	; 0x74
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
10003de6:	2380      	movs	r3, #128	; 0x80
10003de8:	18fb      	adds	r3, r7, r3
10003dea:	681a      	ldr	r2, [r3, #0]
10003dec:	2380      	movs	r3, #128	; 0x80
10003dee:	00db      	lsls	r3, r3, #3
10003df0:	4013      	ands	r3, r2
10003df2:	d10c      	bne.n	10003e0e <_ftoa+0x18a>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10003df4:	2306      	movs	r3, #6
10003df6:	67bb      	str	r3, [r7, #120]	; 0x78
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10003df8:	e009      	b.n	10003e0e <_ftoa+0x18a>
        buf[len++] = '0';
10003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003dfc:	1c5a      	adds	r2, r3, #1
10003dfe:	657a      	str	r2, [r7, #84]	; 0x54
10003e00:	2210      	movs	r2, #16
10003e02:	18ba      	adds	r2, r7, r2
10003e04:	2130      	movs	r1, #48	; 0x30
10003e06:	54d1      	strb	r1, [r2, r3]
        prec--;
10003e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003e0a:	3b01      	subs	r3, #1
10003e0c:	67bb      	str	r3, [r7, #120]	; 0x78
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10003e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003e10:	2b1f      	cmp	r3, #31
10003e12:	d802      	bhi.n	10003e1a <_ftoa+0x196>
10003e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003e16:	2b09      	cmp	r3, #9
10003e18:	d8ef      	bhi.n	10003dfa <_ftoa+0x176>
    }

    int whole = (int) value;
10003e1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003e1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003e1e:	f001 ffad 	bl	10005d7c <__wrap___aeabi_d2iz>
10003e22:	0003      	movs	r3, r0
10003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
    double tmp = (value - whole) * pow10[prec];
10003e26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
10003e28:	f001 ff90 	bl	10005d4c <__wrap___aeabi_i2d>
10003e2c:	0002      	movs	r2, r0
10003e2e:	000b      	movs	r3, r1
10003e30:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003e32:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003e34:	f001 fef1 	bl	10005c1a <__wrap___aeabi_dsub>
10003e38:	0002      	movs	r2, r0
10003e3a:	000b      	movs	r3, r1
10003e3c:	0010      	movs	r0, r2
10003e3e:	0019      	movs	r1, r3
10003e40:	4a6e      	ldr	r2, [pc, #440]	; (10003ffc <_ftoa+0x378>)
10003e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003e44:	00db      	lsls	r3, r3, #3
10003e46:	18d3      	adds	r3, r2, r3
10003e48:	681a      	ldr	r2, [r3, #0]
10003e4a:	685b      	ldr	r3, [r3, #4]
10003e4c:	f001 ff15 	bl	10005c7a <__wrap___aeabi_dmul>
10003e50:	0002      	movs	r2, r0
10003e52:	000b      	movs	r3, r1
10003e54:	633a      	str	r2, [r7, #48]	; 0x30
10003e56:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned long frac = (unsigned long) tmp;
10003e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
10003e5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
10003e5c:	f001 ffb2 	bl	10005dc4 <__wrap___aeabi_d2uiz>
10003e60:	0003      	movs	r3, r0
10003e62:	64bb      	str	r3, [r7, #72]	; 0x48
    diff = tmp - frac;
10003e64:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10003e66:	f001 ff6d 	bl	10005d44 <__wrap___aeabi_ui2d>
10003e6a:	0002      	movs	r2, r0
10003e6c:	000b      	movs	r3, r1
10003e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
10003e70:	6b79      	ldr	r1, [r7, #52]	; 0x34
10003e72:	f001 fed2 	bl	10005c1a <__wrap___aeabi_dsub>
10003e76:	0002      	movs	r2, r0
10003e78:	000b      	movs	r3, r1
10003e7a:	63ba      	str	r2, [r7, #56]	; 0x38
10003e7c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (diff > 0.5) {
10003e7e:	2200      	movs	r2, #0
10003e80:	4b5f      	ldr	r3, [pc, #380]	; (10004000 <_ftoa+0x37c>)
10003e82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10003e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10003e86:	f001 ff49 	bl	10005d1c <__wrap___aeabi_dcmpgt>
10003e8a:	1e03      	subs	r3, r0, #0
10003e8c:	d015      	beq.n	10003eba <_ftoa+0x236>
        ++frac;
10003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003e90:	3301      	adds	r3, #1
10003e92:	64bb      	str	r3, [r7, #72]	; 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
10003e94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10003e96:	f001 ff55 	bl	10005d44 <__wrap___aeabi_ui2d>
10003e9a:	4a58      	ldr	r2, [pc, #352]	; (10003ffc <_ftoa+0x378>)
10003e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003e9e:	00db      	lsls	r3, r3, #3
10003ea0:	18d3      	adds	r3, r2, r3
10003ea2:	681a      	ldr	r2, [r3, #0]
10003ea4:	685b      	ldr	r3, [r3, #4]
10003ea6:	f001 ff31 	bl	10005d0c <__wrap___aeabi_dcmpge>
10003eaa:	1e03      	subs	r3, r0, #0
10003eac:	d017      	beq.n	10003ede <_ftoa+0x25a>
            frac = 0;
10003eae:	2300      	movs	r3, #0
10003eb0:	64bb      	str	r3, [r7, #72]	; 0x48
            ++whole;
10003eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10003eb4:	3301      	adds	r3, #1
10003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
10003eb8:	e011      	b.n	10003ede <_ftoa+0x25a>
        }
    } else if (diff < 0.5) {
10003eba:	2200      	movs	r2, #0
10003ebc:	4b50      	ldr	r3, [pc, #320]	; (10004000 <_ftoa+0x37c>)
10003ebe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10003ec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10003ec2:	f001 ff1d 	bl	10005d00 <__wrap___aeabi_dcmplt>
10003ec6:	1e03      	subs	r3, r0, #0
10003ec8:	d109      	bne.n	10003ede <_ftoa+0x25a>
    } else if ((frac == 0U) || (frac & 1U)) {
10003eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003ecc:	2b00      	cmp	r3, #0
10003ece:	d003      	beq.n	10003ed8 <_ftoa+0x254>
10003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003ed2:	2201      	movs	r2, #1
10003ed4:	4013      	ands	r3, r2
10003ed6:	d002      	beq.n	10003ede <_ftoa+0x25a>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
10003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003eda:	3301      	adds	r3, #1
10003edc:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (prec == 0U) {
10003ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003ee0:	2b00      	cmp	r3, #0
10003ee2:	d13b      	bne.n	10003f5c <_ftoa+0x2d8>
        diff = value - (double) whole;
10003ee4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
10003ee6:	f001 ff31 	bl	10005d4c <__wrap___aeabi_i2d>
10003eea:	0002      	movs	r2, r0
10003eec:	000b      	movs	r3, r1
10003eee:	6f38      	ldr	r0, [r7, #112]	; 0x70
10003ef0:	6f79      	ldr	r1, [r7, #116]	; 0x74
10003ef2:	f001 fe92 	bl	10005c1a <__wrap___aeabi_dsub>
10003ef6:	0002      	movs	r2, r0
10003ef8:	000b      	movs	r3, r1
10003efa:	63ba      	str	r2, [r7, #56]	; 0x38
10003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10003efe:	2301      	movs	r3, #1
10003f00:	1c1c      	adds	r4, r3, #0
10003f02:	2200      	movs	r2, #0
10003f04:	4b3e      	ldr	r3, [pc, #248]	; (10004000 <_ftoa+0x37c>)
10003f06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10003f08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10003f0a:	f001 fef9 	bl	10005d00 <__wrap___aeabi_dcmplt>
10003f0e:	1e03      	subs	r3, r0, #0
10003f10:	d101      	bne.n	10003f16 <_ftoa+0x292>
10003f12:	2300      	movs	r3, #0
10003f14:	1c1c      	adds	r4, r3, #0
10003f16:	b2e3      	uxtb	r3, r4
10003f18:	2201      	movs	r2, #1
10003f1a:	4053      	eors	r3, r2
10003f1c:	b2db      	uxtb	r3, r3
10003f1e:	2b00      	cmp	r3, #0
10003f20:	d100      	bne.n	10003f24 <_ftoa+0x2a0>
10003f22:	e088      	b.n	10004036 <_ftoa+0x3b2>
10003f24:	2301      	movs	r3, #1
10003f26:	1c1c      	adds	r4, r3, #0
10003f28:	2200      	movs	r2, #0
10003f2a:	4b35      	ldr	r3, [pc, #212]	; (10004000 <_ftoa+0x37c>)
10003f2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10003f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10003f30:	f001 fef4 	bl	10005d1c <__wrap___aeabi_dcmpgt>
10003f34:	1e03      	subs	r3, r0, #0
10003f36:	d101      	bne.n	10003f3c <_ftoa+0x2b8>
10003f38:	2300      	movs	r3, #0
10003f3a:	1c1c      	adds	r4, r3, #0
10003f3c:	b2e3      	uxtb	r3, r4
10003f3e:	2201      	movs	r2, #1
10003f40:	4053      	eors	r3, r2
10003f42:	b2db      	uxtb	r3, r3
10003f44:	2b00      	cmp	r3, #0
10003f46:	d100      	bne.n	10003f4a <_ftoa+0x2c6>
10003f48:	e075      	b.n	10004036 <_ftoa+0x3b2>
10003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10003f4c:	2201      	movs	r2, #1
10003f4e:	4013      	ands	r3, r2
10003f50:	d100      	bne.n	10003f54 <_ftoa+0x2d0>
10003f52:	e070      	b.n	10004036 <_ftoa+0x3b2>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
10003f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10003f56:	3301      	adds	r3, #1
10003f58:	64fb      	str	r3, [r7, #76]	; 0x4c
10003f5a:	e06c      	b.n	10004036 <_ftoa+0x3b2>
        }
    } else {
        unsigned int count = prec;
10003f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10003f5e:	647b      	str	r3, [r7, #68]	; 0x44
        // now do fractional part, as an unsigned number
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10003f60:	e01b      	b.n	10003f9a <_ftoa+0x316>
            --count;
10003f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10003f64:	3b01      	subs	r3, #1
10003f66:	647b      	str	r3, [r7, #68]	; 0x44
            buf[len++] = (char) (48U + (frac % 10U));
10003f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003f6a:	210a      	movs	r1, #10
10003f6c:	0018      	movs	r0, r3
10003f6e:	f001 fc11 	bl	10005794 <__wrap___aeabi_uidiv>
10003f72:	000b      	movs	r3, r1
10003f74:	b2da      	uxtb	r2, r3
10003f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003f78:	1c59      	adds	r1, r3, #1
10003f7a:	6579      	str	r1, [r7, #84]	; 0x54
10003f7c:	3230      	adds	r2, #48	; 0x30
10003f7e:	b2d1      	uxtb	r1, r2
10003f80:	2210      	movs	r2, #16
10003f82:	18ba      	adds	r2, r7, r2
10003f84:	54d1      	strb	r1, [r2, r3]
            if (!(frac /= 10U)) {
10003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003f88:	210a      	movs	r1, #10
10003f8a:	0018      	movs	r0, r3
10003f8c:	f001 fc02 	bl	10005794 <__wrap___aeabi_uidiv>
10003f90:	0003      	movs	r3, r0
10003f92:	64bb      	str	r3, [r7, #72]	; 0x48
10003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10003f96:	2b00      	cmp	r3, #0
10003f98:	d003      	beq.n	10003fa2 <_ftoa+0x31e>
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10003f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003f9c:	2b1f      	cmp	r3, #31
10003f9e:	d9e0      	bls.n	10003f62 <_ftoa+0x2de>
10003fa0:	e008      	b.n	10003fb4 <_ftoa+0x330>
                break;
10003fa2:	46c0      	nop			; (mov r8, r8)
            }
        }
        // add extra 0s
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10003fa4:	e006      	b.n	10003fb4 <_ftoa+0x330>
            buf[len++] = '0';
10003fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003fa8:	1c5a      	adds	r2, r3, #1
10003faa:	657a      	str	r2, [r7, #84]	; 0x54
10003fac:	2210      	movs	r2, #16
10003fae:	18ba      	adds	r2, r7, r2
10003fb0:	2130      	movs	r1, #48	; 0x30
10003fb2:	54d1      	strb	r1, [r2, r3]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10003fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003fb6:	2b1f      	cmp	r3, #31
10003fb8:	d804      	bhi.n	10003fc4 <_ftoa+0x340>
10003fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10003fbc:	1e5a      	subs	r2, r3, #1
10003fbe:	647a      	str	r2, [r7, #68]	; 0x44
10003fc0:	2b00      	cmp	r3, #0
10003fc2:	d1f0      	bne.n	10003fa6 <_ftoa+0x322>
        }
        if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10003fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003fc6:	2b1f      	cmp	r3, #31
10003fc8:	d835      	bhi.n	10004036 <_ftoa+0x3b2>
            // add decimal
            buf[len++] = '.';
10003fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10003fcc:	1c5a      	adds	r2, r3, #1
10003fce:	657a      	str	r2, [r7, #84]	; 0x54
10003fd0:	2210      	movs	r2, #16
10003fd2:	18ba      	adds	r2, r7, r2
10003fd4:	212e      	movs	r1, #46	; 0x2e
10003fd6:	54d1      	strb	r1, [r2, r3]
        }
    }

    // do whole part, number is reversed
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10003fd8:	e02d      	b.n	10004036 <_ftoa+0x3b2>
10003fda:	46c0      	nop			; (mov r8, r8)
10003fdc:	10007bb8 	.word	0x10007bb8
10003fe0:	ffefffff 	.word	0xffefffff
10003fe4:	10007bbc 	.word	0x10007bbc
10003fe8:	7fefffff 	.word	0x7fefffff
10003fec:	10007bc4 	.word	0x10007bc4
10003ff0:	10007bcc 	.word	0x10007bcc
10003ff4:	41cdcd65 	.word	0x41cdcd65
10003ff8:	c1cdcd65 	.word	0xc1cdcd65
10003ffc:	10007db0 	.word	0x10007db0
10004000:	3fe00000 	.word	0x3fe00000
        buf[len++] = (char) (48 + (whole % 10));
10004004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004006:	210a      	movs	r1, #10
10004008:	0018      	movs	r0, r3
1000400a:	f001 fb9b 	bl	10005744 <__wrap___aeabi_idiv>
1000400e:	000b      	movs	r3, r1
10004010:	b2da      	uxtb	r2, r3
10004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004014:	1c59      	adds	r1, r3, #1
10004016:	6579      	str	r1, [r7, #84]	; 0x54
10004018:	3230      	adds	r2, #48	; 0x30
1000401a:	b2d1      	uxtb	r1, r2
1000401c:	2210      	movs	r2, #16
1000401e:	18ba      	adds	r2, r7, r2
10004020:	54d1      	strb	r1, [r2, r3]
        if (!(whole /= 10)) {
10004022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004024:	210a      	movs	r1, #10
10004026:	0018      	movs	r0, r3
10004028:	f001 fb8c 	bl	10005744 <__wrap___aeabi_idiv>
1000402c:	0003      	movs	r3, r0
1000402e:	64fb      	str	r3, [r7, #76]	; 0x4c
10004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004032:	2b00      	cmp	r3, #0
10004034:	d003      	beq.n	1000403e <_ftoa+0x3ba>
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004038:	2b1f      	cmp	r3, #31
1000403a:	d9e3      	bls.n	10004004 <_ftoa+0x380>
1000403c:	e000      	b.n	10004040 <_ftoa+0x3bc>
            break;
1000403e:	46c0      	nop			; (mov r8, r8)
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10004040:	2180      	movs	r1, #128	; 0x80
10004042:	187b      	adds	r3, r7, r1
10004044:	681b      	ldr	r3, [r3, #0]
10004046:	2202      	movs	r2, #2
10004048:	4013      	ands	r3, r2
1000404a:	d123      	bne.n	10004094 <_ftoa+0x410>
1000404c:	187b      	adds	r3, r7, r1
1000404e:	681b      	ldr	r3, [r3, #0]
10004050:	2201      	movs	r2, #1
10004052:	4013      	ands	r3, r2
10004054:	d01e      	beq.n	10004094 <_ftoa+0x410>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10004056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004058:	2b00      	cmp	r3, #0
1000405a:	d014      	beq.n	10004086 <_ftoa+0x402>
1000405c:	2353      	movs	r3, #83	; 0x53
1000405e:	18fb      	adds	r3, r7, r3
10004060:	781b      	ldrb	r3, [r3, #0]
10004062:	2b00      	cmp	r3, #0
10004064:	d104      	bne.n	10004070 <_ftoa+0x3ec>
10004066:	187b      	adds	r3, r7, r1
10004068:	681b      	ldr	r3, [r3, #0]
1000406a:	220c      	movs	r2, #12
1000406c:	4013      	ands	r3, r2
1000406e:	d00a      	beq.n	10004086 <_ftoa+0x402>
            width--;
10004070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004072:	3b01      	subs	r3, #1
10004074:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10004076:	e006      	b.n	10004086 <_ftoa+0x402>
            buf[len++] = '0';
10004078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000407a:	1c5a      	adds	r2, r3, #1
1000407c:	657a      	str	r2, [r7, #84]	; 0x54
1000407e:	2210      	movs	r2, #16
10004080:	18ba      	adds	r2, r7, r2
10004082:	2130      	movs	r1, #48	; 0x30
10004084:	54d1      	strb	r1, [r2, r3]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10004086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
10004088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000408a:	429a      	cmp	r2, r3
1000408c:	d202      	bcs.n	10004094 <_ftoa+0x410>
1000408e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004090:	2b1f      	cmp	r3, #31
10004092:	d9f1      	bls.n	10004078 <_ftoa+0x3f4>
        }
    }

    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004096:	2b1f      	cmp	r3, #31
10004098:	d827      	bhi.n	100040ea <_ftoa+0x466>
        if (negative) {
1000409a:	2353      	movs	r3, #83	; 0x53
1000409c:	18fb      	adds	r3, r7, r3
1000409e:	781b      	ldrb	r3, [r3, #0]
100040a0:	2b00      	cmp	r3, #0
100040a2:	d007      	beq.n	100040b4 <_ftoa+0x430>
            buf[len++] = '-';
100040a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100040a6:	1c5a      	adds	r2, r3, #1
100040a8:	657a      	str	r2, [r7, #84]	; 0x54
100040aa:	2210      	movs	r2, #16
100040ac:	18ba      	adds	r2, r7, r2
100040ae:	212d      	movs	r1, #45	; 0x2d
100040b0:	54d1      	strb	r1, [r2, r3]
100040b2:	e01a      	b.n	100040ea <_ftoa+0x466>
        } else if (flags & FLAGS_PLUS) {
100040b4:	2380      	movs	r3, #128	; 0x80
100040b6:	18fb      	adds	r3, r7, r3
100040b8:	681b      	ldr	r3, [r3, #0]
100040ba:	2204      	movs	r2, #4
100040bc:	4013      	ands	r3, r2
100040be:	d007      	beq.n	100040d0 <_ftoa+0x44c>
            buf[len++] = '+';  // ignore the space if the '+' exists
100040c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100040c2:	1c5a      	adds	r2, r3, #1
100040c4:	657a      	str	r2, [r7, #84]	; 0x54
100040c6:	2210      	movs	r2, #16
100040c8:	18ba      	adds	r2, r7, r2
100040ca:	212b      	movs	r1, #43	; 0x2b
100040cc:	54d1      	strb	r1, [r2, r3]
100040ce:	e00c      	b.n	100040ea <_ftoa+0x466>
        } else if (flags & FLAGS_SPACE) {
100040d0:	2380      	movs	r3, #128	; 0x80
100040d2:	18fb      	adds	r3, r7, r3
100040d4:	681b      	ldr	r3, [r3, #0]
100040d6:	2208      	movs	r2, #8
100040d8:	4013      	ands	r3, r2
100040da:	d006      	beq.n	100040ea <_ftoa+0x466>
            buf[len++] = ' ';
100040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100040de:	1c5a      	adds	r2, r3, #1
100040e0:	657a      	str	r2, [r7, #84]	; 0x54
100040e2:	2210      	movs	r2, #16
100040e4:	18ba      	adds	r2, r7, r2
100040e6:	2120      	movs	r1, #32
100040e8:	54d1      	strb	r1, [r2, r3]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
100040ea:	683c      	ldr	r4, [r7, #0]
100040ec:	687a      	ldr	r2, [r7, #4]
100040ee:	68b9      	ldr	r1, [r7, #8]
100040f0:	68f8      	ldr	r0, [r7, #12]
100040f2:	2380      	movs	r3, #128	; 0x80
100040f4:	18fb      	adds	r3, r7, r3
100040f6:	681b      	ldr	r3, [r3, #0]
100040f8:	9303      	str	r3, [sp, #12]
100040fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
100040fc:	9302      	str	r3, [sp, #8]
100040fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004100:	9301      	str	r3, [sp, #4]
10004102:	2310      	movs	r3, #16
10004104:	18fb      	adds	r3, r7, r3
10004106:	9300      	str	r3, [sp, #0]
10004108:	0023      	movs	r3, r4
1000410a:	f7ff fbbb 	bl	10003884 <_out_rev>
1000410e:	0003      	movs	r3, r0
}
10004110:	0018      	movs	r0, r3
10004112:	46bd      	mov	sp, r7
10004114:	b017      	add	sp, #92	; 0x5c
10004116:	bdf0      	pop	{r4, r5, r6, r7, pc}

10004118 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10004118:	b5f0      	push	{r4, r5, r6, r7, lr}
1000411a:	b0a7      	sub	sp, #156	; 0x9c
1000411c:	af06      	add	r7, sp, #24
1000411e:	6478      	str	r0, [r7, #68]	; 0x44
10004120:	6439      	str	r1, [r7, #64]	; 0x40
10004122:	63fa      	str	r2, [r7, #60]	; 0x3c
10004124:	63bb      	str	r3, [r7, #56]	; 0x38
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
10004126:	2698      	movs	r6, #152	; 0x98
10004128:	19bb      	adds	r3, r7, r6
1000412a:	681a      	ldr	r2, [r3, #0]
1000412c:	685b      	ldr	r3, [r3, #4]
1000412e:	19b9      	adds	r1, r7, r6
10004130:	6808      	ldr	r0, [r1, #0]
10004132:	6849      	ldr	r1, [r1, #4]
10004134:	f001 fdf7 	bl	10005d26 <__wrap___aeabi_dcmpun>
10004138:	1e03      	subs	r3, r0, #0
1000413a:	d113      	bne.n	10004164 <_etoa+0x4c>
1000413c:	2201      	movs	r2, #1
1000413e:	4252      	negs	r2, r2
10004140:	4bd9      	ldr	r3, [pc, #868]	; (100044a8 <_etoa+0x390>)
10004142:	19b9      	adds	r1, r7, r6
10004144:	6808      	ldr	r0, [r1, #0]
10004146:	6849      	ldr	r1, [r1, #4]
10004148:	f001 fde8 	bl	10005d1c <__wrap___aeabi_dcmpgt>
1000414c:	1e03      	subs	r3, r0, #0
1000414e:	d109      	bne.n	10004164 <_etoa+0x4c>
10004150:	2201      	movs	r2, #1
10004152:	4252      	negs	r2, r2
10004154:	4bd5      	ldr	r3, [pc, #852]	; (100044ac <_etoa+0x394>)
10004156:	19b9      	adds	r1, r7, r6
10004158:	6808      	ldr	r0, [r1, #0]
1000415a:	6849      	ldr	r1, [r1, #4]
1000415c:	f001 fdd0 	bl	10005d00 <__wrap___aeabi_dcmplt>
10004160:	1e03      	subs	r3, r0, #0
10004162:	d01b      	beq.n	1000419c <_etoa+0x84>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
10004164:	6bbd      	ldr	r5, [r7, #56]	; 0x38
10004166:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
10004168:	6c39      	ldr	r1, [r7, #64]	; 0x40
1000416a:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000416c:	23a8      	movs	r3, #168	; 0xa8
1000416e:	18fb      	adds	r3, r7, r3
10004170:	681b      	ldr	r3, [r3, #0]
10004172:	9304      	str	r3, [sp, #16]
10004174:	23a4      	movs	r3, #164	; 0xa4
10004176:	18fb      	adds	r3, r7, r3
10004178:	681b      	ldr	r3, [r3, #0]
1000417a:	9303      	str	r3, [sp, #12]
1000417c:	23a0      	movs	r3, #160	; 0xa0
1000417e:	18fb      	adds	r3, r7, r3
10004180:	681b      	ldr	r3, [r3, #0]
10004182:	9302      	str	r3, [sp, #8]
10004184:	2398      	movs	r3, #152	; 0x98
10004186:	18fb      	adds	r3, r7, r3
10004188:	681a      	ldr	r2, [r3, #0]
1000418a:	685b      	ldr	r3, [r3, #4]
1000418c:	9200      	str	r2, [sp, #0]
1000418e:	9301      	str	r3, [sp, #4]
10004190:	002b      	movs	r3, r5
10004192:	0022      	movs	r2, r4
10004194:	f7ff fd76 	bl	10003c84 <_ftoa>
10004198:	0003      	movs	r3, r0
1000419a:	e281      	b.n	100046a0 <_etoa+0x588>
    }

    // determine the sign
    const bool negative = value < 0;
1000419c:	233b      	movs	r3, #59	; 0x3b
1000419e:	2238      	movs	r2, #56	; 0x38
100041a0:	189b      	adds	r3, r3, r2
100041a2:	19de      	adds	r6, r3, r7
100041a4:	2301      	movs	r3, #1
100041a6:	73fb      	strb	r3, [r7, #15]
100041a8:	2200      	movs	r2, #0
100041aa:	2300      	movs	r3, #0
100041ac:	2198      	movs	r1, #152	; 0x98
100041ae:	1879      	adds	r1, r7, r1
100041b0:	6808      	ldr	r0, [r1, #0]
100041b2:	6849      	ldr	r1, [r1, #4]
100041b4:	f001 fda4 	bl	10005d00 <__wrap___aeabi_dcmplt>
100041b8:	1e03      	subs	r3, r0, #0
100041ba:	d101      	bne.n	100041c0 <_etoa+0xa8>
100041bc:	2300      	movs	r3, #0
100041be:	73fb      	strb	r3, [r7, #15]
100041c0:	7bfb      	ldrb	r3, [r7, #15]
100041c2:	7033      	strb	r3, [r6, #0]
    if (negative) {
100041c4:	233b      	movs	r3, #59	; 0x3b
100041c6:	2238      	movs	r2, #56	; 0x38
100041c8:	189b      	adds	r3, r3, r2
100041ca:	19db      	adds	r3, r3, r7
100041cc:	781b      	ldrb	r3, [r3, #0]
100041ce:	2b00      	cmp	r3, #0
100041d0:	d00f      	beq.n	100041f2 <_etoa+0xda>
        value = -value;
100041d2:	2198      	movs	r1, #152	; 0x98
100041d4:	187b      	adds	r3, r7, r1
100041d6:	681b      	ldr	r3, [r3, #0]
100041d8:	603b      	str	r3, [r7, #0]
100041da:	239c      	movs	r3, #156	; 0x9c
100041dc:	18fb      	adds	r3, r7, r3
100041de:	681a      	ldr	r2, [r3, #0]
100041e0:	2380      	movs	r3, #128	; 0x80
100041e2:	061b      	lsls	r3, r3, #24
100041e4:	4053      	eors	r3, r2
100041e6:	607b      	str	r3, [r7, #4]
100041e8:	683a      	ldr	r2, [r7, #0]
100041ea:	687b      	ldr	r3, [r7, #4]
100041ec:	1879      	adds	r1, r7, r1
100041ee:	600a      	str	r2, [r1, #0]
100041f0:	604b      	str	r3, [r1, #4]
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
100041f2:	23a8      	movs	r3, #168	; 0xa8
100041f4:	18fb      	adds	r3, r7, r3
100041f6:	681a      	ldr	r2, [r3, #0]
100041f8:	2380      	movs	r3, #128	; 0x80
100041fa:	00db      	lsls	r3, r3, #3
100041fc:	4013      	ands	r3, r2
100041fe:	d103      	bne.n	10004208 <_etoa+0xf0>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10004200:	2306      	movs	r3, #6
10004202:	22a0      	movs	r2, #160	; 0xa0
10004204:	18ba      	adds	r2, r7, r2
10004206:	6013      	str	r3, [r2, #0]
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
10004208:	2698      	movs	r6, #152	; 0x98
1000420a:	19bb      	adds	r3, r7, r6
1000420c:	681a      	ldr	r2, [r3, #0]
1000420e:	685b      	ldr	r3, [r3, #4]
10004210:	64ba      	str	r2, [r7, #72]	; 0x48
10004212:	64fb      	str	r3, [r7, #76]	; 0x4c
    int expval;
    if (conv.U) {
10004214:	6cba      	ldr	r2, [r7, #72]	; 0x48
10004216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004218:	0011      	movs	r1, r2
1000421a:	4319      	orrs	r1, r3
1000421c:	d100      	bne.n	10004220 <_etoa+0x108>
1000421e:	e108      	b.n	10004432 <_etoa+0x31a>
        int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
10004220:	6cba      	ldr	r2, [r7, #72]	; 0x48
10004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004224:	0d1b      	lsrs	r3, r3, #20
10004226:	62bb      	str	r3, [r7, #40]	; 0x28
10004228:	2300      	movs	r3, #0
1000422a:	62fb      	str	r3, [r7, #44]	; 0x2c
1000422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000422e:	055b      	lsls	r3, r3, #21
10004230:	0d5b      	lsrs	r3, r3, #21
10004232:	4a9f      	ldr	r2, [pc, #636]	; (100044b0 <_etoa+0x398>)
10004234:	4694      	mov	ip, r2
10004236:	4463      	add	r3, ip
10004238:	66fb      	str	r3, [r7, #108]	; 0x6c
        conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
1000423a:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000423e:	2100      	movs	r1, #0
10004240:	0010      	movs	r0, r2
10004242:	4388      	bics	r0, r1
10004244:	0004      	movs	r4, r0
10004246:	031b      	lsls	r3, r3, #12
10004248:	0b1d      	lsrs	r5, r3, #12
1000424a:	2300      	movs	r3, #0
1000424c:	4323      	orrs	r3, r4
1000424e:	623b      	str	r3, [r7, #32]
10004250:	4b98      	ldr	r3, [pc, #608]	; (100044b4 <_etoa+0x39c>)
10004252:	432b      	orrs	r3, r5
10004254:	627b      	str	r3, [r7, #36]	; 0x24
10004256:	6a3b      	ldr	r3, [r7, #32]
10004258:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000425a:	64bb      	str	r3, [r7, #72]	; 0x48
1000425c:	64fc      	str	r4, [r7, #76]	; 0x4c
        // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
        expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
1000425e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
10004260:	f001 fd74 	bl	10005d4c <__wrap___aeabi_i2d>
10004264:	4a94      	ldr	r2, [pc, #592]	; (100044b8 <_etoa+0x3a0>)
10004266:	4b95      	ldr	r3, [pc, #596]	; (100044bc <_etoa+0x3a4>)
10004268:	f001 fd07 	bl	10005c7a <__wrap___aeabi_dmul>
1000426c:	0002      	movs	r2, r0
1000426e:	000b      	movs	r3, r1
10004270:	0010      	movs	r0, r2
10004272:	0019      	movs	r1, r3
10004274:	4a92      	ldr	r2, [pc, #584]	; (100044c0 <_etoa+0x3a8>)
10004276:	4b93      	ldr	r3, [pc, #588]	; (100044c4 <_etoa+0x3ac>)
10004278:	f001 fcd8 	bl	10005c2c <__wrap___aeabi_dadd>
1000427c:	0002      	movs	r2, r0
1000427e:	000b      	movs	r3, r1
10004280:	0014      	movs	r4, r2
10004282:	001d      	movs	r5, r3
10004284:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10004286:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10004288:	2200      	movs	r2, #0
1000428a:	4b8f      	ldr	r3, [pc, #572]	; (100044c8 <_etoa+0x3b0>)
1000428c:	f001 fcc5 	bl	10005c1a <__wrap___aeabi_dsub>
10004290:	0002      	movs	r2, r0
10004292:	000b      	movs	r3, r1
10004294:	0010      	movs	r0, r2
10004296:	0019      	movs	r1, r3
10004298:	4a8c      	ldr	r2, [pc, #560]	; (100044cc <_etoa+0x3b4>)
1000429a:	4b8d      	ldr	r3, [pc, #564]	; (100044d0 <_etoa+0x3b8>)
1000429c:	f001 fced 	bl	10005c7a <__wrap___aeabi_dmul>
100042a0:	0002      	movs	r2, r0
100042a2:	000b      	movs	r3, r1
100042a4:	0020      	movs	r0, r4
100042a6:	0029      	movs	r1, r5
100042a8:	f001 fcc0 	bl	10005c2c <__wrap___aeabi_dadd>
100042ac:	0002      	movs	r2, r0
100042ae:	000b      	movs	r3, r1
100042b0:	0010      	movs	r0, r2
100042b2:	0019      	movs	r1, r3
100042b4:	f001 fd62 	bl	10005d7c <__wrap___aeabi_d2iz>
100042b8:	0003      	movs	r3, r0
100042ba:	67fb      	str	r3, [r7, #124]	; 0x7c
        // now we want to compute 10^expval but we want to be sure it won't overflow
        exp2 = (int) (expval * 3.321928094887362 + 0.5);
100042bc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
100042be:	f001 fd45 	bl	10005d4c <__wrap___aeabi_i2d>
100042c2:	4a84      	ldr	r2, [pc, #528]	; (100044d4 <_etoa+0x3bc>)
100042c4:	4b84      	ldr	r3, [pc, #528]	; (100044d8 <_etoa+0x3c0>)
100042c6:	f001 fcd8 	bl	10005c7a <__wrap___aeabi_dmul>
100042ca:	0002      	movs	r2, r0
100042cc:	000b      	movs	r3, r1
100042ce:	0010      	movs	r0, r2
100042d0:	0019      	movs	r1, r3
100042d2:	2200      	movs	r2, #0
100042d4:	4b81      	ldr	r3, [pc, #516]	; (100044dc <_etoa+0x3c4>)
100042d6:	f001 fca9 	bl	10005c2c <__wrap___aeabi_dadd>
100042da:	0002      	movs	r2, r0
100042dc:	000b      	movs	r3, r1
100042de:	0010      	movs	r0, r2
100042e0:	0019      	movs	r1, r3
100042e2:	f001 fd4b 	bl	10005d7c <__wrap___aeabi_d2iz>
100042e6:	0003      	movs	r3, r0
100042e8:	66fb      	str	r3, [r7, #108]	; 0x6c
        const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100042ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
100042ec:	f001 fd2e 	bl	10005d4c <__wrap___aeabi_i2d>
100042f0:	4a7b      	ldr	r2, [pc, #492]	; (100044e0 <_etoa+0x3c8>)
100042f2:	4b7c      	ldr	r3, [pc, #496]	; (100044e4 <_etoa+0x3cc>)
100042f4:	f001 fcc1 	bl	10005c7a <__wrap___aeabi_dmul>
100042f8:	0002      	movs	r2, r0
100042fa:	000b      	movs	r3, r1
100042fc:	0014      	movs	r4, r2
100042fe:	001d      	movs	r5, r3
10004300:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
10004302:	f001 fd23 	bl	10005d4c <__wrap___aeabi_i2d>
10004306:	4a78      	ldr	r2, [pc, #480]	; (100044e8 <_etoa+0x3d0>)
10004308:	4b78      	ldr	r3, [pc, #480]	; (100044ec <_etoa+0x3d4>)
1000430a:	f001 fcb6 	bl	10005c7a <__wrap___aeabi_dmul>
1000430e:	0002      	movs	r2, r0
10004310:	000b      	movs	r3, r1
10004312:	0020      	movs	r0, r4
10004314:	0029      	movs	r1, r5
10004316:	f001 fc80 	bl	10005c1a <__wrap___aeabi_dsub>
1000431a:	0002      	movs	r2, r0
1000431c:	000b      	movs	r3, r1
1000431e:	663a      	str	r2, [r7, #96]	; 0x60
10004320:	667b      	str	r3, [r7, #100]	; 0x64
        const double z2 = z * z;
10004322:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10004324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004326:	6e38      	ldr	r0, [r7, #96]	; 0x60
10004328:	6e79      	ldr	r1, [r7, #100]	; 0x64
1000432a:	f001 fca6 	bl	10005c7a <__wrap___aeabi_dmul>
1000432e:	0002      	movs	r2, r0
10004330:	000b      	movs	r3, r1
10004332:	65ba      	str	r2, [r7, #88]	; 0x58
10004334:	65fb      	str	r3, [r7, #92]	; 0x5c
        conv.U = (uint64_t) (exp2 + 1023) << 52U;
10004336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004338:	4a6d      	ldr	r2, [pc, #436]	; (100044f0 <_etoa+0x3d8>)
1000433a:	4694      	mov	ip, r2
1000433c:	4463      	add	r3, ip
1000433e:	61bb      	str	r3, [r7, #24]
10004340:	17db      	asrs	r3, r3, #31
10004342:	61fb      	str	r3, [r7, #28]
10004344:	69bb      	ldr	r3, [r7, #24]
10004346:	051b      	lsls	r3, r3, #20
10004348:	617b      	str	r3, [r7, #20]
1000434a:	2300      	movs	r3, #0
1000434c:	613b      	str	r3, [r7, #16]
1000434e:	693b      	ldr	r3, [r7, #16]
10004350:	697c      	ldr	r4, [r7, #20]
10004352:	64bb      	str	r3, [r7, #72]	; 0x48
10004354:	64fc      	str	r4, [r7, #76]	; 0x4c
        // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
        conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10004356:	6cbc      	ldr	r4, [r7, #72]	; 0x48
10004358:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
1000435a:	6e38      	ldr	r0, [r7, #96]	; 0x60
1000435c:	6e79      	ldr	r1, [r7, #100]	; 0x64
1000435e:	0002      	movs	r2, r0
10004360:	000b      	movs	r3, r1
10004362:	f001 fc63 	bl	10005c2c <__wrap___aeabi_dadd>
10004366:	0002      	movs	r2, r0
10004368:	000b      	movs	r3, r1
1000436a:	62ba      	str	r2, [r7, #40]	; 0x28
1000436c:	62fb      	str	r3, [r7, #44]	; 0x2c
1000436e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10004370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004372:	2000      	movs	r0, #0
10004374:	2180      	movs	r1, #128	; 0x80
10004376:	05c9      	lsls	r1, r1, #23
10004378:	f001 fc4f 	bl	10005c1a <__wrap___aeabi_dsub>
1000437c:	0002      	movs	r2, r0
1000437e:	000b      	movs	r3, r1
10004380:	623a      	str	r2, [r7, #32]
10004382:	627b      	str	r3, [r7, #36]	; 0x24
10004384:	2200      	movs	r2, #0
10004386:	4b5b      	ldr	r3, [pc, #364]	; (100044f4 <_etoa+0x3dc>)
10004388:	6db8      	ldr	r0, [r7, #88]	; 0x58
1000438a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
1000438c:	f001 fc57 	bl	10005c3e <__wrap___aeabi_ddiv>
10004390:	0002      	movs	r2, r0
10004392:	000b      	movs	r3, r1
10004394:	0010      	movs	r0, r2
10004396:	0019      	movs	r1, r3
10004398:	2200      	movs	r2, #0
1000439a:	4b57      	ldr	r3, [pc, #348]	; (100044f8 <_etoa+0x3e0>)
1000439c:	f001 fc46 	bl	10005c2c <__wrap___aeabi_dadd>
100043a0:	0002      	movs	r2, r0
100043a2:	000b      	movs	r3, r1
100043a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
100043a6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
100043a8:	f001 fc49 	bl	10005c3e <__wrap___aeabi_ddiv>
100043ac:	0002      	movs	r2, r0
100043ae:	000b      	movs	r3, r1
100043b0:	0010      	movs	r0, r2
100043b2:	0019      	movs	r1, r3
100043b4:	2200      	movs	r2, #0
100043b6:	4b51      	ldr	r3, [pc, #324]	; (100044fc <_etoa+0x3e4>)
100043b8:	f001 fc38 	bl	10005c2c <__wrap___aeabi_dadd>
100043bc:	0002      	movs	r2, r0
100043be:	000b      	movs	r3, r1
100043c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
100043c2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
100043c4:	f001 fc3b 	bl	10005c3e <__wrap___aeabi_ddiv>
100043c8:	0002      	movs	r2, r0
100043ca:	000b      	movs	r3, r1
100043cc:	6a38      	ldr	r0, [r7, #32]
100043ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
100043d0:	f001 fc2c 	bl	10005c2c <__wrap___aeabi_dadd>
100043d4:	0002      	movs	r2, r0
100043d6:	000b      	movs	r3, r1
100043d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
100043da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100043dc:	f001 fc2f 	bl	10005c3e <__wrap___aeabi_ddiv>
100043e0:	0002      	movs	r2, r0
100043e2:	000b      	movs	r3, r1
100043e4:	0010      	movs	r0, r2
100043e6:	0019      	movs	r1, r3
100043e8:	2200      	movs	r2, #0
100043ea:	4b32      	ldr	r3, [pc, #200]	; (100044b4 <_etoa+0x39c>)
100043ec:	f001 fc1e 	bl	10005c2c <__wrap___aeabi_dadd>
100043f0:	0002      	movs	r2, r0
100043f2:	000b      	movs	r3, r1
100043f4:	0020      	movs	r0, r4
100043f6:	0029      	movs	r1, r5
100043f8:	f001 fc3f 	bl	10005c7a <__wrap___aeabi_dmul>
100043fc:	0002      	movs	r2, r0
100043fe:	000b      	movs	r3, r1
10004400:	64ba      	str	r2, [r7, #72]	; 0x48
10004402:	64fb      	str	r3, [r7, #76]	; 0x4c
        // correct for rounding errors
        if (value < conv.F) {
10004404:	6cba      	ldr	r2, [r7, #72]	; 0x48
10004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004408:	19b9      	adds	r1, r7, r6
1000440a:	6808      	ldr	r0, [r1, #0]
1000440c:	6849      	ldr	r1, [r1, #4]
1000440e:	f001 fc77 	bl	10005d00 <__wrap___aeabi_dcmplt>
10004412:	1e03      	subs	r3, r0, #0
10004414:	d00f      	beq.n	10004436 <_etoa+0x31e>
            expval--;
10004416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004418:	3b01      	subs	r3, #1
1000441a:	67fb      	str	r3, [r7, #124]	; 0x7c
            conv.F /= 10;
1000441c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
1000441e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10004420:	2200      	movs	r2, #0
10004422:	4b35      	ldr	r3, [pc, #212]	; (100044f8 <_etoa+0x3e0>)
10004424:	f001 fc0b 	bl	10005c3e <__wrap___aeabi_ddiv>
10004428:	0002      	movs	r2, r0
1000442a:	000b      	movs	r3, r1
1000442c:	64ba      	str	r2, [r7, #72]	; 0x48
1000442e:	64fb      	str	r3, [r7, #76]	; 0x4c
10004430:	e001      	b.n	10004436 <_etoa+0x31e>
        }
    } else {
        expval = 0;
10004432:	2300      	movs	r3, #0
10004434:	67fb      	str	r3, [r7, #124]	; 0x7c
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
10004436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004438:	2b63      	cmp	r3, #99	; 0x63
1000443a:	dc04      	bgt.n	10004446 <_etoa+0x32e>
1000443c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000443e:	3363      	adds	r3, #99	; 0x63
10004440:	db01      	blt.n	10004446 <_etoa+0x32e>
10004442:	2304      	movs	r3, #4
10004444:	e000      	b.n	10004448 <_etoa+0x330>
10004446:	2305      	movs	r3, #5
10004448:	67bb      	str	r3, [r7, #120]	; 0x78

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
1000444a:	23a8      	movs	r3, #168	; 0xa8
1000444c:	18fb      	adds	r3, r7, r3
1000444e:	681a      	ldr	r2, [r3, #0]
10004450:	2380      	movs	r3, #128	; 0x80
10004452:	011b      	lsls	r3, r3, #4
10004454:	4013      	ands	r3, r2
10004456:	d100      	bne.n	1000445a <_etoa+0x342>
10004458:	e07a      	b.n	10004550 <_etoa+0x438>
        // do we want to fall-back to "%f" mode?
        if ((conv.U == 0) || ((value >= 1e-4) && (value < 1e6))) {
1000445a:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000445c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000445e:	0011      	movs	r1, r2
10004460:	4319      	orrs	r1, r3
10004462:	d012      	beq.n	1000448a <_etoa+0x372>
10004464:	4a26      	ldr	r2, [pc, #152]	; (10004500 <_etoa+0x3e8>)
10004466:	4b27      	ldr	r3, [pc, #156]	; (10004504 <_etoa+0x3ec>)
10004468:	2498      	movs	r4, #152	; 0x98
1000446a:	1939      	adds	r1, r7, r4
1000446c:	6808      	ldr	r0, [r1, #0]
1000446e:	6849      	ldr	r1, [r1, #4]
10004470:	f001 fc4c 	bl	10005d0c <__wrap___aeabi_dcmpge>
10004474:	1e03      	subs	r3, r0, #0
10004476:	d05a      	beq.n	1000452e <_etoa+0x416>
10004478:	2200      	movs	r2, #0
1000447a:	4b23      	ldr	r3, [pc, #140]	; (10004508 <_etoa+0x3f0>)
1000447c:	1939      	adds	r1, r7, r4
1000447e:	6808      	ldr	r0, [r1, #0]
10004480:	6849      	ldr	r1, [r1, #4]
10004482:	f001 fc3d 	bl	10005d00 <__wrap___aeabi_dcmplt>
10004486:	1e03      	subs	r3, r0, #0
10004488:	d051      	beq.n	1000452e <_etoa+0x416>
            if ((int) prec > expval) {
1000448a:	21a0      	movs	r1, #160	; 0xa0
1000448c:	187b      	adds	r3, r7, r1
1000448e:	681b      	ldr	r3, [r3, #0]
10004490:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
10004492:	429a      	cmp	r2, r3
10004494:	da3a      	bge.n	1000450c <_etoa+0x3f4>
                prec = (unsigned) ((int) prec - expval - 1);
10004496:	187b      	adds	r3, r7, r1
10004498:	681a      	ldr	r2, [r3, #0]
1000449a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000449c:	1ad3      	subs	r3, r2, r3
1000449e:	3b01      	subs	r3, #1
100044a0:	187a      	adds	r2, r7, r1
100044a2:	6013      	str	r3, [r2, #0]
100044a4:	e036      	b.n	10004514 <_etoa+0x3fc>
100044a6:	46c0      	nop			; (mov r8, r8)
100044a8:	7fefffff 	.word	0x7fefffff
100044ac:	ffefffff 	.word	0xffefffff
100044b0:	fffffc01 	.word	0xfffffc01
100044b4:	3ff00000 	.word	0x3ff00000
100044b8:	509f79fb 	.word	0x509f79fb
100044bc:	3fd34413 	.word	0x3fd34413
100044c0:	8b60c8b3 	.word	0x8b60c8b3
100044c4:	3fc68a28 	.word	0x3fc68a28
100044c8:	3ff80000 	.word	0x3ff80000
100044cc:	636f4361 	.word	0x636f4361
100044d0:	3fd287a7 	.word	0x3fd287a7
100044d4:	0979a371 	.word	0x0979a371
100044d8:	400a934f 	.word	0x400a934f
100044dc:	3fe00000 	.word	0x3fe00000
100044e0:	bbb55516 	.word	0xbbb55516
100044e4:	40026bb1 	.word	0x40026bb1
100044e8:	fefa39ef 	.word	0xfefa39ef
100044ec:	3fe62e42 	.word	0x3fe62e42
100044f0:	000003ff 	.word	0x000003ff
100044f4:	402c0000 	.word	0x402c0000
100044f8:	40240000 	.word	0x40240000
100044fc:	40180000 	.word	0x40180000
10004500:	eb1c432d 	.word	0xeb1c432d
10004504:	3f1a36e2 	.word	0x3f1a36e2
10004508:	412e8480 	.word	0x412e8480
            } else {
                prec = 0;
1000450c:	2300      	movs	r3, #0
1000450e:	22a0      	movs	r2, #160	; 0xa0
10004510:	18ba      	adds	r2, r7, r2
10004512:	6013      	str	r3, [r2, #0]
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
10004514:	21a8      	movs	r1, #168	; 0xa8
10004516:	187b      	adds	r3, r7, r1
10004518:	681b      	ldr	r3, [r3, #0]
1000451a:	2280      	movs	r2, #128	; 0x80
1000451c:	00d2      	lsls	r2, r2, #3
1000451e:	4313      	orrs	r3, r2
10004520:	187a      	adds	r2, r7, r1
10004522:	6013      	str	r3, [r2, #0]
            // no characters in exponent
            minwidth = 0U;
10004524:	2300      	movs	r3, #0
10004526:	67bb      	str	r3, [r7, #120]	; 0x78
            expval = 0;
10004528:	2300      	movs	r3, #0
1000452a:	67fb      	str	r3, [r7, #124]	; 0x7c
1000452c:	e010      	b.n	10004550 <_etoa+0x438>
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
1000452e:	21a0      	movs	r1, #160	; 0xa0
10004530:	187b      	adds	r3, r7, r1
10004532:	681b      	ldr	r3, [r3, #0]
10004534:	2b00      	cmp	r3, #0
10004536:	d00b      	beq.n	10004550 <_etoa+0x438>
10004538:	23a8      	movs	r3, #168	; 0xa8
1000453a:	18fb      	adds	r3, r7, r3
1000453c:	681a      	ldr	r2, [r3, #0]
1000453e:	2380      	movs	r3, #128	; 0x80
10004540:	00db      	lsls	r3, r3, #3
10004542:	4013      	ands	r3, r2
10004544:	d004      	beq.n	10004550 <_etoa+0x438>
                --prec;
10004546:	187b      	adds	r3, r7, r1
10004548:	681b      	ldr	r3, [r3, #0]
1000454a:	3b01      	subs	r3, #1
1000454c:	187a      	adds	r2, r7, r1
1000454e:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
10004550:	22a4      	movs	r2, #164	; 0xa4
10004552:	18bb      	adds	r3, r7, r2
10004554:	681b      	ldr	r3, [r3, #0]
10004556:	677b      	str	r3, [r7, #116]	; 0x74
    if (width > minwidth) {
10004558:	18bb      	adds	r3, r7, r2
1000455a:	681a      	ldr	r2, [r3, #0]
1000455c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000455e:	429a      	cmp	r2, r3
10004560:	d904      	bls.n	1000456c <_etoa+0x454>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
10004562:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10004564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10004566:	1ad3      	subs	r3, r2, r3
10004568:	677b      	str	r3, [r7, #116]	; 0x74
1000456a:	e001      	b.n	10004570 <_etoa+0x458>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
1000456c:	2300      	movs	r3, #0
1000456e:	677b      	str	r3, [r7, #116]	; 0x74
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
10004570:	23a8      	movs	r3, #168	; 0xa8
10004572:	18fb      	adds	r3, r7, r3
10004574:	681b      	ldr	r3, [r3, #0]
10004576:	2202      	movs	r2, #2
10004578:	4013      	ands	r3, r2
1000457a:	d004      	beq.n	10004586 <_etoa+0x46e>
1000457c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000457e:	2b00      	cmp	r3, #0
10004580:	d001      	beq.n	10004586 <_etoa+0x46e>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
10004582:	2300      	movs	r3, #0
10004584:	677b      	str	r3, [r7, #116]	; 0x74
    }

    // rescale the float value
    if (expval) {
10004586:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004588:	2b00      	cmp	r3, #0
1000458a:	d00c      	beq.n	100045a6 <_etoa+0x48e>
        value /= conv.F;
1000458c:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004590:	2498      	movs	r4, #152	; 0x98
10004592:	1939      	adds	r1, r7, r4
10004594:	6808      	ldr	r0, [r1, #0]
10004596:	6849      	ldr	r1, [r1, #4]
10004598:	f001 fb51 	bl	10005c3e <__wrap___aeabi_ddiv>
1000459c:	0002      	movs	r2, r0
1000459e:	000b      	movs	r3, r1
100045a0:	1939      	adds	r1, r7, r4
100045a2:	600a      	str	r2, [r1, #0]
100045a4:	604b      	str	r3, [r1, #4]
    }

    // output the floating part
    const size_t start_idx = idx;
100045a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100045a8:	657b      	str	r3, [r7, #84]	; 0x54
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
100045aa:	233b      	movs	r3, #59	; 0x3b
100045ac:	2238      	movs	r2, #56	; 0x38
100045ae:	189b      	adds	r3, r3, r2
100045b0:	19db      	adds	r3, r3, r7
100045b2:	781b      	ldrb	r3, [r3, #0]
100045b4:	2b00      	cmp	r3, #0
100045b6:	d00b      	beq.n	100045d0 <_etoa+0x4b8>
100045b8:	2398      	movs	r3, #152	; 0x98
100045ba:	18fb      	adds	r3, r7, r3
100045bc:	681b      	ldr	r3, [r3, #0]
100045be:	633b      	str	r3, [r7, #48]	; 0x30
100045c0:	239c      	movs	r3, #156	; 0x9c
100045c2:	18fb      	adds	r3, r7, r3
100045c4:	681b      	ldr	r3, [r3, #0]
100045c6:	2280      	movs	r2, #128	; 0x80
100045c8:	0612      	lsls	r2, r2, #24
100045ca:	405a      	eors	r2, r3
100045cc:	637a      	str	r2, [r7, #52]	; 0x34
100045ce:	e005      	b.n	100045dc <_etoa+0x4c4>
100045d0:	2398      	movs	r3, #152	; 0x98
100045d2:	18fb      	adds	r3, r7, r3
100045d4:	685c      	ldr	r4, [r3, #4]
100045d6:	681b      	ldr	r3, [r3, #0]
100045d8:	633b      	str	r3, [r7, #48]	; 0x30
100045da:	637c      	str	r4, [r7, #52]	; 0x34
100045dc:	23a8      	movs	r3, #168	; 0xa8
100045de:	18fa      	adds	r2, r7, r3
100045e0:	6813      	ldr	r3, [r2, #0]
100045e2:	4a31      	ldr	r2, [pc, #196]	; (100046a8 <_etoa+0x590>)
100045e4:	4013      	ands	r3, r2
100045e6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
100045e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
100045ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
100045ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
100045ee:	9304      	str	r3, [sp, #16]
100045f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100045f2:	9303      	str	r3, [sp, #12]
100045f4:	25a0      	movs	r5, #160	; 0xa0
100045f6:	197d      	adds	r5, r7, r5
100045f8:	682b      	ldr	r3, [r5, #0]
100045fa:	9302      	str	r3, [sp, #8]
100045fc:	6b3d      	ldr	r5, [r7, #48]	; 0x30
100045fe:	6b7e      	ldr	r6, [r7, #52]	; 0x34
10004600:	9500      	str	r5, [sp, #0]
10004602:	9601      	str	r6, [sp, #4]
10004604:	0023      	movs	r3, r4
10004606:	f7ff fb3d 	bl	10003c84 <_ftoa>
1000460a:	0003      	movs	r3, r0
1000460c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // output the exponent part
    if (minwidth) {
1000460e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10004610:	2b00      	cmp	r3, #0
10004612:	d044      	beq.n	1000469e <_etoa+0x586>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
10004614:	23a8      	movs	r3, #168	; 0xa8
10004616:	18fb      	adds	r3, r7, r3
10004618:	681b      	ldr	r3, [r3, #0]
1000461a:	2220      	movs	r2, #32
1000461c:	4013      	ands	r3, r2
1000461e:	d001      	beq.n	10004624 <_etoa+0x50c>
10004620:	2045      	movs	r0, #69	; 0x45
10004622:	e000      	b.n	10004626 <_etoa+0x50e>
10004624:	2065      	movs	r0, #101	; 0x65
10004626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10004628:	1c53      	adds	r3, r2, #1
1000462a:	63fb      	str	r3, [r7, #60]	; 0x3c
1000462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000462e:	6c39      	ldr	r1, [r7, #64]	; 0x40
10004630:	6c7c      	ldr	r4, [r7, #68]	; 0x44
10004632:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (uint)((expval < 0) ? -expval : expval), expval < 0, 10, 0, minwidth - 1,
10004634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004636:	17da      	asrs	r2, r3, #31
10004638:	189b      	adds	r3, r3, r2
1000463a:	4053      	eors	r3, r2
1000463c:	469c      	mov	ip, r3
1000463e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10004640:	0fdb      	lsrs	r3, r3, #31
10004642:	b2db      	uxtb	r3, r3
10004644:	6fba      	ldr	r2, [r7, #120]	; 0x78
10004646:	3a01      	subs	r2, #1
10004648:	6bbd      	ldr	r5, [r7, #56]	; 0x38
1000464a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
1000464c:	6c39      	ldr	r1, [r7, #64]	; 0x40
1000464e:	6c78      	ldr	r0, [r7, #68]	; 0x44
10004650:	2605      	movs	r6, #5
10004652:	9605      	str	r6, [sp, #20]
10004654:	9204      	str	r2, [sp, #16]
10004656:	2200      	movs	r2, #0
10004658:	9203      	str	r2, [sp, #12]
1000465a:	220a      	movs	r2, #10
1000465c:	9202      	str	r2, [sp, #8]
1000465e:	9301      	str	r3, [sp, #4]
10004660:	4663      	mov	r3, ip
10004662:	9300      	str	r3, [sp, #0]
10004664:	002b      	movs	r3, r5
10004666:	0022      	movs	r2, r4
10004668:	f7ff fa2f 	bl	10003aca <_ntoa_long>
1000466c:	0003      	movs	r3, r0
1000466e:	63fb      	str	r3, [r7, #60]	; 0x3c
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
10004670:	23a8      	movs	r3, #168	; 0xa8
10004672:	18fb      	adds	r3, r7, r3
10004674:	681b      	ldr	r3, [r3, #0]
10004676:	2202      	movs	r2, #2
10004678:	4013      	ands	r3, r2
1000467a:	d010      	beq.n	1000469e <_etoa+0x586>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
1000467c:	e007      	b.n	1000468e <_etoa+0x576>
1000467e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10004680:	1c53      	adds	r3, r2, #1
10004682:	63fb      	str	r3, [r7, #60]	; 0x3c
10004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10004686:	6c39      	ldr	r1, [r7, #64]	; 0x40
10004688:	6c7c      	ldr	r4, [r7, #68]	; 0x44
1000468a:	2020      	movs	r0, #32
1000468c:	47a0      	blx	r4
1000468e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10004690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004692:	1ad3      	subs	r3, r2, r3
10004694:	22a4      	movs	r2, #164	; 0xa4
10004696:	18ba      	adds	r2, r7, r2
10004698:	6812      	ldr	r2, [r2, #0]
1000469a:	429a      	cmp	r2, r3
1000469c:	d8ef      	bhi.n	1000467e <_etoa+0x566>
        }
    }
    return idx;
1000469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
100046a0:	0018      	movs	r0, r3
100046a2:	46bd      	mov	sp, r7
100046a4:	b021      	add	sp, #132	; 0x84
100046a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100046a8:	fffff7ff 	.word	0xfffff7ff

100046ac <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
100046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100046ae:	46c6      	mov	lr, r8
100046b0:	b500      	push	{lr}
100046b2:	b0a6      	sub	sp, #152	; 0x98
100046b4:	af0a      	add	r7, sp, #40	; 0x28
100046b6:	6278      	str	r0, [r7, #36]	; 0x24
100046b8:	6239      	str	r1, [r7, #32]
100046ba:	61fa      	str	r2, [r7, #28]
100046bc:	61bb      	str	r3, [r7, #24]
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
100046be:	2300      	movs	r3, #0
100046c0:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (!buffer) {
100046c2:	6a3b      	ldr	r3, [r7, #32]
100046c4:	2b00      	cmp	r3, #0
100046c6:	d001      	beq.n	100046cc <_vsnprintf+0x20>
100046c8:	f000 fc26 	bl	10004f18 <_vsnprintf+0x86c>
        // use null output function
        out = _out_null;
100046cc:	4bd0      	ldr	r3, [pc, #832]	; (10004a10 <_vsnprintf+0x364>)
100046ce:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (*format) {
100046d0:	f000 fc22 	bl	10004f18 <_vsnprintf+0x86c>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
100046d4:	69bb      	ldr	r3, [r7, #24]
100046d6:	781b      	ldrb	r3, [r3, #0]
100046d8:	2b25      	cmp	r3, #37	; 0x25
100046da:	d00d      	beq.n	100046f8 <_vsnprintf+0x4c>
            // no
            out(*format, buffer, idx++, maxlen);
100046dc:	69bb      	ldr	r3, [r7, #24]
100046de:	7818      	ldrb	r0, [r3, #0]
100046e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
100046e2:	1c53      	adds	r3, r2, #1
100046e4:	65fb      	str	r3, [r7, #92]	; 0x5c
100046e6:	69fb      	ldr	r3, [r7, #28]
100046e8:	6a39      	ldr	r1, [r7, #32]
100046ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
100046ec:	47a0      	blx	r4
            format++;
100046ee:	69bb      	ldr	r3, [r7, #24]
100046f0:	3301      	adds	r3, #1
100046f2:	61bb      	str	r3, [r7, #24]
            continue;
100046f4:	f000 fc10 	bl	10004f18 <_vsnprintf+0x86c>
        } else {
            // yes, evaluate it
            format++;
100046f8:	69bb      	ldr	r3, [r7, #24]
100046fa:	3301      	adds	r3, #1
100046fc:	61bb      	str	r3, [r7, #24]
        }

        // evaluate flags
        flags = 0U;
100046fe:	2300      	movs	r3, #0
10004700:	66fb      	str	r3, [r7, #108]	; 0x6c
        do {
            switch (*format) {
10004702:	69bb      	ldr	r3, [r7, #24]
10004704:	781b      	ldrb	r3, [r3, #0]
10004706:	3b20      	subs	r3, #32
10004708:	2b10      	cmp	r3, #16
1000470a:	d836      	bhi.n	1000477a <_vsnprintf+0xce>
1000470c:	009a      	lsls	r2, r3, #2
1000470e:	4bc1      	ldr	r3, [pc, #772]	; (10004a14 <_vsnprintf+0x368>)
10004710:	18d3      	adds	r3, r2, r3
10004712:	681b      	ldr	r3, [r3, #0]
10004714:	469f      	mov	pc, r3
                case '0':
                    flags |= FLAGS_ZEROPAD;
10004716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004718:	2201      	movs	r2, #1
1000471a:	4313      	orrs	r3, r2
1000471c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000471e:	69bb      	ldr	r3, [r7, #24]
10004720:	3301      	adds	r3, #1
10004722:	61bb      	str	r3, [r7, #24]
                    n = 1U;
10004724:	2301      	movs	r3, #1
10004726:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
10004728:	e02a      	b.n	10004780 <_vsnprintf+0xd4>
                case '-':
                    flags |= FLAGS_LEFT;
1000472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000472c:	2202      	movs	r2, #2
1000472e:	4313      	orrs	r3, r2
10004730:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
10004732:	69bb      	ldr	r3, [r7, #24]
10004734:	3301      	adds	r3, #1
10004736:	61bb      	str	r3, [r7, #24]
                    n = 1U;
10004738:	2301      	movs	r3, #1
1000473a:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000473c:	e020      	b.n	10004780 <_vsnprintf+0xd4>
                case '+':
                    flags |= FLAGS_PLUS;
1000473e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004740:	2204      	movs	r2, #4
10004742:	4313      	orrs	r3, r2
10004744:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
10004746:	69bb      	ldr	r3, [r7, #24]
10004748:	3301      	adds	r3, #1
1000474a:	61bb      	str	r3, [r7, #24]
                    n = 1U;
1000474c:	2301      	movs	r3, #1
1000474e:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
10004750:	e016      	b.n	10004780 <_vsnprintf+0xd4>
                case ' ':
                    flags |= FLAGS_SPACE;
10004752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004754:	2208      	movs	r2, #8
10004756:	4313      	orrs	r3, r2
10004758:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000475a:	69bb      	ldr	r3, [r7, #24]
1000475c:	3301      	adds	r3, #1
1000475e:	61bb      	str	r3, [r7, #24]
                    n = 1U;
10004760:	2301      	movs	r3, #1
10004762:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
10004764:	e00c      	b.n	10004780 <_vsnprintf+0xd4>
                case '#':
                    flags |= FLAGS_HASH;
10004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004768:	2210      	movs	r2, #16
1000476a:	4313      	orrs	r3, r2
1000476c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000476e:	69bb      	ldr	r3, [r7, #24]
10004770:	3301      	adds	r3, #1
10004772:	61bb      	str	r3, [r7, #24]
                    n = 1U;
10004774:	2301      	movs	r3, #1
10004776:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
10004778:	e002      	b.n	10004780 <_vsnprintf+0xd4>
                default :
                    n = 0U;
1000477a:	2300      	movs	r3, #0
1000477c:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000477e:	46c0      	nop			; (mov r8, r8)
            }
        } while (n);
10004780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
10004782:	2b00      	cmp	r3, #0
10004784:	d1bd      	bne.n	10004702 <_vsnprintf+0x56>

        // evaluate width field
        width = 0U;
10004786:	2300      	movs	r3, #0
10004788:	66bb      	str	r3, [r7, #104]	; 0x68
        if (_is_digit(*format)) {
1000478a:	69bb      	ldr	r3, [r7, #24]
1000478c:	781b      	ldrb	r3, [r3, #0]
1000478e:	0018      	movs	r0, r3
10004790:	f7ff f83c 	bl	1000380c <_is_digit>
10004794:	1e03      	subs	r3, r0, #0
10004796:	d007      	beq.n	100047a8 <_vsnprintf+0xfc>
            width = _atoi(&format);
10004798:	2318      	movs	r3, #24
1000479a:	18fb      	adds	r3, r7, r3
1000479c:	0018      	movs	r0, r3
1000479e:	f7ff f84e 	bl	1000383e <_atoi>
100047a2:	0003      	movs	r3, r0
100047a4:	66bb      	str	r3, [r7, #104]	; 0x68
100047a6:	e01c      	b.n	100047e2 <_vsnprintf+0x136>
        } else if (*format == '*') {
100047a8:	69bb      	ldr	r3, [r7, #24]
100047aa:	781b      	ldrb	r3, [r3, #0]
100047ac:	2b2a      	cmp	r3, #42	; 0x2a
100047ae:	d118      	bne.n	100047e2 <_vsnprintf+0x136>
            const int w = va_arg(va, int);
100047b0:	2388      	movs	r3, #136	; 0x88
100047b2:	18fb      	adds	r3, r7, r3
100047b4:	681b      	ldr	r3, [r3, #0]
100047b6:	1d1a      	adds	r2, r3, #4
100047b8:	2188      	movs	r1, #136	; 0x88
100047ba:	1879      	adds	r1, r7, r1
100047bc:	600a      	str	r2, [r1, #0]
100047be:	681b      	ldr	r3, [r3, #0]
100047c0:	64bb      	str	r3, [r7, #72]	; 0x48
            if (w < 0) {
100047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100047c4:	2b00      	cmp	r3, #0
100047c6:	da07      	bge.n	100047d8 <_vsnprintf+0x12c>
                flags |= FLAGS_LEFT;    // reverse padding
100047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100047ca:	2202      	movs	r2, #2
100047cc:	4313      	orrs	r3, r2
100047ce:	66fb      	str	r3, [r7, #108]	; 0x6c
                width = (unsigned int) -w;
100047d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100047d2:	425b      	negs	r3, r3
100047d4:	66bb      	str	r3, [r7, #104]	; 0x68
100047d6:	e001      	b.n	100047dc <_vsnprintf+0x130>
            } else {
                width = (unsigned int) w;
100047d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100047da:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            format++;
100047dc:	69bb      	ldr	r3, [r7, #24]
100047de:	3301      	adds	r3, #1
100047e0:	61bb      	str	r3, [r7, #24]
        }

        // evaluate precision field
        precision = 0U;
100047e2:	2300      	movs	r3, #0
100047e4:	667b      	str	r3, [r7, #100]	; 0x64
        if (*format == '.') {
100047e6:	69bb      	ldr	r3, [r7, #24]
100047e8:	781b      	ldrb	r3, [r3, #0]
100047ea:	2b2e      	cmp	r3, #46	; 0x2e
100047ec:	d12b      	bne.n	10004846 <_vsnprintf+0x19a>
            flags |= FLAGS_PRECISION;
100047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100047f0:	2280      	movs	r2, #128	; 0x80
100047f2:	00d2      	lsls	r2, r2, #3
100047f4:	4313      	orrs	r3, r2
100047f6:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
100047f8:	69bb      	ldr	r3, [r7, #24]
100047fa:	3301      	adds	r3, #1
100047fc:	61bb      	str	r3, [r7, #24]
            if (_is_digit(*format)) {
100047fe:	69bb      	ldr	r3, [r7, #24]
10004800:	781b      	ldrb	r3, [r3, #0]
10004802:	0018      	movs	r0, r3
10004804:	f7ff f802 	bl	1000380c <_is_digit>
10004808:	1e03      	subs	r3, r0, #0
1000480a:	d007      	beq.n	1000481c <_vsnprintf+0x170>
                precision = _atoi(&format);
1000480c:	2318      	movs	r3, #24
1000480e:	18fb      	adds	r3, r7, r3
10004810:	0018      	movs	r0, r3
10004812:	f7ff f814 	bl	1000383e <_atoi>
10004816:	0003      	movs	r3, r0
10004818:	667b      	str	r3, [r7, #100]	; 0x64
1000481a:	e014      	b.n	10004846 <_vsnprintf+0x19a>
            } else if (*format == '*') {
1000481c:	69bb      	ldr	r3, [r7, #24]
1000481e:	781b      	ldrb	r3, [r3, #0]
10004820:	2b2a      	cmp	r3, #42	; 0x2a
10004822:	d110      	bne.n	10004846 <_vsnprintf+0x19a>
                const int prec = (int) va_arg(va, int);
10004824:	2388      	movs	r3, #136	; 0x88
10004826:	18fb      	adds	r3, r7, r3
10004828:	681b      	ldr	r3, [r3, #0]
1000482a:	1d1a      	adds	r2, r3, #4
1000482c:	2188      	movs	r1, #136	; 0x88
1000482e:	1879      	adds	r1, r7, r1
10004830:	600a      	str	r2, [r1, #0]
10004832:	681b      	ldr	r3, [r3, #0]
10004834:	647b      	str	r3, [r7, #68]	; 0x44
                precision = prec > 0 ? (unsigned int) prec : 0U;
10004836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10004838:	2b00      	cmp	r3, #0
1000483a:	da00      	bge.n	1000483e <_vsnprintf+0x192>
1000483c:	2300      	movs	r3, #0
1000483e:	667b      	str	r3, [r7, #100]	; 0x64
                format++;
10004840:	69bb      	ldr	r3, [r7, #24]
10004842:	3301      	adds	r3, #1
10004844:	61bb      	str	r3, [r7, #24]
            }
        }

        // evaluate length field
        switch (*format) {
10004846:	69bb      	ldr	r3, [r7, #24]
10004848:	781b      	ldrb	r3, [r3, #0]
1000484a:	3b68      	subs	r3, #104	; 0x68
1000484c:	2b12      	cmp	r3, #18
1000484e:	d847      	bhi.n	100048e0 <_vsnprintf+0x234>
10004850:	009a      	lsls	r2, r3, #2
10004852:	4b71      	ldr	r3, [pc, #452]	; (10004a18 <_vsnprintf+0x36c>)
10004854:	18d3      	adds	r3, r2, r3
10004856:	681b      	ldr	r3, [r3, #0]
10004858:	469f      	mov	pc, r3
            case 'l' :
                flags |= FLAGS_LONG;
1000485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000485c:	2280      	movs	r2, #128	; 0x80
1000485e:	0052      	lsls	r2, r2, #1
10004860:	4313      	orrs	r3, r2
10004862:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
10004864:	69bb      	ldr	r3, [r7, #24]
10004866:	3301      	adds	r3, #1
10004868:	61bb      	str	r3, [r7, #24]
                if (*format == 'l') {
1000486a:	69bb      	ldr	r3, [r7, #24]
1000486c:	781b      	ldrb	r3, [r3, #0]
1000486e:	2b6c      	cmp	r3, #108	; 0x6c
10004870:	d138      	bne.n	100048e4 <_vsnprintf+0x238>
                    flags |= FLAGS_LONG_LONG;
10004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004874:	2280      	movs	r2, #128	; 0x80
10004876:	0092      	lsls	r2, r2, #2
10004878:	4313      	orrs	r3, r2
1000487a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000487c:	69bb      	ldr	r3, [r7, #24]
1000487e:	3301      	adds	r3, #1
10004880:	61bb      	str	r3, [r7, #24]
                }
                break;
10004882:	e02f      	b.n	100048e4 <_vsnprintf+0x238>
            case 'h' :
                flags |= FLAGS_SHORT;
10004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004886:	2280      	movs	r2, #128	; 0x80
10004888:	4313      	orrs	r3, r2
1000488a:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
1000488c:	69bb      	ldr	r3, [r7, #24]
1000488e:	3301      	adds	r3, #1
10004890:	61bb      	str	r3, [r7, #24]
                if (*format == 'h') {
10004892:	69bb      	ldr	r3, [r7, #24]
10004894:	781b      	ldrb	r3, [r3, #0]
10004896:	2b68      	cmp	r3, #104	; 0x68
10004898:	d126      	bne.n	100048e8 <_vsnprintf+0x23c>
                    flags |= FLAGS_CHAR;
1000489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000489c:	2240      	movs	r2, #64	; 0x40
1000489e:	4313      	orrs	r3, r2
100048a0:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
100048a2:	69bb      	ldr	r3, [r7, #24]
100048a4:	3301      	adds	r3, #1
100048a6:	61bb      	str	r3, [r7, #24]
                }
                break;
100048a8:	e01e      	b.n	100048e8 <_vsnprintf+0x23c>
#if PICO_PRINTF_SUPPORT_PTRDIFF_T
            case 't' :
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100048aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100048ac:	2280      	movs	r2, #128	; 0x80
100048ae:	0052      	lsls	r2, r2, #1
100048b0:	4313      	orrs	r3, r2
100048b2:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
100048b4:	69bb      	ldr	r3, [r7, #24]
100048b6:	3301      	adds	r3, #1
100048b8:	61bb      	str	r3, [r7, #24]
                break;
100048ba:	e016      	b.n	100048ea <_vsnprintf+0x23e>
#endif
            case 'j' :
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100048be:	2280      	movs	r2, #128	; 0x80
100048c0:	0092      	lsls	r2, r2, #2
100048c2:	4313      	orrs	r3, r2
100048c4:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
100048c6:	69bb      	ldr	r3, [r7, #24]
100048c8:	3301      	adds	r3, #1
100048ca:	61bb      	str	r3, [r7, #24]
                break;
100048cc:	e00d      	b.n	100048ea <_vsnprintf+0x23e>
            case 'z' :
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100048d0:	2280      	movs	r2, #128	; 0x80
100048d2:	0052      	lsls	r2, r2, #1
100048d4:	4313      	orrs	r3, r2
100048d6:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
100048d8:	69bb      	ldr	r3, [r7, #24]
100048da:	3301      	adds	r3, #1
100048dc:	61bb      	str	r3, [r7, #24]
                break;
100048de:	e004      	b.n	100048ea <_vsnprintf+0x23e>
            default :
                break;
100048e0:	46c0      	nop			; (mov r8, r8)
100048e2:	e002      	b.n	100048ea <_vsnprintf+0x23e>
                break;
100048e4:	46c0      	nop			; (mov r8, r8)
100048e6:	e000      	b.n	100048ea <_vsnprintf+0x23e>
                break;
100048e8:	46c0      	nop			; (mov r8, r8)
        }

        // evaluate specifier
        switch (*format) {
100048ea:	69bb      	ldr	r3, [r7, #24]
100048ec:	781b      	ldrb	r3, [r3, #0]
100048ee:	3b25      	subs	r3, #37	; 0x25
100048f0:	2b53      	cmp	r3, #83	; 0x53
100048f2:	d900      	bls.n	100048f6 <_vsnprintf+0x24a>
100048f4:	e303      	b.n	10004efe <_vsnprintf+0x852>
100048f6:	009a      	lsls	r2, r3, #2
100048f8:	4b48      	ldr	r3, [pc, #288]	; (10004a1c <_vsnprintf+0x370>)
100048fa:	18d3      	adds	r3, r2, r3
100048fc:	681b      	ldr	r3, [r3, #0]
100048fe:	469f      	mov	pc, r3
            case 'X' :
            case 'o' :
            case 'b' : {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
10004900:	69bb      	ldr	r3, [r7, #24]
10004902:	781b      	ldrb	r3, [r3, #0]
10004904:	2b78      	cmp	r3, #120	; 0x78
10004906:	d003      	beq.n	10004910 <_vsnprintf+0x264>
10004908:	69bb      	ldr	r3, [r7, #24]
1000490a:	781b      	ldrb	r3, [r3, #0]
1000490c:	2b58      	cmp	r3, #88	; 0x58
1000490e:	d102      	bne.n	10004916 <_vsnprintf+0x26a>
                    base = 16U;
10004910:	2310      	movs	r3, #16
10004912:	65bb      	str	r3, [r7, #88]	; 0x58
10004914:	e013      	b.n	1000493e <_vsnprintf+0x292>
                } else if (*format == 'o') {
10004916:	69bb      	ldr	r3, [r7, #24]
10004918:	781b      	ldrb	r3, [r3, #0]
1000491a:	2b6f      	cmp	r3, #111	; 0x6f
1000491c:	d102      	bne.n	10004924 <_vsnprintf+0x278>
                    base = 8U;
1000491e:	2308      	movs	r3, #8
10004920:	65bb      	str	r3, [r7, #88]	; 0x58
10004922:	e00c      	b.n	1000493e <_vsnprintf+0x292>
                } else if (*format == 'b') {
10004924:	69bb      	ldr	r3, [r7, #24]
10004926:	781b      	ldrb	r3, [r3, #0]
10004928:	2b62      	cmp	r3, #98	; 0x62
1000492a:	d102      	bne.n	10004932 <_vsnprintf+0x286>
                    base = 2U;
1000492c:	2302      	movs	r3, #2
1000492e:	65bb      	str	r3, [r7, #88]	; 0x58
10004930:	e005      	b.n	1000493e <_vsnprintf+0x292>
                } else {
                    base = 10U;
10004932:	230a      	movs	r3, #10
10004934:	65bb      	str	r3, [r7, #88]	; 0x58
                    flags &= ~FLAGS_HASH;   // no hash for dec format
10004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004938:	2210      	movs	r2, #16
1000493a:	4393      	bics	r3, r2
1000493c:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                // uppercase
                if (*format == 'X') {
1000493e:	69bb      	ldr	r3, [r7, #24]
10004940:	781b      	ldrb	r3, [r3, #0]
10004942:	2b58      	cmp	r3, #88	; 0x58
10004944:	d103      	bne.n	1000494e <_vsnprintf+0x2a2>
                    flags |= FLAGS_UPPERCASE;
10004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004948:	2220      	movs	r2, #32
1000494a:	4313      	orrs	r3, r2
1000494c:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
1000494e:	69bb      	ldr	r3, [r7, #24]
10004950:	781b      	ldrb	r3, [r3, #0]
10004952:	2b69      	cmp	r3, #105	; 0x69
10004954:	d007      	beq.n	10004966 <_vsnprintf+0x2ba>
10004956:	69bb      	ldr	r3, [r7, #24]
10004958:	781b      	ldrb	r3, [r3, #0]
1000495a:	2b64      	cmp	r3, #100	; 0x64
1000495c:	d003      	beq.n	10004966 <_vsnprintf+0x2ba>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
1000495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004960:	220c      	movs	r2, #12
10004962:	4393      	bics	r3, r2
10004964:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
10004966:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004968:	2380      	movs	r3, #128	; 0x80
1000496a:	00db      	lsls	r3, r3, #3
1000496c:	4013      	ands	r3, r2
1000496e:	d003      	beq.n	10004978 <_vsnprintf+0x2cc>
                    flags &= ~FLAGS_ZEROPAD;
10004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004972:	2201      	movs	r2, #1
10004974:	4393      	bics	r3, r2
10004976:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
10004978:	69bb      	ldr	r3, [r7, #24]
1000497a:	781b      	ldrb	r3, [r3, #0]
1000497c:	2b69      	cmp	r3, #105	; 0x69
1000497e:	d004      	beq.n	1000498a <_vsnprintf+0x2de>
10004980:	69bb      	ldr	r3, [r7, #24]
10004982:	781b      	ldrb	r3, [r3, #0]
10004984:	2b64      	cmp	r3, #100	; 0x64
10004986:	d000      	beq.n	1000498a <_vsnprintf+0x2de>
10004988:	e0b7      	b.n	10004afa <_vsnprintf+0x44e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
1000498a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000498c:	2380      	movs	r3, #128	; 0x80
1000498e:	009b      	lsls	r3, r3, #2
10004990:	4013      	ands	r3, r2
10004992:	d045      	beq.n	10004a20 <_vsnprintf+0x374>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        const long long value = va_arg(va, long long);
10004994:	2388      	movs	r3, #136	; 0x88
10004996:	18fb      	adds	r3, r7, r3
10004998:	681b      	ldr	r3, [r3, #0]
1000499a:	3307      	adds	r3, #7
1000499c:	2207      	movs	r2, #7
1000499e:	4393      	bics	r3, r2
100049a0:	001a      	movs	r2, r3
100049a2:	3208      	adds	r2, #8
100049a4:	2188      	movs	r1, #136	; 0x88
100049a6:	1879      	adds	r1, r7, r1
100049a8:	600a      	str	r2, [r1, #0]
100049aa:	681a      	ldr	r2, [r3, #0]
100049ac:	685b      	ldr	r3, [r3, #4]
100049ae:	62ba      	str	r2, [r7, #40]	; 0x28
100049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
100049b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
100049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100049b6:	2b00      	cmp	r3, #0
100049b8:	da05      	bge.n	100049c6 <_vsnprintf+0x31a>
100049ba:	2000      	movs	r0, #0
100049bc:	2100      	movs	r1, #0
100049be:	1a80      	subs	r0, r0, r2
100049c0:	4199      	sbcs	r1, r3
100049c2:	0002      	movs	r2, r0
100049c4:	000b      	movs	r3, r1
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100049c6:	0010      	movs	r0, r2
100049c8:	0019      	movs	r1, r3
100049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100049cc:	0fdb      	lsrs	r3, r3, #31
100049ce:	b2da      	uxtb	r2, r3
100049d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
100049d2:	613b      	str	r3, [r7, #16]
100049d4:	2300      	movs	r3, #0
100049d6:	617b      	str	r3, [r7, #20]
100049d8:	69fb      	ldr	r3, [r7, #28]
100049da:	469c      	mov	ip, r3
100049dc:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
100049de:	6a3d      	ldr	r5, [r7, #32]
100049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100049e2:	4698      	mov	r8, r3
100049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
100049e6:	9308      	str	r3, [sp, #32]
100049e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
100049ea:	9307      	str	r3, [sp, #28]
100049ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
100049ee:	9306      	str	r3, [sp, #24]
100049f0:	693b      	ldr	r3, [r7, #16]
100049f2:	697c      	ldr	r4, [r7, #20]
100049f4:	9304      	str	r3, [sp, #16]
100049f6:	9405      	str	r4, [sp, #20]
100049f8:	9202      	str	r2, [sp, #8]
100049fa:	9000      	str	r0, [sp, #0]
100049fc:	9101      	str	r1, [sp, #4]
100049fe:	4663      	mov	r3, ip
10004a00:	0032      	movs	r2, r6
10004a02:	0029      	movs	r1, r5
10004a04:	4640      	mov	r0, r8
10004a06:	f7ff f8c9 	bl	10003b9c <_ntoa_long_long>
10004a0a:	0003      	movs	r3, r0
10004a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    if (flags & FLAGS_LONG_LONG) {
10004a0e:	e102      	b.n	10004c16 <_vsnprintf+0x56a>
10004a10:	10003785 	.word	0x10003785
10004a14:	10007bd0 	.word	0x10007bd0
10004a18:	10007c14 	.word	0x10007c14
10004a1c:	10007c60 	.word	0x10007c60
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
10004a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004a22:	2380      	movs	r3, #128	; 0x80
10004a24:	005b      	lsls	r3, r3, #1
10004a26:	4013      	ands	r3, r2
10004a28:	d025      	beq.n	10004a76 <_vsnprintf+0x3ca>
                        const long value = va_arg(va, long);
10004a2a:	2388      	movs	r3, #136	; 0x88
10004a2c:	18fb      	adds	r3, r7, r3
10004a2e:	681b      	ldr	r3, [r3, #0]
10004a30:	1d1a      	adds	r2, r3, #4
10004a32:	2188      	movs	r1, #136	; 0x88
10004a34:	1879      	adds	r1, r7, r1
10004a36:	600a      	str	r2, [r1, #0]
10004a38:	681b      	ldr	r3, [r3, #0]
10004a3a:	637b      	str	r3, [r7, #52]	; 0x34
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
10004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004a3e:	17da      	asrs	r2, r3, #31
10004a40:	189b      	adds	r3, r3, r2
10004a42:	4053      	eors	r3, r2
10004a44:	001e      	movs	r6, r3
10004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10004a48:	0fdb      	lsrs	r3, r3, #31
10004a4a:	b2da      	uxtb	r2, r3
10004a4c:	69fd      	ldr	r5, [r7, #28]
10004a4e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
10004a50:	6a39      	ldr	r1, [r7, #32]
10004a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004a56:	9305      	str	r3, [sp, #20]
10004a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10004a5a:	9304      	str	r3, [sp, #16]
10004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004a5e:	9303      	str	r3, [sp, #12]
10004a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10004a62:	9302      	str	r3, [sp, #8]
10004a64:	9201      	str	r2, [sp, #4]
10004a66:	9600      	str	r6, [sp, #0]
10004a68:	002b      	movs	r3, r5
10004a6a:	0022      	movs	r2, r4
10004a6c:	f7ff f82d 	bl	10003aca <_ntoa_long>
10004a70:	0003      	movs	r3, r0
10004a72:	65fb      	str	r3, [r7, #92]	; 0x5c
                    if (flags & FLAGS_LONG_LONG) {
10004a74:	e0cf      	b.n	10004c16 <_vsnprintf+0x56a>
                                         value < 0, base, precision, width, flags);
                    } else {
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10004a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004a78:	2240      	movs	r2, #64	; 0x40
10004a7a:	4013      	ands	r3, r2
10004a7c:	d009      	beq.n	10004a92 <_vsnprintf+0x3e6>
10004a7e:	2388      	movs	r3, #136	; 0x88
10004a80:	18fb      	adds	r3, r7, r3
10004a82:	681b      	ldr	r3, [r3, #0]
10004a84:	1d1a      	adds	r2, r3, #4
10004a86:	2188      	movs	r1, #136	; 0x88
10004a88:	1879      	adds	r1, r7, r1
10004a8a:	600a      	str	r2, [r1, #0]
10004a8c:	681b      	ldr	r3, [r3, #0]
10004a8e:	b2db      	uxtb	r3, r3
10004a90:	e015      	b.n	10004abe <_vsnprintf+0x412>
10004a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004a94:	2280      	movs	r2, #128	; 0x80
10004a96:	4013      	ands	r3, r2
                                                                                          ? (short int) va_arg(va, int)
                                                                                          : va_arg(va, int);
10004a98:	d009      	beq.n	10004aae <_vsnprintf+0x402>
                                                                                          ? (short int) va_arg(va, int)
10004a9a:	2388      	movs	r3, #136	; 0x88
10004a9c:	18fb      	adds	r3, r7, r3
10004a9e:	681b      	ldr	r3, [r3, #0]
10004aa0:	1d1a      	adds	r2, r3, #4
10004aa2:	2188      	movs	r1, #136	; 0x88
10004aa4:	1879      	adds	r1, r7, r1
10004aa6:	600a      	str	r2, [r1, #0]
10004aa8:	681b      	ldr	r3, [r3, #0]
10004aaa:	b21b      	sxth	r3, r3
10004aac:	e007      	b.n	10004abe <_vsnprintf+0x412>
                                                                                          : va_arg(va, int);
10004aae:	2388      	movs	r3, #136	; 0x88
10004ab0:	18fb      	adds	r3, r7, r3
10004ab2:	681b      	ldr	r3, [r3, #0]
10004ab4:	1d1a      	adds	r2, r3, #4
10004ab6:	2188      	movs	r1, #136	; 0x88
10004ab8:	1879      	adds	r1, r7, r1
10004aba:	600a      	str	r2, [r1, #0]
10004abc:	681b      	ldr	r3, [r3, #0]
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10004abe:	63bb      	str	r3, [r7, #56]	; 0x38
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10004ac2:	17da      	asrs	r2, r3, #31
10004ac4:	189b      	adds	r3, r3, r2
10004ac6:	4053      	eors	r3, r2
10004ac8:	001e      	movs	r6, r3
10004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10004acc:	0fdb      	lsrs	r3, r3, #31
10004ace:	b2da      	uxtb	r2, r3
10004ad0:	69fd      	ldr	r5, [r7, #28]
10004ad2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
10004ad4:	6a39      	ldr	r1, [r7, #32]
10004ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004ada:	9305      	str	r3, [sp, #20]
10004adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10004ade:	9304      	str	r3, [sp, #16]
10004ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004ae2:	9303      	str	r3, [sp, #12]
10004ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10004ae6:	9302      	str	r3, [sp, #8]
10004ae8:	9201      	str	r2, [sp, #4]
10004aea:	9600      	str	r6, [sp, #0]
10004aec:	002b      	movs	r3, r5
10004aee:	0022      	movs	r2, r4
10004af0:	f7fe ffeb 	bl	10003aca <_ntoa_long>
10004af4:	0003      	movs	r3, r0
10004af6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    if (flags & FLAGS_LONG_LONG) {
10004af8:	e08d      	b.n	10004c16 <_vsnprintf+0x56a>
                                         value < 0, base, precision, width, flags);
                    }
                } else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
10004afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004afc:	2380      	movs	r3, #128	; 0x80
10004afe:	009b      	lsls	r3, r3, #2
10004b00:	4013      	ands	r3, r2
10004b02:	d02b      	beq.n	10004b5c <_vsnprintf+0x4b0>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
10004b04:	2388      	movs	r3, #136	; 0x88
10004b06:	18fb      	adds	r3, r7, r3
10004b08:	681b      	ldr	r3, [r3, #0]
10004b0a:	3307      	adds	r3, #7
10004b0c:	2207      	movs	r2, #7
10004b0e:	4393      	bics	r3, r2
10004b10:	001a      	movs	r2, r3
10004b12:	3208      	adds	r2, #8
10004b14:	2188      	movs	r1, #136	; 0x88
10004b16:	1879      	adds	r1, r7, r1
10004b18:	600a      	str	r2, [r1, #0]
10004b1a:	6818      	ldr	r0, [r3, #0]
10004b1c:	6859      	ldr	r1, [r3, #4]
10004b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10004b20:	60bb      	str	r3, [r7, #8]
10004b22:	2300      	movs	r3, #0
10004b24:	60fb      	str	r3, [r7, #12]
10004b26:	69fe      	ldr	r6, [r7, #28]
10004b28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004b2a:	6a3d      	ldr	r5, [r7, #32]
10004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10004b2e:	469c      	mov	ip, r3
10004b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004b32:	9308      	str	r3, [sp, #32]
10004b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10004b36:	9307      	str	r3, [sp, #28]
10004b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004b3a:	9306      	str	r3, [sp, #24]
10004b3c:	68bb      	ldr	r3, [r7, #8]
10004b3e:	68fc      	ldr	r4, [r7, #12]
10004b40:	9304      	str	r3, [sp, #16]
10004b42:	9405      	str	r4, [sp, #20]
10004b44:	2300      	movs	r3, #0
10004b46:	9302      	str	r3, [sp, #8]
10004b48:	9000      	str	r0, [sp, #0]
10004b4a:	9101      	str	r1, [sp, #4]
10004b4c:	0033      	movs	r3, r6
10004b4e:	0029      	movs	r1, r5
10004b50:	4660      	mov	r0, ip
10004b52:	f7ff f823 	bl	10003b9c <_ntoa_long_long>
10004b56:	0003      	movs	r3, r0
10004b58:	65fb      	str	r3, [r7, #92]	; 0x5c
10004b5a:	e05c      	b.n	10004c16 <_vsnprintf+0x56a>
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
10004b5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004b5e:	2380      	movs	r3, #128	; 0x80
10004b60:	005b      	lsls	r3, r3, #1
10004b62:	4013      	ands	r3, r2
10004b64:	d01d      	beq.n	10004ba2 <_vsnprintf+0x4f6>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10004b66:	2388      	movs	r3, #136	; 0x88
10004b68:	18fb      	adds	r3, r7, r3
10004b6a:	681b      	ldr	r3, [r3, #0]
10004b6c:	1d1a      	adds	r2, r3, #4
10004b6e:	2188      	movs	r1, #136	; 0x88
10004b70:	1879      	adds	r1, r7, r1
10004b72:	600a      	str	r2, [r1, #0]
10004b74:	681b      	ldr	r3, [r3, #0]
10004b76:	69fd      	ldr	r5, [r7, #28]
10004b78:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
10004b7a:	6a39      	ldr	r1, [r7, #32]
10004b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004b80:	9205      	str	r2, [sp, #20]
10004b82:	6eba      	ldr	r2, [r7, #104]	; 0x68
10004b84:	9204      	str	r2, [sp, #16]
10004b86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
10004b88:	9203      	str	r2, [sp, #12]
10004b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
10004b8c:	9202      	str	r2, [sp, #8]
10004b8e:	2200      	movs	r2, #0
10004b90:	9201      	str	r2, [sp, #4]
10004b92:	9300      	str	r3, [sp, #0]
10004b94:	002b      	movs	r3, r5
10004b96:	0022      	movs	r2, r4
10004b98:	f7fe ff97 	bl	10003aca <_ntoa_long>
10004b9c:	0003      	movs	r3, r0
10004b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
10004ba0:	e039      	b.n	10004c16 <_vsnprintf+0x56a>
                                         width, flags);
                    } else {
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10004ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004ba4:	2240      	movs	r2, #64	; 0x40
10004ba6:	4013      	ands	r3, r2
                                                                        : (flags & FLAGS_SHORT)
10004ba8:	d009      	beq.n	10004bbe <_vsnprintf+0x512>
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10004baa:	2388      	movs	r3, #136	; 0x88
10004bac:	18fb      	adds	r3, r7, r3
10004bae:	681b      	ldr	r3, [r3, #0]
10004bb0:	1d1a      	adds	r2, r3, #4
10004bb2:	2188      	movs	r1, #136	; 0x88
10004bb4:	1879      	adds	r1, r7, r1
10004bb6:	600a      	str	r2, [r1, #0]
10004bb8:	681b      	ldr	r3, [r3, #0]
10004bba:	b2db      	uxtb	r3, r3
10004bbc:	e015      	b.n	10004bea <_vsnprintf+0x53e>
                                                                        : (flags & FLAGS_SHORT)
10004bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004bc0:	2280      	movs	r2, #128	; 0x80
10004bc2:	4013      	ands	r3, r2
                                                                          ? (unsigned short int) va_arg(va,
                                                                                                        unsigned int)
                                                                          : va_arg(va, unsigned int);
10004bc4:	d009      	beq.n	10004bda <_vsnprintf+0x52e>
                                                                          ? (unsigned short int) va_arg(va,
10004bc6:	2388      	movs	r3, #136	; 0x88
10004bc8:	18fb      	adds	r3, r7, r3
10004bca:	681b      	ldr	r3, [r3, #0]
10004bcc:	1d1a      	adds	r2, r3, #4
10004bce:	2188      	movs	r1, #136	; 0x88
10004bd0:	1879      	adds	r1, r7, r1
10004bd2:	600a      	str	r2, [r1, #0]
10004bd4:	681b      	ldr	r3, [r3, #0]
10004bd6:	b29b      	uxth	r3, r3
10004bd8:	e007      	b.n	10004bea <_vsnprintf+0x53e>
                                                                          : va_arg(va, unsigned int);
10004bda:	2388      	movs	r3, #136	; 0x88
10004bdc:	18fb      	adds	r3, r7, r3
10004bde:	681b      	ldr	r3, [r3, #0]
10004be0:	1d1a      	adds	r2, r3, #4
10004be2:	2188      	movs	r1, #136	; 0x88
10004be4:	1879      	adds	r1, r7, r1
10004be6:	600a      	str	r2, [r1, #0]
10004be8:	681b      	ldr	r3, [r3, #0]
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
10004bec:	69fc      	ldr	r4, [r7, #28]
10004bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004bf0:	6a39      	ldr	r1, [r7, #32]
10004bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004bf6:	9305      	str	r3, [sp, #20]
10004bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10004bfa:	9304      	str	r3, [sp, #16]
10004bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004bfe:	9303      	str	r3, [sp, #12]
10004c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10004c02:	9302      	str	r3, [sp, #8]
10004c04:	2300      	movs	r3, #0
10004c06:	9301      	str	r3, [sp, #4]
10004c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10004c0a:	9300      	str	r3, [sp, #0]
10004c0c:	0023      	movs	r3, r4
10004c0e:	f7fe ff5c 	bl	10003aca <_ntoa_long>
10004c12:	0003      	movs	r3, r0
10004c14:	65fb      	str	r3, [r7, #92]	; 0x5c
                    }
                }
                format++;
10004c16:	69bb      	ldr	r3, [r7, #24]
10004c18:	3301      	adds	r3, #1
10004c1a:	61bb      	str	r3, [r7, #24]
                break;
10004c1c:	e17c      	b.n	10004f18 <_vsnprintf+0x86c>
            }
            case 'f' :
            case 'F' :
#if PICO_PRINTF_SUPPORT_FLOAT
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10004c1e:	69bb      	ldr	r3, [r7, #24]
10004c20:	781b      	ldrb	r3, [r3, #0]
10004c22:	2b46      	cmp	r3, #70	; 0x46
10004c24:	d103      	bne.n	10004c2e <_vsnprintf+0x582>
10004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004c28:	2220      	movs	r2, #32
10004c2a:	4313      	orrs	r3, r2
10004c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10004c2e:	2388      	movs	r3, #136	; 0x88
10004c30:	18fb      	adds	r3, r7, r3
10004c32:	681b      	ldr	r3, [r3, #0]
10004c34:	3307      	adds	r3, #7
10004c36:	2207      	movs	r2, #7
10004c38:	4393      	bics	r3, r2
10004c3a:	001a      	movs	r2, r3
10004c3c:	3208      	adds	r2, #8
10004c3e:	2188      	movs	r1, #136	; 0x88
10004c40:	1879      	adds	r1, r7, r1
10004c42:	600a      	str	r2, [r1, #0]
10004c44:	681a      	ldr	r2, [r3, #0]
10004c46:	685b      	ldr	r3, [r3, #4]
10004c48:	69fe      	ldr	r6, [r7, #28]
10004c4a:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
10004c4c:	6a3c      	ldr	r4, [r7, #32]
10004c4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004c50:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
10004c52:	9104      	str	r1, [sp, #16]
10004c54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
10004c56:	9103      	str	r1, [sp, #12]
10004c58:	6e79      	ldr	r1, [r7, #100]	; 0x64
10004c5a:	9102      	str	r1, [sp, #8]
10004c5c:	9200      	str	r2, [sp, #0]
10004c5e:	9301      	str	r3, [sp, #4]
10004c60:	0033      	movs	r3, r6
10004c62:	002a      	movs	r2, r5
10004c64:	0021      	movs	r1, r4
10004c66:	f7ff f80d 	bl	10003c84 <_ftoa>
10004c6a:	0003      	movs	r3, r0
10004c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
10004c6e:	69bb      	ldr	r3, [r7, #24]
10004c70:	3301      	adds	r3, #1
10004c72:	61bb      	str	r3, [r7, #24]
                break;
10004c74:	e150      	b.n	10004f18 <_vsnprintf+0x86c>
            case 'e':
            case 'E':
            case 'g':
            case 'G':
#if PICO_PRINTF_SUPPORT_FLOAT && PICO_PRINTF_SUPPORT_EXPONENTIAL
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
10004c76:	69bb      	ldr	r3, [r7, #24]
10004c78:	781b      	ldrb	r3, [r3, #0]
10004c7a:	2b67      	cmp	r3, #103	; 0x67
10004c7c:	d003      	beq.n	10004c86 <_vsnprintf+0x5da>
10004c7e:	69bb      	ldr	r3, [r7, #24]
10004c80:	781b      	ldrb	r3, [r3, #0]
10004c82:	2b47      	cmp	r3, #71	; 0x47
10004c84:	d104      	bne.n	10004c90 <_vsnprintf+0x5e4>
10004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004c88:	2280      	movs	r2, #128	; 0x80
10004c8a:	0112      	lsls	r2, r2, #4
10004c8c:	4313      	orrs	r3, r2
10004c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
10004c90:	69bb      	ldr	r3, [r7, #24]
10004c92:	781b      	ldrb	r3, [r3, #0]
10004c94:	2b45      	cmp	r3, #69	; 0x45
10004c96:	d003      	beq.n	10004ca0 <_vsnprintf+0x5f4>
10004c98:	69bb      	ldr	r3, [r7, #24]
10004c9a:	781b      	ldrb	r3, [r3, #0]
10004c9c:	2b47      	cmp	r3, #71	; 0x47
10004c9e:	d103      	bne.n	10004ca8 <_vsnprintf+0x5fc>
10004ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004ca2:	2220      	movs	r2, #32
10004ca4:	4313      	orrs	r3, r2
10004ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10004ca8:	2388      	movs	r3, #136	; 0x88
10004caa:	18fb      	adds	r3, r7, r3
10004cac:	681b      	ldr	r3, [r3, #0]
10004cae:	3307      	adds	r3, #7
10004cb0:	2207      	movs	r2, #7
10004cb2:	4393      	bics	r3, r2
10004cb4:	001a      	movs	r2, r3
10004cb6:	3208      	adds	r2, #8
10004cb8:	2188      	movs	r1, #136	; 0x88
10004cba:	1879      	adds	r1, r7, r1
10004cbc:	600a      	str	r2, [r1, #0]
10004cbe:	681a      	ldr	r2, [r3, #0]
10004cc0:	685b      	ldr	r3, [r3, #4]
10004cc2:	69fe      	ldr	r6, [r7, #28]
10004cc4:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
10004cc6:	6a3c      	ldr	r4, [r7, #32]
10004cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004cca:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
10004ccc:	9104      	str	r1, [sp, #16]
10004cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
10004cd0:	9103      	str	r1, [sp, #12]
10004cd2:	6e79      	ldr	r1, [r7, #100]	; 0x64
10004cd4:	9102      	str	r1, [sp, #8]
10004cd6:	9200      	str	r2, [sp, #0]
10004cd8:	9301      	str	r3, [sp, #4]
10004cda:	0033      	movs	r3, r6
10004cdc:	002a      	movs	r2, r5
10004cde:	0021      	movs	r1, r4
10004ce0:	f7ff fa1a 	bl	10004118 <_etoa>
10004ce4:	0003      	movs	r3, r0
10004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
10004ce8:	69bb      	ldr	r3, [r7, #24]
10004cea:	3301      	adds	r3, #1
10004cec:	61bb      	str	r3, [r7, #24]
                break;
10004cee:	e113      	b.n	10004f18 <_vsnprintf+0x86c>
            case 'c' : {
                unsigned int l = 1U;
10004cf0:	2301      	movs	r3, #1
10004cf2:	657b      	str	r3, [r7, #84]	; 0x54
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
10004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004cf6:	2202      	movs	r2, #2
10004cf8:	4013      	ands	r3, r2
10004cfa:	d10e      	bne.n	10004d1a <_vsnprintf+0x66e>
                    while (l++ < width) {
10004cfc:	e007      	b.n	10004d0e <_vsnprintf+0x662>
                        out(' ', buffer, idx++, maxlen);
10004cfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004d00:	1c53      	adds	r3, r2, #1
10004d02:	65fb      	str	r3, [r7, #92]	; 0x5c
10004d04:	69fb      	ldr	r3, [r7, #28]
10004d06:	6a39      	ldr	r1, [r7, #32]
10004d08:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004d0a:	2020      	movs	r0, #32
10004d0c:	47a0      	blx	r4
                    while (l++ < width) {
10004d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004d10:	1c5a      	adds	r2, r3, #1
10004d12:	657a      	str	r2, [r7, #84]	; 0x54
10004d14:	6eba      	ldr	r2, [r7, #104]	; 0x68
10004d16:	429a      	cmp	r2, r3
10004d18:	d8f1      	bhi.n	10004cfe <_vsnprintf+0x652>
                    }
                }
                // char output
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10004d1a:	2388      	movs	r3, #136	; 0x88
10004d1c:	18fb      	adds	r3, r7, r3
10004d1e:	681b      	ldr	r3, [r3, #0]
10004d20:	1d1a      	adds	r2, r3, #4
10004d22:	2188      	movs	r1, #136	; 0x88
10004d24:	1879      	adds	r1, r7, r1
10004d26:	600a      	str	r2, [r1, #0]
10004d28:	681b      	ldr	r3, [r3, #0]
10004d2a:	b2d8      	uxtb	r0, r3
10004d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004d2e:	1c53      	adds	r3, r2, #1
10004d30:	65fb      	str	r3, [r7, #92]	; 0x5c
10004d32:	69fb      	ldr	r3, [r7, #28]
10004d34:	6a39      	ldr	r1, [r7, #32]
10004d36:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004d38:	47a0      	blx	r4
                // post padding
                if (flags & FLAGS_LEFT) {
10004d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004d3c:	2202      	movs	r2, #2
10004d3e:	4013      	ands	r3, r2
10004d40:	d00e      	beq.n	10004d60 <_vsnprintf+0x6b4>
                    while (l++ < width) {
10004d42:	e007      	b.n	10004d54 <_vsnprintf+0x6a8>
                        out(' ', buffer, idx++, maxlen);
10004d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004d46:	1c53      	adds	r3, r2, #1
10004d48:	65fb      	str	r3, [r7, #92]	; 0x5c
10004d4a:	69fb      	ldr	r3, [r7, #28]
10004d4c:	6a39      	ldr	r1, [r7, #32]
10004d4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004d50:	2020      	movs	r0, #32
10004d52:	47a0      	blx	r4
                    while (l++ < width) {
10004d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10004d56:	1c5a      	adds	r2, r3, #1
10004d58:	657a      	str	r2, [r7, #84]	; 0x54
10004d5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
10004d5c:	429a      	cmp	r2, r3
10004d5e:	d8f1      	bhi.n	10004d44 <_vsnprintf+0x698>
                    }
                }
                format++;
10004d60:	69bb      	ldr	r3, [r7, #24]
10004d62:	3301      	adds	r3, #1
10004d64:	61bb      	str	r3, [r7, #24]
                break;
10004d66:	e0d7      	b.n	10004f18 <_vsnprintf+0x86c>
            }

            case 's' : {
                const char *p = va_arg(va, char*);
10004d68:	2388      	movs	r3, #136	; 0x88
10004d6a:	18fb      	adds	r3, r7, r3
10004d6c:	681b      	ldr	r3, [r3, #0]
10004d6e:	1d1a      	adds	r2, r3, #4
10004d70:	2188      	movs	r1, #136	; 0x88
10004d72:	1879      	adds	r1, r7, r1
10004d74:	600a      	str	r2, [r1, #0]
10004d76:	681b      	ldr	r3, [r3, #0]
10004d78:	653b      	str	r3, [r7, #80]	; 0x50
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10004d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004d7c:	2b00      	cmp	r3, #0
10004d7e:	d001      	beq.n	10004d84 <_vsnprintf+0x6d8>
10004d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004d82:	e001      	b.n	10004d88 <_vsnprintf+0x6dc>
10004d84:	2301      	movs	r3, #1
10004d86:	425b      	negs	r3, r3
10004d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
10004d8a:	0019      	movs	r1, r3
10004d8c:	0010      	movs	r0, r2
10004d8e:	f7fe fd22 	bl	100037d6 <_strnlen_s>
10004d92:	0003      	movs	r3, r0
10004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
                // pre padding
                if (flags & FLAGS_PRECISION) {
10004d96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004d98:	2380      	movs	r3, #128	; 0x80
10004d9a:	00db      	lsls	r3, r3, #3
10004d9c:	4013      	ands	r3, r2
10004d9e:	d005      	beq.n	10004dac <_vsnprintf+0x700>
                    l = (l < precision ? l : precision);
10004da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10004da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004da4:	4293      	cmp	r3, r2
10004da6:	d900      	bls.n	10004daa <_vsnprintf+0x6fe>
10004da8:	0013      	movs	r3, r2
10004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (!(flags & FLAGS_LEFT)) {
10004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004dae:	2202      	movs	r2, #2
10004db0:	4013      	ands	r3, r2
10004db2:	d11a      	bne.n	10004dea <_vsnprintf+0x73e>
                    while (l++ < width) {
10004db4:	e007      	b.n	10004dc6 <_vsnprintf+0x71a>
                        out(' ', buffer, idx++, maxlen);
10004db6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004db8:	1c53      	adds	r3, r2, #1
10004dba:	65fb      	str	r3, [r7, #92]	; 0x5c
10004dbc:	69fb      	ldr	r3, [r7, #28]
10004dbe:	6a39      	ldr	r1, [r7, #32]
10004dc0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004dc2:	2020      	movs	r0, #32
10004dc4:	47a0      	blx	r4
                    while (l++ < width) {
10004dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004dc8:	1c5a      	adds	r2, r3, #1
10004dca:	64fa      	str	r2, [r7, #76]	; 0x4c
10004dcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
10004dce:	429a      	cmp	r2, r3
10004dd0:	d8f1      	bhi.n	10004db6 <_vsnprintf+0x70a>
                    }
                }
                // string output
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10004dd2:	e00a      	b.n	10004dea <_vsnprintf+0x73e>
                    out(*(p++), buffer, idx++, maxlen);
10004dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10004dd6:	1c5a      	adds	r2, r3, #1
10004dd8:	653a      	str	r2, [r7, #80]	; 0x50
10004dda:	7818      	ldrb	r0, [r3, #0]
10004ddc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004dde:	1c53      	adds	r3, r2, #1
10004de0:	65fb      	str	r3, [r7, #92]	; 0x5c
10004de2:	69fb      	ldr	r3, [r7, #28]
10004de4:	6a39      	ldr	r1, [r7, #32]
10004de6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004de8:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10004dec:	781b      	ldrb	r3, [r3, #0]
10004dee:	2b00      	cmp	r3, #0
10004df0:	d009      	beq.n	10004e06 <_vsnprintf+0x75a>
10004df2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10004df4:	2380      	movs	r3, #128	; 0x80
10004df6:	00db      	lsls	r3, r3, #3
10004df8:	4013      	ands	r3, r2
10004dfa:	d0eb      	beq.n	10004dd4 <_vsnprintf+0x728>
10004dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004dfe:	1e5a      	subs	r2, r3, #1
10004e00:	667a      	str	r2, [r7, #100]	; 0x64
10004e02:	2b00      	cmp	r3, #0
10004e04:	d1e6      	bne.n	10004dd4 <_vsnprintf+0x728>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
10004e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004e08:	2202      	movs	r2, #2
10004e0a:	4013      	ands	r3, r2
10004e0c:	d00e      	beq.n	10004e2c <_vsnprintf+0x780>
                    while (l++ < width) {
10004e0e:	e007      	b.n	10004e20 <_vsnprintf+0x774>
                        out(' ', buffer, idx++, maxlen);
10004e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004e12:	1c53      	adds	r3, r2, #1
10004e14:	65fb      	str	r3, [r7, #92]	; 0x5c
10004e16:	69fb      	ldr	r3, [r7, #28]
10004e18:	6a39      	ldr	r1, [r7, #32]
10004e1a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004e1c:	2020      	movs	r0, #32
10004e1e:	47a0      	blx	r4
                    while (l++ < width) {
10004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10004e22:	1c5a      	adds	r2, r3, #1
10004e24:	64fa      	str	r2, [r7, #76]	; 0x4c
10004e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
10004e28:	429a      	cmp	r2, r3
10004e2a:	d8f1      	bhi.n	10004e10 <_vsnprintf+0x764>
                    }
                }
                format++;
10004e2c:	69bb      	ldr	r3, [r7, #24]
10004e2e:	3301      	adds	r3, #1
10004e30:	61bb      	str	r3, [r7, #24]
                break;
10004e32:	e071      	b.n	10004f18 <_vsnprintf+0x86c>
            }

            case 'p' : {
                width = sizeof(void *) * 2U;
10004e34:	2308      	movs	r3, #8
10004e36:	66bb      	str	r3, [r7, #104]	; 0x68
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
10004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004e3a:	2221      	movs	r2, #33	; 0x21
10004e3c:	4313      	orrs	r3, r2
10004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if PICO_PRINTF_SUPPORT_LONG_LONG
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
10004e40:	212b      	movs	r1, #43	; 0x2b
10004e42:	2318      	movs	r3, #24
10004e44:	18cb      	adds	r3, r1, r3
10004e46:	19db      	adds	r3, r3, r7
10004e48:	2200      	movs	r2, #0
10004e4a:	701a      	strb	r2, [r3, #0]
                if (is_ll) {
10004e4c:	2318      	movs	r3, #24
10004e4e:	18cb      	adds	r3, r1, r3
10004e50:	19db      	adds	r3, r3, r7
10004e52:	781b      	ldrb	r3, [r3, #0]
10004e54:	2b00      	cmp	r3, #0
10004e56:	d025      	beq.n	10004ea4 <_vsnprintf+0x7f8>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t) va_arg(va, void*), false, 16U,
10004e58:	2388      	movs	r3, #136	; 0x88
10004e5a:	18fb      	adds	r3, r7, r3
10004e5c:	681b      	ldr	r3, [r3, #0]
10004e5e:	1d1a      	adds	r2, r3, #4
10004e60:	2188      	movs	r1, #136	; 0x88
10004e62:	1879      	adds	r1, r7, r1
10004e64:	600a      	str	r2, [r1, #0]
10004e66:	681b      	ldr	r3, [r3, #0]
10004e68:	603b      	str	r3, [r7, #0]
10004e6a:	2300      	movs	r3, #0
10004e6c:	607b      	str	r3, [r7, #4]
10004e6e:	69fd      	ldr	r5, [r7, #28]
10004e70:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
10004e72:	6a39      	ldr	r1, [r7, #32]
10004e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004e78:	9308      	str	r3, [sp, #32]
10004e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10004e7c:	9307      	str	r3, [sp, #28]
10004e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004e80:	9306      	str	r3, [sp, #24]
10004e82:	2210      	movs	r2, #16
10004e84:	2300      	movs	r3, #0
10004e86:	9204      	str	r2, [sp, #16]
10004e88:	9305      	str	r3, [sp, #20]
10004e8a:	2300      	movs	r3, #0
10004e8c:	9302      	str	r3, [sp, #8]
10004e8e:	683a      	ldr	r2, [r7, #0]
10004e90:	687b      	ldr	r3, [r7, #4]
10004e92:	9200      	str	r2, [sp, #0]
10004e94:	9301      	str	r3, [sp, #4]
10004e96:	002b      	movs	r3, r5
10004e98:	0022      	movs	r2, r4
10004e9a:	f7fe fe7f 	bl	10003b9c <_ntoa_long_long>
10004e9e:	0003      	movs	r3, r0
10004ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
10004ea2:	e01c      	b.n	10004ede <_vsnprintf+0x832>
                                          precision, width, flags);
                } else {
#endif
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10004ea4:	2388      	movs	r3, #136	; 0x88
10004ea6:	18fb      	adds	r3, r7, r3
10004ea8:	681b      	ldr	r3, [r3, #0]
10004eaa:	1d1a      	adds	r2, r3, #4
10004eac:	2188      	movs	r1, #136	; 0x88
10004eae:	1879      	adds	r1, r7, r1
10004eb0:	600a      	str	r2, [r1, #0]
10004eb2:	681b      	ldr	r3, [r3, #0]
10004eb4:	001d      	movs	r5, r3
10004eb6:	69fc      	ldr	r4, [r7, #28]
10004eb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004eba:	6a39      	ldr	r1, [r7, #32]
10004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
10004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10004ec0:	9305      	str	r3, [sp, #20]
10004ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10004ec4:	9304      	str	r3, [sp, #16]
10004ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10004ec8:	9303      	str	r3, [sp, #12]
10004eca:	2310      	movs	r3, #16
10004ecc:	9302      	str	r3, [sp, #8]
10004ece:	2300      	movs	r3, #0
10004ed0:	9301      	str	r3, [sp, #4]
10004ed2:	9500      	str	r5, [sp, #0]
10004ed4:	0023      	movs	r3, r4
10004ed6:	f7fe fdf8 	bl	10003aca <_ntoa_long>
10004eda:	0003      	movs	r3, r0
10004edc:	65fb      	str	r3, [r7, #92]	; 0x5c
                                     16U, precision, width, flags);
#if PICO_PRINTF_SUPPORT_LONG_LONG
                }
#endif
                format++;
10004ede:	69bb      	ldr	r3, [r7, #24]
10004ee0:	3301      	adds	r3, #1
10004ee2:	61bb      	str	r3, [r7, #24]
                break;
10004ee4:	e018      	b.n	10004f18 <_vsnprintf+0x86c>
            }

            case '%' :
                out('%', buffer, idx++, maxlen);
10004ee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004ee8:	1c53      	adds	r3, r2, #1
10004eea:	65fb      	str	r3, [r7, #92]	; 0x5c
10004eec:	69fb      	ldr	r3, [r7, #28]
10004eee:	6a39      	ldr	r1, [r7, #32]
10004ef0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004ef2:	2025      	movs	r0, #37	; 0x25
10004ef4:	47a0      	blx	r4
                format++;
10004ef6:	69bb      	ldr	r3, [r7, #24]
10004ef8:	3301      	adds	r3, #1
10004efa:	61bb      	str	r3, [r7, #24]
                break;
10004efc:	e00c      	b.n	10004f18 <_vsnprintf+0x86c>

            default :
                out(*format, buffer, idx++, maxlen);
10004efe:	69bb      	ldr	r3, [r7, #24]
10004f00:	7818      	ldrb	r0, [r3, #0]
10004f02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004f04:	1c53      	adds	r3, r2, #1
10004f06:	65fb      	str	r3, [r7, #92]	; 0x5c
10004f08:	69fb      	ldr	r3, [r7, #28]
10004f0a:	6a39      	ldr	r1, [r7, #32]
10004f0c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004f0e:	47a0      	blx	r4
                format++;
10004f10:	69bb      	ldr	r3, [r7, #24]
10004f12:	3301      	adds	r3, #1
10004f14:	61bb      	str	r3, [r7, #24]
                break;
10004f16:	46c0      	nop			; (mov r8, r8)
    while (*format) {
10004f18:	69bb      	ldr	r3, [r7, #24]
10004f1a:	781b      	ldrb	r3, [r3, #0]
10004f1c:	2b00      	cmp	r3, #0
10004f1e:	d001      	beq.n	10004f24 <_vsnprintf+0x878>
10004f20:	f7ff fbd8 	bl	100046d4 <_vsnprintf+0x28>
        }
    }

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
10004f24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004f26:	69fb      	ldr	r3, [r7, #28]
10004f28:	429a      	cmp	r2, r3
10004f2a:	d302      	bcc.n	10004f32 <_vsnprintf+0x886>
10004f2c:	69fb      	ldr	r3, [r7, #28]
10004f2e:	1e5a      	subs	r2, r3, #1
10004f30:	e000      	b.n	10004f34 <_vsnprintf+0x888>
10004f32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
10004f34:	69fb      	ldr	r3, [r7, #28]
10004f36:	6a39      	ldr	r1, [r7, #32]
10004f38:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10004f3a:	2000      	movs	r0, #0
10004f3c:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int) idx;
10004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
10004f40:	0018      	movs	r0, r3
10004f42:	46bd      	mov	sp, r7
10004f44:	b01c      	add	sp, #112	; 0x70
10004f46:	bc80      	pop	{r7}
10004f48:	46b8      	mov	r8, r7
10004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10004f4c <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
10004f4c:	b590      	push	{r4, r7, lr}
10004f4e:	b089      	sub	sp, #36	; 0x24
10004f50:	af02      	add	r7, sp, #8
10004f52:	60f8      	str	r0, [r7, #12]
10004f54:	60b9      	str	r1, [r7, #8]
10004f56:	607a      	str	r2, [r7, #4]
10004f58:	603b      	str	r3, [r7, #0]
    const out_fct_wrap_type out_fct_wrap = {out, arg};
10004f5a:	2110      	movs	r1, #16
10004f5c:	187b      	adds	r3, r7, r1
10004f5e:	68fa      	ldr	r2, [r7, #12]
10004f60:	601a      	str	r2, [r3, #0]
10004f62:	187b      	adds	r3, r7, r1
10004f64:	68ba      	ldr	r2, [r7, #8]
10004f66:	605a      	str	r2, [r3, #4]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
10004f68:	687c      	ldr	r4, [r7, #4]
10004f6a:	2301      	movs	r3, #1
10004f6c:	425a      	negs	r2, r3
10004f6e:	1879      	adds	r1, r7, r1
10004f70:	4805      	ldr	r0, [pc, #20]	; (10004f88 <vfctprintf+0x3c>)
10004f72:	683b      	ldr	r3, [r7, #0]
10004f74:	9300      	str	r3, [sp, #0]
10004f76:	0023      	movs	r3, r4
10004f78:	f7ff fb98 	bl	100046ac <_vsnprintf>
10004f7c:	0003      	movs	r3, r0
}
10004f7e:	0018      	movs	r0, r3
10004f80:	46bd      	mov	sp, r7
10004f82:	b007      	add	sp, #28
10004f84:	bd90      	pop	{r4, r7, pc}
10004f86:	46c0      	nop			; (mov r8, r8)
10004f88:	100037a1 	.word	0x100037a1

10004f8c <__breakpoint>:
static inline void __breakpoint(void) {
10004f8c:	b580      	push	{r7, lr}
10004f8e:	af00      	add	r7, sp, #0
    __asm__("bkpt #0");
10004f90:	be00      	bkpt	0x0000
}
10004f92:	46c0      	nop			; (mov r8, r8)
10004f94:	46bd      	mov	sp, r7
10004f96:	bd80      	pop	{r7, pc}

10004f98 <reset_block>:
static inline void reset_block(uint32_t bits) {
10004f98:	b580      	push	{r7, lr}
10004f9a:	b084      	sub	sp, #16
10004f9c:	af00      	add	r7, sp, #0
10004f9e:	6078      	str	r0, [r7, #4]
10004fa0:	4b07      	ldr	r3, [pc, #28]	; (10004fc0 <reset_block+0x28>)
10004fa2:	60fb      	str	r3, [r7, #12]
10004fa4:	687b      	ldr	r3, [r7, #4]
10004fa6:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004fa8:	68fb      	ldr	r3, [r7, #12]
10004faa:	2280      	movs	r2, #128	; 0x80
10004fac:	0192      	lsls	r2, r2, #6
10004fae:	4313      	orrs	r3, r2
10004fb0:	68ba      	ldr	r2, [r7, #8]
10004fb2:	601a      	str	r2, [r3, #0]
}
10004fb4:	46c0      	nop			; (mov r8, r8)
}
10004fb6:	46c0      	nop			; (mov r8, r8)
10004fb8:	46bd      	mov	sp, r7
10004fba:	b004      	add	sp, #16
10004fbc:	bd80      	pop	{r7, pc}
10004fbe:	46c0      	nop			; (mov r8, r8)
10004fc0:	4000c000 	.word	0x4000c000

10004fc4 <unreset_block_wait>:
static inline void unreset_block_wait(uint32_t bits) {
10004fc4:	b580      	push	{r7, lr}
10004fc6:	b084      	sub	sp, #16
10004fc8:	af00      	add	r7, sp, #0
10004fca:	6078      	str	r0, [r7, #4]
10004fcc:	4b0b      	ldr	r3, [pc, #44]	; (10004ffc <unreset_block_wait+0x38>)
10004fce:	60fb      	str	r3, [r7, #12]
10004fd0:	687b      	ldr	r3, [r7, #4]
10004fd2:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004fd4:	68fb      	ldr	r3, [r7, #12]
10004fd6:	22c0      	movs	r2, #192	; 0xc0
10004fd8:	0192      	lsls	r2, r2, #6
10004fda:	4313      	orrs	r3, r2
10004fdc:	68ba      	ldr	r2, [r7, #8]
10004fde:	601a      	str	r2, [r3, #0]
}
10004fe0:	46c0      	nop			; (mov r8, r8)
    while (~resets_hw->reset_done & bits)
10004fe2:	e000      	b.n	10004fe6 <unreset_block_wait+0x22>
static __force_inline void tight_loop_contents(void) {}
10004fe4:	46c0      	nop			; (mov r8, r8)
10004fe6:	4b05      	ldr	r3, [pc, #20]	; (10004ffc <unreset_block_wait+0x38>)
10004fe8:	689b      	ldr	r3, [r3, #8]
10004fea:	43db      	mvns	r3, r3
10004fec:	687a      	ldr	r2, [r7, #4]
10004fee:	4013      	ands	r3, r2
10004ff0:	d1f8      	bne.n	10004fe4 <unreset_block_wait+0x20>
}
10004ff2:	46c0      	nop			; (mov r8, r8)
10004ff4:	46c0      	nop			; (mov r8, r8)
10004ff6:	46bd      	mov	sp, r7
10004ff8:	b004      	add	sp, #16
10004ffa:	bd80      	pop	{r7, pc}
10004ffc:	4000c000 	.word	0x4000c000

10005000 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
10005000:	b580      	push	{r7, lr}
10005002:	b086      	sub	sp, #24
10005004:	af00      	add	r7, sp, #0
    // Reset all peripherals to put system into a known state,
    // - except for QSPI pads and the XIP IO bank, as this is fatal if running from flash
    // - and the PLLs, as this is fatal if clock muxing has not been reset on this boot
    // - and USB, syscfg, as this disturbs USB-to-SWD on core 1
    reset_block(~(
10005006:	4b3b      	ldr	r3, [pc, #236]	; (100050f4 <runtime_init+0xf4>)
10005008:	0018      	movs	r0, r3
1000500a:	f7ff ffc5 	bl	10004f98 <reset_block>
            RESETS_RESET_PLL_SYS_BITS
    ));

    // Remove reset from peripherals which are clocked only by clk_sys and
    // clk_ref. Other peripherals stay in reset until we've configured clocks.
    unreset_block_wait(RESETS_RESET_BITS & ~(
1000500e:	4b3a      	ldr	r3, [pc, #232]	; (100050f8 <runtime_init+0xf8>)
10005010:	0018      	movs	r0, r3
10005012:	f7ff ffd7 	bl	10004fc4 <unreset_block_wait>
    extern void (*__preinit_array_end)(void);

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)(void) = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10005016:	4b39      	ldr	r3, [pc, #228]	; (100050fc <runtime_init+0xfc>)
10005018:	617b      	str	r3, [r7, #20]
1000501a:	e005      	b.n	10005028 <runtime_init+0x28>
        (*p)();
1000501c:	697b      	ldr	r3, [r7, #20]
1000501e:	681b      	ldr	r3, [r3, #0]
10005020:	4798      	blx	r3
    for (void (**p)(void) = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10005022:	697b      	ldr	r3, [r7, #20]
10005024:	3304      	adds	r3, #4
10005026:	617b      	str	r3, [r7, #20]
10005028:	697a      	ldr	r2, [r7, #20]
1000502a:	4b35      	ldr	r3, [pc, #212]	; (10005100 <runtime_init+0x100>)
1000502c:	429a      	cmp	r2, r3
1000502e:	d3f5      	bcc.n	1000501c <runtime_init+0x1c>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
10005030:	f7fd f82c 	bl	1000208c <clocks_init>

    // Peripheral clocks should now all be running
    unreset_block_wait(RESETS_RESET_BITS);
10005034:	4b33      	ldr	r3, [pc, #204]	; (10005104 <runtime_init+0x104>)
10005036:	0018      	movs	r0, r3
10005038:	f7ff ffc4 	bl	10004fc4 <unreset_block_wait>

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
1000503c:	4a32      	ldr	r2, [pc, #200]	; (10005108 <runtime_init+0x108>)
1000503e:	2340      	movs	r3, #64	; 0x40
10005040:	6793      	str	r3, [r2, #120]	; 0x78
10005042:	4a31      	ldr	r2, [pc, #196]	; (10005108 <runtime_init+0x108>)
10005044:	6753      	str	r3, [r2, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10005046:	4a30      	ldr	r2, [pc, #192]	; (10005108 <runtime_init+0x108>)
10005048:	6713      	str	r3, [r2, #112]	; 0x70
1000504a:	4a2f      	ldr	r2, [pc, #188]	; (10005108 <runtime_init+0x108>)
1000504c:	66d3      	str	r3, [r2, #108]	; 0x6c
    static_assert(!offsetof(mutex_t, core), "");
    static_assert(!offsetof(recursive_mutex_t, core), "");
    extern lock_core_t __mutex_array_start;
    extern lock_core_t __mutex_array_end;

    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
1000504e:	4b2f      	ldr	r3, [pc, #188]	; (1000510c <runtime_init+0x10c>)
10005050:	613b      	str	r3, [r7, #16]
10005052:	e020      	b.n	10005096 <runtime_init+0x96>
        if (l->spin_lock) {
10005054:	693b      	ldr	r3, [r7, #16]
10005056:	681b      	ldr	r3, [r3, #0]
10005058:	2b00      	cmp	r3, #0
1000505a:	d013      	beq.n	10005084 <runtime_init+0x84>
            assert(1 == (uintptr_t)l->spin_lock); // indicator for a recursive mutex
1000505c:	693b      	ldr	r3, [r7, #16]
1000505e:	681b      	ldr	r3, [r3, #0]
10005060:	2b01      	cmp	r3, #1
10005062:	d005      	beq.n	10005070 <runtime_init+0x70>
10005064:	4b2a      	ldr	r3, [pc, #168]	; (10005110 <runtime_init+0x110>)
10005066:	4a2b      	ldr	r2, [pc, #172]	; (10005114 <runtime_init+0x114>)
10005068:	482b      	ldr	r0, [pc, #172]	; (10005118 <runtime_init+0x118>)
1000506a:	2183      	movs	r1, #131	; 0x83
1000506c:	f000 f89c 	bl	100051a8 <__assert_func>
            recursive_mutex_t *rm = (recursive_mutex_t *)l;
10005070:	693b      	ldr	r3, [r7, #16]
10005072:	607b      	str	r3, [r7, #4]
            recursive_mutex_init(rm);
10005074:	687b      	ldr	r3, [r7, #4]
10005076:	0018      	movs	r0, r3
10005078:	f7fb fac5 	bl	10000606 <recursive_mutex_init>
            l = &rm[1].core; // next
1000507c:	687b      	ldr	r3, [r7, #4]
1000507e:	3308      	adds	r3, #8
10005080:	613b      	str	r3, [r7, #16]
10005082:	e008      	b.n	10005096 <runtime_init+0x96>
        } else {
            mutex_t *m = (mutex_t *)l;
10005084:	693b      	ldr	r3, [r7, #16]
10005086:	60bb      	str	r3, [r7, #8]
            mutex_init(m);
10005088:	68bb      	ldr	r3, [r7, #8]
1000508a:	0018      	movs	r0, r3
1000508c:	f7fb faa4 	bl	100005d8 <mutex_init>
            l = &m[1].core; // next
10005090:	68bb      	ldr	r3, [r7, #8]
10005092:	3308      	adds	r3, #8
10005094:	613b      	str	r3, [r7, #16]
    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
10005096:	693a      	ldr	r2, [r7, #16]
10005098:	4b20      	ldr	r3, [pc, #128]	; (1000511c <runtime_init+0x11c>)
1000509a:	429a      	cmp	r2, r3
1000509c:	d3da      	bcc.n	10005054 <runtime_init+0x54>
        }
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
1000509e:	4b20      	ldr	r3, [pc, #128]	; (10005120 <runtime_init+0x120>)
100050a0:	689b      	ldr	r3, [r3, #8]
100050a2:	001a      	movs	r2, r3
100050a4:	4b1f      	ldr	r3, [pc, #124]	; (10005124 <runtime_init+0x124>)
100050a6:	0018      	movs	r0, r3
100050a8:	0011      	movs	r1, r2
100050aa:	23c0      	movs	r3, #192	; 0xc0
100050ac:	001a      	movs	r2, r3
100050ae:	f001 f98b 	bl	100063c8 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (uintptr_t) ram_vector_table;
100050b2:	4b1b      	ldr	r3, [pc, #108]	; (10005120 <runtime_init+0x120>)
100050b4:	4a1b      	ldr	r2, [pc, #108]	; (10005124 <runtime_init+0x124>)
100050b6:	609a      	str	r2, [r3, #8]
#endif

#ifndef NDEBUG
    if (__get_current_exception()) {
100050b8:	f7fb f8ed 	bl	10000296 <__get_current_exception>
100050bc:	1e03      	subs	r3, r0, #0
100050be:	d000      	beq.n	100050c2 <runtime_init+0xc2>
        // crap; started in exception handler
        __asm ("bkpt #0");
100050c0:	be00      	bkpt	0x0000
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
100050c2:	f7fd fdf5 	bl	10002cb0 <spin_locks_reset>
    irq_init_priorities();
100050c6:	f7fd fccf 	bl	10002a68 <irq_init_priorities>
    alarm_pool_init_default();
100050ca:	f7fb fe0d 	bl	10000ce8 <alarm_pool_init_default>
    extern void (*__init_array_end)(void);

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
100050ce:	4b16      	ldr	r3, [pc, #88]	; (10005128 <runtime_init+0x128>)
100050d0:	60fb      	str	r3, [r7, #12]
100050d2:	e005      	b.n	100050e0 <runtime_init+0xe0>
        (*p)();
100050d4:	68fb      	ldr	r3, [r7, #12]
100050d6:	681b      	ldr	r3, [r3, #0]
100050d8:	4798      	blx	r3
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
100050da:	68fb      	ldr	r3, [r7, #12]
100050dc:	3304      	adds	r3, #4
100050de:	60fb      	str	r3, [r7, #12]
100050e0:	68fa      	ldr	r2, [r7, #12]
100050e2:	4b12      	ldr	r3, [pc, #72]	; (1000512c <runtime_init+0x12c>)
100050e4:	429a      	cmp	r2, r3
100050e6:	d3f5      	bcc.n	100050d4 <runtime_init+0xd4>
    }

}
100050e8:	46c0      	nop			; (mov r8, r8)
100050ea:	46c0      	nop			; (mov r8, r8)
100050ec:	46bd      	mov	sp, r7
100050ee:	b006      	add	sp, #24
100050f0:	bd80      	pop	{r7, pc}
100050f2:	46c0      	nop			; (mov r8, r8)
100050f4:	fefbcdbf 	.word	0xfefbcdbf
100050f8:	003c7ffe 	.word	0x003c7ffe
100050fc:	20000bc8 	.word	0x20000bc8
10005100:	20000bd8 	.word	0x20000bd8
10005104:	01ffffff 	.word	0x01ffffff
10005108:	4001f000 	.word	0x4001f000
1000510c:	20000bc0 	.word	0x20000bc0
10005110:	10007e00 	.word	0x10007e00
10005114:	10007eec 	.word	0x10007eec
10005118:	10007e20 	.word	0x10007e20
1000511c:	20000bc8 	.word	0x20000bc8
10005120:	e000ed00 	.word	0xe000ed00
10005124:	20000000 	.word	0x20000000
10005128:	20000bd8 	.word	0x20000bd8
1000512c:	20000bf0 	.word	0x20000bf0

10005130 <_exit>:

void __attribute__((noreturn)) _exit(__unused int status) {
10005130:	b580      	push	{r7, lr}
10005132:	b082      	sub	sp, #8
10005134:	af00      	add	r7, sp, #0
10005136:	6078      	str	r0, [r7, #4]
#if PICO_ENTER_USB_BOOT_ON_EXIT
    reset_usb_boot(0,0);
#else
    while (1) {
        __breakpoint();
10005138:	f7ff ff28 	bl	10004f8c <__breakpoint>
1000513c:	e7fc      	b.n	10005138 <_exit+0x8>
	...

10005140 <_sbrk>:
    }
#endif
}

void *_sbrk(int incr) {
10005140:	b580      	push	{r7, lr}
10005142:	b084      	sub	sp, #16
10005144:	af00      	add	r7, sp, #0
10005146:	6078      	str	r0, [r7, #4]
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10005148:	4b10      	ldr	r3, [pc, #64]	; (1000518c <_sbrk+0x4c>)
1000514a:	681b      	ldr	r3, [r3, #0]
1000514c:	2b00      	cmp	r3, #0
1000514e:	d102      	bne.n	10005156 <_sbrk+0x16>
        heap_end = &end;
10005150:	4b0e      	ldr	r3, [pc, #56]	; (1000518c <_sbrk+0x4c>)
10005152:	4a0f      	ldr	r2, [pc, #60]	; (10005190 <_sbrk+0x50>)
10005154:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
10005156:	4b0d      	ldr	r3, [pc, #52]	; (1000518c <_sbrk+0x4c>)
10005158:	681b      	ldr	r3, [r3, #0]
1000515a:	60fb      	str	r3, [r7, #12]
    char *next_heap_end = heap_end + incr;
1000515c:	4b0b      	ldr	r3, [pc, #44]	; (1000518c <_sbrk+0x4c>)
1000515e:	681a      	ldr	r2, [r3, #0]
10005160:	687b      	ldr	r3, [r7, #4]
10005162:	18d3      	adds	r3, r2, r3
10005164:	60bb      	str	r3, [r7, #8]

    if (__builtin_expect(next_heap_end > (&__StackLimit), false)) {
10005166:	68bb      	ldr	r3, [r7, #8]
10005168:	4a0a      	ldr	r2, [pc, #40]	; (10005194 <_sbrk+0x54>)
1000516a:	429a      	cmp	r2, r3
1000516c:	419b      	sbcs	r3, r3
1000516e:	425b      	negs	r3, r3
10005170:	b2db      	uxtb	r3, r3
10005172:	2b00      	cmp	r3, #0
10005174:	d002      	beq.n	1000517c <_sbrk+0x3c>
//        errno = ENOMEM;
            return (char *) -1;
        }
        next_heap_end = &__StackLimit;
#else
        return (char *) -1;
10005176:	2301      	movs	r3, #1
10005178:	425b      	negs	r3, r3
1000517a:	e003      	b.n	10005184 <_sbrk+0x44>
#endif
    }

    heap_end = next_heap_end;
1000517c:	4b03      	ldr	r3, [pc, #12]	; (1000518c <_sbrk+0x4c>)
1000517e:	68ba      	ldr	r2, [r7, #8]
10005180:	601a      	str	r2, [r3, #0]
    return (void *) prev_heap_end;
10005182:	68fb      	ldr	r3, [r7, #12]
}
10005184:	0018      	movs	r0, r3
10005186:	46bd      	mov	sp, r7
10005188:	b004      	add	sp, #16
1000518a:	bd80      	pop	{r7, pc}
1000518c:	20001430 	.word	0x20001430
10005190:	20001660 	.word	0x20001660
10005194:	20040000 	.word	0x20040000

10005198 <exit>:

// exit is not useful... no desire to pull in __call_exitprocs
void exit(int status) {
10005198:	b580      	push	{r7, lr}
1000519a:	b082      	sub	sp, #8
1000519c:	af00      	add	r7, sp, #0
1000519e:	6078      	str	r0, [r7, #4]
    _exit(status);
100051a0:	687b      	ldr	r3, [r7, #4]
100051a2:	0018      	movs	r0, r3
100051a4:	f7ff ffc4 	bl	10005130 <_exit>

100051a8 <__assert_func>:
}

// incorrect warning from GCC 6
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsuggest-attribute=format"
void __assert_func(const char *file, int line, const char *func, const char *failedexpr) {
100051a8:	b5b0      	push	{r4, r5, r7, lr}
100051aa:	b086      	sub	sp, #24
100051ac:	af02      	add	r7, sp, #8
100051ae:	60f8      	str	r0, [r7, #12]
100051b0:	60b9      	str	r1, [r7, #8]
100051b2:	607a      	str	r2, [r7, #4]
100051b4:	603b      	str	r3, [r7, #0]
    weak_raw_printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
100051b6:	687b      	ldr	r3, [r7, #4]
100051b8:	2b00      	cmp	r3, #0
100051ba:	d001      	beq.n	100051c0 <__assert_func+0x18>
100051bc:	4b0a      	ldr	r3, [pc, #40]	; (100051e8 <__assert_func+0x40>)
100051be:	e000      	b.n	100051c2 <__assert_func+0x1a>
100051c0:	4b0a      	ldr	r3, [pc, #40]	; (100051ec <__assert_func+0x44>)
100051c2:	687a      	ldr	r2, [r7, #4]
100051c4:	2a00      	cmp	r2, #0
100051c6:	d001      	beq.n	100051cc <__assert_func+0x24>
100051c8:	687a      	ldr	r2, [r7, #4]
100051ca:	e000      	b.n	100051ce <__assert_func+0x26>
100051cc:	4a07      	ldr	r2, [pc, #28]	; (100051ec <__assert_func+0x44>)
100051ce:	68bd      	ldr	r5, [r7, #8]
100051d0:	68fc      	ldr	r4, [r7, #12]
100051d2:	6839      	ldr	r1, [r7, #0]
100051d4:	4806      	ldr	r0, [pc, #24]	; (100051f0 <__assert_func+0x48>)
100051d6:	9201      	str	r2, [sp, #4]
100051d8:	9300      	str	r3, [sp, #0]
100051da:	002b      	movs	r3, r5
100051dc:	0022      	movs	r2, r4
100051de:	f000 fa09 	bl	100055f4 <__wrap_printf>
           failedexpr, file, line, func ? ", function: " : "",
           func ? func : "");

    _exit(1);
100051e2:	2001      	movs	r0, #1
100051e4:	f7ff ffa4 	bl	10005130 <_exit>
100051e8:	10007e78 	.word	0x10007e78
100051ec:	10007e88 	.word	0x10007e88
100051f0:	10007e8c 	.word	0x10007e8c

100051f4 <panic>:
// todo consider making this try harder to output if we panic early
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
100051f4:	b40f      	push	{r0, r1, r2, r3}
100051f6:	b580      	push	{r7, lr}
100051f8:	b082      	sub	sp, #8
100051fa:	af00      	add	r7, sp, #0
    puts("\n*** PANIC ***\n");
100051fc:	4b0b      	ldr	r3, [pc, #44]	; (1000522c <panic+0x38>)
100051fe:	0018      	movs	r0, r3
10005200:	f000 f93c 	bl	1000547c <__wrap_puts>
    if (fmt) {
10005204:	693b      	ldr	r3, [r7, #16]
10005206:	2b00      	cmp	r3, #0
10005208:	d00c      	beq.n	10005224 <panic+0x30>
#if LIB_PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
1000520a:	2314      	movs	r3, #20
1000520c:	18fb      	adds	r3, r7, r3
1000520e:	607b      	str	r3, [r7, #4]
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
10005210:	687a      	ldr	r2, [r7, #4]
10005212:	693b      	ldr	r3, [r7, #16]
10005214:	0011      	movs	r1, r2
10005216:	0018      	movs	r0, r3
10005218:	f000 f9ba 	bl	10005590 <__wrap_vprintf>
#else
        weak_raw_vprintf(fmt, args);
#endif
        va_end(args);
        puts("\n");
1000521c:	4b04      	ldr	r3, [pc, #16]	; (10005230 <panic+0x3c>)
1000521e:	0018      	movs	r0, r3
10005220:	f000 f92c 	bl	1000547c <__wrap_puts>
#endif
    }

    _exit(1);
10005224:	2001      	movs	r0, #1
10005226:	f7ff ff83 	bl	10005130 <_exit>
1000522a:	46c0      	nop			; (mov r8, r8)
1000522c:	10007ecc 	.word	0x10007ecc
10005230:	10007edc 	.word	0x10007edc

10005234 <stdout_serialize_begin>:
static stdio_driver_t *filter;

#if PICO_STDOUT_MUTEX
auto_init_mutex(print_mutex);

bool stdout_serialize_begin(void) {
10005234:	b580      	push	{r7, lr}
10005236:	b082      	sub	sp, #8
10005238:	af00      	add	r7, sp, #0
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000523a:	23d0      	movs	r3, #208	; 0xd0
1000523c:	061b      	lsls	r3, r3, #24
1000523e:	681a      	ldr	r2, [r3, #0]
    lock_owner_id_t caller = lock_get_caller_owner_id();
10005240:	1dfb      	adds	r3, r7, #7
10005242:	701a      	strb	r2, [r3, #0]
    // not using lock_owner_id_t to avoid backwards incompatibility change to mutex_try_enter API
    static_assert(sizeof(lock_owner_id_t) <= 4, "");
    uint32_t owner;
    if (!mutex_try_enter(&print_mutex, &owner)) {
10005244:	003a      	movs	r2, r7
10005246:	4b0e      	ldr	r3, [pc, #56]	; (10005280 <stdout_serialize_begin+0x4c>)
10005248:	0011      	movs	r1, r2
1000524a:	0018      	movs	r0, r3
1000524c:	f001 fd3c 	bl	10006cc8 <__mutex_try_enter_veneer>
10005250:	0003      	movs	r3, r0
10005252:	001a      	movs	r2, r3
10005254:	2301      	movs	r3, #1
10005256:	4053      	eors	r3, r2
10005258:	b2db      	uxtb	r3, r3
1000525a:	2b00      	cmp	r3, #0
1000525c:	d00b      	beq.n	10005276 <stdout_serialize_begin+0x42>
        if (owner == (uint32_t)caller) {
1000525e:	1dfb      	adds	r3, r7, #7
10005260:	2200      	movs	r2, #0
10005262:	569a      	ldrsb	r2, [r3, r2]
10005264:	683b      	ldr	r3, [r7, #0]
10005266:	429a      	cmp	r2, r3
10005268:	d101      	bne.n	1000526e <stdout_serialize_begin+0x3a>
            return false;
1000526a:	2300      	movs	r3, #0
1000526c:	e004      	b.n	10005278 <stdout_serialize_begin+0x44>
        }
        // we are not a nested call, so lets wait
        mutex_enter_blocking(&print_mutex);
1000526e:	4b04      	ldr	r3, [pc, #16]	; (10005280 <stdout_serialize_begin+0x4c>)
10005270:	0018      	movs	r0, r3
10005272:	f001 fd21 	bl	10006cb8 <__mutex_enter_blocking_veneer>
    }
    return true;
10005276:	2301      	movs	r3, #1
}
10005278:	0018      	movs	r0, r3
1000527a:	46bd      	mov	sp, r7
1000527c:	b002      	add	sp, #8
1000527e:	bd80      	pop	{r7, pc}
10005280:	20000bc0 	.word	0x20000bc0

10005284 <stdout_serialize_end>:

void stdout_serialize_end(void) {
10005284:	b580      	push	{r7, lr}
10005286:	af00      	add	r7, sp, #0
    mutex_exit(&print_mutex);
10005288:	4b03      	ldr	r3, [pc, #12]	; (10005298 <stdout_serialize_end+0x14>)
1000528a:	0018      	movs	r0, r3
1000528c:	f001 fd10 	bl	10006cb0 <__mutex_exit_veneer>
}
10005290:	46c0      	nop			; (mov r8, r8)
10005292:	46bd      	mov	sp, r7
10005294:	bd80      	pop	{r7, pc}
10005296:	46c0      	nop			; (mov r8, r8)
10005298:	20000bc0 	.word	0x20000bc0

1000529c <stdio_out_chars_no_crlf>:
    return true;
}
static void stdout_serialize_end(void) {
}
#endif
static void stdio_out_chars_no_crlf(stdio_driver_t *driver, const char *s, int len) {
1000529c:	b580      	push	{r7, lr}
1000529e:	b084      	sub	sp, #16
100052a0:	af00      	add	r7, sp, #0
100052a2:	60f8      	str	r0, [r7, #12]
100052a4:	60b9      	str	r1, [r7, #8]
100052a6:	607a      	str	r2, [r7, #4]
    driver->out_chars(s, len);
100052a8:	68fb      	ldr	r3, [r7, #12]
100052aa:	681b      	ldr	r3, [r3, #0]
100052ac:	6879      	ldr	r1, [r7, #4]
100052ae:	68ba      	ldr	r2, [r7, #8]
100052b0:	0010      	movs	r0, r2
100052b2:	4798      	blx	r3
}
100052b4:	46c0      	nop			; (mov r8, r8)
100052b6:	46bd      	mov	sp, r7
100052b8:	b004      	add	sp, #16
100052ba:	bd80      	pop	{r7, pc}

100052bc <stdio_out_chars_crlf>:

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
100052bc:	b580      	push	{r7, lr}
100052be:	b088      	sub	sp, #32
100052c0:	af00      	add	r7, sp, #0
100052c2:	60f8      	str	r0, [r7, #12]
100052c4:	60b9      	str	r1, [r7, #8]
100052c6:	607a      	str	r2, [r7, #4]
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    if (!driver->crlf_enabled) {
100052c8:	68fb      	ldr	r3, [r7, #12]
100052ca:	7c5b      	ldrb	r3, [r3, #17]
100052cc:	2201      	movs	r2, #1
100052ce:	4053      	eors	r3, r2
100052d0:	b2db      	uxtb	r3, r3
100052d2:	2b00      	cmp	r3, #0
100052d4:	d006      	beq.n	100052e4 <stdio_out_chars_crlf+0x28>
        driver->out_chars(s, len);
100052d6:	68fb      	ldr	r3, [r7, #12]
100052d8:	681b      	ldr	r3, [r3, #0]
100052da:	6879      	ldr	r1, [r7, #4]
100052dc:	68ba      	ldr	r2, [r7, #8]
100052de:	0010      	movs	r0, r2
100052e0:	4798      	blx	r3
        return;
100052e2:	e060      	b.n	100053a6 <stdio_out_chars_crlf+0xea>
    }
    int first_of_chunk = 0;
100052e4:	2300      	movs	r3, #0
100052e6:	61fb      	str	r3, [r7, #28]
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
100052e8:	2300      	movs	r3, #0
100052ea:	61bb      	str	r3, [r7, #24]
100052ec:	e03b      	b.n	10005366 <stdio_out_chars_crlf+0xaa>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
100052ee:	69bb      	ldr	r3, [r7, #24]
100052f0:	2b00      	cmp	r3, #0
100052f2:	dd09      	ble.n	10005308 <stdio_out_chars_crlf+0x4c>
100052f4:	69bb      	ldr	r3, [r7, #24]
100052f6:	3b01      	subs	r3, #1
100052f8:	68ba      	ldr	r2, [r7, #8]
100052fa:	18d3      	adds	r3, r2, r3
100052fc:	781b      	ldrb	r3, [r3, #0]
100052fe:	3b0d      	subs	r3, #13
10005300:	425a      	negs	r2, r3
10005302:	4153      	adcs	r3, r2
10005304:	b2db      	uxtb	r3, r3
10005306:	e004      	b.n	10005312 <stdio_out_chars_crlf+0x56>
10005308:	68fb      	ldr	r3, [r7, #12]
1000530a:	7c1b      	ldrb	r3, [r3, #16]
1000530c:	1e5a      	subs	r2, r3, #1
1000530e:	4193      	sbcs	r3, r2
10005310:	b2db      	uxtb	r3, r3
10005312:	2117      	movs	r1, #23
10005314:	187a      	adds	r2, r7, r1
10005316:	7013      	strb	r3, [r2, #0]
        if (s[i] == '\n' && !prev_char_was_cr) {
10005318:	69bb      	ldr	r3, [r7, #24]
1000531a:	68ba      	ldr	r2, [r7, #8]
1000531c:	18d3      	adds	r3, r2, r3
1000531e:	781b      	ldrb	r3, [r3, #0]
10005320:	2b0a      	cmp	r3, #10
10005322:	d11d      	bne.n	10005360 <stdio_out_chars_crlf+0xa4>
10005324:	187b      	adds	r3, r7, r1
10005326:	781b      	ldrb	r3, [r3, #0]
10005328:	2201      	movs	r2, #1
1000532a:	4053      	eors	r3, r2
1000532c:	b2db      	uxtb	r3, r3
1000532e:	2b00      	cmp	r3, #0
10005330:	d016      	beq.n	10005360 <stdio_out_chars_crlf+0xa4>
            if (i > first_of_chunk) {
10005332:	69ba      	ldr	r2, [r7, #24]
10005334:	69fb      	ldr	r3, [r7, #28]
10005336:	429a      	cmp	r2, r3
10005338:	dd09      	ble.n	1000534e <stdio_out_chars_crlf+0x92>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
1000533a:	68fb      	ldr	r3, [r7, #12]
1000533c:	681b      	ldr	r3, [r3, #0]
1000533e:	69fa      	ldr	r2, [r7, #28]
10005340:	68b9      	ldr	r1, [r7, #8]
10005342:	1888      	adds	r0, r1, r2
10005344:	69b9      	ldr	r1, [r7, #24]
10005346:	69fa      	ldr	r2, [r7, #28]
10005348:	1a8a      	subs	r2, r1, r2
1000534a:	0011      	movs	r1, r2
1000534c:	4798      	blx	r3
            }
            driver->out_chars(crlf_str, 2);
1000534e:	68fb      	ldr	r3, [r7, #12]
10005350:	681b      	ldr	r3, [r3, #0]
10005352:	4a16      	ldr	r2, [pc, #88]	; (100053ac <stdio_out_chars_crlf+0xf0>)
10005354:	2102      	movs	r1, #2
10005356:	0010      	movs	r0, r2
10005358:	4798      	blx	r3
            first_of_chunk = i + 1;
1000535a:	69bb      	ldr	r3, [r7, #24]
1000535c:	3301      	adds	r3, #1
1000535e:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < len; i++) {
10005360:	69bb      	ldr	r3, [r7, #24]
10005362:	3301      	adds	r3, #1
10005364:	61bb      	str	r3, [r7, #24]
10005366:	69ba      	ldr	r2, [r7, #24]
10005368:	687b      	ldr	r3, [r7, #4]
1000536a:	429a      	cmp	r2, r3
1000536c:	dbbf      	blt.n	100052ee <stdio_out_chars_crlf+0x32>
        }
    }
    if (first_of_chunk < len) {
1000536e:	69fa      	ldr	r2, [r7, #28]
10005370:	687b      	ldr	r3, [r7, #4]
10005372:	429a      	cmp	r2, r3
10005374:	da09      	bge.n	1000538a <stdio_out_chars_crlf+0xce>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10005376:	68fb      	ldr	r3, [r7, #12]
10005378:	681b      	ldr	r3, [r3, #0]
1000537a:	69fa      	ldr	r2, [r7, #28]
1000537c:	68b9      	ldr	r1, [r7, #8]
1000537e:	1888      	adds	r0, r1, r2
10005380:	6879      	ldr	r1, [r7, #4]
10005382:	69fa      	ldr	r2, [r7, #28]
10005384:	1a8a      	subs	r2, r1, r2
10005386:	0011      	movs	r1, r2
10005388:	4798      	blx	r3
    }
    if (len > 0) {
1000538a:	687b      	ldr	r3, [r7, #4]
1000538c:	2b00      	cmp	r3, #0
1000538e:	dd0a      	ble.n	100053a6 <stdio_out_chars_crlf+0xea>
        driver->last_ended_with_cr = s[len - 1] == '\r';
10005390:	687b      	ldr	r3, [r7, #4]
10005392:	3b01      	subs	r3, #1
10005394:	68ba      	ldr	r2, [r7, #8]
10005396:	18d3      	adds	r3, r2, r3
10005398:	781b      	ldrb	r3, [r3, #0]
1000539a:	3b0d      	subs	r3, #13
1000539c:	425a      	negs	r2, r3
1000539e:	4153      	adcs	r3, r2
100053a0:	b2da      	uxtb	r2, r3
100053a2:	68fb      	ldr	r3, [r7, #12]
100053a4:	741a      	strb	r2, [r3, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
100053a6:	46bd      	mov	sp, r7
100053a8:	b008      	add	sp, #32
100053aa:	bd80      	pop	{r7, pc}
100053ac:	10007f5c 	.word	0x10007f5c

100053b0 <stdio_put_string>:

static bool stdio_put_string(const char *s, int len, bool newline, bool no_cr) {
100053b0:	b590      	push	{r4, r7, lr}
100053b2:	b089      	sub	sp, #36	; 0x24
100053b4:	af00      	add	r7, sp, #0
100053b6:	60f8      	str	r0, [r7, #12]
100053b8:	60b9      	str	r1, [r7, #8]
100053ba:	0019      	movs	r1, r3
100053bc:	1dfb      	adds	r3, r7, #7
100053be:	701a      	strb	r2, [r3, #0]
100053c0:	1dbb      	adds	r3, r7, #6
100053c2:	1c0a      	adds	r2, r1, #0
100053c4:	701a      	strb	r2, [r3, #0]
    bool serialized = stdout_serialize_begin();
100053c6:	231b      	movs	r3, #27
100053c8:	18fc      	adds	r4, r7, r3
100053ca:	f7ff ff33 	bl	10005234 <stdout_serialize_begin>
100053ce:	0003      	movs	r3, r0
100053d0:	7023      	strb	r3, [r4, #0]
    if (!serialized) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = (int)strlen(s);
100053d2:	68bb      	ldr	r3, [r7, #8]
100053d4:	3301      	adds	r3, #1
100053d6:	d105      	bne.n	100053e4 <stdio_put_string+0x34>
100053d8:	68fb      	ldr	r3, [r7, #12]
100053da:	0018      	movs	r0, r3
100053dc:	f001 fb02 	bl	100069e4 <strlen>
100053e0:	0003      	movs	r3, r0
100053e2:	60bb      	str	r3, [r7, #8]
    void (*out_func)(stdio_driver_t *, const char *, int) = no_cr ? stdio_out_chars_no_crlf : stdio_out_chars_crlf;
100053e4:	1dbb      	adds	r3, r7, #6
100053e6:	781b      	ldrb	r3, [r3, #0]
100053e8:	2b00      	cmp	r3, #0
100053ea:	d001      	beq.n	100053f0 <stdio_put_string+0x40>
100053ec:	4b1f      	ldr	r3, [pc, #124]	; (1000546c <stdio_put_string+0xbc>)
100053ee:	e000      	b.n	100053f2 <stdio_put_string+0x42>
100053f0:	4b1f      	ldr	r3, [pc, #124]	; (10005470 <stdio_put_string+0xc0>)
100053f2:	617b      	str	r3, [r7, #20]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
100053f4:	4b1f      	ldr	r3, [pc, #124]	; (10005474 <stdio_put_string+0xc4>)
100053f6:	681b      	ldr	r3, [r3, #0]
100053f8:	61fb      	str	r3, [r7, #28]
100053fa:	e025      	b.n	10005448 <stdio_put_string+0x98>
        if (!driver->out_chars) continue;
100053fc:	69fb      	ldr	r3, [r7, #28]
100053fe:	681b      	ldr	r3, [r3, #0]
10005400:	2b00      	cmp	r3, #0
10005402:	d01b      	beq.n	1000543c <stdio_put_string+0x8c>
        if (filter && filter != driver) continue;
10005404:	4b1c      	ldr	r3, [pc, #112]	; (10005478 <stdio_put_string+0xc8>)
10005406:	681b      	ldr	r3, [r3, #0]
10005408:	2b00      	cmp	r3, #0
1000540a:	d004      	beq.n	10005416 <stdio_put_string+0x66>
1000540c:	4b1a      	ldr	r3, [pc, #104]	; (10005478 <stdio_put_string+0xc8>)
1000540e:	681b      	ldr	r3, [r3, #0]
10005410:	69fa      	ldr	r2, [r7, #28]
10005412:	429a      	cmp	r2, r3
10005414:	d114      	bne.n	10005440 <stdio_put_string+0x90>
        out_func(driver, s, len);
10005416:	68ba      	ldr	r2, [r7, #8]
10005418:	68f9      	ldr	r1, [r7, #12]
1000541a:	69f8      	ldr	r0, [r7, #28]
1000541c:	697b      	ldr	r3, [r7, #20]
1000541e:	4798      	blx	r3
        if (newline) {
10005420:	1dfb      	adds	r3, r7, #7
10005422:	781b      	ldrb	r3, [r3, #0]
10005424:	2b00      	cmp	r3, #0
10005426:	d00c      	beq.n	10005442 <stdio_put_string+0x92>
            const char c = '\n';
10005428:	2113      	movs	r1, #19
1000542a:	187b      	adds	r3, r7, r1
1000542c:	220a      	movs	r2, #10
1000542e:	701a      	strb	r2, [r3, #0]
            out_func(driver, &c, 1);
10005430:	1879      	adds	r1, r7, r1
10005432:	69f8      	ldr	r0, [r7, #28]
10005434:	697b      	ldr	r3, [r7, #20]
10005436:	2201      	movs	r2, #1
10005438:	4798      	blx	r3
1000543a:	e002      	b.n	10005442 <stdio_put_string+0x92>
        if (!driver->out_chars) continue;
1000543c:	46c0      	nop			; (mov r8, r8)
1000543e:	e000      	b.n	10005442 <stdio_put_string+0x92>
        if (filter && filter != driver) continue;
10005440:	46c0      	nop			; (mov r8, r8)
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10005442:	69fb      	ldr	r3, [r7, #28]
10005444:	68db      	ldr	r3, [r3, #12]
10005446:	61fb      	str	r3, [r7, #28]
10005448:	69fb      	ldr	r3, [r7, #28]
1000544a:	2b00      	cmp	r3, #0
1000544c:	d1d6      	bne.n	100053fc <stdio_put_string+0x4c>
        }
    }
    if (serialized) {
1000544e:	231b      	movs	r3, #27
10005450:	18fb      	adds	r3, r7, r3
10005452:	781b      	ldrb	r3, [r3, #0]
10005454:	2b00      	cmp	r3, #0
10005456:	d001      	beq.n	1000545c <stdio_put_string+0xac>
        stdout_serialize_end();
10005458:	f7ff ff14 	bl	10005284 <stdout_serialize_end>
    }
    return len;
1000545c:	68bb      	ldr	r3, [r7, #8]
1000545e:	1e5a      	subs	r2, r3, #1
10005460:	4193      	sbcs	r3, r2
10005462:	b2db      	uxtb	r3, r3
}
10005464:	0018      	movs	r0, r3
10005466:	46bd      	mov	sp, r7
10005468:	b009      	add	sp, #36	; 0x24
1000546a:	bd90      	pop	{r4, r7, pc}
1000546c:	1000529d 	.word	0x1000529d
10005470:	100052bd 	.word	0x100052bd
10005474:	20000f8c 	.word	0x20000f8c
10005478:	20000f94 	.word	0x20000f94

1000547c <__wrap_puts>:
    char cc = (char)c;
    stdio_put_string(&cc, 1, false, false);
    return c;
}

int WRAPPER_FUNC(puts)(const char *s) {
1000547c:	b580      	push	{r7, lr}
1000547e:	b084      	sub	sp, #16
10005480:	af00      	add	r7, sp, #0
10005482:	6078      	str	r0, [r7, #4]
    int len = (int)strlen(s);
10005484:	687b      	ldr	r3, [r7, #4]
10005486:	0018      	movs	r0, r3
10005488:	f001 faac 	bl	100069e4 <strlen>
1000548c:	0003      	movs	r3, r0
1000548e:	60fb      	str	r3, [r7, #12]
    stdio_put_string(s, len, true, false);
10005490:	68f9      	ldr	r1, [r7, #12]
10005492:	6878      	ldr	r0, [r7, #4]
10005494:	2300      	movs	r3, #0
10005496:	2201      	movs	r2, #1
10005498:	f7ff ff8a 	bl	100053b0 <stdio_put_string>
    stdio_flush();
1000549c:	f000 f806 	bl	100054ac <stdio_flush>
    return len;
100054a0:	68fb      	ldr	r3, [r7, #12]
}
100054a2:	0018      	movs	r0, r3
100054a4:	46bd      	mov	sp, r7
100054a6:	b004      	add	sp, #16
100054a8:	bd80      	pop	{r7, pc}
	...

100054ac <stdio_flush>:
    if (enable) {
        *prev = driver;
    }
}

void stdio_flush() {
100054ac:	b580      	push	{r7, lr}
100054ae:	b082      	sub	sp, #8
100054b0:	af00      	add	r7, sp, #0
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100054b2:	4b0b      	ldr	r3, [pc, #44]	; (100054e0 <stdio_flush+0x34>)
100054b4:	681b      	ldr	r3, [r3, #0]
100054b6:	607b      	str	r3, [r7, #4]
100054b8:	e009      	b.n	100054ce <stdio_flush+0x22>
        if (d->out_flush) d->out_flush();
100054ba:	687b      	ldr	r3, [r7, #4]
100054bc:	685b      	ldr	r3, [r3, #4]
100054be:	2b00      	cmp	r3, #0
100054c0:	d002      	beq.n	100054c8 <stdio_flush+0x1c>
100054c2:	687b      	ldr	r3, [r7, #4]
100054c4:	685b      	ldr	r3, [r3, #4]
100054c6:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100054c8:	687b      	ldr	r3, [r7, #4]
100054ca:	68db      	ldr	r3, [r3, #12]
100054cc:	607b      	str	r3, [r7, #4]
100054ce:	687b      	ldr	r3, [r7, #4]
100054d0:	2b00      	cmp	r3, #0
100054d2:	d1f2      	bne.n	100054ba <stdio_flush+0xe>
    }
}
100054d4:	46c0      	nop			; (mov r8, r8)
100054d6:	46c0      	nop			; (mov r8, r8)
100054d8:	46bd      	mov	sp, r7
100054da:	b002      	add	sp, #8
100054dc:	bd80      	pop	{r7, pc}
100054de:	46c0      	nop			; (mov r8, r8)
100054e0:	20000f8c 	.word	0x20000f8c

100054e4 <stdio_stack_buffer_flush>:
typedef struct stdio_stack_buffer {
    int used;
    char buf[PICO_STDIO_STACK_BUFFER_SIZE];
} stdio_stack_buffer_t;

static void stdio_stack_buffer_flush(stdio_stack_buffer_t *buffer) {
100054e4:	b580      	push	{r7, lr}
100054e6:	b084      	sub	sp, #16
100054e8:	af00      	add	r7, sp, #0
100054ea:	6078      	str	r0, [r7, #4]
    if (buffer->used) {
100054ec:	687b      	ldr	r3, [r7, #4]
100054ee:	681b      	ldr	r3, [r3, #0]
100054f0:	2b00      	cmp	r3, #0
100054f2:	d025      	beq.n	10005540 <stdio_stack_buffer_flush+0x5c>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
100054f4:	4b14      	ldr	r3, [pc, #80]	; (10005548 <stdio_stack_buffer_flush+0x64>)
100054f6:	681b      	ldr	r3, [r3, #0]
100054f8:	60fb      	str	r3, [r7, #12]
100054fa:	e01b      	b.n	10005534 <stdio_stack_buffer_flush+0x50>
            if (!d->out_chars) continue;
100054fc:	68fb      	ldr	r3, [r7, #12]
100054fe:	681b      	ldr	r3, [r3, #0]
10005500:	2b00      	cmp	r3, #0
10005502:	d011      	beq.n	10005528 <stdio_stack_buffer_flush+0x44>
            if (filter && filter != d) continue;
10005504:	4b11      	ldr	r3, [pc, #68]	; (1000554c <stdio_stack_buffer_flush+0x68>)
10005506:	681b      	ldr	r3, [r3, #0]
10005508:	2b00      	cmp	r3, #0
1000550a:	d004      	beq.n	10005516 <stdio_stack_buffer_flush+0x32>
1000550c:	4b0f      	ldr	r3, [pc, #60]	; (1000554c <stdio_stack_buffer_flush+0x68>)
1000550e:	681b      	ldr	r3, [r3, #0]
10005510:	68fa      	ldr	r2, [r7, #12]
10005512:	429a      	cmp	r2, r3
10005514:	d10a      	bne.n	1000552c <stdio_stack_buffer_flush+0x48>
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10005516:	687b      	ldr	r3, [r7, #4]
10005518:	1d19      	adds	r1, r3, #4
1000551a:	687b      	ldr	r3, [r7, #4]
1000551c:	681a      	ldr	r2, [r3, #0]
1000551e:	68fb      	ldr	r3, [r7, #12]
10005520:	0018      	movs	r0, r3
10005522:	f7ff fecb 	bl	100052bc <stdio_out_chars_crlf>
10005526:	e002      	b.n	1000552e <stdio_stack_buffer_flush+0x4a>
            if (!d->out_chars) continue;
10005528:	46c0      	nop			; (mov r8, r8)
1000552a:	e000      	b.n	1000552e <stdio_stack_buffer_flush+0x4a>
            if (filter && filter != d) continue;
1000552c:	46c0      	nop			; (mov r8, r8)
        for (stdio_driver_t *d = drivers; d; d = d->next) {
1000552e:	68fb      	ldr	r3, [r7, #12]
10005530:	68db      	ldr	r3, [r3, #12]
10005532:	60fb      	str	r3, [r7, #12]
10005534:	68fb      	ldr	r3, [r7, #12]
10005536:	2b00      	cmp	r3, #0
10005538:	d1e0      	bne.n	100054fc <stdio_stack_buffer_flush+0x18>
        }
        buffer->used = 0;
1000553a:	687b      	ldr	r3, [r7, #4]
1000553c:	2200      	movs	r2, #0
1000553e:	601a      	str	r2, [r3, #0]
    }
}
10005540:	46c0      	nop			; (mov r8, r8)
10005542:	46bd      	mov	sp, r7
10005544:	b004      	add	sp, #16
10005546:	bd80      	pop	{r7, pc}
10005548:	20000f8c 	.word	0x20000f8c
1000554c:	20000f94 	.word	0x20000f94

10005550 <stdio_buffered_printer>:

static void stdio_buffered_printer(char c, void *arg) {
10005550:	b580      	push	{r7, lr}
10005552:	b084      	sub	sp, #16
10005554:	af00      	add	r7, sp, #0
10005556:	0002      	movs	r2, r0
10005558:	6039      	str	r1, [r7, #0]
1000555a:	1dfb      	adds	r3, r7, #7
1000555c:	701a      	strb	r2, [r3, #0]
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
1000555e:	683b      	ldr	r3, [r7, #0]
10005560:	60fb      	str	r3, [r7, #12]
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10005562:	68fb      	ldr	r3, [r7, #12]
10005564:	681b      	ldr	r3, [r3, #0]
10005566:	2b80      	cmp	r3, #128	; 0x80
10005568:	d103      	bne.n	10005572 <stdio_buffered_printer+0x22>
        stdio_stack_buffer_flush(buffer);
1000556a:	68fb      	ldr	r3, [r7, #12]
1000556c:	0018      	movs	r0, r3
1000556e:	f7ff ffb9 	bl	100054e4 <stdio_stack_buffer_flush>
    }
    buffer->buf[buffer->used++] = c;
10005572:	68fb      	ldr	r3, [r7, #12]
10005574:	681b      	ldr	r3, [r3, #0]
10005576:	1c59      	adds	r1, r3, #1
10005578:	68fa      	ldr	r2, [r7, #12]
1000557a:	6011      	str	r1, [r2, #0]
1000557c:	68fa      	ldr	r2, [r7, #12]
1000557e:	18d3      	adds	r3, r2, r3
10005580:	1dfa      	adds	r2, r7, #7
10005582:	7812      	ldrb	r2, [r2, #0]
10005584:	711a      	strb	r2, [r3, #4]
}
10005586:	46c0      	nop			; (mov r8, r8)
10005588:	46bd      	mov	sp, r7
1000558a:	b004      	add	sp, #16
1000558c:	bd80      	pop	{r7, pc}
	...

10005590 <__wrap_vprintf>:

int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10005590:	b5b0      	push	{r4, r5, r7, lr}
10005592:	b0a6      	sub	sp, #152	; 0x98
10005594:	af00      	add	r7, sp, #0
10005596:	6078      	str	r0, [r7, #4]
10005598:	6039      	str	r1, [r7, #0]
    bool serialzed = stdout_serialize_begin();
1000559a:	2597      	movs	r5, #151	; 0x97
1000559c:	197c      	adds	r4, r7, r5
1000559e:	f7ff fe49 	bl	10005234 <stdout_serialize_begin>
100055a2:	0003      	movs	r3, r0
100055a4:	7023      	strb	r3, [r4, #0]
        return 0;
#endif
    }
    int ret;
#if LIB_PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer = {.used = 0};
100055a6:	240c      	movs	r4, #12
100055a8:	193b      	adds	r3, r7, r4
100055aa:	0018      	movs	r0, r3
100055ac:	2384      	movs	r3, #132	; 0x84
100055ae:	001a      	movs	r2, r3
100055b0:	2100      	movs	r1, #0
100055b2:	f000 ff03 	bl	100063bc <__wrap_memset>
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
100055b6:	683b      	ldr	r3, [r7, #0]
100055b8:	687a      	ldr	r2, [r7, #4]
100055ba:	1939      	adds	r1, r7, r4
100055bc:	480c      	ldr	r0, [pc, #48]	; (100055f0 <__wrap_vprintf+0x60>)
100055be:	f7ff fcc5 	bl	10004f4c <vfctprintf>
100055c2:	0003      	movs	r3, r0
100055c4:	2290      	movs	r2, #144	; 0x90
100055c6:	18ba      	adds	r2, r7, r2
100055c8:	6013      	str	r3, [r2, #0]
    stdio_stack_buffer_flush(&buffer);
100055ca:	193b      	adds	r3, r7, r4
100055cc:	0018      	movs	r0, r3
100055ce:	f7ff ff89 	bl	100054e4 <stdio_stack_buffer_flush>
    stdio_flush();
100055d2:	f7ff ff6b 	bl	100054ac <stdio_flush>
    printf_none_assert();
#else
    extern int REAL_FUNC(vprintf)(const char *format, va_list va);
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
100055d6:	197b      	adds	r3, r7, r5
100055d8:	781b      	ldrb	r3, [r3, #0]
100055da:	2b00      	cmp	r3, #0
100055dc:	d001      	beq.n	100055e2 <__wrap_vprintf+0x52>
        stdout_serialize_end();
100055de:	f7ff fe51 	bl	10005284 <stdout_serialize_end>
    }
    return ret;
100055e2:	2390      	movs	r3, #144	; 0x90
100055e4:	18fb      	adds	r3, r7, r3
100055e6:	681b      	ldr	r3, [r3, #0]
}
100055e8:	0018      	movs	r0, r3
100055ea:	46bd      	mov	sp, r7
100055ec:	b026      	add	sp, #152	; 0x98
100055ee:	bdb0      	pop	{r4, r5, r7, pc}
100055f0:	10005551 	.word	0x10005551

100055f4 <__wrap_printf>:

int __printflike(1, 0) WRAPPER_FUNC(printf)(const char* format, ...)
{
100055f4:	b40f      	push	{r0, r1, r2, r3}
100055f6:	b580      	push	{r7, lr}
100055f8:	b082      	sub	sp, #8
100055fa:	af00      	add	r7, sp, #0
    va_list va;
    va_start(va, format);
100055fc:	2314      	movs	r3, #20
100055fe:	18fb      	adds	r3, r7, r3
10005600:	603b      	str	r3, [r7, #0]
    int ret = vprintf(format, va);
10005602:	683a      	ldr	r2, [r7, #0]
10005604:	693b      	ldr	r3, [r7, #16]
10005606:	0011      	movs	r1, r2
10005608:	0018      	movs	r0, r3
1000560a:	f7ff ffc1 	bl	10005590 <__wrap_vprintf>
1000560e:	0003      	movs	r3, r0
10005610:	607b      	str	r3, [r7, #4]
    va_end(va);
    return ret;
10005612:	687b      	ldr	r3, [r7, #4]
}
10005614:	0018      	movs	r0, r3
10005616:	46bd      	mov	sp, r7
10005618:	b002      	add	sp, #8
1000561a:	bc80      	pop	{r7}
1000561c:	bc08      	pop	{r3}
1000561e:	b004      	add	sp, #16
10005620:	4718      	bx	r3

10005622 <gpio_set_mask>:
/*! \brief Drive high every GPIO appearing in mask
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
10005622:	b580      	push	{r7, lr}
10005624:	b082      	sub	sp, #8
10005626:	af00      	add	r7, sp, #0
10005628:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_set = mask;
1000562a:	23d0      	movs	r3, #208	; 0xd0
1000562c:	061b      	lsls	r3, r3, #24
1000562e:	687a      	ldr	r2, [r7, #4]
10005630:	615a      	str	r2, [r3, #20]
}
10005632:	46c0      	nop			; (mov r8, r8)
10005634:	46bd      	mov	sp, r7
10005636:	b002      	add	sp, #8
10005638:	bd80      	pop	{r7, pc}

1000563a <gpio_clr_mask>:
/*! \brief Drive low every GPIO appearing in mask
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to clear, as bits 0-29
 */
static inline void gpio_clr_mask(uint32_t mask) {
1000563a:	b580      	push	{r7, lr}
1000563c:	b082      	sub	sp, #8
1000563e:	af00      	add	r7, sp, #0
10005640:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_clr = mask;
10005642:	23d0      	movs	r3, #208	; 0xd0
10005644:	061b      	lsls	r3, r3, #24
10005646:	687a      	ldr	r2, [r7, #4]
10005648:	619a      	str	r2, [r3, #24]
}
1000564a:	46c0      	nop			; (mov r8, r8)
1000564c:	46bd      	mov	sp, r7
1000564e:	b002      	add	sp, #8
10005650:	bd80      	pop	{r7, pc}

10005652 <gpio_put>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param value If false clear the GPIO, otherwise set it.
 */
static inline void gpio_put(uint gpio, bool value) {
10005652:	b580      	push	{r7, lr}
10005654:	b084      	sub	sp, #16
10005656:	af00      	add	r7, sp, #0
10005658:	6078      	str	r0, [r7, #4]
1000565a:	000a      	movs	r2, r1
1000565c:	1cfb      	adds	r3, r7, #3
1000565e:	701a      	strb	r2, [r3, #0]
    uint32_t mask = 1ul << gpio;
10005660:	2201      	movs	r2, #1
10005662:	687b      	ldr	r3, [r7, #4]
10005664:	409a      	lsls	r2, r3
10005666:	0013      	movs	r3, r2
10005668:	60fb      	str	r3, [r7, #12]
    if (value)
1000566a:	1cfb      	adds	r3, r7, #3
1000566c:	781b      	ldrb	r3, [r3, #0]
1000566e:	2b00      	cmp	r3, #0
10005670:	d004      	beq.n	1000567c <gpio_put+0x2a>
        gpio_set_mask(mask);
10005672:	68fb      	ldr	r3, [r7, #12]
10005674:	0018      	movs	r0, r3
10005676:	f7ff ffd4 	bl	10005622 <gpio_set_mask>
    else
        gpio_clr_mask(mask);
}
1000567a:	e003      	b.n	10005684 <gpio_put+0x32>
        gpio_clr_mask(mask);
1000567c:	68fb      	ldr	r3, [r7, #12]
1000567e:	0018      	movs	r0, r3
10005680:	f7ff ffdb 	bl	1000563a <gpio_clr_mask>
}
10005684:	46c0      	nop			; (mov r8, r8)
10005686:	46bd      	mov	sp, r7
10005688:	b004      	add	sp, #16
1000568a:	bd80      	pop	{r7, pc}

1000568c <gpio_set_dir_out_masked>:
 *
 * Switch all GPIOs in "mask" to output
 *
 * \param mask Bitmask of GPIO to set to output, as bits 0-29
 */
static inline void gpio_set_dir_out_masked(uint32_t mask) {
1000568c:	b580      	push	{r7, lr}
1000568e:	b082      	sub	sp, #8
10005690:	af00      	add	r7, sp, #0
10005692:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_set = mask;
10005694:	23d0      	movs	r3, #208	; 0xd0
10005696:	061b      	lsls	r3, r3, #24
10005698:	687a      	ldr	r2, [r7, #4]
1000569a:	625a      	str	r2, [r3, #36]	; 0x24
}
1000569c:	46c0      	nop			; (mov r8, r8)
1000569e:	46bd      	mov	sp, r7
100056a0:	b002      	add	sp, #8
100056a2:	bd80      	pop	{r7, pc}

100056a4 <gpio_set_dir_in_masked>:
/*! \brief Set a number of GPIOs to input
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
100056a4:	b580      	push	{r7, lr}
100056a6:	b082      	sub	sp, #8
100056a8:	af00      	add	r7, sp, #0
100056aa:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_clr = mask;
100056ac:	23d0      	movs	r3, #208	; 0xd0
100056ae:	061b      	lsls	r3, r3, #24
100056b0:	687a      	ldr	r2, [r7, #4]
100056b2:	629a      	str	r2, [r3, #40]	; 0x28
}
100056b4:	46c0      	nop			; (mov r8, r8)
100056b6:	46bd      	mov	sp, r7
100056b8:	b002      	add	sp, #8
100056ba:	bd80      	pop	{r7, pc}

100056bc <gpio_set_dir>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
100056bc:	b580      	push	{r7, lr}
100056be:	b084      	sub	sp, #16
100056c0:	af00      	add	r7, sp, #0
100056c2:	6078      	str	r0, [r7, #4]
100056c4:	000a      	movs	r2, r1
100056c6:	1cfb      	adds	r3, r7, #3
100056c8:	701a      	strb	r2, [r3, #0]
    uint32_t mask = 1ul << gpio;
100056ca:	2201      	movs	r2, #1
100056cc:	687b      	ldr	r3, [r7, #4]
100056ce:	409a      	lsls	r2, r3
100056d0:	0013      	movs	r3, r2
100056d2:	60fb      	str	r3, [r7, #12]
    if (out)
100056d4:	1cfb      	adds	r3, r7, #3
100056d6:	781b      	ldrb	r3, [r3, #0]
100056d8:	2b00      	cmp	r3, #0
100056da:	d004      	beq.n	100056e6 <gpio_set_dir+0x2a>
        gpio_set_dir_out_masked(mask);
100056dc:	68fb      	ldr	r3, [r7, #12]
100056de:	0018      	movs	r0, r3
100056e0:	f7ff ffd4 	bl	1000568c <gpio_set_dir_out_masked>
    else
        gpio_set_dir_in_masked(mask);
}
100056e4:	e003      	b.n	100056ee <gpio_set_dir+0x32>
        gpio_set_dir_in_masked(mask);
100056e6:	68fb      	ldr	r3, [r7, #12]
100056e8:	0018      	movs	r0, r3
100056ea:	f7ff ffdb 	bl	100056a4 <gpio_set_dir_in_masked>
}
100056ee:	46c0      	nop			; (mov r8, r8)
100056f0:	46bd      	mov	sp, r7
100056f2:	b004      	add	sp, #16
100056f4:	bd80      	pop	{r7, pc}

100056f6 <main>:
 */

#include "pico/stdlib.h"

int main()
{
100056f6:	b580      	push	{r7, lr}
100056f8:	b082      	sub	sp, #8
100056fa:	af00      	add	r7, sp, #0
#ifndef PICO_DEFAULT_LED_PIN
#warning blink example requires a board with a regular LED
#else
    const uint LED_PIN = PICO_DEFAULT_LED_PIN;
100056fc:	2319      	movs	r3, #25
100056fe:	607b      	str	r3, [r7, #4]
    gpio_init(LED_PIN);
10005700:	687b      	ldr	r3, [r7, #4]
10005702:	0018      	movs	r0, r3
10005704:	f7fc fda4 	bl	10002250 <gpio_init>
    gpio_set_dir(LED_PIN, GPIO_OUT);
10005708:	687b      	ldr	r3, [r7, #4]
1000570a:	2101      	movs	r1, #1
1000570c:	0018      	movs	r0, r3
1000570e:	f7ff ffd5 	bl	100056bc <gpio_set_dir>
    while (true)
    {
        gpio_put(LED_PIN, 1);
10005712:	687b      	ldr	r3, [r7, #4]
10005714:	2101      	movs	r1, #1
10005716:	0018      	movs	r0, r3
10005718:	f7ff ff9b 	bl	10005652 <gpio_put>
        sleep_ms(100);
1000571c:	2064      	movs	r0, #100	; 0x64
1000571e:	f7fb ffb5 	bl	1000168c <sleep_ms>
        gpio_put(LED_PIN, 0);
10005722:	687b      	ldr	r3, [r7, #4]
10005724:	2100      	movs	r1, #0
10005726:	0018      	movs	r0, r3
10005728:	f7ff ff93 	bl	10005652 <gpio_put>
        sleep_ms(100);
1000572c:	2064      	movs	r0, #100	; 0x64
1000572e:	f7fb ffad 	bl	1000168c <sleep_ms>
        gpio_put(LED_PIN, 1);
10005732:	e7ee      	b.n	10005712 <main+0x1c>

10005734 <__aeabi_bits_init>:
aeabi_bits_funcs_end:

.section .text
.thumb_func
__aeabi_bits_init:
    ldr r0, =aeabi_bits_funcs
10005734:	4801      	ldr	r0, [pc, #4]	; (1000573c <__aeabi_bits_init+0x8>)
    movs r1, #BITS_FUNC_COUNT
10005736:	2104      	movs	r1, #4
    ldr r3, =rom_funcs_lookup
10005738:	4b01      	ldr	r3, [pc, #4]	; (10005740 <__aeabi_bits_init+0xc>)
    bx r3
1000573a:	4718      	bx	r3
    ldr r0, =aeabi_bits_funcs
1000573c:	20000360 	.word	0x20000360
    ldr r3, =rom_funcs_lookup
10005740:	1000340d 	.word	0x1000340d

10005744 <__wrap___aeabi_idiv>:
wrapper_func __aeabi_idivmod
regular_func div_s32s32
regular_func divmod_s32s32
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    ldr r2, =SIO_BASE
10005744:	4a12      	ldr	r2, [pc, #72]	; (10005790 <divmod_s32s32_savestate+0x18>)
    ldr r3, [r2, #SIO_DIV_CSR_OFFSET]
10005746:	6f93      	ldr	r3, [r2, #120]	; 0x78
    lsrs r3, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
10005748:	089b      	lsrs	r3, r3, #2
    bcs divmod_s32s32_savestate
1000574a:	d215      	bcs.n	10005778 <divmod_s32s32_savestate>

1000574c <divmod_s32s32_unsafe>:
    // to avoid worrying about IRQs (or context switches), simply disable interrupts around call
    ldr r2, =SIO_BASE
    mrs r3, PRIMASK
    cpsid i
#endif /* !PICO_DIVIDER_DISABLE_INTERRUPTS */
    str r0, [r2, #SIO_DIV_SDIVIDEND_OFFSET]
1000574c:	6690      	str	r0, [r2, #104]	; 0x68
    str r1, [r2, #SIO_DIV_SDIVISOR_OFFSET]
1000574e:	66d1      	str	r1, [r2, #108]	; 0x6c
    cmp r1, #0
10005750:	2900      	cmp	r1, #0
    beq 1f
10005752:	d005      	beq.n	10005760 <divmod_s32s32_unsafe+0x14>
    wait_div 2
10005754:	e7ff      	b.n	10005756 <divmod_s32s32_unsafe+0xa>
10005756:	e7ff      	b.n	10005758 <divmod_s32s32_unsafe+0xc>
10005758:	e7ff      	b.n	1000575a <divmod_s32s32_unsafe+0xe>
    // return 64 bit value so we can efficiently return both (note read order is important since QUOTIENT must be read last)
    ldr r1, [r2, #SIO_DIV_REMAINDER_OFFSET]
1000575a:	6f51      	ldr	r1, [r2, #116]	; 0x74
    ldr r0, [r2, #SIO_DIV_QUOTIENT_OFFSET]
1000575c:	6f10      	ldr	r0, [r2, #112]	; 0x70
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    bx lr
1000575e:	4770      	bx	lr
1:
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    push {r2, lr}
10005760:	b504      	push	{r2, lr}
    movs r1, #0x80
10005762:	2180      	movs	r1, #128	; 0x80
    lsls r1, #24
10005764:	0609      	lsls	r1, r1, #24
    asrs r2, r0, #31
10005766:	17c2      	asrs	r2, r0, #31
    eors r1, r2
10005768:	4051      	eors	r1, r2
    cmp r0, #0
1000576a:	2800      	cmp	r0, #0
    beq 1f
1000576c:	d000      	beq.n	10005770 <divmod_s32s32_unsafe+0x24>
    mvns r0, r1
1000576e:	43c8      	mvns	r0, r1
1:
#if PICO_DIVIDER_CALL_IDIV0
    bl __aeabi_idiv0
10005770:	f001 faa6 	bl	10006cc0 <____aeabi_idiv0_veneer>
#endif
    movs r1, #0 // remainder 0
10005774:	2100      	movs	r1, #0
    // need to restore saved r2 as it hold SIO ptr
    pop {r2, pc}
10005776:	bd04      	pop	{r2, pc}

10005778 <divmod_s32s32_savestate>:
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
.align 2
regular_func divmod_s32s32_savestate
    // note that we must be at least 2 cycles into division at this point,
    // which we are because of the firty check before getting here (and of course the function call before that)
    save_div_state_and_lr
10005778:	b5f0      	push	{r4, r5, r6, r7, lr}
1000577a:	6e14      	ldr	r4, [r2, #96]	; 0x60
1000577c:	6e55      	ldr	r5, [r2, #100]	; 0x64
1000577e:	6f57      	ldr	r7, [r2, #116]	; 0x74
10005780:	6f16      	ldr	r6, [r2, #112]	; 0x70
    bl divmod_s32s32_unsafe
10005782:	f7ff ffe3 	bl	1000574c <divmod_s32s32_unsafe>
    restore_div_state_and_return
10005786:	6614      	str	r4, [r2, #96]	; 0x60
10005788:	6655      	str	r5, [r2, #100]	; 0x64
1000578a:	6757      	str	r7, [r2, #116]	; 0x74
1000578c:	6716      	str	r6, [r2, #112]	; 0x70
1000578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ldr r2, =SIO_BASE
10005790:	d0000000 	.word	0xd0000000

10005794 <__wrap___aeabi_uidiv>:
regular_func divmod_u32u32
wrapper_func __aeabi_uidiv
wrapper_func __aeabi_uidivmod
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    ldr r2, =SIO_BASE
10005794:	4a11      	ldr	r2, [pc, #68]	; (100057dc <divmod_u32u32_savestate+0x18>)
    ldr r3, [r2, #SIO_DIV_CSR_OFFSET]
10005796:	6f93      	ldr	r3, [r2, #120]	; 0x78
    lsrs r3, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
10005798:	089b      	lsrs	r3, r3, #2
    bcs divmod_u32u32_savestate
1000579a:	d213      	bcs.n	100057c4 <divmod_u32u32_savestate>

1000579c <divmod_u32u32_unsafe>:
    // to avoid worrying about IRQs (or context switches), simply disable interrupts around call
    ldr r2, =SIO_BASE
    mrs r3, PRIMASK
    cpsid i
#endif /* !PICO_DIVIDER_DISABLE_INTERRUPTS */
    str r0, [r2, #SIO_DIV_UDIVIDEND_OFFSET]
1000579c:	6610      	str	r0, [r2, #96]	; 0x60
    str r1, [r2, #SIO_DIV_UDIVISOR_OFFSET]
1000579e:	6651      	str	r1, [r2, #100]	; 0x64
    cmp r1, #0
100057a0:	2900      	cmp	r1, #0
    beq 1f
100057a2:	d005      	beq.n	100057b0 <divmod_u32u32_unsafe+0x14>
    wait_div 2
100057a4:	e7ff      	b.n	100057a6 <divmod_u32u32_unsafe+0xa>
100057a6:	e7ff      	b.n	100057a8 <divmod_u32u32_unsafe+0xc>
100057a8:	e7ff      	b.n	100057aa <divmod_u32u32_unsafe+0xe>
    // return 64 bit value so we can efficiently return both (note read order is important since QUOTIENT must be read last)
    ldr r1, [r2, #SIO_DIV_REMAINDER_OFFSET]
100057aa:	6f51      	ldr	r1, [r2, #116]	; 0x74
    ldr r0, [r2, #SIO_DIV_QUOTIENT_OFFSET]
100057ac:	6f10      	ldr	r0, [r2, #112]	; 0x70
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    bx lr
100057ae:	4770      	bx	lr
1:
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    push {r2, lr}
100057b0:	b504      	push	{r2, lr}
    cmp r0, #0
100057b2:	2800      	cmp	r0, #0
    beq 1f
100057b4:	d001      	beq.n	100057ba <divmod_u32u32_unsafe+0x1e>
    movs r0, #0
100057b6:	2000      	movs	r0, #0
    mvns r0, r0
100057b8:	43c0      	mvns	r0, r0
1:
#if PICO_DIVIDER_CALL_IDIV0
    bl __aeabi_idiv0
100057ba:	f001 fa81 	bl	10006cc0 <____aeabi_idiv0_veneer>
#endif
    movs r1, #0 // remainder 0
100057be:	2100      	movs	r1, #0
    // need to restore saved r2 as it hold SIO ptr
    pop {r2, pc}
100057c0:	bd04      	pop	{r2, pc}
100057c2:	46c0      	nop			; (mov r8, r8)

100057c4 <divmod_u32u32_savestate>:
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
.align 2
regular_func divmod_u32u32_savestate
    save_div_state_and_lr
100057c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100057c6:	6e14      	ldr	r4, [r2, #96]	; 0x60
100057c8:	6e55      	ldr	r5, [r2, #100]	; 0x64
100057ca:	6f57      	ldr	r7, [r2, #116]	; 0x74
100057cc:	6f16      	ldr	r6, [r2, #112]	; 0x70
    bl divmod_u32u32_unsafe
100057ce:	f7ff ffe5 	bl	1000579c <divmod_u32u32_unsafe>
    restore_div_state_and_return
100057d2:	6614      	str	r4, [r2, #96]	; 0x60
100057d4:	6655      	str	r5, [r2, #100]	; 0x64
100057d6:	6757      	str	r7, [r2, #116]	; 0x74
100057d8:	6716      	str	r6, [r2, #112]	; 0x70
100057da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ldr r2, =SIO_BASE
100057dc:	d0000000 	.word	0xd0000000

100057e0 <__wrap___aeabi_ldivmod>:
wrapper_func __aeabi_ldivmod
regular_func div_s64s64
regular_func divmod_s64s64
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    mov ip, r2
100057e0:	4694      	mov	ip, r2
    ldr r2, =SIO_BASE
100057e2:	4a4e      	ldr	r2, [pc, #312]	; (1000591c <udiv0+0x1a>)
    ldr r2, [r2, #SIO_DIV_CSR_OFFSET]
100057e4:	6f92      	ldr	r2, [r2, #120]	; 0x78
    lsrs r2, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
100057e6:	0892      	lsrs	r2, r2, #2
    mov r2, ip
100057e8:	4662      	mov	r2, ip
    bcs divmod_s64s64_savestate
100057ea:	d201      	bcs.n	100057f0 <divmod_s64s64_savestate>
    b divmod_s64s64_unsafe
100057ec:	e030      	b.n	10005850 <divmod_s64s64_unsafe>
100057ee:	46c0      	nop			; (mov r8, r8)

100057f0 <divmod_s64s64_savestate>:
.align 2
divmod_s64s64_savestate:
    save_div_state_and_lr_64
100057f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100057f2:	4e4a      	ldr	r6, [pc, #296]	; (1000591c <udiv0+0x1a>)
100057f4:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100057f6:	086d      	lsrs	r5, r5, #1
100057f8:	d3fc      	bcc.n	100057f4 <divmod_s64s64_savestate+0x4>
100057fa:	6e34      	ldr	r4, [r6, #96]	; 0x60
100057fc:	6e75      	ldr	r5, [r6, #100]	; 0x64
100057fe:	6f77      	ldr	r7, [r6, #116]	; 0x74
10005800:	6f36      	ldr	r6, [r6, #112]	; 0x70
    bl divmod_s64s64_unsafe
10005802:	f000 f825 	bl	10005850 <divmod_s64s64_unsafe>
    restore_div_state_and_return_64
10005806:	4694      	mov	ip, r2
10005808:	4a44      	ldr	r2, [pc, #272]	; (1000591c <udiv0+0x1a>)
1000580a:	6614      	str	r4, [r2, #96]	; 0x60
1000580c:	6655      	str	r5, [r2, #100]	; 0x64
1000580e:	6757      	str	r7, [r2, #116]	; 0x74
10005810:	6716      	str	r6, [r2, #112]	; 0x70
10005812:	4662      	mov	r2, ip
10005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005816:	46c0      	nop			; (mov r8, r8)

10005818 <__wrap___aeabi_uldivmod>:
wrapper_func __aeabi_uldivmod
regular_func div_u64u64
regular_func divmod_u64u64
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    mov ip, r2
10005818:	4694      	mov	ip, r2
    ldr r2, =SIO_BASE
1000581a:	4a40      	ldr	r2, [pc, #256]	; (1000591c <udiv0+0x1a>)
    ldr r2, [r2, #SIO_DIV_CSR_OFFSET]
1000581c:	6f92      	ldr	r2, [r2, #120]	; 0x78
    lsrs r2, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
1000581e:	0892      	lsrs	r2, r2, #2
    mov r2, ip
10005820:	4662      	mov	r2, ip
    bcs divmod_u64u64_savestate
10005822:	d201      	bcs.n	10005828 <divmod_u64u64_savestate>
    b divmod_u64u64_unsafe
10005824:	e058      	b.n	100058d8 <divmod_u64u64_unsafe>
10005826:	46c0      	nop			; (mov r8, r8)

10005828 <divmod_u64u64_savestate>:
.align 2
regular_func divmod_u64u64_savestate
    save_div_state_and_lr_64
10005828:	b5f0      	push	{r4, r5, r6, r7, lr}
1000582a:	4e3c      	ldr	r6, [pc, #240]	; (1000591c <udiv0+0x1a>)
1000582c:	6fb5      	ldr	r5, [r6, #120]	; 0x78
1000582e:	086d      	lsrs	r5, r5, #1
10005830:	d3fc      	bcc.n	1000582c <divmod_u64u64_savestate+0x4>
10005832:	6e34      	ldr	r4, [r6, #96]	; 0x60
10005834:	6e75      	ldr	r5, [r6, #100]	; 0x64
10005836:	6f77      	ldr	r7, [r6, #116]	; 0x74
10005838:	6f36      	ldr	r6, [r6, #112]	; 0x70
    bl divmod_u64u64_unsafe
1000583a:	f000 f84d 	bl	100058d8 <divmod_u64u64_unsafe>
    restore_div_state_and_return_64
1000583e:	4694      	mov	ip, r2
10005840:	4a36      	ldr	r2, [pc, #216]	; (1000591c <udiv0+0x1a>)
10005842:	6614      	str	r4, [r2, #96]	; 0x60
10005844:	6655      	str	r5, [r2, #100]	; 0x64
10005846:	6757      	str	r7, [r2, #116]	; 0x74
10005848:	6716      	str	r6, [r2, #112]	; 0x70
1000584a:	4662      	mov	r2, ip
1000584c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000584e:	46c0      	nop			; (mov r8, r8)

10005850 <divmod_s64s64_unsafe>:
l\@_1:
.endm

.align 2
regular_func divmod_s64s64_unsafe
 cmp r3,#0
10005850:	2b00      	cmp	r3, #0
 blt 1f
10005852:	db24      	blt.n	1000589e <l41_1+0x26>
@ here x +ve
 beq 2f                    @ could x be zero?
10005854:	d011      	beq.n	1000587a <l41_1+0x2>
3:
 cmp r1,#0
10005856:	2900      	cmp	r1, #0
 bge divmod_u64u64_unsafe  @ both positive
10005858:	da3e      	bge.n	100058d8 <divmod_u64u64_unsafe>
@ y -ve, x +ve
 push {r14}
1000585a:	b500      	push	{lr}
 dneg r0,r1
1000585c:	43c9      	mvns	r1, r1
1000585e:	4240      	negs	r0, r0
10005860:	d100      	bne.n	10005864 <l39_1>
10005862:	3101      	adds	r1, #1

10005864 <l39_1>:
 bl divmod_u64u64_unsafe
10005864:	f000 f838 	bl	100058d8 <divmod_u64u64_unsafe>
 dneg r0,r1
10005868:	43c9      	mvns	r1, r1
1000586a:	4240      	negs	r0, r0
1000586c:	d100      	bne.n	10005870 <l40_1>
1000586e:	3101      	adds	r1, #1

10005870 <l40_1>:
 dneg r2,r3
10005870:	43db      	mvns	r3, r3
10005872:	4252      	negs	r2, r2
10005874:	d100      	bne.n	10005878 <l41_1>
10005876:	3301      	adds	r3, #1

10005878 <l41_1>:
 pop {r15}
10005878:	bd00      	pop	{pc}

2:
 cmp r2,#0
1000587a:	2a00      	cmp	r2, #0
 bne 3b                    @ back if x not zero
1000587c:	d1eb      	bne.n	10005856 <divmod_s64s64_unsafe+0x6>

 cmp r0,#0                 @ y==0?
1000587e:	2800      	cmp	r0, #0
 bne 4f
10005880:	d101      	bne.n	10005886 <l41_1+0xe>
 cmp r1,#0
10005882:	2900      	cmp	r1, #0
 beq 5f                    @ then pass 0 to __aeabi_ldiv0
10005884:	d005      	beq.n	10005892 <l41_1+0x1a>
4:
 movs r0,#0
10005886:	2000      	movs	r0, #0
 lsrs r1,#31
10005888:	0fc9      	lsrs	r1, r1, #31
 lsls r1,#31               @ get sign bit
1000588a:	07c9      	lsls	r1, r1, #31
 bne 5f                    @ y -ve? pass -2^63 to __aeabi_ldiv0
1000588c:	d101      	bne.n	10005892 <l41_1+0x1a>
 mvns r0,r0
1000588e:	43c0      	mvns	r0, r0
 lsrs r1,r0,#1             @ y +ve: pass 2^63-1 to __aeabi_ldiv0
10005890:	0841      	lsrs	r1, r0, #1
5:
 push {r14}
10005892:	b500      	push	{lr}
#if PICO_DIVIDER_CALL_LDIV0
 bl __aeabi_ldiv0
10005894:	f001 fa08 	bl	10006ca8 <____aeabi_ldiv0_veneer>
#endif
 movs r2,#0                @ and return 0 for the remainder
10005898:	2200      	movs	r2, #0
 movs r3,#0
1000589a:	2300      	movs	r3, #0
 pop {r15}
1000589c:	bd00      	pop	{pc}

1:
@ here x -ve
 push {r14}
1000589e:	b500      	push	{lr}
 cmp r1,#0
100058a0:	2900      	cmp	r1, #0
 blt 1f
100058a2:	db0a      	blt.n	100058ba <l43_1+0x2>
@ y +ve, x -ve
 dneg r2,r3
100058a4:	43db      	mvns	r3, r3
100058a6:	4252      	negs	r2, r2
100058a8:	d100      	bne.n	100058ac <l42_1>
100058aa:	3301      	adds	r3, #1

100058ac <l42_1>:
 bl divmod_u64u64_unsafe
100058ac:	f000 f814 	bl	100058d8 <divmod_u64u64_unsafe>
 dneg r0,r1
100058b0:	43c9      	mvns	r1, r1
100058b2:	4240      	negs	r0, r0
100058b4:	d100      	bne.n	100058b8 <l43_1>
100058b6:	3101      	adds	r1, #1

100058b8 <l43_1>:
 pop {r15}
100058b8:	bd00      	pop	{pc}

1:
@ y -ve, x -ve
 dneg r0,r1
100058ba:	43c9      	mvns	r1, r1
100058bc:	4240      	negs	r0, r0
100058be:	d100      	bne.n	100058c2 <l44_1>
100058c0:	3101      	adds	r1, #1

100058c2 <l44_1>:
 dneg r2,r3
100058c2:	43db      	mvns	r3, r3
100058c4:	4252      	negs	r2, r2
100058c6:	d100      	bne.n	100058ca <l45_1>
100058c8:	3301      	adds	r3, #1

100058ca <l45_1>:
 bl divmod_u64u64_unsafe
100058ca:	f000 f805 	bl	100058d8 <divmod_u64u64_unsafe>
 dneg r2,r3
100058ce:	43db      	mvns	r3, r3
100058d0:	4252      	negs	r2, r2
100058d2:	d100      	bne.n	100058d6 <l46_1>
100058d4:	3301      	adds	r3, #1

100058d6 <l46_1>:
 pop {r15}
100058d6:	bd00      	pop	{pc}

100058d8 <divmod_u64u64_unsafe>:

regular_func divmod_u64u64_unsafe
 cmp r1,#0
100058d8:	2900      	cmp	r1, #0
 bne y64                   @ y fits in 32 bits?
100058da:	d123      	bne.n	10005924 <y64>
 cmp r3,#0                 @ yes; and x?
100058dc:	2b00      	cmp	r3, #0
 bne 1f
100058de:	d118      	bne.n	10005912 <udiv0+0x10>
 cmp r2,#0
100058e0:	2a00      	cmp	r2, #0
 beq 2f                    @ x==0?
100058e2:	d00c      	beq.n	100058fe <divmod_u64u64_unsafe+0x26>
 mov r12,r7
100058e4:	46bc      	mov	ip, r7
 ldr r7,=SIO_BASE
100058e6:	4f0d      	ldr	r7, [pc, #52]	; (1000591c <udiv0+0x1a>)
 str r0,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
100058e8:	6638      	str	r0, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]
100058ea:	667a      	str	r2, [r7, #100]	; 0x64
 movs r1,#0
100058ec:	2100      	movs	r1, #0
 movs r3,#0
100058ee:	2300      	movs	r3, #0
 wait_div 2
100058f0:	e7ff      	b.n	100058f2 <divmod_u64u64_unsafe+0x1a>
100058f2:	e7ff      	b.n	100058f4 <divmod_u64u64_unsafe+0x1c>
100058f4:	e7ff      	b.n	100058f6 <divmod_u64u64_unsafe+0x1e>
 ldr r2,[r7,#SIO_DIV_REMAINDER_OFFSET]
100058f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 ldr r0,[r7,#SIO_DIV_QUOTIENT_OFFSET]
100058f8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 mov r7,r12
100058fa:	4667      	mov	r7, ip
 bx r14
100058fc:	4770      	bx	lr

2:                         @ divide by 0 with y<2^32
 cmp r0,#0                 @ y==0?
100058fe:	2800      	cmp	r0, #0
 beq 3f                    @ then pass 0 to __aeabi_ldiv0
10005900:	d001      	beq.n	10005906 <udiv0+0x4>

10005902 <udiv0>:
udiv0:
 ldr r0,=0xffffffff
10005902:	4807      	ldr	r0, [pc, #28]	; (10005920 <udiv0+0x1e>)
 movs r1,r0                @ pass 2^64-1 to __aeabi_ldiv0
10005904:	0001      	movs	r1, r0
3:
 push {r14}
10005906:	b500      	push	{lr}
#if PICO_DIVIDER_CALL_LDIV0
 bl __aeabi_ldiv0
10005908:	f001 f9ce 	bl	10006ca8 <____aeabi_ldiv0_veneer>
#endif
 movs r2,#0                @ and return 0 for the remainder
1000590c:	2200      	movs	r2, #0
 movs r3,#0
1000590e:	2300      	movs	r3, #0
 pop {r15}
10005910:	bd00      	pop	{pc}

1:
 movs r2,r0                @ x>y, so result is 0 remainder y
10005912:	0002      	movs	r2, r0
 movs r3,r1
10005914:	000b      	movs	r3, r1
 movs r0,#0
10005916:	2000      	movs	r0, #0
 movs r1,#0
10005918:	2100      	movs	r1, #0
 bx r14
1000591a:	4770      	bx	lr
    ldr r2, =SIO_BASE
1000591c:	d0000000 	.word	0xd0000000
 ldr r0,=0xffffffff
10005920:	ffffffff 	.word	0xffffffff

10005924 <y64>:
.ltorg

@ here y occupies more than 32 bits
@ split into cases acccording to the size of x
y64:
 cmp r3,#0
10005924:	2b00      	cmp	r3, #0
 beq 1f
10005926:	d000      	beq.n	1000592a <y64+0x6>
 b y64_x48                 @ if x does not fit in 32 bits, go to 48- and 64-bit cases
10005928:	e0bf      	b.n	10005aaa <y64_x48>
1:
 lsrs r3,r2,#16
1000592a:	0c13      	lsrs	r3, r2, #16
 bne y64_x32               @ jump if x is 17..32 bits
1000592c:	d128      	bne.n	10005980 <y64_x32>

@ here x is at most 16 bits

 cmp r2,#0
1000592e:	2a00      	cmp	r2, #0
 beq udiv0                 @ x==0? exit as with y!=0 case above
10005930:	d0e7      	beq.n	10005902 <udiv0>
 push {r7}
10005932:	b480      	push	{r7}
 ldr r7,=SIO_BASE
10005934:	4f11      	ldr	r7, [pc, #68]	; (1000597c <y64+0x58>)
 str r1,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
10005936:	6639      	str	r1, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]
10005938:	667a      	str	r2, [r7, #100]	; 0x64
 wait_div 4
1000593a:	e7ff      	b.n	1000593c <y64+0x18>
1000593c:	e7ff      	b.n	1000593e <y64+0x1a>
 push {r4, r5}
1000593e:	b430      	push	{r4, r5}
 lsrs r4,r0,#16
10005940:	0c04      	lsrs	r4, r0, #16
 ldr r3,[r7,#SIO_DIV_REMAINDER_OFFSET] @ r0=y0-q0*x; 0<=r0<x
10005942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 ldr r1,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ q0=y0/x;
10005944:	6f39      	ldr	r1, [r7, #112]	; 0x70
 lsls r3,#16
10005946:	041b      	lsls	r3, r3, #16
 orrs r3,r4
10005948:	4323      	orrs	r3, r4
 str r3,[r7,#SIO_DIV_UDIVIDEND_OFFSET] @ y1=(r0<<16)+(((ui32)y)>>16);
1000594a:	663b      	str	r3, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]  @ must set divisor again, as we do not save/restore regs at all in IRQs if not dirty
1000594c:	667a      	str	r2, [r7, #100]	; 0x64
 wait_div 1
1000594e:	e7ff      	b.n	10005950 <y64+0x2c>
10005950:	e7ff      	b.n	10005952 <y64+0x2e>
10005952:	e7ff      	b.n	10005954 <y64+0x30>
10005954:	46c0      	nop			; (mov r8, r8)
 uxth r4,r0
10005956:	b284      	uxth	r4, r0
 ldr r3,[r7,#SIO_DIV_REMAINDER_OFFSET] @ r1=y1-q1*x; 0<=r1<x
10005958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 ldr r5,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ q1=y1/x;
1000595a:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 lsls r3,#16
1000595c:	041b      	lsls	r3, r3, #16
 orrs r3,r4
1000595e:	4323      	orrs	r3, r4
 str r3,[r7,#SIO_DIV_UDIVIDEND_OFFSET] @ y1=(r0<<16)+(((ui32)y)>>16);
10005960:	663b      	str	r3, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]  @ must set divisor again, as we do not save/restore regs at all in IRQs if not dirty
10005962:	667a      	str	r2, [r7, #100]	; 0x64
 wait_div 3
10005964:	e7ff      	b.n	10005966 <y64+0x42>
10005966:	e7ff      	b.n	10005968 <y64+0x44>
10005968:	46c0      	nop			; (mov r8, r8)
 movs r3,#0
1000596a:	2300      	movs	r3, #0
 lsls r4,r5,#16             @ quotient=(q0<<32)+(q1<<16)+q2
1000596c:	042c      	lsls	r4, r5, #16
 lsrs r5,#16
1000596e:	0c2d      	lsrs	r5, r5, #16
 ldr r2,[r7,#SIO_DIV_REMAINDER_OFFSET] @ r2=y2-q2*x; 0<=r2<x
10005970:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 ldr r0,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ q2=y2/x;
10005972:	6f38      	ldr	r0, [r7, #112]	; 0x70
 adds r0,r4
10005974:	1900      	adds	r0, r0, r4
 adcs r1,r5
10005976:	4169      	adcs	r1, r5
 pop {r4,r5,r7}
10005978:	bcb0      	pop	{r4, r5, r7}
 bx r14
1000597a:	4770      	bx	lr
 ldr r7,=SIO_BASE
1000597c:	d0000000 	.word	0xd0000000

10005980 <y64_x32>:

.ltorg

y64_x32:
@ here x is 17..32 bits
 push {r4-r7,r14}
10005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 mov r12,r2                @ save x
10005982:	4694      	mov	ip, r2
 movs r5,#0                @ xsh=0
10005984:	2500      	movs	r5, #0
 lsrs r4,r2,#24
10005986:	0e14      	lsrs	r4, r2, #24
 bne 1f
10005988:	d101      	bne.n	1000598e <y64_x32+0xe>
 lsls r2,#8                @ if(x0<1U<<24) x0<<=8,xsh =8;
1000598a:	0212      	lsls	r2, r2, #8
 adds r5,#8
1000598c:	3508      	adds	r5, #8
1:
 lsrs r4,r2,#28
1000598e:	0f14      	lsrs	r4, r2, #28
 bne 1f
10005990:	d101      	bne.n	10005996 <y64_x32+0x16>
 lsls r2,#4                @ if(x0<1U<<28) x0<<=4,xsh+=4;
10005992:	0112      	lsls	r2, r2, #4
 adds r5,#4
10005994:	3504      	adds	r5, #4
1:
 lsrs r4,r2,#30
10005996:	0f94      	lsrs	r4, r2, #30
 bne 1f
10005998:	d101      	bne.n	1000599e <y64_x32+0x1e>
 lsls r2,#2                @ if(x0<1U<<30) x0<<=2,xsh+=2;
1000599a:	0092      	lsls	r2, r2, #2
 adds r5,#2
1000599c:	3502      	adds	r5, #2
1:
 lsrs r4,r2,#31
1000599e:	0fd4      	lsrs	r4, r2, #31
 bne 1f
100059a0:	d101      	bne.n	100059a6 <y64_x32+0x26>
 lsls r2,#1                @ if(x0<1U<<31) x0<<=1,xsh+=1;
100059a2:	0052      	lsls	r2, r2, #1
 adds r5,#1
100059a4:	3501      	adds	r5, #1
1:
@ now 2^31<=x0<2^32, 0<=xsh<16 (amount x is shifted in x0); number of quotient bits to be calculated qb=xsh+33 33<=qb<49
 lsrs r4,r2,#15
100059a6:	0bd4      	lsrs	r4, r2, #15
 adds r4,#1                @ x1=(x0>>15)+1; 2^16<x1<=2^17
100059a8:	3401      	adds	r4, #1

 ldr r7,=SIO_BASE
100059aa:	4f25      	ldr	r7, [pc, #148]	; (10005a40 <y64_x32+0xc0>)
 str r4,[r7,#SIO_DIV_UDIVISOR_OFFSET]
100059ac:	667c      	str	r4, [r7, #100]	; 0x64
 ldr r4,=0xffffffff
100059ae:	4c25      	ldr	r4, [pc, #148]	; (10005a44 <y64_x32+0xc4>)
 str r4,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
100059b0:	663c      	str	r4, [r7, #96]	; 0x60
 lsrs r6,r1,#16
100059b2:	0c0e      	lsrs	r6, r1, #16
 uxth r3,r2                @ x0l
100059b4:	b293      	uxth	r3, r2
 wait_div 2
100059b6:	e7ff      	b.n	100059b8 <y64_x32+0x38>
100059b8:	e7ff      	b.n	100059ba <y64_x32+0x3a>
100059ba:	e7ff      	b.n	100059bc <y64_x32+0x3c>
 ldr r4,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ r=0xffffffffU/x1; 2^15<=r<2^16 r is a normalised reciprocal of x, guaranteed not an overestimate
100059bc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
@ r2    x0
@ r4    r
@ r5    xsh
@ r12   x

 muls r6,r4
100059be:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>48)*r)>>16;
100059c0:	0c36      	lsrs	r6, r6, #16
 lsls r7,r6,#13
100059c2:	0377      	lsls	r7, r6, #13
 mov r14,r7                @ quh=q0<<13
100059c4:	46be      	mov	lr, r7

 muls r3,r6                @ x0l*q
100059c6:	4373      	muls	r3, r6
 lsrs r7,r3,#15
100059c8:	0bdf      	lsrs	r7, r3, #15
 lsls r3,#17               @ r3:r7 is (x0l*q)<<17
100059ca:	045b      	lsls	r3, r3, #17
 subs r0,r3
100059cc:	1ac0      	subs	r0, r0, r3
 sbcs r1,r7                @ y-=(x0l*q)<<17
100059ce:	41b9      	sbcs	r1, r7

 lsrs r3,r2,#16            @ x0h
100059d0:	0c13      	lsrs	r3, r2, #16
 muls r3,r6                @ q*x0h
100059d2:	4373      	muls	r3, r6
 adds r3,r3
100059d4:	18db      	adds	r3, r3, r3
 subs r1,r3                @ y-=(x0h*q)<<17
100059d6:	1ac9      	subs	r1, r1, r3

 lsrs r6,r1,#3
100059d8:	08ce      	lsrs	r6, r1, #3
 muls r6,r4
100059da:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>35)*r)>>16;
100059dc:	0c36      	lsrs	r6, r6, #16
 add r14,r6                @ quh+=q1
100059de:	44b6      	add	lr, r6

 uxth r3,r2                @ x0l
100059e0:	b293      	uxth	r3, r2
 muls r3,r6                @ x0l*q
100059e2:	4373      	muls	r3, r6
 lsrs r7,r3,#28
100059e4:	0f1f      	lsrs	r7, r3, #28
 lsls r3,#4                @ r3:r7 is (x0l*q)<<4
100059e6:	011b      	lsls	r3, r3, #4
 subs r0,r3
100059e8:	1ac0      	subs	r0, r0, r3
 sbcs r1,r7                @ y-=(x0l*q)<<4
100059ea:	41b9      	sbcs	r1, r7

 lsrs r3,r2,#16            @ x0h
100059ec:	0c13      	lsrs	r3, r2, #16
 muls r3,r6                @ x0h*q
100059ee:	4373      	muls	r3, r6
 lsrs r7,r3,#12
100059f0:	0b1f      	lsrs	r7, r3, #12
 lsls r3,#20               @ r3:r7 is (x0h*q)<<4
100059f2:	051b      	lsls	r3, r3, #20
 subs r0,r3
100059f4:	1ac0      	subs	r0, r0, r3
 sbcs r1,r7                @ y-=(x0h*q)<<4
100059f6:	41b9      	sbcs	r1, r7

 lsrs r6,r0,#22
100059f8:	0d86      	lsrs	r6, r0, #22
 lsls r7,r1,#10
100059fa:	028f      	lsls	r7, r1, #10
 orrs r6,r7                @ y>>22
100059fc:	433e      	orrs	r6, r7
 muls r6,r4
100059fe:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>22)*r)>>16;
10005a00:	0c36      	lsrs	r6, r6, #16

 cmp r5,#9
10005a02:	2d09      	cmp	r5, #9
 blt last0                 @ if(xsh<9) goto last0;
10005a04:	db24      	blt.n	10005a50 <last0>

@ on this path xsh>=9, which means x<2^23
 lsrs r2,#9                @ x0>>9: this shift loses no bits
10005a06:	0a52      	lsrs	r2, r2, #9
@ the remainder y-x0*q is guaranteed less than a very small multiple of the remaining quotient
@ bits (at most 6 bits) times x, and so fits in one word
 muls r2,r6                @ x0*q
10005a08:	4372      	muls	r2, r6
 subs r0,r2                @ y-x0*q
10005a0a:	1a80      	subs	r0, r0, r2
 lsls r7,r6,#13            @ qul=q<<13
10005a0c:	0377      	lsls	r7, r6, #13
1:
 lsrs r6,r0,#9
10005a0e:	0a46      	lsrs	r6, r0, #9
 muls r6,r4
10005a10:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>9)*r)>>16;
10005a12:	0c36      	lsrs	r6, r6, #16
@ r6 q
@ r7 qul
@ r12 x
@ r14 quh

 movs r3,#22
10005a14:	2316      	movs	r3, #22
 subs r3,r5                @ 22-xsh
10005a16:	1b5b      	subs	r3, r3, r5
 lsrs r6,r3                @ q>>=22-xsh
10005a18:	40de      	lsrs	r6, r3
 lsrs r7,r3                @ qul>>=22-xsh
10005a1a:	40df      	lsrs	r7, r3
 adds r7,r6                @ qul+=q
10005a1c:	19bf      	adds	r7, r7, r6
 mov r4,r12
10005a1e:	4664      	mov	r4, ip
 muls r6,r4                @ x*q
10005a20:	4366      	muls	r6, r4
 subs r2,r0,r6             @ y-=x*q
10005a22:	1b82      	subs	r2, r0, r6
 mov r0,r14                @ quh
10005a24:	4670      	mov	r0, lr
 adds r5,#4                @ xsh+4
10005a26:	3504      	adds	r5, #4
 adds r3,#6                @ 28-xsh
10005a28:	3306      	adds	r3, #6
 movs r1,r0
10005a2a:	0001      	movs	r1, r0
 lsrs r1,r3
10005a2c:	40d9      	lsrs	r1, r3
 lsls r0,r5                @ r0:r1 is quh<<(4+xsh)
10005a2e:	40a8      	lsls	r0, r5
 adds r0,r7
10005a30:	19c0      	adds	r0, r0, r7
 bcc 1f
10005a32:	d300      	bcc.n	10005a36 <y64_x32+0xb6>
2:
 adds r1,#1
10005a34:	3101      	adds	r1, #1
1:                         @ qu=((ui64)quh<<(4+xsh))+qul
 cmp r2,r4
10005a36:	42a2      	cmp	r2, r4
 bhs 3f
10005a38:	d206      	bcs.n	10005a48 <y64_x32+0xc8>
 movs r3,#0
10005a3a:	2300      	movs	r3, #0
 pop {r4-r7,r15}
10005a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005a3e:	0000      	.short	0x0000
 ldr r7,=SIO_BASE
10005a40:	d0000000 	.word	0xd0000000
 ldr r4,=0xffffffff
10005a44:	ffffffff 	.word	0xffffffff

.ltorg

3:
 subs r2,r4
10005a48:	1b12      	subs	r2, r2, r4
 adds r0,#1
10005a4a:	3001      	adds	r0, #1
 bcc 1b
10005a4c:	d3f3      	bcc.n	10005a36 <y64_x32+0xb6>
 b 2b                      @ while(y>=x) y-=x,qu++;
10005a4e:	e7f1      	b.n	10005a34 <y64_x32+0xb4>

10005a50 <last0>:
@ r4 r
@ r5 xsh; xsh<9
@ r6 q

last0:
 movs r7,#9
10005a50:	2709      	movs	r7, #9
 subs r7,r5                @ 9-xsh
10005a52:	1b7f      	subs	r7, r7, r5
 lsrs r6,r7
10005a54:	40fe      	lsrs	r6, r7
 mov r4,r12                @ x
10005a56:	4664      	mov	r4, ip
 uxth r2,r4
10005a58:	b2a2      	uxth	r2, r4
 muls r2,r6                @ q*xlo
10005a5a:	4372      	muls	r2, r6
 subs r0,r2
10005a5c:	1a80      	subs	r0, r0, r2
 bcs 1f
10005a5e:	d200      	bcs.n	10005a62 <last0+0x12>
 subs r1,#1                @ y-=q*xlo
10005a60:	3901      	subs	r1, #1
1:
 lsrs r2,r4,#16            @ xhi
10005a62:	0c22      	lsrs	r2, r4, #16
 muls r2,r6                @ q*xhi
10005a64:	4372      	muls	r2, r6
 lsrs r3,r2,#16
10005a66:	0c13      	lsrs	r3, r2, #16
 lsls r2,#16
10005a68:	0412      	lsls	r2, r2, #16
 subs r2,r0,r2
10005a6a:	1a82      	subs	r2, r0, r2
 sbcs r1,r3                @ y-q*xhi
10005a6c:	4199      	sbcs	r1, r3
 movs r3,r1                @ y now in r2:r3
10005a6e:	000b      	movs	r3, r1
 mov r0,r14                @ quh
10005a70:	4670      	mov	r0, lr
 adds r5,#4                @ xsh+4
10005a72:	3504      	adds	r5, #4
 adds r7,#19               @ 28-xsh
10005a74:	3713      	adds	r7, #19
 movs r1,r0
10005a76:	0001      	movs	r1, r0
 lsrs r1,r7
10005a78:	40f9      	lsrs	r1, r7
 lsls r0,r5                @ r0:r1 is quh<<(4+xsh)
10005a7a:	40a8      	lsls	r0, r5
 adds r0,r6
10005a7c:	1980      	adds	r0, r0, r6
 bcc 1f
10005a7e:	d300      	bcc.n	10005a82 <last0+0x32>
 adds r1,#1                @ quh<<(xsh+4))+q
10005a80:	3101      	adds	r1, #1
1:
 cmp r3,#0                 @ y>=2^32?
10005a82:	2b00      	cmp	r3, #0
 bne 3f
10005a84:	d102      	bne.n	10005a8c <last0+0x3c>
 cmp r2,r4                 @ y>=x?
10005a86:	42a2      	cmp	r2, r4
 bhs 4f
10005a88:	d20a      	bcs.n	10005aa0 <last0+0x50>
 pop {r4-r7,r15}
10005a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3:
 adds r0,#1                @ qu++
10005a8c:	3001      	adds	r0, #1
 bcc 2f
10005a8e:	d300      	bcc.n	10005a92 <last0+0x42>
 adds r1,#1
10005a90:	3101      	adds	r1, #1
2:
 subs r2,r4                @ y-=x
10005a92:	1b12      	subs	r2, r2, r4
 bcs 3b
10005a94:	d2fa      	bcs.n	10005a8c <last0+0x3c>
 subs r3,#1
10005a96:	3b01      	subs	r3, #1
 bne 3b
10005a98:	d1f8      	bne.n	10005a8c <last0+0x3c>

1:
 cmp r2,r4
10005a9a:	42a2      	cmp	r2, r4
 bhs 4f
10005a9c:	d200      	bcs.n	10005aa0 <last0+0x50>
 pop {r4-r7,r15}
10005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

4:
 adds r0,#1                @ qu++
10005aa0:	3001      	adds	r0, #1
 bcc 2f
10005aa2:	d300      	bcc.n	10005aa6 <last0+0x56>
 adds r1,#1
10005aa4:	3101      	adds	r1, #1
2:
 subs r2,r4                @ y-=x
10005aa6:	1b12      	subs	r2, r2, r4
 b 1b
10005aa8:	e7f7      	b.n	10005a9a <last0+0x4a>

10005aaa <y64_x48>:

y64_x48:
@ here x is 33..64 bits
 push {r4-r7,r14}          @ save a copy of x
10005aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 lsrs r4,r3,#16
10005aac:	0c1c      	lsrs	r4, r3, #16
 beq 1f
10005aae:	d000      	beq.n	10005ab2 <y64_x48+0x8>
 b y64_x64                 @ jump if x is 49..64 bits
10005ab0:	e080      	b.n	10005bb4 <y64_x64>
1:
 push {r2-r3}              @ save a copy of x
10005ab2:	b40c      	push	{r2, r3}
@ here x is 33..48 bits
 movs r5,#0                @ xsh=0
10005ab4:	2500      	movs	r5, #0
 lsrs r4,r3,#8
10005ab6:	0a1c      	lsrs	r4, r3, #8
 bne 1f
10005ab8:	d104      	bne.n	10005ac4 <y64_x48+0x1a>
 lsls r3,#8
10005aba:	021b      	lsls	r3, r3, #8
 lsrs r6,r2,#24
10005abc:	0e16      	lsrs	r6, r2, #24
 orrs r3,r6
10005abe:	4333      	orrs	r3, r6
 lsls r2,#8                @ if(x0<1U<<40) x0<<=8,xsh =8;
10005ac0:	0212      	lsls	r2, r2, #8
 adds r5,#8
10005ac2:	3508      	adds	r5, #8
1:
 lsrs r4,r3,#12
10005ac4:	0b1c      	lsrs	r4, r3, #12
 bne 1f
10005ac6:	d104      	bne.n	10005ad2 <y64_x48+0x28>
 lsls r3,#4
10005ac8:	011b      	lsls	r3, r3, #4
 lsrs r6,r2,#28
10005aca:	0f16      	lsrs	r6, r2, #28
 orrs r3,r6
10005acc:	4333      	orrs	r3, r6
 lsls r2,#4                @ if(x0<1U<<44) x0<<=4,xsh+=4;
10005ace:	0112      	lsls	r2, r2, #4
 adds r5,#4
10005ad0:	3504      	adds	r5, #4
1:
 lsrs r4,r3,#14
10005ad2:	0b9c      	lsrs	r4, r3, #14
 bne 1f
10005ad4:	d104      	bne.n	10005ae0 <y64_x48+0x36>
 lsls r3,#2
10005ad6:	009b      	lsls	r3, r3, #2
 lsrs r6,r2,#30
10005ad8:	0f96      	lsrs	r6, r2, #30
 orrs r3,r6
10005ada:	4333      	orrs	r3, r6
 lsls r2,#2                @ if(x0<1U<<46) x0<<=2,xsh+=2;
10005adc:	0092      	lsls	r2, r2, #2
 adds r5,#2
10005ade:	3502      	adds	r5, #2
1:
 lsrs r4,r3,#15
10005ae0:	0bdc      	lsrs	r4, r3, #15
 bne 1f
10005ae2:	d102      	bne.n	10005aea <y64_x48+0x40>
 adds r2,r2
10005ae4:	1892      	adds	r2, r2, r2
 adcs r3,r3                @ if(x0<1U<<47) x0<<=1,xsh+=1;
10005ae6:	415b      	adcs	r3, r3
 adds r5,#1
10005ae8:	3501      	adds	r5, #1
1:
@ now 2^47<=x0<2^48, 0<=xsh<16 (amount x is shifted in x0); number of quotient bits to be calculated qb=xsh+17 17<=qb<33
 movs r4,r3
10005aea:	001c      	movs	r4, r3
 adds r7,r2,r2
10005aec:	1897      	adds	r7, r2, r2
 adcs r4,r4
10005aee:	4164      	adcs	r4, r4
 adds r4,#1                @ x1=(ui32)(x0>>31)+1; // 2^16<x1<=2^17
10005af0:	3401      	adds	r4, #1

 ldr r7,=SIO_BASE
10005af2:	4f46      	ldr	r7, [pc, #280]	; (10005c0c <y64_x64+0x58>)
 str r4,[r7,#SIO_DIV_UDIVISOR_OFFSET]
10005af4:	667c      	str	r4, [r7, #100]	; 0x64
 ldr r4,=0xffffffff
10005af6:	4c46      	ldr	r4, [pc, #280]	; (10005c10 <y64_x64+0x5c>)
 str r4,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
10005af8:	663c      	str	r4, [r7, #96]	; 0x60
 lsrs r6,r1,#16
10005afa:	0c0e      	lsrs	r6, r1, #16
 wait_div 1
10005afc:	e7ff      	b.n	10005afe <y64_x48+0x54>
10005afe:	e7ff      	b.n	10005b00 <y64_x48+0x56>
10005b00:	e7ff      	b.n	10005b02 <y64_x48+0x58>
10005b02:	46c0      	nop			; (mov r8, r8)
 ldr r4,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ r=0xffffffffU/x1; 2^15<=r<2^16 r is a normalised reciprocal of x, guaranteed not an overestimate
10005b04:	6f3c      	ldr	r4, [r7, #112]	; 0x70
@ r0:r1 y
@ r2:r3 x0
@ r4    r
@ r5    xsh 0<=xsh<16

 muls r6,r4
10005b06:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>48)*r)>>16;
10005b08:	0c36      	lsrs	r6, r6, #16
 lsls r7,r6,#13
10005b0a:	0377      	lsls	r7, r6, #13
 mov r14,r7                @ save q<<13
10005b0c:	46be      	mov	lr, r7
 uxth r7,r2                @ x0l
10005b0e:	b297      	uxth	r7, r2
 muls r7,r6
10005b10:	4377      	muls	r7, r6
 subs r0,r7
10005b12:	1bc0      	subs	r0, r0, r7
 bcs 1f
10005b14:	d200      	bcs.n	10005b18 <y64_x48+0x6e>
 subs r1,#1
10005b16:	3901      	subs	r1, #1
1:
 subs r0,r7
10005b18:	1bc0      	subs	r0, r0, r7
 bcs 1f
10005b1a:	d200      	bcs.n	10005b1e <y64_x48+0x74>
 subs r1,#1
10005b1c:	3901      	subs	r1, #1
1:
 uxth r7,r3                @ x0h
10005b1e:	b29f      	uxth	r7, r3
 muls r7,r6
10005b20:	4377      	muls	r7, r6
 subs r1,r7
10005b22:	1bc9      	subs	r1, r1, r7
 subs r1,r7
10005b24:	1bc9      	subs	r1, r1, r7
 lsrs r7,r2,#16            @ x0m
10005b26:	0c17      	lsrs	r7, r2, #16
 muls r7,r6
10005b28:	4377      	muls	r7, r6
 lsls r6,r7,#17
10005b2a:	047e      	lsls	r6, r7, #17
 lsrs r7,#15
10005b2c:	0bff      	lsrs	r7, r7, #15
 subs r0,r6
10005b2e:	1b80      	subs	r0, r0, r6
 sbcs r1,r7                @ y-=((ui64)q*x0)<<1;
10005b30:	41b9      	sbcs	r1, r7

 lsrs r6,r1,#3             @ y>>35
10005b32:	08ce      	lsrs	r6, r1, #3
 muls r6,r4
10005b34:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>35)*r)>>16;
10005b36:	0c36      	lsrs	r6, r6, #16

 cmp r5,#12
10005b38:	2d0c      	cmp	r5, #12
 blt last1                 @ if(xsh<12) goto last1;
10005b3a:	db33      	blt.n	10005ba4 <last1>

 add r14,r6                @ qu<<13+q
10005b3c:	44b6      	add	lr, r6
 lsrs r2,#12
10005b3e:	0b12      	lsrs	r2, r2, #12
 lsls r7,r3,#20
10005b40:	051f      	lsls	r7, r3, #20
 orrs r2,r7
10005b42:	433a      	orrs	r2, r7
 lsrs r3,#12               @ x0>>12
10005b44:	0b1b      	lsrs	r3, r3, #12

 uxth r7,r2                @ x0l
10005b46:	b297      	uxth	r7, r2
 muls r7,r6
10005b48:	4377      	muls	r7, r6
 subs r0,r7
10005b4a:	1bc0      	subs	r0, r0, r7
 bcs 1f
10005b4c:	d200      	bcs.n	10005b50 <y64_x48+0xa6>
 subs r1,#1
10005b4e:	3901      	subs	r1, #1
1:
 uxth r7,r3                @ x0h
10005b50:	b29f      	uxth	r7, r3
 muls r7,r6
10005b52:	4377      	muls	r7, r6
 subs r1,r7
10005b54:	1bc9      	subs	r1, r1, r7
 lsrs r7,r2,#16            @ x0m
10005b56:	0c17      	lsrs	r7, r2, #16
 muls r7,r6
10005b58:	4377      	muls	r7, r6
 lsls r6,r7,#16
10005b5a:	043e      	lsls	r6, r7, #16
 lsrs r7,#16
10005b5c:	0c3f      	lsrs	r7, r7, #16
 subs r0,r6
10005b5e:	1b80      	subs	r0, r0, r6
 sbcs r1,r7                @ y-=((ui64)q*x0)>>12
10005b60:	41b9      	sbcs	r1, r7

 lsrs r6,r0,#22
10005b62:	0d86      	lsrs	r6, r0, #22
 lsls r7,r1,#10
10005b64:	028f      	lsls	r7, r1, #10
 orrs r6,r7                @ y>>22
10005b66:	433e      	orrs	r6, r7
 muls r6,r4
10005b68:	4366      	muls	r6, r4
 movs r7,#41
10005b6a:	2729      	movs	r7, #41	; 0x29
 subs r7,r5
10005b6c:	1b7f      	subs	r7, r7, r5
 lsrs r6,r7                @ q=((ui32)(y>>22)*r)>>(16+25-xsh)
10005b6e:	40fe      	lsrs	r6, r7

 subs r5,#12
10005b70:	3d0c      	subs	r5, #12
 mov r7,r14
10005b72:	4677      	mov	r7, lr
 lsls r7,r5
10005b74:	40af      	lsls	r7, r5
2:
 adds r7,r6                @ qu=(qu<<(xsh-12))+q
10005b76:	19bf      	adds	r7, r7, r6
 pop {r4,r5}               @ recall x
10005b78:	bc30      	pop	{r4, r5}
@ r0:r1 y
@ r4:r5 x
@ r6 q
@ r7 qu

 uxth r2,r4
10005b7a:	b2a2      	uxth	r2, r4
 uxth r3,r5
10005b7c:	b2ab      	uxth	r3, r5
 muls r2,r6                @ xlo*q
10005b7e:	4372      	muls	r2, r6
 muls r3,r6                @ xhi*q
10005b80:	4373      	muls	r3, r6
 subs r0,r2
10005b82:	1a80      	subs	r0, r0, r2
 sbcs r1,r3
10005b84:	4199      	sbcs	r1, r3
 lsrs r2,r4,#16
10005b86:	0c22      	lsrs	r2, r4, #16
 muls r2,r6
10005b88:	4372      	muls	r2, r6
 lsrs r3,r2,#16
10005b8a:	0c13      	lsrs	r3, r2, #16
 lsls r2,#16               @ xm*q
10005b8c:	0412      	lsls	r2, r2, #16
 subs r0,r2
10005b8e:	1a80      	subs	r0, r0, r2
 sbcs r1,r3                @ y-=(ui64)q*x
10005b90:	4199      	sbcs	r1, r3

1:
 movs r2,r0
10005b92:	0002      	movs	r2, r0
 movs r3,r1
10005b94:	000b      	movs	r3, r1
 adds r7,#1
10005b96:	3701      	adds	r7, #1
 subs r0,r4
10005b98:	1b00      	subs	r0, r0, r4
 sbcs r1,r5                @ while(y>=x) y-=x,qu++;
10005b9a:	41a9      	sbcs	r1, r5
 bhs 1b
10005b9c:	d2f9      	bcs.n	10005b92 <y64_x48+0xe8>
 subs r0,r7,#1             @ correction to qu
10005b9e:	1e78      	subs	r0, r7, #1
 movs r1,#0
10005ba0:	2100      	movs	r1, #0
 pop {r4-r7,r15}
10005ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10005ba4 <last1>:
@ r0:r1 y
@ r2:r3 x0
@ r5 xsh
@ r6 q

 movs r7,#12
10005ba4:	270c      	movs	r7, #12
 subs r7,r5
10005ba6:	1b7f      	subs	r7, r7, r5
 lsrs r6,r7                @ q>>=12-xsh
10005ba8:	40fe      	lsrs	r6, r7
 mov r7,r14
10005baa:	4677      	mov	r7, lr
 lsrs r7,#13
10005bac:	0b7f      	lsrs	r7, r7, #13
 lsls r7,r5
10005bae:	40af      	lsls	r7, r5
 adds r7,r7                @ qu<<(xsh+1)
10005bb0:	19ff      	adds	r7, r7, r7
 b 2b
10005bb2:	e7e0      	b.n	10005b76 <y64_x48+0xcc>

10005bb4 <y64_x64>:

y64_x64:
@ here x is 49..64 bits
 movs r4,#0                @ q=0 if x>>32==0xffffffff
10005bb4:	2400      	movs	r4, #0
 adds r5,r3,#1
10005bb6:	1c5d      	adds	r5, r3, #1
 beq 1f
10005bb8:	d007      	beq.n	10005bca <y64_x64+0x16>

 ldr r7,=SIO_BASE
10005bba:	4f14      	ldr	r7, [pc, #80]	; (10005c0c <y64_x64+0x58>)
 str r5,[r7,#SIO_DIV_UDIVISOR_OFFSET]
10005bbc:	667d      	str	r5, [r7, #100]	; 0x64
 str r1,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
10005bbe:	6639      	str	r1, [r7, #96]	; 0x60
 wait_div 0
10005bc0:	e7ff      	b.n	10005bc2 <y64_x64+0xe>
10005bc2:	e7ff      	b.n	10005bc4 <y64_x64+0x10>
10005bc4:	e7ff      	b.n	10005bc6 <y64_x64+0x12>
10005bc6:	e7ff      	b.n	10005bc8 <y64_x64+0x14>
 ldr r4,[r7,#SIO_DIV_QUOTIENT_OFFSET] @ q=(ui32)(y>>32)/((x>>32)+1)
10005bc8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
1:
 uxth r5,r2
10005bca:	b295      	uxth	r5, r2
 uxth r6,r3
10005bcc:	b29e      	uxth	r6, r3
 muls r5,r4
10005bce:	4365      	muls	r5, r4
 muls r6,r4
10005bd0:	4366      	muls	r6, r4
 subs r0,r5
10005bd2:	1b40      	subs	r0, r0, r5
 sbcs r1,r6
10005bd4:	41b1      	sbcs	r1, r6
 lsrs r5,r2,#16
10005bd6:	0c15      	lsrs	r5, r2, #16
 lsrs r6,r3,#16
10005bd8:	0c1e      	lsrs	r6, r3, #16
 muls r5,r4
10005bda:	4365      	muls	r5, r4
 muls r6,r4
10005bdc:	4366      	muls	r6, r4
 lsls r6,#16
10005bde:	0436      	lsls	r6, r6, #16
 lsrs r7,r5,#16
10005be0:	0c2f      	lsrs	r7, r5, #16
 orrs r6,r7
10005be2:	433e      	orrs	r6, r7
 lsls r5,#16
10005be4:	042d      	lsls	r5, r5, #16
 subs r0,r5
10005be6:	1b40      	subs	r0, r0, r5
 sbcs r1,r6                @   y-=(ui64)q*x
10005be8:	41b1      	sbcs	r1, r6

 cmp r1,r3                 @   while(y>=x) y-=x,q++
10005bea:	4299      	cmp	r1, r3
 bhs 1f
10005bec:	d204      	bcs.n	10005bf8 <y64_x64+0x44>
3:
 movs r2,r0
10005bee:	0002      	movs	r2, r0
 movs r3,r1
10005bf0:	000b      	movs	r3, r1
 movs r0,r4
10005bf2:	0020      	movs	r0, r4
 movs r1,#0
10005bf4:	2100      	movs	r1, #0
 pop {r4-r7,r15}
10005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1:
 bne 2f
10005bf8:	d101      	bne.n	10005bfe <y64_x64+0x4a>
 cmp r0,r2
10005bfa:	4290      	cmp	r0, r2
 blo 3b
10005bfc:	d3f7      	bcc.n	10005bee <y64_x64+0x3a>
2:
 subs r0,r2
10005bfe:	1a80      	subs	r0, r0, r2
 sbcs r1,r3
10005c00:	4199      	sbcs	r1, r3
 adds r4,#1
10005c02:	3401      	adds	r4, #1
 cmp r1,r3
10005c04:	4299      	cmp	r1, r3
 blo 3b
10005c06:	d3f2      	bcc.n	10005bee <y64_x64+0x3a>
 b 1b
10005c08:	e7f6      	b.n	10005bf8 <y64_x64+0x44>
10005c0a:	0000      	.short	0x0000
 ldr r7,=SIO_BASE
10005c0c:	d0000000 	.word	0xd0000000
 ldr r4,=0xffffffff
10005c10:	ffffffff 	.word	0xffffffff

10005c14 <__wrap___aeabi_drsub>:
// double FUNC_NAME(__aeabi_drsub)(double x, double y)    double-precision reverse subtraction, y - x

// frsub first because it is the only one that needs alignment
.align 2
wrapper_func __aeabi_drsub
    eors r0, r1
10005c14:	4048      	eors	r0, r1
    eors r1, r0
10005c16:	4041      	eors	r1, r0
    eors r0, r1
10005c18:	4048      	eors	r0, r1

10005c1a <__wrap___aeabi_dsub>:
    b ddiv_dsub_nan_helper
1:
    mov r0, ip
2:
#endif
   shimmable_table_tail_call SF_TABLE_FSUB dsub_shim
10005c1a:	b418      	push	{r3, r4}
10005c1c:	4b1b      	ldr	r3, [pc, #108]	; (10005c8c <__wrap___aeabi_dmul+0x12>)
10005c1e:	685b      	ldr	r3, [r3, #4]
10005c20:	46fc      	mov	ip, pc
10005c22:	9301      	str	r3, [sp, #4]
10005c24:	bd08      	pop	{r3, pc}
10005c26:	df04      	.short	0xdf04
10005c28:	10005e17 	.word	0x10005e17

10005c2c <__wrap___aeabi_dadd>:

wrapper_func_d2 __aeabi_dadd
   shimmable_table_tail_call SF_TABLE_FADD dadd_shim
10005c2c:	b418      	push	{r3, r4}
10005c2e:	4b17      	ldr	r3, [pc, #92]	; (10005c8c <__wrap___aeabi_dmul+0x12>)
10005c30:	681b      	ldr	r3, [r3, #0]
10005c32:	46fc      	mov	ip, pc
10005c34:	9301      	str	r3, [sp, #4]
10005c36:	bd08      	pop	{r3, pc}
10005c38:	5e21df00 	.word	0x5e21df00
10005c3c:	1000      	.short	0x1000

10005c3e <__wrap___aeabi_ddiv>:
    b ddiv_dsub_nan_helper
1:
#endif
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    mov ip, r2
10005c3e:	4694      	mov	ip, r2
    ldr r2, =(SIO_BASE)
10005c40:	4a13      	ldr	r2, [pc, #76]	; (10005c90 <__wrap___aeabi_dmul+0x16>)
    ldr r2, [r2, #SIO_DIV_CSR_OFFSET]
10005c42:	6f92      	ldr	r2, [r2, #120]	; 0x78
    lsrs r2, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
10005c44:	0892      	lsrs	r2, r2, #2
    bcs ddiv_save_state
10005c46:	d209      	bcs.n	10005c5c <ddiv_save_state>
    mov r2, ip
10005c48:	4662      	mov	r2, ip

10005c4a <ddiv_shim_call>:
    bl ddiv_shim_call
    msr PRIMASK, r4
    pop {r4, pc}
#endif
ddiv_shim_call:
    shimmable_table_tail_call SF_TABLE_FDIV ddiv_shim
10005c4a:	b418      	push	{r3, r4}
10005c4c:	4b0f      	ldr	r3, [pc, #60]	; (10005c8c <__wrap___aeabi_dmul+0x12>)
10005c4e:	68db      	ldr	r3, [r3, #12]
10005c50:	46fc      	mov	ip, pc
10005c52:	9301      	str	r3, [sp, #4]
10005c54:	bd08      	pop	{r3, pc}
10005c56:	df0c      	.short	0xdf0c
10005c58:	100060d9 	.word	0x100060d9

10005c5c <ddiv_save_state>:

#if !PICO_DIVIDER_DISABLE_INTERRUPTS
ddiv_save_state:
    ldr r2, =(SIO_BASE)
10005c5c:	4a0c      	ldr	r2, [pc, #48]	; (10005c90 <__wrap___aeabi_dmul+0x16>)
    save_div_state_and_lr
10005c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
10005c60:	6e14      	ldr	r4, [r2, #96]	; 0x60
10005c62:	6e55      	ldr	r5, [r2, #100]	; 0x64
10005c64:	6f57      	ldr	r7, [r2, #116]	; 0x74
10005c66:	6f16      	ldr	r6, [r2, #112]	; 0x70
    mov r2, ip
10005c68:	4662      	mov	r2, ip
    bl ddiv_shim_call
10005c6a:	f7ff ffee 	bl	10005c4a <ddiv_shim_call>
    ldr r2, =(SIO_BASE)
10005c6e:	4a08      	ldr	r2, [pc, #32]	; (10005c90 <__wrap___aeabi_dmul+0x16>)
    restore_div_state_and_return
10005c70:	6614      	str	r4, [r2, #96]	; 0x60
10005c72:	6655      	str	r5, [r2, #100]	; 0x64
10005c74:	6757      	str	r7, [r2, #116]	; 0x74
10005c76:	6716      	str	r6, [r2, #112]	; 0x70
10005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

10005c7a <__wrap___aeabi_dmul>:
3:
    add sp, #16
    pop {pc}
1:
#endif
   shimmable_table_tail_call SF_TABLE_FMUL dmul_shim
10005c7a:	b418      	push	{r3, r4}
10005c7c:	4b03      	ldr	r3, [pc, #12]	; (10005c8c <__wrap___aeabi_dmul+0x12>)
10005c7e:	689b      	ldr	r3, [r3, #8]
10005c80:	46fc      	mov	ip, pc
10005c82:	9301      	str	r3, [sp, #4]
10005c84:	bd08      	pop	{r3, pc}
10005c86:	df08      	.short	0xdf08
10005c88:	10005f7d 	.word	0x10005f7d
   shimmable_table_tail_call SF_TABLE_FSUB dsub_shim
10005c8c:	20001444 	.word	0x20001444
    ldr r2, =(SIO_BASE)
10005c90:	d0000000 	.word	0xd0000000

10005c94 <__wrap___aeabi_cdrcmple>:

// void FUNC_NAME(__aeabi_cdrcmple)(double, double)         reversed 3-way (<, =, ?>) compare [1], result in PSR ZC flags
double_wrapper_section __aeabi_cdcmple

wrapper_func __aeabi_cdrcmple
 push {r0-r7,r14}
10005c94:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    eors r0, r2
10005c96:	4050      	eors	r0, r2
    eors r2, r0
10005c98:	4042      	eors	r2, r0
    eors r0, r2
10005c9a:	4050      	eors	r0, r2
    eors r1, r3
10005c9c:	4059      	eors	r1, r3
    eors r3, r1
10005c9e:	404b      	eors	r3, r1
    eors r1, r3
10005ca0:	4059      	eors	r1, r3
    b __aeabi_dfcmple_guts
10005ca2:	e000      	b.n	10005ca6 <__aeabi_dfcmple_guts>

10005ca4 <__wrap___aeabi_cdcmpeq>:
@ compare r0:r1 against r2:r3, returning -1/0/1 for <, =, >
@ also set flags accordingly
.align 2
wrapper_func __aeabi_cdcmple
wrapper_func __aeabi_cdcmpeq
 push {r0-r7,r14}
10005ca4:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

10005ca6 <__aeabi_dfcmple_guts>:
__aeabi_dfcmple_guts:
 ldr r7,=0x7ff                @ flush NaNs and denormals
10005ca6:	4f15      	ldr	r7, [pc, #84]	; (10005cfc <__aeabi_dfcmple_guts+0x56>)
 lsls r4,r1,#1
10005ca8:	004c      	lsls	r4, r1, #1
 lsrs r4,#21
10005caa:	0d64      	lsrs	r4, r4, #21
 beq 1f
10005cac:	d003      	beq.n	10005cb6 <__aeabi_dfcmple_guts+0x10>
 cmp r4,r7
10005cae:	42bc      	cmp	r4, r7
 bne 2f
10005cb0:	d104      	bne.n	10005cbc <__aeabi_dfcmple_guts+0x16>
 lsls r4, r1, #12
10005cb2:	030c      	lsls	r4, r1, #12
 bhi 7f
10005cb4:	d814      	bhi.n	10005ce0 <__aeabi_dfcmple_guts+0x3a>
1:
 movs r0,#0
10005cb6:	2000      	movs	r0, #0
 lsrs r1,#20
10005cb8:	0d09      	lsrs	r1, r1, #20
 lsls r1,#20
10005cba:	0509      	lsls	r1, r1, #20
2:
 lsls r4,r3,#1
10005cbc:	005c      	lsls	r4, r3, #1
 lsrs r4,#21
10005cbe:	0d64      	lsrs	r4, r4, #21
 beq 1f
10005cc0:	d003      	beq.n	10005cca <__aeabi_dfcmple_guts+0x24>
 cmp r4,r7
10005cc2:	42bc      	cmp	r4, r7
 bne 2f
10005cc4:	d104      	bne.n	10005cd0 <__aeabi_dfcmple_guts+0x2a>
 lsls r4, r3, #12
10005cc6:	031c      	lsls	r4, r3, #12
 bhi 7f
10005cc8:	d80a      	bhi.n	10005ce0 <__aeabi_dfcmple_guts+0x3a>
1:
 movs r2,#0
10005cca:	2200      	movs	r2, #0
 lsrs r3,#20
10005ccc:	0d1b      	lsrs	r3, r3, #20
 lsls r3,#20
10005cce:	051b      	lsls	r3, r3, #20
2:
 movs r6,#1
10005cd0:	2601      	movs	r6, #1
 eors r3,r1
10005cd2:	404b      	eors	r3, r1
 bmi 4f                        @ opposite signs? then can proceed on basis of sign of x
10005cd4:	d409      	bmi.n	10005cea <__aeabi_dfcmple_guts+0x44>
 eors r3,r1                    @ restore r3
10005cd6:	404b      	eors	r3, r1
 bpl 2f
10005cd8:	d503      	bpl.n	10005ce2 <__aeabi_dfcmple_guts+0x3c>
 cmp r3,r1
10005cda:	428b      	cmp	r3, r1
 bne 7f
10005cdc:	d100      	bne.n	10005ce0 <__aeabi_dfcmple_guts+0x3a>
1:
 cmp r2,r0
10005cde:	4282      	cmp	r2, r0
7:
 pop {r0-r7,r15}
10005ce0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
2:
 cmp r1,r3
10005ce2:	4299      	cmp	r1, r3
 bne 7b
10005ce4:	d1fc      	bne.n	10005ce0 <__aeabi_dfcmple_guts+0x3a>
1:
 cmp r0,r2
10005ce6:	4290      	cmp	r0, r2
 pop {r0-r7,r15}
10005ce8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
4:
 orrs r3,r1                    @ make -0==+0
10005cea:	430b      	orrs	r3, r1
 adds r3,r3
10005cec:	18db      	adds	r3, r3, r3
 orrs r3,r0
10005cee:	4303      	orrs	r3, r0
 orrs r3,r2
10005cf0:	4313      	orrs	r3, r2
 beq 7b
10005cf2:	d0f5      	beq.n	10005ce0 <__aeabi_dfcmple_guts+0x3a>
 mvns r1, r1     @ carry inverse of r1 sign
10005cf4:	43c9      	mvns	r1, r1
 adds r1, r1
10005cf6:	1849      	adds	r1, r1, r1
 pop {r0-r7,r15}
10005cf8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
10005cfa:	0000      	.short	0x0000
 ldr r7,=0x7ff                @ flush NaNs and denormals
10005cfc:	000007ff 	.word	0x000007ff

10005d00 <__wrap___aeabi_dcmplt>:

// int FUNC_NAME(__aeabi_dcmplt)(double, double)         result (1, 0) denotes (<, ?>=) [2], use for C <
double_wrapper_section __aeabi_dcmplt
.align 2
wrapper_func __aeabi_dcmplt
    push {lr}
10005d00:	b500      	push	{lr}
    bl __aeabi_cdcmple
10005d02:	f7ff ffcf 	bl	10005ca4 <__wrap___aeabi_cdcmpeq>
    sbcs r0, r0
10005d06:	4180      	sbcs	r0, r0
    pop {pc}
10005d08:	bd00      	pop	{pc}
10005d0a:	46c0      	nop			; (mov r8, r8)

10005d0c <__wrap___aeabi_dcmpge>:

// int FUNC_NAME(__aeabi_dcmpge)(double, double)         result (1, 0) denotes (>=, ?<) [2], use for C >=
double_wrapper_section __aeabi_dcmpge
.align 2
wrapper_func __aeabi_dcmpge
    push {lr}
10005d0c:	b500      	push	{lr}
    // because of NaNs it is better to reverse the args than the result
    bl __aeabi_cdrcmple
10005d0e:	f7ff ffc1 	bl	10005c94 <__wrap___aeabi_cdrcmple>
    bls 1f
10005d12:	d901      	bls.n	10005d18 <__wrap___aeabi_dcmpge+0xc>
    movs r0, #0
10005d14:	2000      	movs	r0, #0
    pop {pc}
10005d16:	bd00      	pop	{pc}
1:
    movs r0, #1
10005d18:	2001      	movs	r0, #1
    pop {pc}
10005d1a:	bd00      	pop	{pc}

10005d1c <__wrap___aeabi_dcmpgt>:

// int FUNC_NAME(__aeabi_dcmpgt)(double, double)         result (1, 0) denotes (>, ?<=) [2], use for C >
double_wrapper_section __aeabi_dcmpgt
wrapper_func __aeabi_dcmpgt
    push {lr}
10005d1c:	b500      	push	{lr}
    // because of NaNs it is better to reverse the args than the result
    bl __aeabi_cdrcmple
10005d1e:	f7ff ffb9 	bl	10005c94 <__wrap___aeabi_cdrcmple>
    sbcs r0, r0
10005d22:	4180      	sbcs	r0, r0
    pop {pc}
10005d24:	bd00      	pop	{pc}

10005d26 <__wrap___aeabi_dcmpun>:

// int FUNC_NAME(__aeabi_dcmpun)(double, double)         result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
double_wrapper_section __aeabi_dcmpun
wrapper_func __aeabi_dcmpun
   movs r0, #1
10005d26:	2001      	movs	r0, #1
   lsls r0, #21
10005d28:	0540      	lsls	r0, r0, #21
   lsls r2, r1, #1
10005d2a:	004a      	lsls	r2, r1, #1
   adds r2, r0
10005d2c:	1812      	adds	r2, r2, r0
   bhi 1f
10005d2e:	d804      	bhi.n	10005d3a <__wrap___aeabi_dcmpun+0x14>
   lsls r2, r3, #1
10005d30:	005a      	lsls	r2, r3, #1
   adds r2, r0
10005d32:	1812      	adds	r2, r2, r0
   bhi 1f
10005d34:	d801      	bhi.n	10005d3a <__wrap___aeabi_dcmpun+0x14>
   movs r0, #0
10005d36:	2000      	movs	r0, #0
   bx lr
10005d38:	4770      	bx	lr
1:
   movs r0, #1
10005d3a:	2001      	movs	r0, #1
   bx lr
10005d3c:	4770      	bx	lr

    movs r0, #0
10005d3e:	2000      	movs	r0, #0
    bx lr
10005d40:	4770      	bx	lr
	...

10005d44 <__wrap___aeabi_ui2d>:
    shimmable_table_tail_call SF_TABLE_UINT2FLOAT uint2double_shim

double_wrapper_section __aeabi_i2d

wrapper_func __aeabi_ui2d
    movs r1, #0
10005d44:	2100      	movs	r1, #0
    cmp r0, #0
10005d46:	2800      	cmp	r0, #0
    bne 2f
10005d48:	d105      	bne.n	10005d56 <__wrap___aeabi_i2d+0xa>
1:
    bx lr
10005d4a:	4770      	bx	lr

10005d4c <__wrap___aeabi_i2d>:
// double FUNC_NAME(__aeabi_i2d)(int)                     integer to double (double precision) conversion
wrapper_func __aeabi_i2d
    asrs r1, r0, #31
10005d4c:	17c1      	asrs	r1, r0, #31
    eors r0, r1
10005d4e:	4048      	eors	r0, r1
    subs r0, r1
10005d50:	1a40      	subs	r0, r0, r1
    beq 1b
10005d52:	d0fa      	beq.n	10005d4a <__wrap___aeabi_ui2d+0x6>
    lsls r1, #31
10005d54:	07c9      	lsls	r1, r1, #31
2:
    push {r0, r1, r4, lr}
10005d56:	b513      	push	{r0, r1, r4, lr}
    ldr r3, =sf_clz_func
10005d58:	4b06      	ldr	r3, [pc, #24]	; (10005d74 <__wrap___aeabi_i2d+0x28>)
    ldr r3, [r3]
10005d5a:	681b      	ldr	r3, [r3, #0]
    blx r3
10005d5c:	4798      	blx	r3
    pop {r2, r3}
10005d5e:	bc0c      	pop	{r2, r3}
    adds r4, r0, #1
10005d60:	1c44      	adds	r4, r0, #1
    lsls r2, r4
10005d62:	40a2      	lsls	r2, r4
    lsls r0, r2, #20
10005d64:	0510      	lsls	r0, r2, #20
    lsrs r2, #12
10005d66:	0b12      	lsrs	r2, r2, #12
    ldr r1,=1055
10005d68:	4903      	ldr	r1, [pc, #12]	; (10005d78 <__wrap___aeabi_i2d+0x2c>)
    subs r1, r4
10005d6a:	1b09      	subs	r1, r1, r4
    lsls r1, #20
10005d6c:	0509      	lsls	r1, r1, #20
    orrs r1, r3
10005d6e:	4319      	orrs	r1, r3
    orrs r1, r2
10005d70:	4311      	orrs	r1, r2
    pop {r4, pc}
10005d72:	bd10      	pop	{r4, pc}
    ldr r3, =sf_clz_func
10005d74:	20001544 	.word	0x20001544
    ldr r1,=1055
10005d78:	0000041f 	.word	0x0000041f

10005d7c <__wrap___aeabi_d2iz>:

// int FUNC_NAME(__aeabi_d2iz)(double)                     double (double precision) to integer C-style conversion [3]
double_wrapper_section __aeabi_d2iz
wrapper_func __aeabi_d2iz
regular_func double2int_z
    push {r4, lr}
10005d7c:	b510      	push	{r4, lr}
    lsls r4, r1, #1
10005d7e:	004c      	lsls	r4, r1, #1
    lsrs r2, r4, #21
10005d80:	0d62      	lsrs	r2, r4, #21
    movs r3, #0x80
10005d82:	2380      	movs	r3, #128	; 0x80
    adds r2, r3
10005d84:	18d2      	adds	r2, r2, r3
    lsls r3, #3
10005d86:	00db      	lsls	r3, r3, #3
    subs r2, r3
10005d88:	1ad2      	subs	r2, r2, r3
    lsls r3, #21
10005d8a:	055b      	lsls	r3, r3, #21
    cmp r2, #126
10005d8c:	2a7e      	cmp	r2, #126	; 0x7e
    ble 1f
10005d8e:	dd10      	ble.n	10005db2 <__wrap___aeabi_d2iz+0x36>
    subs r2, #158
10005d90:	3a9e      	subs	r2, #158	; 0x9e
    bge 2f
10005d92:	da13      	bge.n	10005dbc <__wrap___aeabi_d2iz+0x40>
    asrs r4, r1, #31
10005d94:	17cc      	asrs	r4, r1, #31
    lsls r1, #12
10005d96:	0309      	lsls	r1, r1, #12
    lsrs r1, #1
10005d98:	0849      	lsrs	r1, r1, #1
    orrs r1, r3
10005d9a:	4319      	orrs	r1, r3
    negs r2, r2
10005d9c:	4252      	negs	r2, r2
    lsrs r1, r2
10005d9e:	40d1      	lsrs	r1, r2
    lsls r4, #1
10005da0:	0064      	lsls	r4, r4, #1
    adds r4, #1
10005da2:	3401      	adds	r4, #1
    adds r2, #21
10005da4:	3215      	adds	r2, #21
    cmp r2, #32
10005da6:	2a20      	cmp	r2, #32
    bge 3f
10005da8:	da05      	bge.n	10005db6 <__wrap___aeabi_d2iz+0x3a>
    lsrs r0, r2
10005daa:	40d0      	lsrs	r0, r2
    orrs r0, r1
10005dac:	4308      	orrs	r0, r1
    muls r0, r4
10005dae:	4360      	muls	r0, r4
    pop {r4, pc}
10005db0:	bd10      	pop	{r4, pc}
1:
    movs r0, #0
10005db2:	2000      	movs	r0, #0
    pop {r4, pc}
10005db4:	bd10      	pop	{r4, pc}
3:
    mov r0, r1
10005db6:	4608      	mov	r0, r1
    muls r0, r4
10005db8:	4360      	muls	r0, r4
    pop {r4, pc}
10005dba:	bd10      	pop	{r4, pc}
2:
    // overflow
    lsrs r0, r1, #31
10005dbc:	0fc8      	lsrs	r0, r1, #31
    adds r0, r3
10005dbe:	18c0      	adds	r0, r0, r3
    subs r0, #1
10005dc0:	3801      	subs	r0, #1
    pop {r4, pc}
10005dc2:	bd10      	pop	{r4, pc}

10005dc4 <__wrap___aeabi_d2uiz>:

// unsigned FUNC_NAME(__aeabi_d2uiz)(double)             double (double precision) to unsigned C-style conversion [3]
double_wrapper_section __aeabi_d2uiz
wrapper_func __aeabi_d2uiz
regular_func double2uint
    shimmable_table_tail_call SF_TABLE_FLOAT2UINT double2uint_shim
10005dc4:	b418      	push	{r3, r4}
10005dc6:	4b04      	ldr	r3, [pc, #16]	; (10005dd8 <__wrap___aeabi_d2uiz+0x14>)
10005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005dca:	46fc      	mov	ip, pc
10005dcc:	9301      	str	r3, [sp, #4]
10005dce:	bd08      	pop	{r3, pc}
10005dd0:	6289df24 	.word	0x6289df24
10005dd4:	00001000 	.word	0x00001000
10005dd8:	20001444 	.word	0x20001444

10005ddc <double_table_shim_on_use_helper>:
#endif
.endm

double_section double_table_shim_on_use_helper
regular_func double_table_shim_on_use_helper
    push {r0-r2, lr}
10005ddc:	b507      	push	{r0, r1, r2, lr}
    mov r0, ip
10005dde:	4660      	mov	r0, ip
#ifndef NDEBUG
    // sanity check to make sure we weren't called by non (shimmable_) table_tail_call macro
    cmp r0, #0
10005de0:	2800      	cmp	r0, #0
    bne 1f
10005de2:	d100      	bne.n	10005de6 <double_table_shim_on_use_helper+0xa>
    bkpt #0
10005de4:	be00      	bkpt	0x0000
#endif
1:
    ldrh r1, [r0]
10005de6:	8801      	ldrh	r1, [r0, #0]
    lsrs r2, r1, #8
10005de8:	0a0a      	lsrs	r2, r1, #8
    adds r0, #2
10005dea:	3002      	adds	r0, #2
    cmp r2, #0xdf
10005dec:	2adf      	cmp	r2, #223	; 0xdf
    bne 1b
10005dee:	d1fa      	bne.n	10005de6 <double_table_shim_on_use_helper+0xa>
    uxtb r1, r1 // r1 holds table offset
10005df0:	b2c9      	uxtb	r1, r1
    lsrs r2, r0, #2
10005df2:	0882      	lsrs	r2, r0, #2
    bcc 1f
10005df4:	d304      	bcc.n	10005e00 <double_table_shim_on_use_helper+0x24>
    // unaligned
    ldrh r2, [r0, #0]
10005df6:	8802      	ldrh	r2, [r0, #0]
    ldrh r0, [r0, #2]
10005df8:	8840      	ldrh	r0, [r0, #2]
    lsls r0, #16
10005dfa:	0400      	lsls	r0, r0, #16
    orrs r0, r2
10005dfc:	4310      	orrs	r0, r2
    b 2f
10005dfe:	e000      	b.n	10005e02 <double_table_shim_on_use_helper+0x26>
1:
    ldr r0, [r0]
10005e00:	6800      	ldr	r0, [r0, #0]
2:
    ldr r2, =sd_table
10005e02:	4a02      	ldr	r2, [pc, #8]	; (10005e0c <double_table_shim_on_use_helper+0x30>)
    str r0, [r2, r1]
10005e04:	5050      	str	r0, [r2, r1]
    str r0, [sp, #12]
10005e06:	9003      	str	r0, [sp, #12]
    pop {r0-r2, pc}
10005e08:	bd07      	pop	{r0, r1, r2, pc}
10005e0a:	0000      	.short	0x0000
    ldr r2, =sd_table
10005e0c:	20001444 	.word	0x20001444

10005e10 <drsub_shim>:

double_section WRAPPER_FUNC_NAME(__aeabi_dsub)

# frsub first because it is the only one that needs alignment
regular_func drsub_shim
    push {r0-r3}
10005e10:	b40f      	push	{r0, r1, r2, r3}
    pop {r0-r1}
10005e12:	bc03      	pop	{r0, r1}
    pop {r2-r3}
10005e14:	bc0c      	pop	{r2, r3}

10005e16 <dsub_shim>:
    // fall thru

regular_func dsub_shim
 push {r4-r7,r14}
10005e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 movs r4,#1
10005e18:	2401      	movs	r4, #1
 lsls r4,#31
10005e1a:	07e4      	lsls	r4, r4, #31
 eors r3,r4                    @ flip sign on second argument
10005e1c:	4063      	eors	r3, r4
 b da_entry                    @ continue in dadd
10005e1e:	e000      	b.n	10005e22 <da_entry>

10005e20 <dadd_shim>:

.align 2
double_section dadd_shim
regular_func dadd_shim
 push {r4-r7,r14}
10005e20:	b5f0      	push	{r4, r5, r6, r7, lr}

10005e22 <da_entry>:
da_entry:
 mdunpacks r0,r1,r4,r6,r7
10005e22:	0d0c      	lsrs	r4, r1, #20
10005e24:	0fcf      	lsrs	r7, r1, #31
10005e26:	1e66      	subs	r6, r4, #1
10005e28:	0536      	lsls	r6, r6, #20
10005e2a:	1b89      	subs	r1, r1, r6
10005e2c:	0564      	lsls	r4, r4, #21
10005e2e:	d303      	bcc.n	10005e38 <l7_1>
10005e30:	43c9      	mvns	r1, r1
10005e32:	4240      	negs	r0, r0
10005e34:	d300      	bcc.n	10005e38 <l7_1>
10005e36:	3101      	adds	r1, #1

10005e38 <l7_1>:
10005e38:	0d64      	lsrs	r4, r4, #21
10005e3a:	d003      	beq.n	10005e44 <l7_2>
10005e3c:	1c66      	adds	r6, r4, #1
10005e3e:	0af6      	lsrs	r6, r6, #11
10005e40:	d007      	beq.n	10005e52 <l7_3>
10005e42:	1be4      	subs	r4, r4, r7

10005e44 <l7_2>:
10005e44:	2000      	movs	r0, #0
10005e46:	007f      	lsls	r7, r7, #1
10005e48:	1c79      	adds	r1, r7, #1
10005e4a:	0789      	lsls	r1, r1, #30
10005e4c:	1289      	asrs	r1, r1, #10
10005e4e:	3c80      	subs	r4, #128	; 0x80
10005e50:	0324      	lsls	r4, r4, #12

10005e52 <l7_3>:
 mdunpacks r2,r3,r5,r6,r7
10005e52:	0d1d      	lsrs	r5, r3, #20
10005e54:	0fdf      	lsrs	r7, r3, #31
10005e56:	1e6e      	subs	r6, r5, #1
10005e58:	0536      	lsls	r6, r6, #20
10005e5a:	1b9b      	subs	r3, r3, r6
10005e5c:	056d      	lsls	r5, r5, #21
10005e5e:	d303      	bcc.n	10005e68 <l8_1>
10005e60:	43db      	mvns	r3, r3
10005e62:	4252      	negs	r2, r2
10005e64:	d300      	bcc.n	10005e68 <l8_1>
10005e66:	3301      	adds	r3, #1

10005e68 <l8_1>:
10005e68:	0d6d      	lsrs	r5, r5, #21
10005e6a:	d003      	beq.n	10005e74 <l8_2>
10005e6c:	1c6e      	adds	r6, r5, #1
10005e6e:	0af6      	lsrs	r6, r6, #11
10005e70:	d007      	beq.n	10005e82 <l8_3>
10005e72:	1bed      	subs	r5, r5, r7

10005e74 <l8_2>:
10005e74:	2200      	movs	r2, #0
10005e76:	007f      	lsls	r7, r7, #1
10005e78:	1c7b      	adds	r3, r7, #1
10005e7a:	079b      	lsls	r3, r3, #30
10005e7c:	129b      	asrs	r3, r3, #10
10005e7e:	3d80      	subs	r5, #128	; 0x80
10005e80:	032d      	lsls	r5, r5, #12

10005e82 <l8_3>:
 subs r7,r5,r4                 @ ye-xe
10005e82:	1b2f      	subs	r7, r5, r4
 subs r6,r4,r5                 @ xe-ye
10005e84:	1b66      	subs	r6, r4, r5
 bmi da_ygtx
10005e86:	d458      	bmi.n	10005f3a <da_ygtx>
@ here xe>=ye: need to shift y down r6 places
 mov r12,r4                    @ save exponent
10005e88:	46a4      	mov	ip, r4
 cmp r6,#32
10005e8a:	2e20      	cmp	r6, #32
 bge da_xrgty                  @ xe rather greater than ye?
10005e8c:	da46      	bge.n	10005f1c <da_xrgty>
 adds r7,#32
10005e8e:	3720      	adds	r7, #32
 movs r4,r2
10005e90:	0014      	movs	r4, r2
 lsls r4,r4,r7                 @ rounding bit + sticky bits
10005e92:	40bc      	lsls	r4, r7

10005e94 <da_xgty0>:
da_xgty0:
 movs r5,r3
10005e94:	001d      	movs	r5, r3
 lsls r5,r5,r7
10005e96:	40bd      	lsls	r5, r7
 lsrs r2,r6
10005e98:	40f2      	lsrs	r2, r6
 asrs r3,r6
10005e9a:	4133      	asrs	r3, r6
 orrs r2,r5
10005e9c:	432a      	orrs	r2, r5

10005e9e <da_add>:
da_add:
 adds r0,r2
10005e9e:	1880      	adds	r0, r0, r2
 adcs r1,r3
10005ea0:	4159      	adcs	r1, r3

10005ea2 <da_pack>:
@ here unnormalised signed result (possibly 0) is in r0:r1 with exponent r12, rounding + sticky bits in r4
@ Note that if a large normalisation shift is required then the arguments were close in magnitude and so we
@ cannot have not gone via the xrgty/yrgtx paths. There will therefore always be enough high bits in r4
@ to provide a correct continuation of the exact result.
@ now pack result back up
 lsrs r3,r1,#31                @ get sign bit
10005ea2:	0fcb      	lsrs	r3, r1, #31
 beq 1f                        @ skip on positive
10005ea4:	d005      	beq.n	10005eb2 <da_pack+0x10>
 mvns r1,r1                    @ negate mantissa
10005ea6:	43c9      	mvns	r1, r1
 mvns r0,r0
10005ea8:	43c0      	mvns	r0, r0
 movs r2,#0
10005eaa:	2200      	movs	r2, #0
 negs r4,r4
10005eac:	4264      	negs	r4, r4
 adcs r0,r2
10005eae:	4150      	adcs	r0, r2
 adcs r1,r2
10005eb0:	4151      	adcs	r1, r2
1:
 mov r2,r12                    @ get exponent
10005eb2:	4662      	mov	r2, ip
 lsrs r5,r1,#21
10005eb4:	0d4d      	lsrs	r5, r1, #21
 bne da_0                      @ shift down required?
10005eb6:	d128      	bne.n	10005f0a <da_0>
 lsrs r5,r1,#20
10005eb8:	0d0d      	lsrs	r5, r1, #20
 bne da_1                      @ normalised?
10005eba:	d107      	bne.n	10005ecc <da_1>
 cmp r0,#0
10005ebc:	2800      	cmp	r0, #0
 beq da_5                      @ could mantissa be zero?
10005ebe:	d01f      	beq.n	10005f00 <da_5>

10005ec0 <da_2>:
da_2:
 adds r4,r4
10005ec0:	1924      	adds	r4, r4, r4
 adcs r0,r0
10005ec2:	4140      	adcs	r0, r0
 adcs r1,r1
10005ec4:	4149      	adcs	r1, r1
 subs r2,#1                    @ adjust exponent
10005ec6:	3a01      	subs	r2, #1
 lsrs r5,r1,#20
10005ec8:	0d0d      	lsrs	r5, r1, #20
 beq da_2
10005eca:	d0f9      	beq.n	10005ec0 <da_2>

10005ecc <da_1>:
da_1:
 lsls r4,#1                    @ check rounding bit
10005ecc:	0064      	lsls	r4, r4, #1
 bcc da_3
10005ece:	d306      	bcc.n	10005ede <da_3>

10005ed0 <da_4>:
da_4:
 adds r0,#1                    @ round up
10005ed0:	3001      	adds	r0, #1
 bcc 2f
10005ed2:	d300      	bcc.n	10005ed6 <da_4+0x6>
 adds r1,#1
10005ed4:	3101      	adds	r1, #1
2:
 cmp r4,#0                     @ sticky bits zero?
10005ed6:	2c00      	cmp	r4, #0
 bne da_3
10005ed8:	d101      	bne.n	10005ede <da_3>
 lsrs r0,#1                    @ round to even
10005eda:	0840      	lsrs	r0, r0, #1
 lsls r0,#1
10005edc:	0040      	lsls	r0, r0, #1

10005ede <da_3>:
da_3:
 subs r2,#1
10005ede:	3a01      	subs	r2, #1
 bmi da_6
10005ee0:	d40b      	bmi.n	10005efa <da_6>
 adds r4,r2,#2                 @ check if exponent is overflowing
10005ee2:	1c94      	adds	r4, r2, #2
 lsrs r4,#11
10005ee4:	0ae4      	lsrs	r4, r4, #11
 bne da_7
10005ee6:	d104      	bne.n	10005ef2 <da_7>
 lsls r2,#20                   @ pack exponent and sign
10005ee8:	0512      	lsls	r2, r2, #20
 add r1,r2
10005eea:	4411      	add	r1, r2
 lsls r3,#31
10005eec:	07db      	lsls	r3, r3, #31
 add r1,r3
10005eee:	4419      	add	r1, r3
 pop {r4-r7,r15}
10005ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

10005ef2 <da_7>:

da_7:
@ here exponent overflow: return signed infinity
 lsls r1,r3,#31
10005ef2:	07d9      	lsls	r1, r3, #31
 ldr r3,=0x7ff00000
10005ef4:	4b20      	ldr	r3, [pc, #128]	; (10005f78 <da_xmgty+0x4>)
 orrs r1,r3
10005ef6:	4319      	orrs	r1, r3
 b 1f
10005ef8:	e000      	b.n	10005efc <da_6+0x2>

10005efa <da_6>:
da_6:
@ here exponent underflow: return signed zero
 lsls r1,r3,#31
10005efa:	07d9      	lsls	r1, r3, #31
1:
 movs r0,#0
10005efc:	2000      	movs	r0, #0
 pop {r4-r7,r15}
10005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10005f00 <da_5>:

da_5:
@ here mantissa could be zero
 cmp r1,#0
10005f00:	2900      	cmp	r1, #0
 bne da_2
10005f02:	d1dd      	bne.n	10005ec0 <da_2>
 cmp r4,#0
10005f04:	2c00      	cmp	r4, #0
 bne da_2
10005f06:	d1db      	bne.n	10005ec0 <da_2>
@ inputs must have been of identical magnitude and opposite sign, so return +0
 pop {r4-r7,r15}
10005f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

10005f0a <da_0>:

da_0:
@ here a shift down by one place is required for normalisation
 adds r2,#1                    @ adjust exponent
10005f0a:	3201      	adds	r2, #1
 lsls r6,r0,#31                @ save rounding bit
10005f0c:	07c6      	lsls	r6, r0, #31
 lsrs r0,#1
10005f0e:	0840      	lsrs	r0, r0, #1
 lsls r5,r1,#31
10005f10:	07cd      	lsls	r5, r1, #31
 orrs r0,r5
10005f12:	4328      	orrs	r0, r5
 lsrs r1,#1
10005f14:	0849      	lsrs	r1, r1, #1
 cmp r6,#0
10005f16:	2e00      	cmp	r6, #0
 beq da_3
10005f18:	d0e1      	beq.n	10005ede <da_3>
 b da_4
10005f1a:	e7d9      	b.n	10005ed0 <da_4>

10005f1c <da_xrgty>:

da_xrgty:                      @ xe>ye and shift>=32 places
 cmp r6,#60
10005f1c:	2e3c      	cmp	r6, #60	; 0x3c
 bge da_xmgty                  @ xe much greater than ye?
10005f1e:	da29      	bge.n	10005f74 <da_xmgty>
 subs r6,#32
10005f20:	3e20      	subs	r6, #32
 adds r7,#64
10005f22:	3740      	adds	r7, #64	; 0x40

 movs r4,r2
10005f24:	0014      	movs	r4, r2
 lsls r4,r4,r7                 @ these would be shifted off the bottom of the sticky bits
10005f26:	40bc      	lsls	r4, r7
 beq 1f
10005f28:	d000      	beq.n	10005f2c <da_xrgty+0x10>
 movs r4,#1
10005f2a:	2401      	movs	r4, #1
1:
 lsrs r2,r2,r6
10005f2c:	40f2      	lsrs	r2, r6
 orrs r4,r2
10005f2e:	4314      	orrs	r4, r2
 movs r2,r3
10005f30:	001a      	movs	r2, r3
 lsls r3,r3,r7
10005f32:	40bb      	lsls	r3, r7
 orrs r4,r3
10005f34:	431c      	orrs	r4, r3
 asrs r3,r2,#31                @ propagate sign bit
10005f36:	17d3      	asrs	r3, r2, #31
 b da_xgty0
10005f38:	e7ac      	b.n	10005e94 <da_xgty0>

10005f3a <da_ygtx>:

da_ygtx:
@ here ye>xe: need to shift x down r7 places
 mov r12,r5                    @ save exponent
10005f3a:	46ac      	mov	ip, r5
 cmp r7,#32
10005f3c:	2f20      	cmp	r7, #32
 bge da_yrgtx                  @ ye rather greater than xe?
10005f3e:	da08      	bge.n	10005f52 <da_yrgtx>
 adds r6,#32
10005f40:	3620      	adds	r6, #32
 movs r4,r0
10005f42:	0004      	movs	r4, r0
 lsls r4,r4,r6                 @ rounding bit + sticky bits
10005f44:	40b4      	lsls	r4, r6

10005f46 <da_ygtx0>:
da_ygtx0:
 movs r5,r1
10005f46:	000d      	movs	r5, r1
 lsls r5,r5,r6
10005f48:	40b5      	lsls	r5, r6
 lsrs r0,r7
10005f4a:	40f8      	lsrs	r0, r7
 asrs r1,r7
10005f4c:	4139      	asrs	r1, r7
 orrs r0,r5
10005f4e:	4328      	orrs	r0, r5
 b da_add
10005f50:	e7a5      	b.n	10005e9e <da_add>

10005f52 <da_yrgtx>:

da_yrgtx:
 cmp r7,#60
10005f52:	2f3c      	cmp	r7, #60	; 0x3c
 bge da_ymgtx                  @ ye much greater than xe?
10005f54:	da0c      	bge.n	10005f70 <da_ymgtx>
 subs r7,#32
10005f56:	3f20      	subs	r7, #32
 adds r6,#64
10005f58:	3640      	adds	r6, #64	; 0x40

 movs r4,r0
10005f5a:	0004      	movs	r4, r0
 lsls r4,r4,r6                 @ these would be shifted off the bottom of the sticky bits
10005f5c:	40b4      	lsls	r4, r6
 beq 1f
10005f5e:	d000      	beq.n	10005f62 <da_yrgtx+0x10>
 movs r4,#1
10005f60:	2401      	movs	r4, #1
1:
 lsrs r0,r0,r7
10005f62:	40f8      	lsrs	r0, r7
 orrs r4,r0
10005f64:	4304      	orrs	r4, r0
 movs r0,r1
10005f66:	0008      	movs	r0, r1
 lsls r1,r1,r6
10005f68:	40b1      	lsls	r1, r6
 orrs r4,r1
10005f6a:	430c      	orrs	r4, r1
 asrs r1,r0,#31                @ propagate sign bit
10005f6c:	17c1      	asrs	r1, r0, #31
 b da_ygtx0
10005f6e:	e7ea      	b.n	10005f46 <da_ygtx0>

10005f70 <da_ymgtx>:

da_ymgtx:                      @ result is just y
 movs r0,r2
10005f70:	0010      	movs	r0, r2
 movs r1,r3
10005f72:	0019      	movs	r1, r3

10005f74 <da_xmgty>:
da_xmgty:                      @ result is just x
 movs r4,#0                    @ clear sticky bits
10005f74:	2400      	movs	r4, #0
 b da_pack
10005f76:	e794      	b.n	10005ea2 <da_pack>
 ldr r3,=0x7ff00000
10005f78:	7ff00000 	.word	0x7ff00000

10005f7c <dmul_shim>:
 adcs \rzh,\rt2                @                       ZH
.endm

double_section dmul_shim
 regular_func dmul_shim
 push {r4-r7,r14}
10005f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 mdunpack r0,r1,r4,r6,r5
10005f7e:	0d0c      	lsrs	r4, r1, #20
10005f80:	1e66      	subs	r6, r4, #1
10005f82:	0536      	lsls	r6, r6, #20
10005f84:	1b89      	subs	r1, r1, r6
10005f86:	0ae6      	lsrs	r6, r4, #11
10005f88:	0564      	lsls	r4, r4, #21
10005f8a:	0d64      	lsrs	r4, r4, #21
10005f8c:	d002      	beq.n	10005f94 <l11_1>
10005f8e:	1c65      	adds	r5, r4, #1
10005f90:	0aed      	lsrs	r5, r5, #11
10005f92:	d004      	beq.n	10005f9e <l11_2>

10005f94 <l11_1>:
10005f94:	2000      	movs	r0, #0
10005f96:	2101      	movs	r1, #1
10005f98:	0509      	lsls	r1, r1, #20
10005f9a:	3c80      	subs	r4, #128	; 0x80
10005f9c:	0324      	lsls	r4, r4, #12

10005f9e <l11_2>:
 mov r12,r4
10005f9e:	46a4      	mov	ip, r4
 mdunpack r2,r3,r4,r7,r5
10005fa0:	0d1c      	lsrs	r4, r3, #20
10005fa2:	1e67      	subs	r7, r4, #1
10005fa4:	053f      	lsls	r7, r7, #20
10005fa6:	1bdb      	subs	r3, r3, r7
10005fa8:	0ae7      	lsrs	r7, r4, #11
10005faa:	0564      	lsls	r4, r4, #21
10005fac:	0d64      	lsrs	r4, r4, #21
10005fae:	d002      	beq.n	10005fb6 <l12_1>
10005fb0:	1c65      	adds	r5, r4, #1
10005fb2:	0aed      	lsrs	r5, r5, #11
10005fb4:	d004      	beq.n	10005fc0 <l12_2>

10005fb6 <l12_1>:
10005fb6:	2200      	movs	r2, #0
10005fb8:	2301      	movs	r3, #1
10005fba:	051b      	lsls	r3, r3, #20
10005fbc:	3c80      	subs	r4, #128	; 0x80
10005fbe:	0324      	lsls	r4, r4, #12

10005fc0 <l12_2>:
 eors r7,r6                    @ sign of result
10005fc0:	4077      	eors	r7, r6
 add r4,r12                    @ exponent of result
10005fc2:	4464      	add	r4, ip
 push {r0-r2,r4,r7}
10005fc4:	b497      	push	{r0, r1, r2, r4, r7}

@ accumulate full product in r12:r5:r6:r7
 mul32_32_64 r0,r2, r0,r5, r4,r6,r7,r0,r5    @ XL*YL
10005fc6:	b284      	uxth	r4, r0
10005fc8:	b296      	uxth	r6, r2
10005fca:	4374      	muls	r4, r6
10005fcc:	0c07      	lsrs	r7, r0, #16
10005fce:	437e      	muls	r6, r7
10005fd0:	0c15      	lsrs	r5, r2, #16
10005fd2:	436f      	muls	r7, r5
10005fd4:	b280      	uxth	r0, r0
10005fd6:	4368      	muls	r0, r5
10005fd8:	1836      	adds	r6, r6, r0
10005fda:	d302      	bcc.n	10005fe2 <l13_1>
10005fdc:	2001      	movs	r0, #1
10005fde:	0400      	lsls	r0, r0, #16
10005fe0:	183f      	adds	r7, r7, r0

10005fe2 <l13_1>:
10005fe2:	0430      	lsls	r0, r6, #16
10005fe4:	0c35      	lsrs	r5, r6, #16
10005fe6:	1900      	adds	r0, r0, r4
10005fe8:	417d      	adcs	r5, r7
 mov r12,r0                    @ save LL bits
10005fea:	4684      	mov	ip, r0

 mul32_32_64 r1,r3, r6,r7, r0,r2,r4,r6,r7    @ XH*YH
10005fec:	b288      	uxth	r0, r1
10005fee:	b29a      	uxth	r2, r3
10005ff0:	4350      	muls	r0, r2
10005ff2:	0c0c      	lsrs	r4, r1, #16
10005ff4:	4362      	muls	r2, r4
10005ff6:	0c1f      	lsrs	r7, r3, #16
10005ff8:	437c      	muls	r4, r7
10005ffa:	b28e      	uxth	r6, r1
10005ffc:	437e      	muls	r6, r7
10005ffe:	1992      	adds	r2, r2, r6
10006000:	d302      	bcc.n	10006008 <l14_1>
10006002:	2601      	movs	r6, #1
10006004:	0436      	lsls	r6, r6, #16
10006006:	19a4      	adds	r4, r4, r6

10006008 <l14_1>:
10006008:	0416      	lsls	r6, r2, #16
1000600a:	0c17      	lsrs	r7, r2, #16
1000600c:	1836      	adds	r6, r6, r0
1000600e:	4167      	adcs	r7, r4

 pop {r0}                      @ XL
10006010:	bc01      	pop	{r0}
 mul32_32_64 r0,r3, r0,r3, r1,r2,r4,r0,r3    @ XL*YH
10006012:	b281      	uxth	r1, r0
10006014:	b29a      	uxth	r2, r3
10006016:	4351      	muls	r1, r2
10006018:	0c04      	lsrs	r4, r0, #16
1000601a:	4362      	muls	r2, r4
1000601c:	0c1b      	lsrs	r3, r3, #16
1000601e:	435c      	muls	r4, r3
10006020:	b280      	uxth	r0, r0
10006022:	4358      	muls	r0, r3
10006024:	1812      	adds	r2, r2, r0
10006026:	d302      	bcc.n	1000602e <l15_1>
10006028:	2001      	movs	r0, #1
1000602a:	0400      	lsls	r0, r0, #16
1000602c:	1824      	adds	r4, r4, r0

1000602e <l15_1>:
1000602e:	0410      	lsls	r0, r2, #16
10006030:	0c13      	lsrs	r3, r2, #16
10006032:	1840      	adds	r0, r0, r1
10006034:	4163      	adcs	r3, r4
 adds r5,r0
10006036:	182d      	adds	r5, r5, r0
 adcs r6,r3
10006038:	415e      	adcs	r6, r3
 movs r0,#0
1000603a:	2000      	movs	r0, #0
 adcs r7,r0
1000603c:	4147      	adcs	r7, r0

 pop {r1,r2}                   @ XH,YL
1000603e:	bc06      	pop	{r1, r2}
 mul32_32_64 r1,r2, r1,r2, r0,r3,r4, r1,r2   @ XH*YL
10006040:	b288      	uxth	r0, r1
10006042:	b293      	uxth	r3, r2
10006044:	4358      	muls	r0, r3
10006046:	0c0c      	lsrs	r4, r1, #16
10006048:	4363      	muls	r3, r4
1000604a:	0c12      	lsrs	r2, r2, #16
1000604c:	4354      	muls	r4, r2
1000604e:	b289      	uxth	r1, r1
10006050:	4351      	muls	r1, r2
10006052:	185b      	adds	r3, r3, r1
10006054:	d302      	bcc.n	1000605c <l16_1>
10006056:	2101      	movs	r1, #1
10006058:	0409      	lsls	r1, r1, #16
1000605a:	1864      	adds	r4, r4, r1

1000605c <l16_1>:
1000605c:	0419      	lsls	r1, r3, #16
1000605e:	0c1a      	lsrs	r2, r3, #16
10006060:	1809      	adds	r1, r1, r0
10006062:	4162      	adcs	r2, r4
 adds r5,r1
10006064:	186d      	adds	r5, r5, r1
 adcs r6,r2
10006066:	4156      	adcs	r6, r2
 movs r0,#0
10006068:	2000      	movs	r0, #0
 adcs r7,r0
1000606a:	4147      	adcs	r7, r0

@ here r5:r6:r7 holds the product [1..4) in Q(104-32)=Q72, with extra LSBs in r12
 pop {r3,r4}                   @ exponent in r3, sign in r4
1000606c:	bc18      	pop	{r3, r4}
 lsls r1,r7,#11
1000606e:	02f9      	lsls	r1, r7, #11
 lsrs r2,r6,#21
10006070:	0d72      	lsrs	r2, r6, #21
 orrs r1,r2
10006072:	4311      	orrs	r1, r2
 lsls r0,r6,#11
10006074:	02f0      	lsls	r0, r6, #11
 lsrs r2,r5,#21
10006076:	0d6a      	lsrs	r2, r5, #21
 orrs r0,r2
10006078:	4310      	orrs	r0, r2
 lsls r5,#11                   @ now r5:r0:r1 Q83=Q(51+32), extra LSBs in r12
1000607a:	02ed      	lsls	r5, r5, #11
 lsrs r2,r1,#20
1000607c:	0d0a      	lsrs	r2, r1, #20
 bne 1f                        @ skip if in range [2..4)
1000607e:	d103      	bne.n	10006088 <l16_1+0x2c>
 adds r5,r5                    @ shift up so always [2..4) Q83, i.e. [1..2) Q84=Q(52+32)
10006080:	196d      	adds	r5, r5, r5
 adcs r0,r0
10006082:	4140      	adcs	r0, r0
 adcs r1,r1
10006084:	4149      	adcs	r1, r1
 subs r3,#1                    @ correct exponent
10006086:	3b01      	subs	r3, #1
1:
 ldr r6,=0x3ff
10006088:	4e12      	ldr	r6, [pc, #72]	; (100060d4 <dm_1+0xa>)
 subs r3,r6                    @ correct for exponent bias
1000608a:	1b9b      	subs	r3, r3, r6
 lsls r6,#1                    @ 0x7fe
1000608c:	0076      	lsls	r6, r6, #1
 cmp r3,r6
1000608e:	42b3      	cmp	r3, r6
 bhs dm_0                      @ exponent over- or underflow
10006090:	d20e      	bcs.n	100060b0 <dm_0>
 lsls r5,#1                    @ rounding bit to carry
10006092:	006d      	lsls	r5, r5, #1
 bcc 1f                        @ result is correctly rounded
10006094:	d307      	bcc.n	100060a6 <l16_1+0x4a>
 adds r0,#1
10006096:	3001      	adds	r0, #1
 movs r6,#0
10006098:	2600      	movs	r6, #0
 adcs r1,r6                    @ round up
1000609a:	4171      	adcs	r1, r6
 mov r6,r12                    @ remaining sticky bits
1000609c:	4666      	mov	r6, ip
 orrs r5,r6
1000609e:	4335      	orrs	r5, r6
 bne 1f                        @ some sticky bits set?
100060a0:	d101      	bne.n	100060a6 <l16_1+0x4a>
 lsrs r0,#1
100060a2:	0840      	lsrs	r0, r0, #1
 lsls r0,#1                    @ round to even
100060a4:	0040      	lsls	r0, r0, #1
1:
 lsls r3,#20
100060a6:	051b      	lsls	r3, r3, #20
 adds r1,r3
100060a8:	18c9      	adds	r1, r1, r3

100060aa <dm_2>:
dm_2:
 lsls r4,#31
100060aa:	07e4      	lsls	r4, r4, #31
 add r1,r4
100060ac:	4421      	add	r1, r4
 pop {r4-r7,r15}
100060ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

100060b0 <dm_0>:

@ here for exponent over- or underflow
dm_0:
 bge dm_1                      @ overflow?
100060b0:	da0b      	bge.n	100060ca <dm_1>
 adds r3,#1                    @ would-be zero exponent?
100060b2:	3301      	adds	r3, #1
 bne 1f
100060b4:	d106      	bne.n	100060c4 <dm_0+0x14>
 adds r0,#1
100060b6:	3001      	adds	r0, #1
 bne 1f                        @ all-ones mantissa?
100060b8:	d104      	bne.n	100060c4 <dm_0+0x14>
 adds r1,#1
100060ba:	3101      	adds	r1, #1
 lsrs r7,r1,#21
100060bc:	0d4f      	lsrs	r7, r1, #21
 beq 1f
100060be:	d001      	beq.n	100060c4 <dm_0+0x14>
 lsrs r1,#1
100060c0:	0849      	lsrs	r1, r1, #1
 b dm_2
100060c2:	e7f2      	b.n	100060aa <dm_2>
1:
 lsls r1,r4,#31
100060c4:	07e1      	lsls	r1, r4, #31
 movs r0,#0
100060c6:	2000      	movs	r0, #0
 pop {r4-r7,r15}
100060c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

100060ca <dm_1>:

@ here for exponent overflow
dm_1:
 adds r6,#1                    @ 0x7ff
100060ca:	3601      	adds	r6, #1
 lsls r1,r6,#20
100060cc:	0531      	lsls	r1, r6, #20
 movs r0,#0
100060ce:	2000      	movs	r0, #0
 b dm_2
100060d0:	e7eb      	b.n	100060aa <dm_2>
100060d2:	0000      	.short	0x0000
 ldr r6,=0x3ff
100060d4:	000003ff 	.word	0x000003ff

100060d8 <ddiv_shim>:
@ accurate to < 0.25ulp. In the case where x>y the quotient will be shifted up one place for normalisation
@ and so 1ulp is 2^-53 and so the calculation above suffices.

double_section ddiv_shim
 regular_func ddiv_shim
 push {r4-r7,r14}
100060d8:	b5f0      	push	{r4, r5, r6, r7, lr}

100060da <ddiv0>:
ddiv0:                         @ entry point from dtan
 mdunpack r2,r3,r4,r7,r6       @ unpack divisor
100060da:	0d1c      	lsrs	r4, r3, #20
100060dc:	1e67      	subs	r7, r4, #1
100060de:	053f      	lsls	r7, r7, #20
100060e0:	1bdb      	subs	r3, r3, r7
100060e2:	0ae7      	lsrs	r7, r4, #11
100060e4:	0564      	lsls	r4, r4, #21
100060e6:	0d64      	lsrs	r4, r4, #21
100060e8:	d002      	beq.n	100060f0 <l19_1>
100060ea:	1c66      	adds	r6, r4, #1
100060ec:	0af6      	lsrs	r6, r6, #11
100060ee:	d004      	beq.n	100060fa <l19_2>

100060f0 <l19_1>:
100060f0:	2200      	movs	r2, #0
100060f2:	2301      	movs	r3, #1
100060f4:	051b      	lsls	r3, r3, #20
100060f6:	3c80      	subs	r4, #128	; 0x80
100060f8:	0324      	lsls	r4, r4, #12

100060fa <l19_2>:

.if use_hw_div

 movs r5,#IOPORT>>24
100060fa:	25d0      	movs	r5, #208	; 0xd0
 lsls r5,#24
100060fc:	062d      	lsls	r5, r5, #24
 movs r6,#0
100060fe:	2600      	movs	r6, #0
 mvns r6,r6
10006100:	43f6      	mvns	r6, r6
 str r6,[r5,#DIV_UDIVIDEND]
10006102:	662e      	str	r6, [r5, #96]	; 0x60
 lsrs r6,r3,#4                 @ x0=(q16)x
10006104:	091e      	lsrs	r6, r3, #4
 str r6,[r5,#DIV_UDIVISOR]
10006106:	666e      	str	r6, [r5, #100]	; 0x64
@ the divider to do its stuff we need a busy-wait here

.endif

@ unpack dividend by hand to save on register use
 lsrs r6,r1,#31
10006108:	0fce      	lsrs	r6, r1, #31
 adds r6,r7
1000610a:	19f6      	adds	r6, r6, r7
 mov r12,r6                    @ result sign in r12b0; r12b1 trashed
1000610c:	46b4      	mov	ip, r6
 lsls r1,#1
1000610e:	0049      	lsls	r1, r1, #1
 lsrs r7,r1,#21                @ exponent
10006110:	0d4f      	lsrs	r7, r1, #21
 beq 1f                        @ zero exponent?
10006112:	d002      	beq.n	1000611a <l19_2+0x20>
 adds r6,r7,#1
10006114:	1c7e      	adds	r6, r7, #1
 lsrs r6,#11
10006116:	0af6      	lsrs	r6, r6, #11
 beq 2f                        @ exponent != 0x7ff? then done
10006118:	d003      	beq.n	10006122 <l19_2+0x28>
1:
 movs r0,#0
1000611a:	2000      	movs	r0, #0
 movs r1,#0
1000611c:	2100      	movs	r1, #0
 subs r7,#64                   @ less drastic fiddling of exponents to get 0/0, Inf/Inf correct
1000611e:	3f40      	subs	r7, #64	; 0x40
 lsls r7,#12
10006120:	033f      	lsls	r7, r7, #12
2:
 subs r6,r7,r4
10006122:	1b3e      	subs	r6, r7, r4
 lsls r6,#2
10006124:	00b6      	lsls	r6, r6, #2
 add r12,r12,r6                @ (signed) exponent in r12[31..8]
10006126:	44b4      	add	ip, r6
 subs r7,#1                    @ implied 1
10006128:	3f01      	subs	r7, #1
 lsls r7,#21
1000612a:	057f      	lsls	r7, r7, #21
 subs r1,r7
1000612c:	1bc9      	subs	r1, r1, r7
 lsrs r1,#1
1000612e:	0849      	lsrs	r1, r1, #1

.if use_hw_div

 ldr r6,[r5,#DIV_QUOTIENT]
10006130:	6f2e      	ldr	r6, [r5, #112]	; 0x70
 adds r6,#1
10006132:	3601      	adds	r6, #1
 lsrs r6,#1
10006134:	0876      	lsrs	r6, r6, #1
@ r0:r1 y mantissa
@ r2:r3 x mantissa
@ r6    u0, first approximation to 1/x Q15
@ r12: result sign, exponent

 lsls r4,r3,#10
10006136:	029c      	lsls	r4, r3, #10
 lsrs r5,r2,#22
10006138:	0d95      	lsrs	r5, r2, #22
 orrs r5,r4                    @ x1=(q30)x
1000613a:	4325      	orrs	r5, r4
 muls r5,r6                    @ u0*x1 Q45
1000613c:	4375      	muls	r5, r6
 asrs r5,#15                   @ v=u0*x1-1 Q30
1000613e:	13ed      	asrs	r5, r5, #15
 muls r5,r6                    @ u0*v Q45
10006140:	4375      	muls	r5, r6
 asrs r5,#14
10006142:	13ad      	asrs	r5, r5, #14
 adds r5,#1
10006144:	3501      	adds	r5, #1
 asrs r5,#1                    @ round u0*v to Q30
10006146:	106d      	asrs	r5, r5, #1
 lsls r6,#15
10006148:	03f6      	lsls	r6, r6, #15
 subs r6,r5                    @ u1 Q30
1000614a:	1b76      	subs	r6, r6, r5
@ r0:r1 y mantissa
@ r2:r3 x mantissa
@ r6    u1, second approximation to 1/x Q30
@ r12: result sign, exponent

 push {r2,r3}
1000614c:	b40c      	push	{r2, r3}
 lsls r4,r1,#11
1000614e:	02cc      	lsls	r4, r1, #11
 lsrs r5,r0,#21
10006150:	0d45      	lsrs	r5, r0, #21
 orrs r4,r5                    @ y0=(q31)y
10006152:	432c      	orrs	r4, r5
 mul32_32_64 r4,r6, r4,r5, r2,r3,r7,r4,r5  @ y0*u1 Q61
10006154:	b2a2      	uxth	r2, r4
10006156:	b2b3      	uxth	r3, r6
10006158:	435a      	muls	r2, r3
1000615a:	0c27      	lsrs	r7, r4, #16
1000615c:	437b      	muls	r3, r7
1000615e:	0c35      	lsrs	r5, r6, #16
10006160:	436f      	muls	r7, r5
10006162:	b2a4      	uxth	r4, r4
10006164:	436c      	muls	r4, r5
10006166:	191b      	adds	r3, r3, r4
10006168:	d302      	bcc.n	10006170 <l20_1>
1000616a:	2401      	movs	r4, #1
1000616c:	0424      	lsls	r4, r4, #16
1000616e:	193f      	adds	r7, r7, r4

10006170 <l20_1>:
10006170:	041c      	lsls	r4, r3, #16
10006172:	0c1d      	lsrs	r5, r3, #16
10006174:	18a4      	adds	r4, r4, r2
10006176:	417d      	adcs	r5, r7
 adds r4,r4
10006178:	1924      	adds	r4, r4, r4
 adcs r5,r5                    @ a0=(q30)(y0*u1)
1000617a:	416d      	adcs	r5, r5
@ r0:r1 y mantissa
@ r5    a0, first approximation to y/x Q30
@ r6    u1, second approximation to 1/x Q30
@ r12   result sign, exponent

 ldr r2,[r13,#0]               @ xL
1000617c:	9a00      	ldr	r2, [sp, #0]
 mul32_32_64 r2,r5, r2,r3, r1,r4,r7,r2,r3  @ xL*a0
1000617e:	b291      	uxth	r1, r2
10006180:	b2ac      	uxth	r4, r5
10006182:	4361      	muls	r1, r4
10006184:	0c17      	lsrs	r7, r2, #16
10006186:	437c      	muls	r4, r7
10006188:	0c2b      	lsrs	r3, r5, #16
1000618a:	435f      	muls	r7, r3
1000618c:	b292      	uxth	r2, r2
1000618e:	435a      	muls	r2, r3
10006190:	18a4      	adds	r4, r4, r2
10006192:	d302      	bcc.n	1000619a <l21_1>
10006194:	2201      	movs	r2, #1
10006196:	0412      	lsls	r2, r2, #16
10006198:	18bf      	adds	r7, r7, r2

1000619a <l21_1>:
1000619a:	0422      	lsls	r2, r4, #16
1000619c:	0c23      	lsrs	r3, r4, #16
1000619e:	1852      	adds	r2, r2, r1
100061a0:	417b      	adcs	r3, r7
 ldr r4,[r13,#4]               @ xH
100061a2:	9c01      	ldr	r4, [sp, #4]
 muls r4,r5                    @ xH*a0
100061a4:	436c      	muls	r4, r5
 adds r3,r4                    @ r2:r3 now x*a0 Q82
100061a6:	191b      	adds	r3, r3, r4
 lsrs r2,#25
100061a8:	0e52      	lsrs	r2, r2, #25
 lsls r1,r3,#7
100061aa:	01d9      	lsls	r1, r3, #7
 orrs r2,r1                    @ r2 now x*a0 Q57; r7:r2 is x*a0 Q89
100061ac:	430a      	orrs	r2, r1
 lsls r4,r0,#5                 @ y Q57
100061ae:	0144      	lsls	r4, r0, #5
 subs r0,r4,r2                 @ r0x=y-x*a0 Q57 (signed)
100061b0:	1aa0      	subs	r0, r4, r2
@ r5  a0, first approximation to y/x Q30
@ r4  yL  Q57
@ r6  u1 Q30
@ r12 result sign, exponent

 muls32_32_64 r0,r6, r7,r6, r1,r2,r3, r7,r6   @ r7:r6 r0x*u1 Q87
100061b2:	b281      	uxth	r1, r0
100061b4:	b2b2      	uxth	r2, r6
100061b6:	4351      	muls	r1, r2
100061b8:	1403      	asrs	r3, r0, #16
100061ba:	435a      	muls	r2, r3
100061bc:	0c36      	lsrs	r6, r6, #16
100061be:	4373      	muls	r3, r6
100061c0:	b287      	uxth	r7, r0
100061c2:	4377      	muls	r7, r6
100061c4:	17d6      	asrs	r6, r2, #31
100061c6:	19d2      	adds	r2, r2, r7
100061c8:	2700      	movs	r7, #0
100061ca:	417e      	adcs	r6, r7
100061cc:	0436      	lsls	r6, r6, #16
100061ce:	199b      	adds	r3, r3, r6
100061d0:	0417      	lsls	r7, r2, #16
100061d2:	0c16      	lsrs	r6, r2, #16
100061d4:	187f      	adds	r7, r7, r1
100061d6:	415e      	adcs	r6, r3
 asrs r3,r6,#25
100061d8:	1673      	asrs	r3, r6, #25
 adds r5,r3
100061da:	18ed      	adds	r5, r5, r3
 lsls r3,r6,#7                 @ r3:r5 a1 Q62 (but bottom 7 bits are zero so 55 bits of precision after binary point)
100061dc:	01f3      	lsls	r3, r6, #7
@ here
@ r3:r5  a1 Q62 candidate quotient [0.5,2) or so
@ r4     yL Q57
@ r12    result sign, exponent

 movs r6,#0
100061de:	2600      	movs	r6, #0
 adds r3,#128                  @ for initial rounding to Q53
100061e0:	3380      	adds	r3, #128	; 0x80
 adcs r5,r5,r6
100061e2:	4175      	adcs	r5, r6
 lsrs  r1,r5,#30
100061e4:	0fa9      	lsrs	r1, r5, #30
 bne dd_0
100061e6:	d106      	bne.n	100061f6 <dd_0>
@ here candidate quotient a1 is in range [0.5,1)
@ so 30 significant bits in r5

 lsls r4,#1                    @ y now Q58
100061e8:	0064      	lsls	r4, r4, #1
 lsrs r1,r5,#9                 @ to Q52
100061ea:	0a69      	lsrs	r1, r5, #9
 lsls r0,r5,#23
100061ec:	05e8      	lsls	r0, r5, #23
 lsrs r3,#9                    @ 0.5ulp-significance bit in carry: if this is 1 we may need to correct result
100061ee:	0a5b      	lsrs	r3, r3, #9
 orrs r0,r3
100061f0:	4318      	orrs	r0, r3
 bcs dd_1
100061f2:	d209      	bcs.n	10006208 <dd_1>
 b dd_2
100061f4:	e02f      	b.n	10006256 <dd_2>

100061f6 <dd_0>:
dd_0:
@ here candidate quotient a1 is in range [1,2)
@ so 31 significant bits in r5

 movs r2,#4
100061f6:	2204      	movs	r2, #4
 add r12,r12,r2                @ fix exponent; r3:r5 now effectively Q61
100061f8:	4494      	add	ip, r2
 adds r3,#128                  @ complete rounding to Q53
100061fa:	3380      	adds	r3, #128	; 0x80
 adcs r5,r5,r6
100061fc:	4175      	adcs	r5, r6
 lsrs r1,r5,#10
100061fe:	0aa9      	lsrs	r1, r5, #10
 lsls r0,r5,#22
10006200:	05a8      	lsls	r0, r5, #22
 lsrs r3,#10                   @ 0.5ulp-significance bit in carry: if this is 1 we may need to correct result
10006202:	0a9b      	lsrs	r3, r3, #10
 orrs r0,r3
10006204:	4318      	orrs	r0, r3
 bcc dd_2
10006206:	d326      	bcc.n	10006256 <dd_2>

10006208 <dd_1>:
@ r0:r1  rounded result Q53 [0.5,1) or Q52 [1,2), but may not be correctly rounded-to-nearest
@ r4     yL Q58 or Q57
@ r12    result sign, exponent
@ carry set

 adcs r0,r0,r0
10006208:	4140      	adcs	r0, r0
 adcs r1,r1,r1                 @ z Q53 with 1 in LSB
1000620a:	4149      	adcs	r1, r1
 lsls r4,#16                   @ Q105-32=Q73
1000620c:	0424      	lsls	r4, r4, #16
 ldr r2,[r13,#0]               @ xL Q52
1000620e:	9a00      	ldr	r2, [sp, #0]
 ldr r3,[r13,#4]               @ xH Q20
10006210:	9b01      	ldr	r3, [sp, #4]

 movs r5,r1                    @ zH Q21
10006212:	000d      	movs	r5, r1
 muls r5,r2                    @ zH*xL Q73
10006214:	4355      	muls	r5, r2
 subs r4,r5
10006216:	1b64      	subs	r4, r4, r5
 muls r3,r0                    @ zL*xH Q73
10006218:	4343      	muls	r3, r0
 subs r4,r3
1000621a:	1ae4      	subs	r4, r4, r3
 mul32_32_64 r2,r0, r2,r3, r5,r6,r7,r2,r3  @ xL*zL
1000621c:	b295      	uxth	r5, r2
1000621e:	b286      	uxth	r6, r0
10006220:	4375      	muls	r5, r6
10006222:	0c17      	lsrs	r7, r2, #16
10006224:	437e      	muls	r6, r7
10006226:	0c03      	lsrs	r3, r0, #16
10006228:	435f      	muls	r7, r3
1000622a:	b292      	uxth	r2, r2
1000622c:	435a      	muls	r2, r3
1000622e:	18b6      	adds	r6, r6, r2
10006230:	d302      	bcc.n	10006238 <l23_1>
10006232:	2201      	movs	r2, #1
10006234:	0412      	lsls	r2, r2, #16
10006236:	18bf      	adds	r7, r7, r2

10006238 <l23_1>:
10006238:	0432      	lsls	r2, r6, #16
1000623a:	0c33      	lsrs	r3, r6, #16
1000623c:	1952      	adds	r2, r2, r5
1000623e:	417b      	adcs	r3, r7
 negs r2,r2                    @ borrow from low half?
10006240:	4252      	negs	r2, r2
 sbcs r4,r3                    @ y-xz Q73 (remainder bits 52..73)
10006242:	419c      	sbcs	r4, r3

 cmp r4,#0
10006244:	2c00      	cmp	r4, #0

 bmi 1f
10006246:	d402      	bmi.n	1000624e <l23_1+0x16>
 movs r2,#0                    @ round up
10006248:	2200      	movs	r2, #0
 adds r0,#1
1000624a:	3001      	adds	r0, #1
 adcs r1,r2
1000624c:	4151      	adcs	r1, r2
1:
 lsrs r0,#1                    @ shift back down to Q52
1000624e:	0840      	lsrs	r0, r0, #1
 lsls r2,r1,#31
10006250:	07ca      	lsls	r2, r1, #31
 orrs r0,r2
10006252:	4310      	orrs	r0, r2
 lsrs r1,#1
10006254:	0849      	lsrs	r1, r1, #1

10006256 <dd_2>:
dd_2:
 add r13,#8
10006256:	b002      	add	sp, #8
 mov r2,r12
10006258:	4662      	mov	r2, ip
 lsls r7,r2,#31                @ result sign
1000625a:	07d7      	lsls	r7, r2, #31
 asrs r2,#2                    @ result exponent
1000625c:	1092      	asrs	r2, r2, #2
 ldr r3,=0x3fd
1000625e:	4b08      	ldr	r3, [pc, #32]	; (10006280 <dd_4+0x6>)
 adds r2,r3
10006260:	18d2      	adds	r2, r2, r3
 ldr r3,=0x7fe
10006262:	4b08      	ldr	r3, [pc, #32]	; (10006284 <dd_4+0xa>)
 cmp r2,r3
10006264:	429a      	cmp	r2, r3
 bhs dd_3                      @ over- or underflow?
10006266:	d203      	bcs.n	10006270 <dd_3>
 lsls r2,#20
10006268:	0512      	lsls	r2, r2, #20
 adds r1,r2                    @ pack exponent
1000626a:	1889      	adds	r1, r1, r2

1000626c <dd_5>:
dd_5:
 adds r1,r7                    @ pack sign
1000626c:	19c9      	adds	r1, r1, r7
 pop {r4-r7,r15}
1000626e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10006270 <dd_3>:

dd_3:
 movs r0,#0
10006270:	2000      	movs	r0, #0
 cmp r2,#0
10006272:	2a00      	cmp	r2, #0
 bgt dd_4                      @ overflow?
10006274:	dc01      	bgt.n	1000627a <dd_4>
 movs r1,r7
10006276:	0039      	movs	r1, r7
 pop {r4-r7,r15}
10006278:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000627a <dd_4>:

dd_4:
 adds r3,#1                    @ 0x7ff
1000627a:	3301      	adds	r3, #1
 lsls r1,r3,#20
1000627c:	0519      	lsls	r1, r3, #20
 b dd_5
1000627e:	e7f5      	b.n	1000626c <dd_5>
 ldr r3,=0x3fd
10006280:	000003fd 	.word	0x000003fd
 ldr r3,=0x7fe
10006284:	000007fe 	.word	0x000007fe

10006288 <double2uint_shim>:
 movs r0,r1
 pop {r15}

double_section double2uint_shim
 regular_func double2uint_shim
 movs r2,#0                    @ and fall through
10006288:	2200      	movs	r2, #0

1000628a <double2ufix_shim>:
regular_func double2ufix_shim
 push {r14}
1000628a:	b500      	push	{lr}
 adds r2,#32
1000628c:	3220      	adds	r2, #32
 bl double2ufix64_shim
1000628e:	f000 f804 	bl	1000629a <double2ufix64_shim>
 movs r0,r1
10006292:	0008      	movs	r0, r1
 pop {r15}
10006294:	bd00      	pop	{pc}
	...

10006298 <double2uint64_shim>:
 eors r1,r1,r0                 @ generate extreme fixed-point values
 pop {r15}

double_section double2uint64_shim 
 regular_func double2uint64_shim
 movs r2,#0                    @ and fall through
10006298:	2200      	movs	r2, #0

1000629a <double2ufix64_shim>:
regular_func double2ufix64_shim
 asrs r3,r1,#20                @ negative? return 0
1000629a:	150b      	asrs	r3, r1, #20
 bmi ret_dzero
1000629c:	d40a      	bmi.n	100062b4 <ret_dzero>

1000629e <d2fix>:
@ convert double in r0:r1 to signed fixed point in r0:r1:r3, r2 places after point, rounding towards -Inf
@ result clamped so that r3 can only be 0 or -1
@ trashes r12
.thumb_func
d2fix:
 push {r4,r14}
1000629e:	b510      	push	{r4, lr}
 mov r12,r2
100062a0:	4694      	mov	ip, r2
 bl dunpacks
100062a2:	f000 f831 	bl	10006308 <dunpacks>
 asrs r4,r2,#16
100062a6:	1414      	asrs	r4, r2, #16
 adds r4,#1
100062a8:	3401      	adds	r4, #1
 bge 1f
100062aa:	da00      	bge.n	100062ae <d2fix+0x10>
 movs r1,#0                    @ -0 -> +0
100062ac:	2100      	movs	r1, #0
1:
 asrs r3,r1,#31
100062ae:	17cb      	asrs	r3, r1, #31
 ldr r4, =d2fix_a
100062b0:	4c14      	ldr	r4, [pc, #80]	; (10006304 <d2fix_a+0x4a>)
 bx r4
100062b2:	4720      	bx	r4

100062b4 <ret_dzero>:
 
ret_dzero:
 movs r0,#0
100062b4:	2000      	movs	r0, #0
 movs r1,#0
100062b6:	2100      	movs	r1, #0
 bx r14
100062b8:	4770      	bx	lr

100062ba <d2fix_a>:
d2fix_a:
@ here
@ r0:r1 two's complement mantissa
@ r2    unbaised exponent
@ r3    mantissa sign extension bits
 add r2,r12                    @ exponent plus offset for required binary point position
100062ba:	4462      	add	r2, ip
 subs r2,#52                   @ required shift
100062bc:	3a34      	subs	r2, #52	; 0x34
 bmi 1f                        @ shift down?
100062be:	d40c      	bmi.n	100062da <d2fix_a+0x20>
@ here a shift up by r2 places
 cmp r2,#12                    @ will clamp?
100062c0:	2a0c      	cmp	r2, #12
 bge 2f
100062c2:	da07      	bge.n	100062d4 <d2fix_a+0x1a>
 movs r4,r0
100062c4:	0004      	movs	r4, r0
 lsls r1,r2
100062c6:	4091      	lsls	r1, r2
 lsls r0,r2
100062c8:	4090      	lsls	r0, r2
 negs r2,r2
100062ca:	4252      	negs	r2, r2
 adds r2,#32                   @ complementary shift
100062cc:	3220      	adds	r2, #32
 lsrs r4,r2
100062ce:	40d4      	lsrs	r4, r2
 orrs r1,r4
100062d0:	4321      	orrs	r1, r4
 pop {r4,r15}
100062d2:	bd10      	pop	{r4, pc}
2:
 mvns r0,r3
100062d4:	43d8      	mvns	r0, r3
 mvns r1,r3                    @ overflow: clamp to extreme fixed-point values
100062d6:	43d9      	mvns	r1, r3
 pop {r4,r15}
100062d8:	bd10      	pop	{r4, pc}
1:
@ here a shift down by -r2 places
 adds r2,#32
100062da:	3220      	adds	r2, #32
 bmi 1f                        @ long shift?
100062dc:	d407      	bmi.n	100062ee <d2fix_a+0x34>
 mov r4,r1
100062de:	460c      	mov	r4, r1
 lsls r4,r2
100062e0:	4094      	lsls	r4, r2
 negs r2,r2
100062e2:	4252      	negs	r2, r2
 adds r2,#32                   @ complementary shift
100062e4:	3220      	adds	r2, #32
 asrs r1,r2
100062e6:	4111      	asrs	r1, r2
 lsrs r0,r2
100062e8:	40d0      	lsrs	r0, r2
 orrs r0,r4
100062ea:	4320      	orrs	r0, r4
 pop {r4,r15}
100062ec:	bd10      	pop	{r4, pc}
1:
@ here a long shift down
 movs r0,r1
100062ee:	0008      	movs	r0, r1
 asrs r1,#31                   @ shift down 32 places
100062f0:	17c9      	asrs	r1, r1, #31
 adds r2,#32
100062f2:	3220      	adds	r2, #32
 bmi 1f                        @ very long shift?
100062f4:	d403      	bmi.n	100062fe <d2fix_a+0x44>
 negs r2,r2
100062f6:	4252      	negs	r2, r2
 adds r2,#32
100062f8:	3220      	adds	r2, #32
 asrs r0,r2
100062fa:	4110      	asrs	r0, r2
 pop {r4,r15}
100062fc:	bd10      	pop	{r4, pc}
1:
 movs r0,r3                    @ result very near zero: use sign extension bits
100062fe:	0018      	movs	r0, r3
 movs r1,r3
10006300:	0019      	movs	r1, r3
 pop {r4,r15}
10006302:	bd10      	pop	{r4, pc}
 ldr r4, =d2fix_a
10006304:	100062bb 	.word	0x100062bb

10006308 <dunpacks>:

.ltorg

double_section dunpacks
 regular_func dunpacks
 mdunpacks r0,r1,r2,r3,r4
10006308:	0d0a      	lsrs	r2, r1, #20
1000630a:	0fcc      	lsrs	r4, r1, #31
1000630c:	1e53      	subs	r3, r2, #1
1000630e:	051b      	lsls	r3, r3, #20
10006310:	1ac9      	subs	r1, r1, r3
10006312:	0552      	lsls	r2, r2, #21
10006314:	d303      	bcc.n	1000631e <l59_1>
10006316:	43c9      	mvns	r1, r1
10006318:	4240      	negs	r0, r0
1000631a:	d300      	bcc.n	1000631e <l59_1>
1000631c:	3101      	adds	r1, #1

1000631e <l59_1>:
1000631e:	0d52      	lsrs	r2, r2, #21
10006320:	d003      	beq.n	1000632a <l59_2>
10006322:	1c53      	adds	r3, r2, #1
10006324:	0adb      	lsrs	r3, r3, #11
10006326:	d007      	beq.n	10006338 <l59_3>
10006328:	1b12      	subs	r2, r2, r4

1000632a <l59_2>:
1000632a:	2000      	movs	r0, #0
1000632c:	0064      	lsls	r4, r4, #1
1000632e:	1c61      	adds	r1, r4, #1
10006330:	0789      	lsls	r1, r1, #30
10006332:	1289      	asrs	r1, r1, #10
10006334:	3a80      	subs	r2, #128	; 0x80
10006336:	0312      	lsls	r2, r2, #12

10006338 <l59_3>:
 ldr r3,=0x3ff
10006338:	4b01      	ldr	r3, [pc, #4]	; (10006340 <l59_3+0x8>)
 subs r2,r3                    @ exponent without offset
1000633a:	1ad2      	subs	r2, r2, r3
 bx r14
1000633c:	4770      	bx	lr
1000633e:	0000      	.short	0x0000
 ldr r3,=0x3ff
10006340:	000003ff 	.word	0x000003ff

10006344 <float_table_shim_on_use_helper>:
#endif
.endm

float_section float_table_shim_on_use_helper
regular_func float_table_shim_on_use_helper
    push {r0-r2, lr}
10006344:	b507      	push	{r0, r1, r2, lr}
    mov r0, ip
10006346:	4660      	mov	r0, ip
#ifndef NDEBUG
    // sanity check to make sure we weren't called by non (shimmable_) table_tail_call macro
    cmp r0, #0
10006348:	2800      	cmp	r0, #0
    bne 1f
1000634a:	d100      	bne.n	1000634e <float_table_shim_on_use_helper+0xa>
    bkpt #0
1000634c:	be00      	bkpt	0x0000
#endif
1:
    ldrh r1, [r0]
1000634e:	8801      	ldrh	r1, [r0, #0]
    lsrs r2, r1, #8
10006350:	0a0a      	lsrs	r2, r1, #8
    adds r0, #2
10006352:	3002      	adds	r0, #2
    cmp r2, #0xdf
10006354:	2adf      	cmp	r2, #223	; 0xdf
    bne 1b
10006356:	d1fa      	bne.n	1000634e <float_table_shim_on_use_helper+0xa>
    uxtb r1, r1 // r1 holds table offset
10006358:	b2c9      	uxtb	r1, r1
    lsrs r2, r0, #2
1000635a:	0882      	lsrs	r2, r0, #2
    bcc 1f
1000635c:	d304      	bcc.n	10006368 <float_table_shim_on_use_helper+0x24>
    // unaligned
    ldrh r2, [r0, #0]
1000635e:	8802      	ldrh	r2, [r0, #0]
    ldrh r0, [r0, #2]
10006360:	8840      	ldrh	r0, [r0, #2]
    lsls r0, #16
10006362:	0400      	lsls	r0, r0, #16
    orrs r0, r2
10006364:	4310      	orrs	r0, r2
    b 2f
10006366:	e000      	b.n	1000636a <float_table_shim_on_use_helper+0x26>
1:
    ldr r0, [r0]
10006368:	6800      	ldr	r0, [r0, #0]
2:
    ldr r2, =sf_table
1000636a:	4a02      	ldr	r2, [pc, #8]	; (10006374 <float_table_shim_on_use_helper+0x30>)
    str r0, [r2, r1]
1000636c:	5050      	str	r0, [r2, r1]
    str r0, [sp, #12]
1000636e:	9003      	str	r0, [sp, #12]
    pop {r0-r2, pc}
10006370:	bd07      	pop	{r0, r1, r2, pc}
10006372:	0000      	.short	0x0000
    ldr r2, =sf_table
10006374:	20001548 	.word	0x20001548

10006378 <__wrap___aeabi_lmul>:
.endm

int64_section __aeabi_lmul

wrapper_func __aeabi_lmul
    muls   r1, r2
10006378:	4351      	muls	r1, r2
    muls   r3, r0
1000637a:	4343      	muls	r3, r0
    adds   r1, r3
1000637c:	18c9      	adds	r1, r1, r3
    mov    r12, r1
1000637e:	468c      	mov	ip, r1
    lsrs   r1, r2, #16
10006380:	0c11      	lsrs	r1, r2, #16
    uxth   r3, r0
10006382:	b283      	uxth	r3, r0
    muls   r3, r1
10006384:	434b      	muls	r3, r1
    push   {r4}
10006386:	b410      	push	{r4}
    lsrs   r4, r0, #16
10006388:	0c04      	lsrs	r4, r0, #16
    muls   r1, r4
1000638a:	4361      	muls	r1, r4
    uxth   r2, r2
1000638c:	b292      	uxth	r2, r2
    uxth   r0, r0
1000638e:	b280      	uxth	r0, r0
    muls   r0, r2
10006390:	4350      	muls	r0, r2
    muls   r2, r4
10006392:	4362      	muls	r2, r4
    lsls   r4, r3, #16
10006394:	041c      	lsls	r4, r3, #16
    lsrs   r3, #16
10006396:	0c1b      	lsrs	r3, r3, #16
    adds   r0, r4
10006398:	1900      	adds	r0, r0, r4
    pop    {r4}
1000639a:	bc10      	pop	{r4}
    adcs   r1, r3
1000639c:	4159      	adcs	r1, r3
    lsls   r3, r2, #16
1000639e:	0413      	lsls	r3, r2, #16
    lsrs   r2, #16
100063a0:	0c12      	lsrs	r2, r2, #16
    adds   r0, r3
100063a2:	18c0      	adds	r0, r0, r3
    adcs   r1, r2
100063a4:	4151      	adcs	r1, r2
    add    r1, r12
100063a6:	4461      	add	r1, ip
    bx lr
100063a8:	4770      	bx	lr
	...

100063ac <__aeabi_mem_init>:
    .word ROM_FUNC_MEMCPY44
aeabi_mem_funcs_end:

.section .text
regular_func __aeabi_mem_init
    ldr r0, =aeabi_mem_funcs
100063ac:	4801      	ldr	r0, [pc, #4]	; (100063b4 <__aeabi_mem_init+0x8>)
    movs r1, #MEM_FUNC_COUNT
100063ae:	2104      	movs	r1, #4
    ldr r3, =rom_funcs_lookup
100063b0:	4b01      	ldr	r3, [pc, #4]	; (100063b8 <__aeabi_mem_init+0xc>)
    bx r3
100063b2:	4718      	bx	r3
    ldr r0, =aeabi_mem_funcs
100063b4:	20000370 	.word	0x20000370
    ldr r3, =rom_funcs_lookup
100063b8:	1000340d 	.word	0x1000340d

100063bc <__wrap_memset>:
    bx r3

mem_section memset

wrapper_func memset
    ldr r3, =aeabi_mem_funcs
100063bc:	4b01      	ldr	r3, [pc, #4]	; (100063c4 <__wrap_memset+0x8>)
    ldr r3, [r3, #MEMSET]
100063be:	681b      	ldr	r3, [r3, #0]
    bx r3
100063c0:	4718      	bx	r3
100063c2:	0000      	.short	0x0000
    ldr r3, =aeabi_mem_funcs
100063c4:	20000370 	.word	0x20000370

100063c8 <__wrap___aeabi_memcpy>:

mem_section memcpy
wrapper_func __aeabi_memcpy
wrapper_func memcpy
    ldr r3, =aeabi_mem_funcs
100063c8:	4b01      	ldr	r3, [pc, #4]	; (100063d0 <__wrap___aeabi_memcpy+0x8>)
    ldr r3, [r3, #MEMCPY]
100063ca:	685b      	ldr	r3, [r3, #4]
    bx r3
100063cc:	4718      	bx	r3
100063ce:	0000      	.short	0x0000
    ldr r3, =aeabi_mem_funcs
100063d0:	20000370 	.word	0x20000370

100063d4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
100063d4:	b570      	push	{r4, r5, r6, lr}
100063d6:	259e      	movs	r5, #158	; 0x9e
100063d8:	4c08      	ldr	r4, [pc, #32]	; (100063fc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x28>)
100063da:	012d      	lsls	r5, r5, #4
100063dc:	0028      	movs	r0, r5
100063de:	60e5      	str	r5, [r4, #12]
100063e0:	f7fd f9ac 	bl	1000373c <__wrap_malloc>
100063e4:	60a0      	str	r0, [r4, #8]
100063e6:	2800      	cmp	r0, #0
100063e8:	d004      	beq.n	100063f4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x20>
100063ea:	2300      	movs	r3, #0
100063ec:	6060      	str	r0, [r4, #4]
100063ee:	6005      	str	r5, [r0, #0]
100063f0:	6043      	str	r3, [r0, #4]
100063f2:	bd70      	pop	{r4, r5, r6, pc}
100063f4:	60e0      	str	r0, [r4, #12]
100063f6:	6060      	str	r0, [r4, #4]
100063f8:	e7fb      	b.n	100063f2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
100063fa:	46c0      	nop			; (mov r8, r8)
100063fc:	20000eb4 	.word	0x20000eb4

10006400 <__retarget_lock_acquire_recursive>:
10006400:	4770      	bx	lr
10006402:	46c0      	nop			; (mov r8, r8)

10006404 <__retarget_lock_release_recursive>:
10006404:	4770      	bx	lr
10006406:	46c0      	nop			; (mov r8, r8)

10006408 <malloc>:
10006408:	b510      	push	{r4, lr}
1000640a:	4b03      	ldr	r3, [pc, #12]	; (10006418 <malloc+0x10>)
1000640c:	0001      	movs	r1, r0
1000640e:	6818      	ldr	r0, [r3, #0]
10006410:	f000 f804 	bl	1000641c <_malloc_r>
10006414:	bd10      	pop	{r4, pc}
10006416:	46c0      	nop			; (mov r8, r8)
10006418:	20000380 	.word	0x20000380

1000641c <_malloc_r>:
1000641c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000641e:	464e      	mov	r6, r9
10006420:	4645      	mov	r5, r8
10006422:	46de      	mov	lr, fp
10006424:	4657      	mov	r7, sl
10006426:	b5e0      	push	{r5, r6, r7, lr}
10006428:	000d      	movs	r5, r1
1000642a:	350b      	adds	r5, #11
1000642c:	0006      	movs	r6, r0
1000642e:	b083      	sub	sp, #12
10006430:	2d16      	cmp	r5, #22
10006432:	d822      	bhi.n	1000647a <_malloc_r+0x5e>
10006434:	2910      	cmp	r1, #16
10006436:	d900      	bls.n	1000643a <_malloc_r+0x1e>
10006438:	e0b2      	b.n	100065a0 <_malloc_r+0x184>
1000643a:	f000 fab1 	bl	100069a0 <__malloc_lock>
1000643e:	2510      	movs	r5, #16
10006440:	2318      	movs	r3, #24
10006442:	2002      	movs	r0, #2
10006444:	4fcc      	ldr	r7, [pc, #816]	; (10006778 <_malloc_r+0x35c>)
10006446:	18fb      	adds	r3, r7, r3
10006448:	001a      	movs	r2, r3
1000644a:	685c      	ldr	r4, [r3, #4]
1000644c:	3a08      	subs	r2, #8
1000644e:	4294      	cmp	r4, r2
10006450:	d100      	bne.n	10006454 <_malloc_r+0x38>
10006452:	e0b5      	b.n	100065c0 <_malloc_r+0x1a4>
10006454:	2303      	movs	r3, #3
10006456:	6862      	ldr	r2, [r4, #4]
10006458:	439a      	bics	r2, r3
1000645a:	0013      	movs	r3, r2
1000645c:	68e2      	ldr	r2, [r4, #12]
1000645e:	68a1      	ldr	r1, [r4, #8]
10006460:	60ca      	str	r2, [r1, #12]
10006462:	6091      	str	r1, [r2, #8]
10006464:	2201      	movs	r2, #1
10006466:	18e3      	adds	r3, r4, r3
10006468:	6859      	ldr	r1, [r3, #4]
1000646a:	0030      	movs	r0, r6
1000646c:	430a      	orrs	r2, r1
1000646e:	605a      	str	r2, [r3, #4]
10006470:	f000 fa9e 	bl	100069b0 <__malloc_unlock>
10006474:	0020      	movs	r0, r4
10006476:	3008      	adds	r0, #8
10006478:	e095      	b.n	100065a6 <_malloc_r+0x18a>
1000647a:	2307      	movs	r3, #7
1000647c:	439d      	bics	r5, r3
1000647e:	d500      	bpl.n	10006482 <_malloc_r+0x66>
10006480:	e08e      	b.n	100065a0 <_malloc_r+0x184>
10006482:	42a9      	cmp	r1, r5
10006484:	d900      	bls.n	10006488 <_malloc_r+0x6c>
10006486:	e08b      	b.n	100065a0 <_malloc_r+0x184>
10006488:	f000 fa8a 	bl	100069a0 <__malloc_lock>
1000648c:	23fc      	movs	r3, #252	; 0xfc
1000648e:	005b      	lsls	r3, r3, #1
10006490:	429d      	cmp	r5, r3
10006492:	d200      	bcs.n	10006496 <_malloc_r+0x7a>
10006494:	e1a7      	b.n	100067e6 <_malloc_r+0x3ca>
10006496:	0a68      	lsrs	r0, r5, #9
10006498:	d100      	bne.n	1000649c <_malloc_r+0x80>
1000649a:	e08b      	b.n	100065b4 <_malloc_r+0x198>
1000649c:	2804      	cmp	r0, #4
1000649e:	d900      	bls.n	100064a2 <_malloc_r+0x86>
100064a0:	e17a      	b.n	10006798 <_malloc_r+0x37c>
100064a2:	2338      	movs	r3, #56	; 0x38
100064a4:	4698      	mov	r8, r3
100064a6:	09a8      	lsrs	r0, r5, #6
100064a8:	4480      	add	r8, r0
100064aa:	3039      	adds	r0, #57	; 0x39
100064ac:	00c1      	lsls	r1, r0, #3
100064ae:	4fb2      	ldr	r7, [pc, #712]	; (10006778 <_malloc_r+0x35c>)
100064b0:	1879      	adds	r1, r7, r1
100064b2:	684c      	ldr	r4, [r1, #4]
100064b4:	3908      	subs	r1, #8
100064b6:	42a1      	cmp	r1, r4
100064b8:	d00e      	beq.n	100064d8 <_malloc_r+0xbc>
100064ba:	2303      	movs	r3, #3
100064bc:	469c      	mov	ip, r3
100064be:	e004      	b.n	100064ca <_malloc_r+0xae>
100064c0:	2a00      	cmp	r2, #0
100064c2:	dacb      	bge.n	1000645c <_malloc_r+0x40>
100064c4:	68e4      	ldr	r4, [r4, #12]
100064c6:	42a1      	cmp	r1, r4
100064c8:	d006      	beq.n	100064d8 <_malloc_r+0xbc>
100064ca:	4662      	mov	r2, ip
100064cc:	6863      	ldr	r3, [r4, #4]
100064ce:	4393      	bics	r3, r2
100064d0:	1b5a      	subs	r2, r3, r5
100064d2:	2a0f      	cmp	r2, #15
100064d4:	ddf4      	ble.n	100064c0 <_malloc_r+0xa4>
100064d6:	4640      	mov	r0, r8
100064d8:	003a      	movs	r2, r7
100064da:	693c      	ldr	r4, [r7, #16]
100064dc:	3208      	adds	r2, #8
100064de:	4294      	cmp	r4, r2
100064e0:	d100      	bne.n	100064e4 <_malloc_r+0xc8>
100064e2:	e078      	b.n	100065d6 <_malloc_r+0x1ba>
100064e4:	2303      	movs	r3, #3
100064e6:	6861      	ldr	r1, [r4, #4]
100064e8:	4399      	bics	r1, r3
100064ea:	4689      	mov	r9, r1
100064ec:	000b      	movs	r3, r1
100064ee:	1b49      	subs	r1, r1, r5
100064f0:	290f      	cmp	r1, #15
100064f2:	dd00      	ble.n	100064f6 <_malloc_r+0xda>
100064f4:	e17b      	b.n	100067ee <_malloc_r+0x3d2>
100064f6:	617a      	str	r2, [r7, #20]
100064f8:	613a      	str	r2, [r7, #16]
100064fa:	2900      	cmp	r1, #0
100064fc:	dab2      	bge.n	10006464 <_malloc_r+0x48>
100064fe:	2280      	movs	r2, #128	; 0x80
10006500:	0092      	lsls	r2, r2, #2
10006502:	4591      	cmp	r9, r2
10006504:	d300      	bcc.n	10006508 <_malloc_r+0xec>
10006506:	e10f      	b.n	10006728 <_malloc_r+0x30c>
10006508:	0959      	lsrs	r1, r3, #5
1000650a:	08da      	lsrs	r2, r3, #3
1000650c:	2301      	movs	r3, #1
1000650e:	408b      	lsls	r3, r1
10006510:	00d2      	lsls	r2, r2, #3
10006512:	6879      	ldr	r1, [r7, #4]
10006514:	19d2      	adds	r2, r2, r7
10006516:	430b      	orrs	r3, r1
10006518:	6891      	ldr	r1, [r2, #8]
1000651a:	607b      	str	r3, [r7, #4]
1000651c:	60e2      	str	r2, [r4, #12]
1000651e:	60a1      	str	r1, [r4, #8]
10006520:	6094      	str	r4, [r2, #8]
10006522:	60cc      	str	r4, [r1, #12]
10006524:	2101      	movs	r1, #1
10006526:	1082      	asrs	r2, r0, #2
10006528:	4091      	lsls	r1, r2
1000652a:	4299      	cmp	r1, r3
1000652c:	d859      	bhi.n	100065e2 <_malloc_r+0x1c6>
1000652e:	420b      	tst	r3, r1
10006530:	d105      	bne.n	1000653e <_malloc_r+0x122>
10006532:	2203      	movs	r2, #3
10006534:	4390      	bics	r0, r2
10006536:	0049      	lsls	r1, r1, #1
10006538:	3004      	adds	r0, #4
1000653a:	420b      	tst	r3, r1
1000653c:	d0fb      	beq.n	10006536 <_malloc_r+0x11a>
1000653e:	2303      	movs	r3, #3
10006540:	4698      	mov	r8, r3
10006542:	00c3      	lsls	r3, r0, #3
10006544:	4699      	mov	r9, r3
10006546:	44b9      	add	r9, r7
10006548:	46cc      	mov	ip, r9
1000654a:	4682      	mov	sl, r0
1000654c:	4663      	mov	r3, ip
1000654e:	68dc      	ldr	r4, [r3, #12]
10006550:	45a4      	cmp	ip, r4
10006552:	d107      	bne.n	10006564 <_malloc_r+0x148>
10006554:	e12c      	b.n	100067b0 <_malloc_r+0x394>
10006556:	2a00      	cmp	r2, #0
10006558:	db00      	blt.n	1000655c <_malloc_r+0x140>
1000655a:	e135      	b.n	100067c8 <_malloc_r+0x3ac>
1000655c:	68e4      	ldr	r4, [r4, #12]
1000655e:	45a4      	cmp	ip, r4
10006560:	d100      	bne.n	10006564 <_malloc_r+0x148>
10006562:	e125      	b.n	100067b0 <_malloc_r+0x394>
10006564:	4642      	mov	r2, r8
10006566:	6863      	ldr	r3, [r4, #4]
10006568:	4393      	bics	r3, r2
1000656a:	1b5a      	subs	r2, r3, r5
1000656c:	2a0f      	cmp	r2, #15
1000656e:	ddf2      	ble.n	10006556 <_malloc_r+0x13a>
10006570:	2001      	movs	r0, #1
10006572:	4680      	mov	r8, r0
10006574:	1961      	adds	r1, r4, r5
10006576:	4305      	orrs	r5, r0
10006578:	6065      	str	r5, [r4, #4]
1000657a:	68a0      	ldr	r0, [r4, #8]
1000657c:	68e5      	ldr	r5, [r4, #12]
1000657e:	3708      	adds	r7, #8
10006580:	60c5      	str	r5, [r0, #12]
10006582:	60a8      	str	r0, [r5, #8]
10006584:	4640      	mov	r0, r8
10006586:	4310      	orrs	r0, r2
10006588:	60f9      	str	r1, [r7, #12]
1000658a:	60b9      	str	r1, [r7, #8]
1000658c:	6048      	str	r0, [r1, #4]
1000658e:	60cf      	str	r7, [r1, #12]
10006590:	0030      	movs	r0, r6
10006592:	608f      	str	r7, [r1, #8]
10006594:	50e2      	str	r2, [r4, r3]
10006596:	f000 fa0b 	bl	100069b0 <__malloc_unlock>
1000659a:	0020      	movs	r0, r4
1000659c:	3008      	adds	r0, #8
1000659e:	e002      	b.n	100065a6 <_malloc_r+0x18a>
100065a0:	230c      	movs	r3, #12
100065a2:	2000      	movs	r0, #0
100065a4:	6033      	str	r3, [r6, #0]
100065a6:	b003      	add	sp, #12
100065a8:	bcf0      	pop	{r4, r5, r6, r7}
100065aa:	46bb      	mov	fp, r7
100065ac:	46b2      	mov	sl, r6
100065ae:	46a9      	mov	r9, r5
100065b0:	46a0      	mov	r8, r4
100065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100065b4:	2180      	movs	r1, #128	; 0x80
100065b6:	233f      	movs	r3, #63	; 0x3f
100065b8:	2040      	movs	r0, #64	; 0x40
100065ba:	4698      	mov	r8, r3
100065bc:	0089      	lsls	r1, r1, #2
100065be:	e776      	b.n	100064ae <_malloc_r+0x92>
100065c0:	68dc      	ldr	r4, [r3, #12]
100065c2:	3002      	adds	r0, #2
100065c4:	42a3      	cmp	r3, r4
100065c6:	d000      	beq.n	100065ca <_malloc_r+0x1ae>
100065c8:	e744      	b.n	10006454 <_malloc_r+0x38>
100065ca:	003a      	movs	r2, r7
100065cc:	693c      	ldr	r4, [r7, #16]
100065ce:	3208      	adds	r2, #8
100065d0:	4294      	cmp	r4, r2
100065d2:	d000      	beq.n	100065d6 <_malloc_r+0x1ba>
100065d4:	e786      	b.n	100064e4 <_malloc_r+0xc8>
100065d6:	2101      	movs	r1, #1
100065d8:	687b      	ldr	r3, [r7, #4]
100065da:	1082      	asrs	r2, r0, #2
100065dc:	4091      	lsls	r1, r2
100065de:	4299      	cmp	r1, r3
100065e0:	d9a5      	bls.n	1000652e <_malloc_r+0x112>
100065e2:	2303      	movs	r3, #3
100065e4:	68bc      	ldr	r4, [r7, #8]
100065e6:	6862      	ldr	r2, [r4, #4]
100065e8:	439a      	bics	r2, r3
100065ea:	4691      	mov	r9, r2
100065ec:	4295      	cmp	r5, r2
100065ee:	d803      	bhi.n	100065f8 <_malloc_r+0x1dc>
100065f0:	1b53      	subs	r3, r2, r5
100065f2:	2b0f      	cmp	r3, #15
100065f4:	dd00      	ble.n	100065f8 <_malloc_r+0x1dc>
100065f6:	e089      	b.n	1000670c <_malloc_r+0x2f0>
100065f8:	0023      	movs	r3, r4
100065fa:	444b      	add	r3, r9
100065fc:	4a5f      	ldr	r2, [pc, #380]	; (1000677c <_malloc_r+0x360>)
100065fe:	9301      	str	r3, [sp, #4]
10006600:	4b5f      	ldr	r3, [pc, #380]	; (10006780 <_malloc_r+0x364>)
10006602:	4693      	mov	fp, r2
10006604:	681b      	ldr	r3, [r3, #0]
10006606:	6812      	ldr	r2, [r2, #0]
10006608:	18eb      	adds	r3, r5, r3
1000660a:	3201      	adds	r2, #1
1000660c:	d100      	bne.n	10006610 <_malloc_r+0x1f4>
1000660e:	e13d      	b.n	1000688c <_malloc_r+0x470>
10006610:	4a5c      	ldr	r2, [pc, #368]	; (10006784 <_malloc_r+0x368>)
10006612:	4694      	mov	ip, r2
10006614:	4463      	add	r3, ip
10006616:	0b1b      	lsrs	r3, r3, #12
10006618:	031b      	lsls	r3, r3, #12
1000661a:	9300      	str	r3, [sp, #0]
1000661c:	0030      	movs	r0, r6
1000661e:	9900      	ldr	r1, [sp, #0]
10006620:	f000 f9ce 	bl	100069c0 <_sbrk_r>
10006624:	0003      	movs	r3, r0
10006626:	4680      	mov	r8, r0
10006628:	3301      	adds	r3, #1
1000662a:	d100      	bne.n	1000662e <_malloc_r+0x212>
1000662c:	e0fa      	b.n	10006824 <_malloc_r+0x408>
1000662e:	9b01      	ldr	r3, [sp, #4]
10006630:	4283      	cmp	r3, r0
10006632:	d900      	bls.n	10006636 <_malloc_r+0x21a>
10006634:	e0f4      	b.n	10006820 <_malloc_r+0x404>
10006636:	4b54      	ldr	r3, [pc, #336]	; (10006788 <_malloc_r+0x36c>)
10006638:	9800      	ldr	r0, [sp, #0]
1000663a:	001a      	movs	r2, r3
1000663c:	469a      	mov	sl, r3
1000663e:	6812      	ldr	r2, [r2, #0]
10006640:	0003      	movs	r3, r0
10006642:	4694      	mov	ip, r2
10006644:	4651      	mov	r1, sl
10006646:	4463      	add	r3, ip
10006648:	600b      	str	r3, [r1, #0]
1000664a:	9901      	ldr	r1, [sp, #4]
1000664c:	001a      	movs	r2, r3
1000664e:	4541      	cmp	r1, r8
10006650:	d100      	bne.n	10006654 <_malloc_r+0x238>
10006652:	e151      	b.n	100068f8 <_malloc_r+0x4dc>
10006654:	465b      	mov	r3, fp
10006656:	681b      	ldr	r3, [r3, #0]
10006658:	3301      	adds	r3, #1
1000665a:	d100      	bne.n	1000665e <_malloc_r+0x242>
1000665c:	e156      	b.n	1000690c <_malloc_r+0x4f0>
1000665e:	4643      	mov	r3, r8
10006660:	9901      	ldr	r1, [sp, #4]
10006662:	1a5b      	subs	r3, r3, r1
10006664:	189a      	adds	r2, r3, r2
10006666:	4653      	mov	r3, sl
10006668:	601a      	str	r2, [r3, #0]
1000666a:	2307      	movs	r3, #7
1000666c:	4642      	mov	r2, r8
1000666e:	4641      	mov	r1, r8
10006670:	401a      	ands	r2, r3
10006672:	9201      	str	r2, [sp, #4]
10006674:	4219      	tst	r1, r3
10006676:	d100      	bne.n	1000667a <_malloc_r+0x25e>
10006678:	e112      	b.n	100068a0 <_malloc_r+0x484>
1000667a:	2308      	movs	r3, #8
1000667c:	4698      	mov	r8, r3
1000667e:	1a88      	subs	r0, r1, r2
10006680:	4b42      	ldr	r3, [pc, #264]	; (1000678c <_malloc_r+0x370>)
10006682:	9900      	ldr	r1, [sp, #0]
10006684:	4480      	add	r8, r0
10006686:	4441      	add	r1, r8
10006688:	1a9b      	subs	r3, r3, r2
1000668a:	1a5b      	subs	r3, r3, r1
1000668c:	051b      	lsls	r3, r3, #20
1000668e:	0d1b      	lsrs	r3, r3, #20
10006690:	9100      	str	r1, [sp, #0]
10006692:	0030      	movs	r0, r6
10006694:	0019      	movs	r1, r3
10006696:	469b      	mov	fp, r3
10006698:	f000 f992 	bl	100069c0 <_sbrk_r>
1000669c:	1c43      	adds	r3, r0, #1
1000669e:	d100      	bne.n	100066a2 <_malloc_r+0x286>
100066a0:	e150      	b.n	10006944 <_malloc_r+0x528>
100066a2:	4643      	mov	r3, r8
100066a4:	1ac0      	subs	r0, r0, r3
100066a6:	0003      	movs	r3, r0
100066a8:	445b      	add	r3, fp
100066aa:	9300      	str	r3, [sp, #0]
100066ac:	4653      	mov	r3, sl
100066ae:	4652      	mov	r2, sl
100066b0:	681b      	ldr	r3, [r3, #0]
100066b2:	2101      	movs	r1, #1
100066b4:	445b      	add	r3, fp
100066b6:	6013      	str	r3, [r2, #0]
100066b8:	4642      	mov	r2, r8
100066ba:	4640      	mov	r0, r8
100066bc:	60ba      	str	r2, [r7, #8]
100066be:	9a00      	ldr	r2, [sp, #0]
100066c0:	430a      	orrs	r2, r1
100066c2:	6042      	str	r2, [r0, #4]
100066c4:	42bc      	cmp	r4, r7
100066c6:	d100      	bne.n	100066ca <_malloc_r+0x2ae>
100066c8:	e124      	b.n	10006914 <_malloc_r+0x4f8>
100066ca:	464a      	mov	r2, r9
100066cc:	2a0f      	cmp	r2, #15
100066ce:	d800      	bhi.n	100066d2 <_malloc_r+0x2b6>
100066d0:	e122      	b.n	10006918 <_malloc_r+0x4fc>
100066d2:	2007      	movs	r0, #7
100066d4:	3a0c      	subs	r2, #12
100066d6:	4382      	bics	r2, r0
100066d8:	6860      	ldr	r0, [r4, #4]
100066da:	4001      	ands	r1, r0
100066dc:	2005      	movs	r0, #5
100066de:	4311      	orrs	r1, r2
100066e0:	6061      	str	r1, [r4, #4]
100066e2:	18a1      	adds	r1, r4, r2
100066e4:	6048      	str	r0, [r1, #4]
100066e6:	6088      	str	r0, [r1, #8]
100066e8:	2a0f      	cmp	r2, #15
100066ea:	d900      	bls.n	100066ee <_malloc_r+0x2d2>
100066ec:	e135      	b.n	1000695a <_malloc_r+0x53e>
100066ee:	4642      	mov	r2, r8
100066f0:	4644      	mov	r4, r8
100066f2:	6852      	ldr	r2, [r2, #4]
100066f4:	4926      	ldr	r1, [pc, #152]	; (10006790 <_malloc_r+0x374>)
100066f6:	6808      	ldr	r0, [r1, #0]
100066f8:	4298      	cmp	r0, r3
100066fa:	d200      	bcs.n	100066fe <_malloc_r+0x2e2>
100066fc:	600b      	str	r3, [r1, #0]
100066fe:	4925      	ldr	r1, [pc, #148]	; (10006794 <_malloc_r+0x378>)
10006700:	6808      	ldr	r0, [r1, #0]
10006702:	4298      	cmp	r0, r3
10006704:	d300      	bcc.n	10006708 <_malloc_r+0x2ec>
10006706:	e08f      	b.n	10006828 <_malloc_r+0x40c>
10006708:	600b      	str	r3, [r1, #0]
1000670a:	e08d      	b.n	10006828 <_malloc_r+0x40c>
1000670c:	2201      	movs	r2, #1
1000670e:	0029      	movs	r1, r5
10006710:	4313      	orrs	r3, r2
10006712:	4311      	orrs	r1, r2
10006714:	1965      	adds	r5, r4, r5
10006716:	6061      	str	r1, [r4, #4]
10006718:	0030      	movs	r0, r6
1000671a:	60bd      	str	r5, [r7, #8]
1000671c:	606b      	str	r3, [r5, #4]
1000671e:	f000 f947 	bl	100069b0 <__malloc_unlock>
10006722:	0020      	movs	r0, r4
10006724:	3008      	adds	r0, #8
10006726:	e73e      	b.n	100065a6 <_malloc_r+0x18a>
10006728:	0a5a      	lsrs	r2, r3, #9
1000672a:	2a04      	cmp	r2, #4
1000672c:	d972      	bls.n	10006814 <_malloc_r+0x3f8>
1000672e:	2a14      	cmp	r2, #20
10006730:	d900      	bls.n	10006734 <_malloc_r+0x318>
10006732:	e0c5      	b.n	100068c0 <_malloc_r+0x4a4>
10006734:	0011      	movs	r1, r2
10006736:	325c      	adds	r2, #92	; 0x5c
10006738:	315b      	adds	r1, #91	; 0x5b
1000673a:	00d2      	lsls	r2, r2, #3
1000673c:	2308      	movs	r3, #8
1000673e:	425b      	negs	r3, r3
10006740:	469c      	mov	ip, r3
10006742:	18ba      	adds	r2, r7, r2
10006744:	4494      	add	ip, r2
10006746:	4663      	mov	r3, ip
10006748:	689a      	ldr	r2, [r3, #8]
1000674a:	2303      	movs	r3, #3
1000674c:	4698      	mov	r8, r3
1000674e:	4594      	cmp	ip, r2
10006750:	d100      	bne.n	10006754 <_malloc_r+0x338>
10006752:	e09e      	b.n	10006892 <_malloc_r+0x476>
10006754:	4643      	mov	r3, r8
10006756:	6851      	ldr	r1, [r2, #4]
10006758:	4399      	bics	r1, r3
1000675a:	4549      	cmp	r1, r9
1000675c:	d902      	bls.n	10006764 <_malloc_r+0x348>
1000675e:	6892      	ldr	r2, [r2, #8]
10006760:	4594      	cmp	ip, r2
10006762:	d1f7      	bne.n	10006754 <_malloc_r+0x338>
10006764:	68d3      	ldr	r3, [r2, #12]
10006766:	469c      	mov	ip, r3
10006768:	687b      	ldr	r3, [r7, #4]
1000676a:	4661      	mov	r1, ip
1000676c:	60a2      	str	r2, [r4, #8]
1000676e:	60e1      	str	r1, [r4, #12]
10006770:	608c      	str	r4, [r1, #8]
10006772:	60d4      	str	r4, [r2, #12]
10006774:	e6d6      	b.n	10006524 <_malloc_r+0x108>
10006776:	46c0      	nop			; (mov r8, r8)
10006778:	200007b0 	.word	0x200007b0
1000677c:	20000bb8 	.word	0x20000bb8
10006780:	20000f10 	.word	0x20000f10
10006784:	0000100f 	.word	0x0000100f
10006788:	20000ee0 	.word	0x20000ee0
1000678c:	00001008 	.word	0x00001008
10006790:	20000f08 	.word	0x20000f08
10006794:	20000f0c 	.word	0x20000f0c
10006798:	2814      	cmp	r0, #20
1000679a:	d952      	bls.n	10006842 <_malloc_r+0x426>
1000679c:	2854      	cmp	r0, #84	; 0x54
1000679e:	d900      	bls.n	100067a2 <_malloc_r+0x386>
100067a0:	e096      	b.n	100068d0 <_malloc_r+0x4b4>
100067a2:	236e      	movs	r3, #110	; 0x6e
100067a4:	4698      	mov	r8, r3
100067a6:	0b28      	lsrs	r0, r5, #12
100067a8:	4480      	add	r8, r0
100067aa:	306f      	adds	r0, #111	; 0x6f
100067ac:	00c1      	lsls	r1, r0, #3
100067ae:	e67e      	b.n	100064ae <_malloc_r+0x92>
100067b0:	2308      	movs	r3, #8
100067b2:	469b      	mov	fp, r3
100067b4:	3b07      	subs	r3, #7
100067b6:	44dc      	add	ip, fp
100067b8:	469b      	mov	fp, r3
100067ba:	44da      	add	sl, fp
100067bc:	4643      	mov	r3, r8
100067be:	4652      	mov	r2, sl
100067c0:	4213      	tst	r3, r2
100067c2:	d000      	beq.n	100067c6 <_malloc_r+0x3aa>
100067c4:	e6c2      	b.n	1000654c <_malloc_r+0x130>
100067c6:	e04c      	b.n	10006862 <_malloc_r+0x446>
100067c8:	2201      	movs	r2, #1
100067ca:	18e3      	adds	r3, r4, r3
100067cc:	6859      	ldr	r1, [r3, #4]
100067ce:	0030      	movs	r0, r6
100067d0:	430a      	orrs	r2, r1
100067d2:	605a      	str	r2, [r3, #4]
100067d4:	68e3      	ldr	r3, [r4, #12]
100067d6:	68a2      	ldr	r2, [r4, #8]
100067d8:	60d3      	str	r3, [r2, #12]
100067da:	609a      	str	r2, [r3, #8]
100067dc:	f000 f8e8 	bl	100069b0 <__malloc_unlock>
100067e0:	0020      	movs	r0, r4
100067e2:	3008      	adds	r0, #8
100067e4:	e6df      	b.n	100065a6 <_malloc_r+0x18a>
100067e6:	002b      	movs	r3, r5
100067e8:	08e8      	lsrs	r0, r5, #3
100067ea:	3308      	adds	r3, #8
100067ec:	e62a      	b.n	10006444 <_malloc_r+0x28>
100067ee:	2301      	movs	r3, #1
100067f0:	1960      	adds	r0, r4, r5
100067f2:	431d      	orrs	r5, r3
100067f4:	6065      	str	r5, [r4, #4]
100067f6:	6178      	str	r0, [r7, #20]
100067f8:	6138      	str	r0, [r7, #16]
100067fa:	60c2      	str	r2, [r0, #12]
100067fc:	6082      	str	r2, [r0, #8]
100067fe:	001a      	movs	r2, r3
10006800:	464b      	mov	r3, r9
10006802:	430a      	orrs	r2, r1
10006804:	6042      	str	r2, [r0, #4]
10006806:	0030      	movs	r0, r6
10006808:	50e1      	str	r1, [r4, r3]
1000680a:	f000 f8d1 	bl	100069b0 <__malloc_unlock>
1000680e:	0020      	movs	r0, r4
10006810:	3008      	adds	r0, #8
10006812:	e6c8      	b.n	100065a6 <_malloc_r+0x18a>
10006814:	099a      	lsrs	r2, r3, #6
10006816:	0011      	movs	r1, r2
10006818:	3239      	adds	r2, #57	; 0x39
1000681a:	3138      	adds	r1, #56	; 0x38
1000681c:	00d2      	lsls	r2, r2, #3
1000681e:	e78d      	b.n	1000673c <_malloc_r+0x320>
10006820:	42bc      	cmp	r4, r7
10006822:	d060      	beq.n	100068e6 <_malloc_r+0x4ca>
10006824:	68bc      	ldr	r4, [r7, #8]
10006826:	6862      	ldr	r2, [r4, #4]
10006828:	2303      	movs	r3, #3
1000682a:	439a      	bics	r2, r3
1000682c:	1b53      	subs	r3, r2, r5
1000682e:	4295      	cmp	r5, r2
10006830:	d802      	bhi.n	10006838 <_malloc_r+0x41c>
10006832:	2b0f      	cmp	r3, #15
10006834:	dd00      	ble.n	10006838 <_malloc_r+0x41c>
10006836:	e769      	b.n	1000670c <_malloc_r+0x2f0>
10006838:	0030      	movs	r0, r6
1000683a:	f000 f8b9 	bl	100069b0 <__malloc_unlock>
1000683e:	2000      	movs	r0, #0
10006840:	e6b1      	b.n	100065a6 <_malloc_r+0x18a>
10006842:	235b      	movs	r3, #91	; 0x5b
10006844:	4698      	mov	r8, r3
10006846:	4480      	add	r8, r0
10006848:	305c      	adds	r0, #92	; 0x5c
1000684a:	00c1      	lsls	r1, r0, #3
1000684c:	e62f      	b.n	100064ae <_malloc_r+0x92>
1000684e:	2308      	movs	r3, #8
10006850:	425b      	negs	r3, r3
10006852:	469c      	mov	ip, r3
10006854:	44e1      	add	r9, ip
10006856:	464b      	mov	r3, r9
10006858:	689b      	ldr	r3, [r3, #8]
1000685a:	3801      	subs	r0, #1
1000685c:	454b      	cmp	r3, r9
1000685e:	d000      	beq.n	10006862 <_malloc_r+0x446>
10006860:	e098      	b.n	10006994 <_malloc_r+0x578>
10006862:	4643      	mov	r3, r8
10006864:	4203      	tst	r3, r0
10006866:	d1f2      	bne.n	1000684e <_malloc_r+0x432>
10006868:	687b      	ldr	r3, [r7, #4]
1000686a:	438b      	bics	r3, r1
1000686c:	607b      	str	r3, [r7, #4]
1000686e:	0049      	lsls	r1, r1, #1
10006870:	4299      	cmp	r1, r3
10006872:	d900      	bls.n	10006876 <_malloc_r+0x45a>
10006874:	e6b5      	b.n	100065e2 <_malloc_r+0x1c6>
10006876:	2900      	cmp	r1, #0
10006878:	d104      	bne.n	10006884 <_malloc_r+0x468>
1000687a:	e6b2      	b.n	100065e2 <_malloc_r+0x1c6>
1000687c:	2204      	movs	r2, #4
1000687e:	4694      	mov	ip, r2
10006880:	0049      	lsls	r1, r1, #1
10006882:	44e2      	add	sl, ip
10006884:	420b      	tst	r3, r1
10006886:	d0f9      	beq.n	1000687c <_malloc_r+0x460>
10006888:	4650      	mov	r0, sl
1000688a:	e65a      	b.n	10006542 <_malloc_r+0x126>
1000688c:	3310      	adds	r3, #16
1000688e:	9300      	str	r3, [sp, #0]
10006890:	e6c4      	b.n	1000661c <_malloc_r+0x200>
10006892:	1089      	asrs	r1, r1, #2
10006894:	3b02      	subs	r3, #2
10006896:	408b      	lsls	r3, r1
10006898:	6879      	ldr	r1, [r7, #4]
1000689a:	430b      	orrs	r3, r1
1000689c:	607b      	str	r3, [r7, #4]
1000689e:	e764      	b.n	1000676a <_malloc_r+0x34e>
100068a0:	9b00      	ldr	r3, [sp, #0]
100068a2:	0030      	movs	r0, r6
100068a4:	4443      	add	r3, r8
100068a6:	425b      	negs	r3, r3
100068a8:	051b      	lsls	r3, r3, #20
100068aa:	0d1b      	lsrs	r3, r3, #20
100068ac:	0019      	movs	r1, r3
100068ae:	469b      	mov	fp, r3
100068b0:	f000 f886 	bl	100069c0 <_sbrk_r>
100068b4:	1c43      	adds	r3, r0, #1
100068b6:	d000      	beq.n	100068ba <_malloc_r+0x49e>
100068b8:	e6f3      	b.n	100066a2 <_malloc_r+0x286>
100068ba:	2300      	movs	r3, #0
100068bc:	469b      	mov	fp, r3
100068be:	e6f5      	b.n	100066ac <_malloc_r+0x290>
100068c0:	2a54      	cmp	r2, #84	; 0x54
100068c2:	d82b      	bhi.n	1000691c <_malloc_r+0x500>
100068c4:	0b1a      	lsrs	r2, r3, #12
100068c6:	0011      	movs	r1, r2
100068c8:	326f      	adds	r2, #111	; 0x6f
100068ca:	316e      	adds	r1, #110	; 0x6e
100068cc:	00d2      	lsls	r2, r2, #3
100068ce:	e735      	b.n	1000673c <_malloc_r+0x320>
100068d0:	23aa      	movs	r3, #170	; 0xaa
100068d2:	005b      	lsls	r3, r3, #1
100068d4:	4298      	cmp	r0, r3
100068d6:	d82b      	bhi.n	10006930 <_malloc_r+0x514>
100068d8:	3bdd      	subs	r3, #221	; 0xdd
100068da:	4698      	mov	r8, r3
100068dc:	0be8      	lsrs	r0, r5, #15
100068de:	4480      	add	r8, r0
100068e0:	3078      	adds	r0, #120	; 0x78
100068e2:	00c1      	lsls	r1, r0, #3
100068e4:	e5e3      	b.n	100064ae <_malloc_r+0x92>
100068e6:	4b2c      	ldr	r3, [pc, #176]	; (10006998 <_malloc_r+0x57c>)
100068e8:	9a00      	ldr	r2, [sp, #0]
100068ea:	469a      	mov	sl, r3
100068ec:	681b      	ldr	r3, [r3, #0]
100068ee:	469c      	mov	ip, r3
100068f0:	4653      	mov	r3, sl
100068f2:	4462      	add	r2, ip
100068f4:	601a      	str	r2, [r3, #0]
100068f6:	e6ad      	b.n	10006654 <_malloc_r+0x238>
100068f8:	0509      	lsls	r1, r1, #20
100068fa:	d000      	beq.n	100068fe <_malloc_r+0x4e2>
100068fc:	e6aa      	b.n	10006654 <_malloc_r+0x238>
100068fe:	0002      	movs	r2, r0
10006900:	68bc      	ldr	r4, [r7, #8]
10006902:	444a      	add	r2, r9
10006904:	3101      	adds	r1, #1
10006906:	430a      	orrs	r2, r1
10006908:	6062      	str	r2, [r4, #4]
1000690a:	e6f3      	b.n	100066f4 <_malloc_r+0x2d8>
1000690c:	465b      	mov	r3, fp
1000690e:	4642      	mov	r2, r8
10006910:	601a      	str	r2, [r3, #0]
10006912:	e6aa      	b.n	1000666a <_malloc_r+0x24e>
10006914:	4644      	mov	r4, r8
10006916:	e6ed      	b.n	100066f4 <_malloc_r+0x2d8>
10006918:	6041      	str	r1, [r0, #4]
1000691a:	e78d      	b.n	10006838 <_malloc_r+0x41c>
1000691c:	21aa      	movs	r1, #170	; 0xaa
1000691e:	0049      	lsls	r1, r1, #1
10006920:	428a      	cmp	r2, r1
10006922:	d824      	bhi.n	1000696e <_malloc_r+0x552>
10006924:	0bda      	lsrs	r2, r3, #15
10006926:	0011      	movs	r1, r2
10006928:	3278      	adds	r2, #120	; 0x78
1000692a:	3177      	adds	r1, #119	; 0x77
1000692c:	00d2      	lsls	r2, r2, #3
1000692e:	e705      	b.n	1000673c <_malloc_r+0x320>
10006930:	4b1a      	ldr	r3, [pc, #104]	; (1000699c <_malloc_r+0x580>)
10006932:	4298      	cmp	r0, r3
10006934:	d824      	bhi.n	10006980 <_malloc_r+0x564>
10006936:	237c      	movs	r3, #124	; 0x7c
10006938:	4698      	mov	r8, r3
1000693a:	0ca8      	lsrs	r0, r5, #18
1000693c:	4480      	add	r8, r0
1000693e:	307d      	adds	r0, #125	; 0x7d
10006940:	00c1      	lsls	r1, r0, #3
10006942:	e5b4      	b.n	100064ae <_malloc_r+0x92>
10006944:	9a00      	ldr	r2, [sp, #0]
10006946:	9b01      	ldr	r3, [sp, #4]
10006948:	4694      	mov	ip, r2
1000694a:	4642      	mov	r2, r8
1000694c:	3b08      	subs	r3, #8
1000694e:	4463      	add	r3, ip
10006950:	1a9b      	subs	r3, r3, r2
10006952:	9300      	str	r3, [sp, #0]
10006954:	2300      	movs	r3, #0
10006956:	469b      	mov	fp, r3
10006958:	e6a8      	b.n	100066ac <_malloc_r+0x290>
1000695a:	0021      	movs	r1, r4
1000695c:	0030      	movs	r0, r6
1000695e:	3108      	adds	r1, #8
10006960:	f000 f8bc 	bl	10006adc <_free_r>
10006964:	4653      	mov	r3, sl
10006966:	68bc      	ldr	r4, [r7, #8]
10006968:	681b      	ldr	r3, [r3, #0]
1000696a:	6862      	ldr	r2, [r4, #4]
1000696c:	e6c2      	b.n	100066f4 <_malloc_r+0x2d8>
1000696e:	490b      	ldr	r1, [pc, #44]	; (1000699c <_malloc_r+0x580>)
10006970:	428a      	cmp	r2, r1
10006972:	d80b      	bhi.n	1000698c <_malloc_r+0x570>
10006974:	0c9a      	lsrs	r2, r3, #18
10006976:	0011      	movs	r1, r2
10006978:	327d      	adds	r2, #125	; 0x7d
1000697a:	317c      	adds	r1, #124	; 0x7c
1000697c:	00d2      	lsls	r2, r2, #3
1000697e:	e6dd      	b.n	1000673c <_malloc_r+0x320>
10006980:	21fe      	movs	r1, #254	; 0xfe
10006982:	237e      	movs	r3, #126	; 0x7e
10006984:	207f      	movs	r0, #127	; 0x7f
10006986:	4698      	mov	r8, r3
10006988:	0089      	lsls	r1, r1, #2
1000698a:	e590      	b.n	100064ae <_malloc_r+0x92>
1000698c:	22fe      	movs	r2, #254	; 0xfe
1000698e:	217e      	movs	r1, #126	; 0x7e
10006990:	0092      	lsls	r2, r2, #2
10006992:	e6d3      	b.n	1000673c <_malloc_r+0x320>
10006994:	687b      	ldr	r3, [r7, #4]
10006996:	e76a      	b.n	1000686e <_malloc_r+0x452>
10006998:	20000ee0 	.word	0x20000ee0
1000699c:	00000554 	.word	0x00000554

100069a0 <__malloc_lock>:
100069a0:	b510      	push	{r4, lr}
100069a2:	4802      	ldr	r0, [pc, #8]	; (100069ac <__malloc_lock+0xc>)
100069a4:	f7ff fd2c 	bl	10006400 <__retarget_lock_acquire_recursive>
100069a8:	bd10      	pop	{r4, pc}
100069aa:	46c0      	nop			; (mov r8, r8)
100069ac:	20000edc 	.word	0x20000edc

100069b0 <__malloc_unlock>:
100069b0:	b510      	push	{r4, lr}
100069b2:	4802      	ldr	r0, [pc, #8]	; (100069bc <__malloc_unlock+0xc>)
100069b4:	f7ff fd26 	bl	10006404 <__retarget_lock_release_recursive>
100069b8:	bd10      	pop	{r4, pc}
100069ba:	46c0      	nop			; (mov r8, r8)
100069bc:	20000edc 	.word	0x20000edc

100069c0 <_sbrk_r>:
100069c0:	2300      	movs	r3, #0
100069c2:	b570      	push	{r4, r5, r6, lr}
100069c4:	4d06      	ldr	r5, [pc, #24]	; (100069e0 <_sbrk_r+0x20>)
100069c6:	0004      	movs	r4, r0
100069c8:	0008      	movs	r0, r1
100069ca:	602b      	str	r3, [r5, #0]
100069cc:	f7fe fbb8 	bl	10005140 <_sbrk>
100069d0:	1c43      	adds	r3, r0, #1
100069d2:	d000      	beq.n	100069d6 <_sbrk_r+0x16>
100069d4:	bd70      	pop	{r4, r5, r6, pc}
100069d6:	682b      	ldr	r3, [r5, #0]
100069d8:	2b00      	cmp	r3, #0
100069da:	d0fb      	beq.n	100069d4 <_sbrk_r+0x14>
100069dc:	6023      	str	r3, [r4, #0]
100069de:	e7f9      	b.n	100069d4 <_sbrk_r+0x14>
100069e0:	20000f90 	.word	0x20000f90

100069e4 <strlen>:
100069e4:	b510      	push	{r4, lr}
100069e6:	0783      	lsls	r3, r0, #30
100069e8:	d00a      	beq.n	10006a00 <strlen+0x1c>
100069ea:	0003      	movs	r3, r0
100069ec:	2103      	movs	r1, #3
100069ee:	e002      	b.n	100069f6 <strlen+0x12>
100069f0:	3301      	adds	r3, #1
100069f2:	420b      	tst	r3, r1
100069f4:	d005      	beq.n	10006a02 <strlen+0x1e>
100069f6:	781a      	ldrb	r2, [r3, #0]
100069f8:	2a00      	cmp	r2, #0
100069fa:	d1f9      	bne.n	100069f0 <strlen+0xc>
100069fc:	1a18      	subs	r0, r3, r0
100069fe:	bd10      	pop	{r4, pc}
10006a00:	0003      	movs	r3, r0
10006a02:	6819      	ldr	r1, [r3, #0]
10006a04:	4a0c      	ldr	r2, [pc, #48]	; (10006a38 <strlen+0x54>)
10006a06:	4c0d      	ldr	r4, [pc, #52]	; (10006a3c <strlen+0x58>)
10006a08:	188a      	adds	r2, r1, r2
10006a0a:	438a      	bics	r2, r1
10006a0c:	4222      	tst	r2, r4
10006a0e:	d10f      	bne.n	10006a30 <strlen+0x4c>
10006a10:	6859      	ldr	r1, [r3, #4]
10006a12:	4a09      	ldr	r2, [pc, #36]	; (10006a38 <strlen+0x54>)
10006a14:	3304      	adds	r3, #4
10006a16:	188a      	adds	r2, r1, r2
10006a18:	438a      	bics	r2, r1
10006a1a:	4222      	tst	r2, r4
10006a1c:	d108      	bne.n	10006a30 <strlen+0x4c>
10006a1e:	6859      	ldr	r1, [r3, #4]
10006a20:	4a05      	ldr	r2, [pc, #20]	; (10006a38 <strlen+0x54>)
10006a22:	3304      	adds	r3, #4
10006a24:	188a      	adds	r2, r1, r2
10006a26:	438a      	bics	r2, r1
10006a28:	4222      	tst	r2, r4
10006a2a:	d0f1      	beq.n	10006a10 <strlen+0x2c>
10006a2c:	e000      	b.n	10006a30 <strlen+0x4c>
10006a2e:	3301      	adds	r3, #1
10006a30:	781a      	ldrb	r2, [r3, #0]
10006a32:	2a00      	cmp	r2, #0
10006a34:	d1fb      	bne.n	10006a2e <strlen+0x4a>
10006a36:	e7e1      	b.n	100069fc <strlen+0x18>
10006a38:	fefefeff 	.word	0xfefefeff
10006a3c:	80808080 	.word	0x80808080

10006a40 <_malloc_trim_r>:
10006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006a42:	000c      	movs	r4, r1
10006a44:	0005      	movs	r5, r0
10006a46:	f7ff ffab 	bl	100069a0 <__malloc_lock>
10006a4a:	4f20      	ldr	r7, [pc, #128]	; (10006acc <_malloc_trim_r+0x8c>)
10006a4c:	68bb      	ldr	r3, [r7, #8]
10006a4e:	685e      	ldr	r6, [r3, #4]
10006a50:	2303      	movs	r3, #3
10006a52:	439e      	bics	r6, r3
10006a54:	4b1e      	ldr	r3, [pc, #120]	; (10006ad0 <_malloc_trim_r+0x90>)
10006a56:	1b34      	subs	r4, r6, r4
10006a58:	469c      	mov	ip, r3
10006a5a:	4464      	add	r4, ip
10006a5c:	0b24      	lsrs	r4, r4, #12
10006a5e:	3c01      	subs	r4, #1
10006a60:	3311      	adds	r3, #17
10006a62:	0324      	lsls	r4, r4, #12
10006a64:	429c      	cmp	r4, r3
10006a66:	db07      	blt.n	10006a78 <_malloc_trim_r+0x38>
10006a68:	2100      	movs	r1, #0
10006a6a:	0028      	movs	r0, r5
10006a6c:	f7ff ffa8 	bl	100069c0 <_sbrk_r>
10006a70:	68bb      	ldr	r3, [r7, #8]
10006a72:	199b      	adds	r3, r3, r6
10006a74:	4298      	cmp	r0, r3
10006a76:	d004      	beq.n	10006a82 <_malloc_trim_r+0x42>
10006a78:	0028      	movs	r0, r5
10006a7a:	f7ff ff99 	bl	100069b0 <__malloc_unlock>
10006a7e:	2000      	movs	r0, #0
10006a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006a82:	0028      	movs	r0, r5
10006a84:	4261      	negs	r1, r4
10006a86:	f7ff ff9b 	bl	100069c0 <_sbrk_r>
10006a8a:	1c43      	adds	r3, r0, #1
10006a8c:	d00d      	beq.n	10006aaa <_malloc_trim_r+0x6a>
10006a8e:	2201      	movs	r2, #1
10006a90:	68bb      	ldr	r3, [r7, #8]
10006a92:	1b36      	subs	r6, r6, r4
10006a94:	4316      	orrs	r6, r2
10006a96:	605e      	str	r6, [r3, #4]
10006a98:	4b0e      	ldr	r3, [pc, #56]	; (10006ad4 <_malloc_trim_r+0x94>)
10006a9a:	0028      	movs	r0, r5
10006a9c:	681a      	ldr	r2, [r3, #0]
10006a9e:	1b14      	subs	r4, r2, r4
10006aa0:	601c      	str	r4, [r3, #0]
10006aa2:	f7ff ff85 	bl	100069b0 <__malloc_unlock>
10006aa6:	2001      	movs	r0, #1
10006aa8:	e7ea      	b.n	10006a80 <_malloc_trim_r+0x40>
10006aaa:	2100      	movs	r1, #0
10006aac:	0028      	movs	r0, r5
10006aae:	f7ff ff87 	bl	100069c0 <_sbrk_r>
10006ab2:	68ba      	ldr	r2, [r7, #8]
10006ab4:	1a83      	subs	r3, r0, r2
10006ab6:	2b0f      	cmp	r3, #15
10006ab8:	ddde      	ble.n	10006a78 <_malloc_trim_r+0x38>
10006aba:	4907      	ldr	r1, [pc, #28]	; (10006ad8 <_malloc_trim_r+0x98>)
10006abc:	6809      	ldr	r1, [r1, #0]
10006abe:	1a40      	subs	r0, r0, r1
10006ac0:	4904      	ldr	r1, [pc, #16]	; (10006ad4 <_malloc_trim_r+0x94>)
10006ac2:	6008      	str	r0, [r1, #0]
10006ac4:	2101      	movs	r1, #1
10006ac6:	430b      	orrs	r3, r1
10006ac8:	6053      	str	r3, [r2, #4]
10006aca:	e7d5      	b.n	10006a78 <_malloc_trim_r+0x38>
10006acc:	200007b0 	.word	0x200007b0
10006ad0:	00000fef 	.word	0x00000fef
10006ad4:	20000ee0 	.word	0x20000ee0
10006ad8:	20000bb8 	.word	0x20000bb8

10006adc <_free_r>:
10006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
10006ade:	46c6      	mov	lr, r8
10006ae0:	0005      	movs	r5, r0
10006ae2:	000c      	movs	r4, r1
10006ae4:	b500      	push	{lr}
10006ae6:	2900      	cmp	r1, #0
10006ae8:	d04f      	beq.n	10006b8a <_free_r+0xae>
10006aea:	f7ff ff59 	bl	100069a0 <__malloc_lock>
10006aee:	0021      	movs	r1, r4
10006af0:	3908      	subs	r1, #8
10006af2:	684c      	ldr	r4, [r1, #4]
10006af4:	2601      	movs	r6, #1
10006af6:	0022      	movs	r2, r4
10006af8:	2003      	movs	r0, #3
10006afa:	43b2      	bics	r2, r6
10006afc:	188f      	adds	r7, r1, r2
10006afe:	687b      	ldr	r3, [r7, #4]
10006b00:	4383      	bics	r3, r0
10006b02:	4862      	ldr	r0, [pc, #392]	; (10006c8c <_free_r+0x1b0>)
10006b04:	4698      	mov	r8, r3
10006b06:	6883      	ldr	r3, [r0, #8]
10006b08:	42bb      	cmp	r3, r7
10006b0a:	d06a      	beq.n	10006be2 <_free_r+0x106>
10006b0c:	4643      	mov	r3, r8
10006b0e:	607b      	str	r3, [r7, #4]
10006b10:	4226      	tst	r6, r4
10006b12:	d11e      	bne.n	10006b52 <_free_r+0x76>
10006b14:	2308      	movs	r3, #8
10006b16:	469c      	mov	ip, r3
10006b18:	680c      	ldr	r4, [r1, #0]
10006b1a:	4484      	add	ip, r0
10006b1c:	1b09      	subs	r1, r1, r4
10006b1e:	1912      	adds	r2, r2, r4
10006b20:	688c      	ldr	r4, [r1, #8]
10006b22:	4564      	cmp	r4, ip
10006b24:	d04f      	beq.n	10006bc6 <_free_r+0xea>
10006b26:	68cb      	ldr	r3, [r1, #12]
10006b28:	60e3      	str	r3, [r4, #12]
10006b2a:	609c      	str	r4, [r3, #8]
10006b2c:	4643      	mov	r3, r8
10006b2e:	18fc      	adds	r4, r7, r3
10006b30:	6864      	ldr	r4, [r4, #4]
10006b32:	4234      	tst	r4, r6
10006b34:	d111      	bne.n	10006b5a <_free_r+0x7e>
10006b36:	68bb      	ldr	r3, [r7, #8]
10006b38:	4c55      	ldr	r4, [pc, #340]	; (10006c90 <_free_r+0x1b4>)
10006b3a:	4442      	add	r2, r8
10006b3c:	42a3      	cmp	r3, r4
10006b3e:	d100      	bne.n	10006b42 <_free_r+0x66>
10006b40:	e07e      	b.n	10006c40 <_free_r+0x164>
10006b42:	68fc      	ldr	r4, [r7, #12]
10006b44:	60dc      	str	r4, [r3, #12]
10006b46:	60a3      	str	r3, [r4, #8]
10006b48:	2301      	movs	r3, #1
10006b4a:	4313      	orrs	r3, r2
10006b4c:	604b      	str	r3, [r1, #4]
10006b4e:	508a      	str	r2, [r1, r2]
10006b50:	e006      	b.n	10006b60 <_free_r+0x84>
10006b52:	18fc      	adds	r4, r7, r3
10006b54:	6864      	ldr	r4, [r4, #4]
10006b56:	4234      	tst	r4, r6
10006b58:	d0ed      	beq.n	10006b36 <_free_r+0x5a>
10006b5a:	4316      	orrs	r6, r2
10006b5c:	604e      	str	r6, [r1, #4]
10006b5e:	603a      	str	r2, [r7, #0]
10006b60:	2380      	movs	r3, #128	; 0x80
10006b62:	009b      	lsls	r3, r3, #2
10006b64:	429a      	cmp	r2, r3
10006b66:	d213      	bcs.n	10006b90 <_free_r+0xb4>
10006b68:	0954      	lsrs	r4, r2, #5
10006b6a:	08d3      	lsrs	r3, r2, #3
10006b6c:	2201      	movs	r2, #1
10006b6e:	40a2      	lsls	r2, r4
10006b70:	6844      	ldr	r4, [r0, #4]
10006b72:	00db      	lsls	r3, r3, #3
10006b74:	4322      	orrs	r2, r4
10006b76:	6042      	str	r2, [r0, #4]
10006b78:	1818      	adds	r0, r3, r0
10006b7a:	6883      	ldr	r3, [r0, #8]
10006b7c:	60c8      	str	r0, [r1, #12]
10006b7e:	608b      	str	r3, [r1, #8]
10006b80:	6081      	str	r1, [r0, #8]
10006b82:	60d9      	str	r1, [r3, #12]
10006b84:	0028      	movs	r0, r5
10006b86:	f7ff ff13 	bl	100069b0 <__malloc_unlock>
10006b8a:	bc80      	pop	{r7}
10006b8c:	46b8      	mov	r8, r7
10006b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006b90:	0a53      	lsrs	r3, r2, #9
10006b92:	2b04      	cmp	r3, #4
10006b94:	d83e      	bhi.n	10006c14 <_free_r+0x138>
10006b96:	0994      	lsrs	r4, r2, #6
10006b98:	0026      	movs	r6, r4
10006b9a:	3439      	adds	r4, #57	; 0x39
10006b9c:	3638      	adds	r6, #56	; 0x38
10006b9e:	00e4      	lsls	r4, r4, #3
10006ba0:	1904      	adds	r4, r0, r4
10006ba2:	6823      	ldr	r3, [r4, #0]
10006ba4:	3c08      	subs	r4, #8
10006ba6:	2703      	movs	r7, #3
10006ba8:	429c      	cmp	r4, r3
10006baa:	d042      	beq.n	10006c32 <_free_r+0x156>
10006bac:	6858      	ldr	r0, [r3, #4]
10006bae:	43b8      	bics	r0, r7
10006bb0:	4290      	cmp	r0, r2
10006bb2:	d902      	bls.n	10006bba <_free_r+0xde>
10006bb4:	689b      	ldr	r3, [r3, #8]
10006bb6:	429c      	cmp	r4, r3
10006bb8:	d1f8      	bne.n	10006bac <_free_r+0xd0>
10006bba:	68dc      	ldr	r4, [r3, #12]
10006bbc:	60cc      	str	r4, [r1, #12]
10006bbe:	608b      	str	r3, [r1, #8]
10006bc0:	60a1      	str	r1, [r4, #8]
10006bc2:	60d9      	str	r1, [r3, #12]
10006bc4:	e7de      	b.n	10006b84 <_free_r+0xa8>
10006bc6:	4643      	mov	r3, r8
10006bc8:	18f8      	adds	r0, r7, r3
10006bca:	6840      	ldr	r0, [r0, #4]
10006bcc:	4230      	tst	r0, r6
10006bce:	d157      	bne.n	10006c80 <_free_r+0x1a4>
10006bd0:	68fb      	ldr	r3, [r7, #12]
10006bd2:	68b8      	ldr	r0, [r7, #8]
10006bd4:	4442      	add	r2, r8
10006bd6:	4316      	orrs	r6, r2
10006bd8:	60c3      	str	r3, [r0, #12]
10006bda:	6098      	str	r0, [r3, #8]
10006bdc:	604e      	str	r6, [r1, #4]
10006bde:	508a      	str	r2, [r1, r2]
10006be0:	e7d0      	b.n	10006b84 <_free_r+0xa8>
10006be2:	0013      	movs	r3, r2
10006be4:	4443      	add	r3, r8
10006be6:	4226      	tst	r6, r4
10006be8:	d106      	bne.n	10006bf8 <_free_r+0x11c>
10006bea:	680a      	ldr	r2, [r1, #0]
10006bec:	1a89      	subs	r1, r1, r2
10006bee:	688c      	ldr	r4, [r1, #8]
10006bf0:	189b      	adds	r3, r3, r2
10006bf2:	68ca      	ldr	r2, [r1, #12]
10006bf4:	60e2      	str	r2, [r4, #12]
10006bf6:	6094      	str	r4, [r2, #8]
10006bf8:	2201      	movs	r2, #1
10006bfa:	431a      	orrs	r2, r3
10006bfc:	604a      	str	r2, [r1, #4]
10006bfe:	4a25      	ldr	r2, [pc, #148]	; (10006c94 <_free_r+0x1b8>)
10006c00:	6081      	str	r1, [r0, #8]
10006c02:	6812      	ldr	r2, [r2, #0]
10006c04:	429a      	cmp	r2, r3
10006c06:	d8bd      	bhi.n	10006b84 <_free_r+0xa8>
10006c08:	4b23      	ldr	r3, [pc, #140]	; (10006c98 <_free_r+0x1bc>)
10006c0a:	0028      	movs	r0, r5
10006c0c:	6819      	ldr	r1, [r3, #0]
10006c0e:	f7ff ff17 	bl	10006a40 <_malloc_trim_r>
10006c12:	e7b7      	b.n	10006b84 <_free_r+0xa8>
10006c14:	2b14      	cmp	r3, #20
10006c16:	d907      	bls.n	10006c28 <_free_r+0x14c>
10006c18:	2b54      	cmp	r3, #84	; 0x54
10006c1a:	d81a      	bhi.n	10006c52 <_free_r+0x176>
10006c1c:	0b14      	lsrs	r4, r2, #12
10006c1e:	0026      	movs	r6, r4
10006c20:	346f      	adds	r4, #111	; 0x6f
10006c22:	366e      	adds	r6, #110	; 0x6e
10006c24:	00e4      	lsls	r4, r4, #3
10006c26:	e7bb      	b.n	10006ba0 <_free_r+0xc4>
10006c28:	001e      	movs	r6, r3
10006c2a:	335c      	adds	r3, #92	; 0x5c
10006c2c:	365b      	adds	r6, #91	; 0x5b
10006c2e:	00dc      	lsls	r4, r3, #3
10006c30:	e7b6      	b.n	10006ba0 <_free_r+0xc4>
10006c32:	2201      	movs	r2, #1
10006c34:	10b6      	asrs	r6, r6, #2
10006c36:	40b2      	lsls	r2, r6
10006c38:	6846      	ldr	r6, [r0, #4]
10006c3a:	4332      	orrs	r2, r6
10006c3c:	6042      	str	r2, [r0, #4]
10006c3e:	e7bd      	b.n	10006bbc <_free_r+0xe0>
10006c40:	60d9      	str	r1, [r3, #12]
10006c42:	6099      	str	r1, [r3, #8]
10006c44:	60cb      	str	r3, [r1, #12]
10006c46:	608b      	str	r3, [r1, #8]
10006c48:	2301      	movs	r3, #1
10006c4a:	4313      	orrs	r3, r2
10006c4c:	604b      	str	r3, [r1, #4]
10006c4e:	508a      	str	r2, [r1, r2]
10006c50:	e798      	b.n	10006b84 <_free_r+0xa8>
10006c52:	24aa      	movs	r4, #170	; 0xaa
10006c54:	0064      	lsls	r4, r4, #1
10006c56:	42a3      	cmp	r3, r4
10006c58:	d805      	bhi.n	10006c66 <_free_r+0x18a>
10006c5a:	0bd4      	lsrs	r4, r2, #15
10006c5c:	0026      	movs	r6, r4
10006c5e:	3478      	adds	r4, #120	; 0x78
10006c60:	3677      	adds	r6, #119	; 0x77
10006c62:	00e4      	lsls	r4, r4, #3
10006c64:	e79c      	b.n	10006ba0 <_free_r+0xc4>
10006c66:	4c0d      	ldr	r4, [pc, #52]	; (10006c9c <_free_r+0x1c0>)
10006c68:	42a3      	cmp	r3, r4
10006c6a:	d805      	bhi.n	10006c78 <_free_r+0x19c>
10006c6c:	0c94      	lsrs	r4, r2, #18
10006c6e:	0026      	movs	r6, r4
10006c70:	347d      	adds	r4, #125	; 0x7d
10006c72:	367c      	adds	r6, #124	; 0x7c
10006c74:	00e4      	lsls	r4, r4, #3
10006c76:	e793      	b.n	10006ba0 <_free_r+0xc4>
10006c78:	24fe      	movs	r4, #254	; 0xfe
10006c7a:	267e      	movs	r6, #126	; 0x7e
10006c7c:	00a4      	lsls	r4, r4, #2
10006c7e:	e78f      	b.n	10006ba0 <_free_r+0xc4>
10006c80:	0033      	movs	r3, r6
10006c82:	4313      	orrs	r3, r2
10006c84:	604b      	str	r3, [r1, #4]
10006c86:	603a      	str	r2, [r7, #0]
10006c88:	e77c      	b.n	10006b84 <_free_r+0xa8>
10006c8a:	46c0      	nop			; (mov r8, r8)
10006c8c:	200007b0 	.word	0x200007b0
10006c90:	200007b8 	.word	0x200007b8
10006c94:	20000bbc 	.word	0x20000bbc
10006c98:	20000f10 	.word	0x20000f10
10006c9c:	00000554 	.word	0x00000554

10006ca0 <_fini>:
10006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006ca2:	46c0      	nop			; (mov r8, r8)
10006ca4:	0000      	movs	r0, r0
	...

10006ca8 <____aeabi_ldiv0_veneer>:
10006ca8:	f85f f000 	ldr.w	pc, [pc]	; 10006cac <____aeabi_ldiv0_veneer+0x4>
10006cac:	200002d5 	.word	0x200002d5

10006cb0 <__mutex_exit_veneer>:
10006cb0:	f85f f000 	ldr.w	pc, [pc]	; 10006cb4 <__mutex_exit_veneer+0x4>
10006cb4:	20000239 	.word	0x20000239

10006cb8 <__mutex_enter_blocking_veneer>:
10006cb8:	f85f f000 	ldr.w	pc, [pc]	; 10006cbc <__mutex_enter_blocking_veneer+0x4>
10006cbc:	200000c1 	.word	0x200000c1

10006cc0 <____aeabi_idiv0_veneer>:
10006cc0:	f85f f000 	ldr.w	pc, [pc]	; 10006cc4 <____aeabi_idiv0_veneer+0x4>
10006cc4:	200002d5 	.word	0x200002d5

10006cc8 <__mutex_try_enter_veneer>:
10006cc8:	f85f f000 	ldr.w	pc, [pc]	; 10006ccc <__mutex_try_enter_veneer+0x4>
10006ccc:	20000185 	.word	0x20000185

Disassembly of section .data:

200000c0 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
200000c0:	b580      	push	{r7, lr}
200000c2:	b090      	sub	sp, #64	; 0x40
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	23d0      	movs	r3, #208	; 0xd0
200000ca:	061b      	lsls	r3, r3, #24
200000cc:	681a      	ldr	r2, [r3, #0]
    if (mtx->recursive) {
        recursive_mutex_enter_blocking(mtx);
        return;
    }
#endif
    lock_owner_id_t caller = lock_get_caller_owner_id();
200000ce:	233f      	movs	r3, #63	; 0x3f
200000d0:	18fb      	adds	r3, r7, r3
200000d2:	701a      	strb	r2, [r3, #0]
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	681b      	ldr	r3, [r3, #0]
200000d8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
200000da:	f3ef 8310 	mrs	r3, PRIMASK
200000de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("cpsid i");
200000e0:	b672      	cpsid	i
    return status;
200000e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    uint32_t save = save_and_disable_interrupts();
200000e4:	62fb      	str	r3, [r7, #44]	; 0x2c
200000e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200000e8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (__builtin_expect(!*lock, 0));
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000ee:	681b      	ldr	r3, [r3, #0]
200000f0:	425a      	negs	r2, r3
200000f2:	4153      	adcs	r3, r2
200000f4:	b2db      	uxtb	r3, r3
200000f6:	2b00      	cmp	r3, #0
200000f8:	d1f8      	bne.n	200000ec <mutex_enter_blocking+0x2c>
    __asm volatile ("dmb" : : : "memory");
200000fa:	f3bf 8f5f 	dmb	sy
}
200000fe:	46c0      	nop			; (mov r8, r8)
}
20000100:	46c0      	nop			; (mov r8, r8)
}
20000102:	46c0      	nop			; (mov r8, r8)
    return save;
20000104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000106:	63bb      	str	r3, [r7, #56]	; 0x38
        if (!lock_is_owner_id_valid(mtx->owner)) {
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	791b      	ldrb	r3, [r3, #4]
2000010c:	b25b      	sxtb	r3, r3
2000010e:	2b00      	cmp	r3, #0
20000110:	da1b      	bge.n	2000014a <mutex_enter_blocking+0x8a>
            mtx->owner = caller;
20000112:	687b      	ldr	r3, [r7, #4]
20000114:	223f      	movs	r2, #63	; 0x3f
20000116:	18ba      	adds	r2, r7, r2
20000118:	7812      	ldrb	r2, [r2, #0]
2000011a:	711a      	strb	r2, [r3, #4]
            spin_unlock(mtx->core.spin_lock, save);
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	681b      	ldr	r3, [r3, #0]
20000120:	627b      	str	r3, [r7, #36]	; 0x24
20000122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000124:	623b      	str	r3, [r7, #32]
20000126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000128:	61fb      	str	r3, [r7, #28]
    __asm volatile ("dmb" : : : "memory");
2000012a:	f3bf 8f5f 	dmb	sy
}
2000012e:	46c0      	nop			; (mov r8, r8)
}
20000130:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
20000132:	69fb      	ldr	r3, [r7, #28]
20000134:	2200      	movs	r2, #0
20000136:	601a      	str	r2, [r3, #0]
}
20000138:	46c0      	nop			; (mov r8, r8)
2000013a:	6a3b      	ldr	r3, [r7, #32]
2000013c:	61bb      	str	r3, [r7, #24]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000013e:	69bb      	ldr	r3, [r7, #24]
20000140:	f383 8810 	msr	PRIMASK, r3
}
20000144:	46c0      	nop			; (mov r8, r8)
}
20000146:	46c0      	nop			; (mov r8, r8)
            break;
20000148:	e018      	b.n	2000017c <mutex_enter_blocking+0xbc>
        }
        lock_internal_spin_unlock_with_wait(&mtx->core, save);
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	681b      	ldr	r3, [r3, #0]
2000014e:	617b      	str	r3, [r7, #20]
20000150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000152:	613b      	str	r3, [r7, #16]
20000154:	697b      	ldr	r3, [r7, #20]
20000156:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
20000158:	f3bf 8f5f 	dmb	sy
}
2000015c:	46c0      	nop			; (mov r8, r8)
}
2000015e:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
20000160:	68fb      	ldr	r3, [r7, #12]
20000162:	2200      	movs	r2, #0
20000164:	601a      	str	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	693b      	ldr	r3, [r7, #16]
2000016a:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000016c:	68bb      	ldr	r3, [r7, #8]
2000016e:	f383 8810 	msr	PRIMASK, r3
}
20000172:	46c0      	nop			; (mov r8, r8)
}
20000174:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("wfe");
20000176:	bf20      	wfe
}
20000178:	46c0      	nop			; (mov r8, r8)
    do {
2000017a:	e7ab      	b.n	200000d4 <mutex_enter_blocking+0x14>
    } while (true);
}
2000017c:	46c0      	nop			; (mov r8, r8)
2000017e:	46bd      	mov	sp, r7
20000180:	b010      	add	sp, #64	; 0x40
20000182:	bd80      	pop	{r7, pc}

20000184 <mutex_try_enter>:
            lock_internal_spin_unlock_with_wait(&mtx->core, save);
        }
    } while (true);
}

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20000184:	b580      	push	{r7, lr}
20000186:	b08c      	sub	sp, #48	; 0x30
20000188:	af00      	add	r7, sp, #0
2000018a:	6078      	str	r0, [r7, #4]
2000018c:	6039      	str	r1, [r7, #0]
    if (mtx->recursive) {
        return recursive_mutex_try_enter(mtx, owner_out);
    }
#endif
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000018e:	687b      	ldr	r3, [r7, #4]
20000190:	681b      	ldr	r3, [r3, #0]
20000192:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20000194:	f3ef 8310 	mrs	r3, PRIMASK
20000198:	623b      	str	r3, [r7, #32]
    __asm volatile ("cpsid i");
2000019a:	b672      	cpsid	i
    return status;
2000019c:	6a3b      	ldr	r3, [r7, #32]
    uint32_t save = save_and_disable_interrupts();
2000019e:	61fb      	str	r3, [r7, #28]
200001a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001a2:	61bb      	str	r3, [r7, #24]
    while (__builtin_expect(!*lock, 0));
200001a4:	46c0      	nop			; (mov r8, r8)
200001a6:	69bb      	ldr	r3, [r7, #24]
200001a8:	681b      	ldr	r3, [r3, #0]
200001aa:	425a      	negs	r2, r3
200001ac:	4153      	adcs	r3, r2
200001ae:	b2db      	uxtb	r3, r3
200001b0:	2b00      	cmp	r3, #0
200001b2:	d1f8      	bne.n	200001a6 <mutex_try_enter+0x22>
    __asm volatile ("dmb" : : : "memory");
200001b4:	f3bf 8f5f 	dmb	sy
}
200001b8:	46c0      	nop			; (mov r8, r8)
}
200001ba:	46c0      	nop			; (mov r8, r8)
}
200001bc:	46c0      	nop			; (mov r8, r8)
    return save;
200001be:	69fb      	ldr	r3, [r7, #28]
200001c0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!lock_is_owner_id_valid(mtx->owner)) {
200001c2:	687b      	ldr	r3, [r7, #4]
200001c4:	791b      	ldrb	r3, [r3, #4]
200001c6:	b25b      	sxtb	r3, r3
200001c8:	2b00      	cmp	r3, #0
200001ca:	da0a      	bge.n	200001e2 <mutex_try_enter+0x5e>
200001cc:	23d0      	movs	r3, #208	; 0xd0
200001ce:	061b      	lsls	r3, r3, #24
200001d0:	681b      	ldr	r3, [r3, #0]
        mtx->owner = lock_get_caller_owner_id();
200001d2:	b25a      	sxtb	r2, r3
200001d4:	687b      	ldr	r3, [r7, #4]
200001d6:	711a      	strb	r2, [r3, #4]
        entered = true;
200001d8:	232f      	movs	r3, #47	; 0x2f
200001da:	18fb      	adds	r3, r7, r3
200001dc:	2201      	movs	r2, #1
200001de:	701a      	strb	r2, [r3, #0]
200001e0:	e00c      	b.n	200001fc <mutex_try_enter+0x78>
    } else {
        if (owner_out) *owner_out = (uint32_t) mtx->owner;
200001e2:	683b      	ldr	r3, [r7, #0]
200001e4:	2b00      	cmp	r3, #0
200001e6:	d005      	beq.n	200001f4 <mutex_try_enter+0x70>
200001e8:	687b      	ldr	r3, [r7, #4]
200001ea:	791b      	ldrb	r3, [r3, #4]
200001ec:	b25b      	sxtb	r3, r3
200001ee:	001a      	movs	r2, r3
200001f0:	683b      	ldr	r3, [r7, #0]
200001f2:	601a      	str	r2, [r3, #0]
        entered = false;
200001f4:	232f      	movs	r3, #47	; 0x2f
200001f6:	18fb      	adds	r3, r7, r3
200001f8:	2200      	movs	r2, #0
200001fa:	701a      	strb	r2, [r3, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
200001fc:	687b      	ldr	r3, [r7, #4]
200001fe:	681b      	ldr	r3, [r3, #0]
20000200:	617b      	str	r3, [r7, #20]
20000202:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000204:	613b      	str	r3, [r7, #16]
20000206:	697b      	ldr	r3, [r7, #20]
20000208:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
2000020a:	f3bf 8f5f 	dmb	sy
}
2000020e:	46c0      	nop			; (mov r8, r8)
}
20000210:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
20000212:	68fb      	ldr	r3, [r7, #12]
20000214:	2200      	movs	r2, #0
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	693b      	ldr	r3, [r7, #16]
2000021c:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000021e:	68bb      	ldr	r3, [r7, #8]
20000220:	f383 8810 	msr	PRIMASK, r3
}
20000224:	46c0      	nop			; (mov r8, r8)
}
20000226:	46c0      	nop			; (mov r8, r8)
    return entered;
20000228:	232f      	movs	r3, #47	; 0x2f
2000022a:	18fb      	adds	r3, r7, r3
2000022c:	781b      	ldrb	r3, [r3, #0]
}
2000022e:	0018      	movs	r0, r3
20000230:	46bd      	mov	sp, r7
20000232:	b00c      	add	sp, #48	; 0x30
20000234:	bd80      	pop	{r7, pc}
	...

20000238 <mutex_exit>:
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
20000238:	b580      	push	{r7, lr}
2000023a:	b08c      	sub	sp, #48	; 0x30
2000023c:	af00      	add	r7, sp, #0
2000023e:	6078      	str	r0, [r7, #4]
    if (mtx->recursive) {
        recursive_mutex_exit(mtx);
        return;
    }
#endif
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000240:	687b      	ldr	r3, [r7, #4]
20000242:	681b      	ldr	r3, [r3, #0]
20000244:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20000246:	f3ef 8310 	mrs	r3, PRIMASK
2000024a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("cpsid i");
2000024c:	b672      	cpsid	i
    return status;
2000024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    uint32_t save = save_and_disable_interrupts();
20000250:	623b      	str	r3, [r7, #32]
20000252:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000254:	61fb      	str	r3, [r7, #28]
    while (__builtin_expect(!*lock, 0));
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	69fb      	ldr	r3, [r7, #28]
2000025a:	681b      	ldr	r3, [r3, #0]
2000025c:	425a      	negs	r2, r3
2000025e:	4153      	adcs	r3, r2
20000260:	b2db      	uxtb	r3, r3
20000262:	2b00      	cmp	r3, #0
20000264:	d1f8      	bne.n	20000258 <mutex_exit+0x20>
    __asm volatile ("dmb" : : : "memory");
20000266:	f3bf 8f5f 	dmb	sy
}
2000026a:	46c0      	nop			; (mov r8, r8)
}
2000026c:	46c0      	nop			; (mov r8, r8)
}
2000026e:	46c0      	nop			; (mov r8, r8)
    return save;
20000270:	6a3b      	ldr	r3, [r7, #32]
20000272:	62fb      	str	r3, [r7, #44]	; 0x2c
    assert(lock_is_owner_id_valid(mtx->owner));
20000274:	687b      	ldr	r3, [r7, #4]
20000276:	791b      	ldrb	r3, [r3, #4]
20000278:	b25b      	sxtb	r3, r3
2000027a:	2b00      	cmp	r3, #0
2000027c:	da05      	bge.n	2000028a <mutex_exit+0x52>
2000027e:	4b12      	ldr	r3, [pc, #72]	; (200002c8 <mutex_exit+0x90>)
20000280:	4a12      	ldr	r2, [pc, #72]	; (200002cc <mutex_exit+0x94>)
20000282:	4813      	ldr	r0, [pc, #76]	; (200002d0 <mutex_exit+0x98>)
20000284:	21a9      	movs	r1, #169	; 0xa9
20000286:	f000 f827 	bl	200002d8 <____assert_func_veneer>
    mtx->owner = LOCK_INVALID_OWNER_ID;
2000028a:	687b      	ldr	r3, [r7, #4]
2000028c:	22ff      	movs	r2, #255	; 0xff
2000028e:	711a      	strb	r2, [r3, #4]
    lock_internal_spin_unlock_with_notify(&mtx->core, save);
20000290:	687b      	ldr	r3, [r7, #4]
20000292:	681b      	ldr	r3, [r3, #0]
20000294:	61bb      	str	r3, [r7, #24]
20000296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000298:	617b      	str	r3, [r7, #20]
2000029a:	69bb      	ldr	r3, [r7, #24]
2000029c:	613b      	str	r3, [r7, #16]
    __asm volatile ("dmb" : : : "memory");
2000029e:	f3bf 8f5f 	dmb	sy
}
200002a2:	46c0      	nop			; (mov r8, r8)
}
200002a4:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
200002a6:	693b      	ldr	r3, [r7, #16]
200002a8:	2200      	movs	r2, #0
200002aa:	601a      	str	r2, [r3, #0]
}
200002ac:	46c0      	nop			; (mov r8, r8)
200002ae:	697b      	ldr	r3, [r7, #20]
200002b0:	60fb      	str	r3, [r7, #12]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
200002b2:	68fb      	ldr	r3, [r7, #12]
200002b4:	f383 8810 	msr	PRIMASK, r3
}
200002b8:	46c0      	nop			; (mov r8, r8)
}
200002ba:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("sev");
200002bc:	bf40      	sev
}
200002be:	46c0      	nop			; (mov r8, r8)
}
200002c0:	46c0      	nop			; (mov r8, r8)
200002c2:	46bd      	mov	sp, r7
200002c4:	b00c      	add	sp, #48	; 0x30
200002c6:	bd80      	pop	{r7, pc}
200002c8:	10006dac 	.word	0x10006dac
200002cc:	10006de4 	.word	0x10006de4
200002d0:	10006d48 	.word	0x10006d48

200002d4 <__aeabi_idiv0>:
200002d4:	4770      	bx	lr
200002d6:	46c0      	nop			; (mov r8, r8)

200002d8 <____assert_func_veneer>:
200002d8:	f85f f000 	ldr.w	pc, [pc]	; 200002dc <____assert_func_veneer+0x4>
200002dc:	100051a9 	.word	0x100051a9

200002e0 <default_alarm_pool_heap>:
200002e0:	20000f5c 00000000 00000000 00000010     \.. ............

200002f0 <default_alarm_pool>:
200002f0:	200002e0 00000000 20000bf0 20000f4c     ... ....... L.. 
	...

20000308 <striped_spin_lock_num>:
20000308:	00000010                                ....

2000030c <irq_handler_chain_slots>:
2000030c:	00000000 	.word	0x00000000
20000310:	00010000 	.word	0x00010000
	...
2000031c:	00020000 	.word	0x00020000
	...
20000328:	00030000 	.word	0x00030000
	...
20000334:	00ff0000 	.word	0x00ff0000
20000338:	00000000 	.word	0x00000000

2000033c <irq_handler_chain_first_slot>:
2000033c:	b500      	push	{lr}
2000033e:	6848      	ldr	r0, [r1, #4]
20000340:	3101      	adds	r1, #1
20000342:	468e      	mov	lr, r1
20000344:	4700      	bx	r0

20000346 <irq_handler_chain_remove_tail>:
20000346:	4670      	mov	r0, lr
20000348:	3809      	subs	r0, #9
2000034a:	4901      	ldr	r1, [pc, #4]	; (20000350 <irq_handler_chain_remove_tail+0xa>)
2000034c:	4788      	blx	r1
2000034e:	bd00      	pop	{pc}
20000350:	100028b5 	.word	0x100028b5
	...

20000360 <aeabi_bits_funcs>:
20000360:	00003350 	.word	0x00003350
20000364:	0000334c 	.word	0x0000334c
20000368:	00003354 	.word	0x00003354
2000036c:	00003352 	.word	0x00003352

20000370 <aeabi_bits_funcs_end>:
20000370:	0000534d 	.word	0x0000534d
20000374:	0000434d 	.word	0x0000434d
20000378:	00003453 	.word	0x00003453
2000037c:	00003443 	.word	0x00003443

20000380 <_impure_ptr>:
20000380:	20000388 00000000                       ... ....

20000388 <impure_data>:
20000388:	00000000 20000674 200006dc 20000744     ....t.. ... D.. 
	...
20000430:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000440:	0005deec 0000000b 00000000 00000000     ................
	...

200007b0 <__malloc_av_>:
	...
200007b8:	200007b0 200007b0 200007b8 200007b8     ... ... ... ... 
200007c8:	200007c0 200007c0 200007c8 200007c8     ... ... ... ... 
200007d8:	200007d0 200007d0 200007d8 200007d8     ... ... ... ... 
200007e8:	200007e0 200007e0 200007e8 200007e8     ... ... ... ... 
200007f8:	200007f0 200007f0 200007f8 200007f8     ... ... ... ... 
20000808:	20000800 20000800 20000808 20000808     ... ... ... ... 
20000818:	20000810 20000810 20000818 20000818     ... ... ... ... 
20000828:	20000820 20000820 20000828 20000828      ..  .. (.. (.. 
20000838:	20000830 20000830 20000838 20000838     0.. 0.. 8.. 8.. 
20000848:	20000840 20000840 20000848 20000848     @.. @.. H.. H.. 
20000858:	20000850 20000850 20000858 20000858     P.. P.. X.. X.. 
20000868:	20000860 20000860 20000868 20000868     `.. `.. h.. h.. 
20000878:	20000870 20000870 20000878 20000878     p.. p.. x.. x.. 
20000888:	20000880 20000880 20000888 20000888     ... ... ... ... 
20000898:	20000890 20000890 20000898 20000898     ... ... ... ... 
200008a8:	200008a0 200008a0 200008a8 200008a8     ... ... ... ... 
200008b8:	200008b0 200008b0 200008b8 200008b8     ... ... ... ... 
200008c8:	200008c0 200008c0 200008c8 200008c8     ... ... ... ... 
200008d8:	200008d0 200008d0 200008d8 200008d8     ... ... ... ... 
200008e8:	200008e0 200008e0 200008e8 200008e8     ... ... ... ... 
200008f8:	200008f0 200008f0 200008f8 200008f8     ... ... ... ... 
20000908:	20000900 20000900 20000908 20000908     ... ... ... ... 
20000918:	20000910 20000910 20000918 20000918     ... ... ... ... 
20000928:	20000920 20000920 20000928 20000928      ..  .. (.. (.. 
20000938:	20000930 20000930 20000938 20000938     0.. 0.. 8.. 8.. 
20000948:	20000940 20000940 20000948 20000948     @.. @.. H.. H.. 
20000958:	20000950 20000950 20000958 20000958     P.. P.. X.. X.. 
20000968:	20000960 20000960 20000968 20000968     `.. `.. h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 
20000988:	20000980 20000980 20000988 20000988     ... ... ... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 

20000bb8 <__malloc_sbrk_base>:
20000bb8:	ffffffff                                ....

20000bbc <__malloc_trim_threshold>:
20000bbc:	00020000                                ....

20000bc0 <print_mutex>:
	...

20000bc8 <__mutex_array_end>:
20000bc8:	100063ad 	.word	0x100063ad
20000bcc:	10005735 	.word	0x10005735
20000bd0:	100034a9 	.word	0x100034a9
20000bd4:	100035d9 	.word	0x100035d9

20000bd8 <__frame_dummy_init_array_entry>:
20000bd8:	100002ed 100004a5 100004ed 10000535     ............5...
20000be8:	10000595 100063d5                       .....c..
