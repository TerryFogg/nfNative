
C:\repos\nfNative\Tools\PicoProbe\Local\Build\PicoProbe.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__VECTOR_TABLE>:
10000100:	20042000 	.word	0x20042000
10000104:	10000227 	.word	0x10000227
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
\name:
    bkpt #0
.endm

// these are separated out for clarity
decl_isr_bkpt isr_invalid
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
decl_isr_bkpt isr_nmi
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
decl_isr_bkpt isr_hardfault
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
decl_isr_bkpt isr_svcall
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
decl_isr_bkpt isr_pendsv
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
decl_isr_bkpt isr_systick
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:

// All unhandled USER IRQs fall through to here
.global __unhandled_user_irq
.thumb_func
__unhandled_user_irq:
    bl __get_current_exception
100001cc:	f000 f863 	bl	10000296 <__get_current_exception>
    subs r0, #16
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
.global unhandled_user_irq_num_in_r0
unhandled_user_irq_num_in_r0:
    bkpt #0
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	1000edd8 	.word	0x1000edd8
100001dc:	1000edfc 	.word	0x1000edfc
100001e0:	10000264 	.word	0x10000264
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <__bi_22>:
100001e8:	50520005 68f465de 1000f48c              ..RP.e.h....

100001f4 <__bi_30>:
100001f4:	50520006 9da22254 1000ecb4              ..RPT"......

10000200 <__bi_38>:
10000200:	50520006 02031c86 1000ecc0              ..RP........

1000020c <__bi_50>:
1000020c:	50520006 5360b3ab 1000ecd0              ..RP..`S....

10000218 <_entry_point>:
    // this point). Same path for debugger entry and bootloader entry.
    ldr r0, =__vectors
#else
    // Debugger tried to run code after loading, so SSI is in 03h-only mode.
    // Go back through bootrom + boot2 to properly initialise flash.
    movs r0, #0
10000218:	2000      	movs	r0, #0
#endif
    ldr r1, =(PPB_BASE + M0PLUS_VTOR_OFFSET)
1000021a:	4921      	ldr	r1, [pc, #132]	; (100002a0 <__get_current_exception+0xa>)
    str r0, [r1]
1000021c:	6008      	str	r0, [r1, #0]
    ldmia r0!, {r1, r2}
1000021e:	c806      	ldmia	r0!, {r1, r2}
    msr msp, r1
10000220:	f381 8808 	msr	MSP, r1
    bx r2
10000224:	4710      	bx	r2

10000226 <_reset_handler>:
.type _reset_handler,%function
.thumb_func
_reset_handler:
    // Only core 0 should run the C runtime startup code; core 1 is normally
    // sleeping in the bootrom at this point but check to be sure
    ldr r0, =(SIO_BASE + SIO_CPUID_OFFSET)
10000226:	481f      	ldr	r0, [pc, #124]	; (100002a4 <__get_current_exception+0xe>)
    ldr r0, [r0]
10000228:	6800      	ldr	r0, [r0, #0]
    cmp r0, #0
1000022a:	2800      	cmp	r0, #0
    bne hold_non_core0_in_bootrom
1000022c:	d12f      	bne.n	1000028e <hold_non_core0_in_bootrom>

    // In a NO_FLASH binary, don't perform .data copy, since it's loaded
    // in-place by the SRAM load. Still need to clear .bss
#if !PICO_NO_FLASH
    adr r4, data_cpy_table
1000022e:	a40d      	add	r4, pc, #52	; (adr r4, 10000264 <data_cpy_table>)

    // assume there is at least one entry
1:
    ldmia r4!, {r1-r3}
10000230:	cc0e      	ldmia	r4!, {r1, r2, r3}
    cmp r1, #0
10000232:	2900      	cmp	r1, #0
    beq 2f
10000234:	d002      	beq.n	1000023c <_reset_handler+0x16>
    bl data_cpy
10000236:	f000 f812 	bl	1000025e <data_cpy>
    b 1b
1000023a:	e7f9      	b.n	10000230 <_reset_handler+0xa>
2:
#endif

    // Zero out the BSS
    ldr r1, =__bss_start__
1000023c:	491a      	ldr	r1, [pc, #104]	; (100002a8 <__get_current_exception+0x12>)
    ldr r2, =__bss_end__
1000023e:	4a1b      	ldr	r2, [pc, #108]	; (100002ac <__get_current_exception+0x16>)
    movs r0, #0
10000240:	2000      	movs	r0, #0
    b bss_fill_test
10000242:	e000      	b.n	10000246 <bss_fill_test>

10000244 <bss_fill_loop>:
bss_fill_loop:
    stm r1!, {r0}
10000244:	c101      	stmia	r1!, {r0}

10000246 <bss_fill_test>:
bss_fill_test:
    cmp r1, r2
10000246:	4291      	cmp	r1, r2
    bne bss_fill_loop
10000248:	d1fc      	bne.n	10000244 <bss_fill_loop>

1000024a <platform_entry>:

platform_entry: // symbol for stack traces
    // Use 32-bit jumps, in case these symbols are moved out of branch range
    // (e.g. if main is in SRAM and crt0 in flash)
    ldr r1, =runtime_init
1000024a:	4919      	ldr	r1, [pc, #100]	; (100002b0 <__get_current_exception+0x1a>)
    blx r1
1000024c:	4788      	blx	r1
    ldr r1, =main
1000024e:	4919      	ldr	r1, [pc, #100]	; (100002b4 <__get_current_exception+0x1e>)
    blx r1
10000250:	4788      	blx	r1
    ldr r1, =exit
10000252:	4919      	ldr	r1, [pc, #100]	; (100002b8 <__get_current_exception+0x22>)
    blx r1
10000254:	4788      	blx	r1
.weak _exit
.type _exit,%function
.thumb_func
_exit:
1: // separate label because _exit can be moved out of branch range
    bkpt #0
10000256:	be00      	bkpt	0x0000
    b 1b
10000258:	e7fd      	b.n	10000256 <platform_entry+0xc>

1000025a <data_cpy_loop>:

#if !PICO_NO_FLASH
data_cpy_loop:
    ldm r1!, {r0}
1000025a:	c901      	ldmia	r1!, {r0}
    stm r2!, {r0}
1000025c:	c201      	stmia	r2!, {r0}

1000025e <data_cpy>:
data_cpy:
    cmp r2, r3
1000025e:	429a      	cmp	r2, r3
    blo data_cpy_loop
10000260:	d3fb      	bcc.n	1000025a <data_cpy_loop>
    bx lr
10000262:	4770      	bx	lr

10000264 <data_cpy_table>:
10000264:	1000edfc 	.word	0x1000edfc
10000268:	200000c0 	.word	0x200000c0
1000026c:	20000750 	.word	0x20000750
10000270:	1000f48c 	.word	0x1000f48c
10000274:	20040000 	.word	0x20040000
10000278:	20040000 	.word	0x20040000
1000027c:	1000f48c 	.word	0x1000f48c
10000280:	20041000 	.word	0x20041000
10000284:	20041000 	.word	0x20041000
10000288:	00000000 	.word	0x00000000

.weak runtime_init
.type runtime_init,%function
.thumb_func
runtime_init:
    bx lr
1000028c:	4770      	bx	lr

1000028e <hold_non_core0_in_bootrom>:
// catch it and send back to the sleep-and-launch code in the bootrom. Shouldn't
// happen (it should sleep in the ROM until given an entry point via the
// cross-core FIFOs) but it's good to be defensive.

hold_non_core0_in_bootrom:
    ldr r0, = 'W' | ('V' << 8)
1000028e:	480b      	ldr	r0, [pc, #44]	; (100002bc <__get_current_exception+0x26>)
    bl rom_func_lookup
10000290:	f008 feda 	bl	10009048 <rom_func_lookup>
    bx r0
10000294:	4700      	bx	r0

10000296 <__get_current_exception>:

.global __get_current_exception
.thumb_func
__get_current_exception:
    mrs  r0, ipsr
10000296:	f3ef 8005 	mrs	r0, IPSR
    uxtb r0, r0
1000029a:	b2c0      	uxtb	r0, r0
    bx   lr
1000029c:	4770      	bx	lr
1000029e:	0000      	.short	0x0000
    ldr r1, =(PPB_BASE + M0PLUS_VTOR_OFFSET)
100002a0:	e000ed08 	.word	0xe000ed08
    ldr r0, =(SIO_BASE + SIO_CPUID_OFFSET)
100002a4:	d0000000 	.word	0xd0000000
    ldr r1, =__bss_start__
100002a8:	20000750 	.word	0x20000750
    ldr r2, =__bss_end__
100002ac:	20009448 	.word	0x20009448
    ldr r1, =runtime_init
100002b0:	1000abdd 	.word	0x1000abdd
    ldr r1, =main
100002b4:	1000ba39 	.word	0x1000ba39
    ldr r1, =exit
100002b8:	1000ad1b 	.word	0x1000ad1b
    ldr r0, = 'W' | ('V' << 8)
100002bc:	00005657 	.word	0x00005657

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20000850 	.word	0x20000850
100002e4:	00000000 	.word	0x00000000
100002e8:	1000d040 	.word	0x1000d040

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20000854 	.word	0x20000854
10000308:	1000d040 	.word	0x1000d040

1000030c <gpio_set_dir_out_masked>:
 *
 * Switch all GPIOs in "mask" to output
 *
 * \param mask Bitmask of GPIO to set to output, as bits 0-29
 */
static inline void gpio_set_dir_out_masked(uint32_t mask) {
1000030c:	b580      	push	{r7, lr}
1000030e:	b082      	sub	sp, #8
10000310:	af00      	add	r7, sp, #0
10000312:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_set = mask;
10000314:	23d0      	movs	r3, #208	; 0xd0
10000316:	061b      	lsls	r3, r3, #24
10000318:	687a      	ldr	r2, [r7, #4]
1000031a:	625a      	str	r2, [r3, #36]	; 0x24
}
1000031c:	46c0      	nop			; (mov r8, r8)
1000031e:	46bd      	mov	sp, r7
10000320:	b002      	add	sp, #8
10000322:	bd80      	pop	{r7, pc}

10000324 <gpio_set_dir_in_masked>:
/*! \brief Set a number of GPIOs to input
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
10000324:	b580      	push	{r7, lr}
10000326:	b082      	sub	sp, #8
10000328:	af00      	add	r7, sp, #0
1000032a:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_clr = mask;
1000032c:	23d0      	movs	r3, #208	; 0xd0
1000032e:	061b      	lsls	r3, r3, #24
10000330:	687a      	ldr	r2, [r7, #4]
10000332:	629a      	str	r2, [r3, #40]	; 0x28
}
10000334:	46c0      	nop			; (mov r8, r8)
10000336:	46bd      	mov	sp, r7
10000338:	b002      	add	sp, #8
1000033a:	bd80      	pop	{r7, pc}

1000033c <gpio_set_dir>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
1000033c:	b580      	push	{r7, lr}
1000033e:	b084      	sub	sp, #16
10000340:	af00      	add	r7, sp, #0
10000342:	6078      	str	r0, [r7, #4]
10000344:	000a      	movs	r2, r1
10000346:	1cfb      	adds	r3, r7, #3
10000348:	701a      	strb	r2, [r3, #0]
    uint32_t mask = 1ul << gpio;
1000034a:	2201      	movs	r2, #1
1000034c:	687b      	ldr	r3, [r7, #4]
1000034e:	409a      	lsls	r2, r3
10000350:	0013      	movs	r3, r2
10000352:	60fb      	str	r3, [r7, #12]
    if (out)
10000354:	1cfb      	adds	r3, r7, #3
10000356:	781b      	ldrb	r3, [r3, #0]
10000358:	2b00      	cmp	r3, #0
1000035a:	d004      	beq.n	10000366 <gpio_set_dir+0x2a>
        gpio_set_dir_out_masked(mask);
1000035c:	68fb      	ldr	r3, [r7, #12]
1000035e:	0018      	movs	r0, r3
10000360:	f7ff ffd4 	bl	1000030c <gpio_set_dir_out_masked>
    else
        gpio_set_dir_in_masked(mask);
}
10000364:	e003      	b.n	1000036e <gpio_set_dir+0x32>
        gpio_set_dir_in_masked(mask);
10000366:	68fb      	ldr	r3, [r7, #12]
10000368:	0018      	movs	r0, r3
1000036a:	f7ff ffdb 	bl	10000324 <gpio_set_dir_in_masked>
}
1000036e:	46c0      	nop			; (mov r8, r8)
10000370:	46bd      	mov	sp, r7
10000372:	b004      	add	sp, #16
10000374:	bd80      	pop	{r7, pc}
	...

10000378 <uart_get_instance>:
static inline uint uart_get_index(uart_inst_t *uart) {
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    return uart == uart1 ? 1 : 0;
}

static inline uart_inst_t *uart_get_instance(uint instance) {
10000378:	b580      	push	{r7, lr}
1000037a:	b082      	sub	sp, #8
1000037c:	af00      	add	r7, sp, #0
1000037e:	6078      	str	r0, [r7, #4]
    static_assert(NUM_UARTS == 2, "");
    invalid_params_if(UART, instance >= NUM_UARTS);
    return instance ? uart1 : uart0;
10000380:	687b      	ldr	r3, [r7, #4]
10000382:	2b00      	cmp	r3, #0
10000384:	d001      	beq.n	1000038a <uart_get_instance+0x12>
10000386:	4b03      	ldr	r3, [pc, #12]	; (10000394 <uart_get_instance+0x1c>)
10000388:	e000      	b.n	1000038c <uart_get_instance+0x14>
1000038a:	4b03      	ldr	r3, [pc, #12]	; (10000398 <uart_get_instance+0x20>)
}
1000038c:	0018      	movs	r0, r3
1000038e:	46bd      	mov	sp, r7
10000390:	b002      	add	sp, #8
10000392:	bd80      	pop	{r7, pc}
10000394:	40038000 	.word	0x40038000
10000398:	40034000 	.word	0x40034000

1000039c <board_init>:
#ifdef UART_DEV
static uart_inst_t *uart_inst;
#endif

void board_init(void)
{
1000039c:	b580      	push	{r7, lr}
1000039e:	af00      	add	r7, sp, #0
#ifdef LED_PIN
  bi_decl(bi_1pin_with_name(LED_PIN, "LED"));
  gpio_init(LED_PIN);
100003a0:	2019      	movs	r0, #25
100003a2:	f007 f807 	bl	100073b4 <gpio_init>
  gpio_set_dir(LED_PIN, GPIO_OUT);
100003a6:	2101      	movs	r1, #1
100003a8:	2019      	movs	r0, #25
100003aa:	f7ff ffc7 	bl	1000033c <gpio_set_dir>
#ifndef BUTTON_BOOTSEL
#endif

#if defined(UART_DEV) && defined(LIB_PICO_STDIO_UART)
  bi_decl(bi_2pins_with_func(UART_TX_PIN, UART_TX_PIN, GPIO_FUNC_UART));
  uart_inst = uart_get_instance(UART_DEV);
100003ae:	2000      	movs	r0, #0
100003b0:	f7ff ffe2 	bl	10000378 <uart_get_instance>
100003b4:	0002      	movs	r2, r0
100003b6:	4b06      	ldr	r3, [pc, #24]	; (100003d0 <board_init+0x34>)
100003b8:	601a      	str	r2, [r3, #0]
  stdio_uart_init_full(uart_inst, CFG_BOARD_UART_BAUDRATE, UART_TX_PIN, UART_RX_PIN);
100003ba:	4b05      	ldr	r3, [pc, #20]	; (100003d0 <board_init+0x34>)
100003bc:	6818      	ldr	r0, [r3, #0]
100003be:	23e1      	movs	r3, #225	; 0xe1
100003c0:	0259      	lsls	r1, r3, #9
100003c2:	2301      	movs	r3, #1
100003c4:	2200      	movs	r2, #0
100003c6:	f00b f809 	bl	1000b3dc <stdio_uart_init_full>
#endif

#if TUSB_OPT_HOST_ENABLED
  // set portfunc to host !!!
#endif
}
100003ca:	46c0      	nop			; (mov r8, r8)
100003cc:	46bd      	mov	sp, r7
100003ce:	bd80      	pop	{r7, pc}
100003d0:	20009428 	.word	0x20009428

100003d4 <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
100003d4:	b580      	push	{r7, lr}
100003d6:	b084      	sub	sp, #16
100003d8:	af00      	add	r7, sp, #0
100003da:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
100003dc:	687b      	ldr	r3, [r7, #4]
100003de:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
100003e0:	68fb      	ldr	r3, [r7, #12]
100003e2:	781b      	ldrb	r3, [r3, #0]
100003e4:	001a      	movs	r2, r3
100003e6:	68fb      	ldr	r3, [r7, #12]
100003e8:	189b      	adds	r3, r3, r2
}
100003ea:	0018      	movs	r0, r3
100003ec:	46bd      	mov	sp, r7
100003ee:	b004      	add	sp, #16
100003f0:	bd80      	pop	{r7, pc}

100003f2 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
100003f2:	b580      	push	{r7, lr}
100003f4:	b082      	sub	sp, #8
100003f6:	af00      	add	r7, sp, #0
100003f8:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
100003fa:	687b      	ldr	r3, [r7, #4]
100003fc:	3301      	adds	r3, #1
100003fe:	781b      	ldrb	r3, [r3, #0]
}
10000400:	0018      	movs	r0, r3
10000402:	46bd      	mov	sp, r7
10000404:	b002      	add	sp, #8
10000406:	bd80      	pop	{r7, pc}

10000408 <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
10000408:	b580      	push	{r7, lr}
1000040a:	b082      	sub	sp, #8
1000040c:	af00      	add	r7, sp, #0
1000040e:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10000410:	687b      	ldr	r3, [r7, #4]
10000412:	781b      	ldrb	r3, [r3, #0]
}
10000414:	0018      	movs	r0, r3
10000416:	46bd      	mov	sp, r7
10000418:	b002      	add	sp, #8
1000041a:	bd80      	pop	{r7, pc}

1000041c <osal_mutex_create>:
// Within tinyusb, mutex is never used in ISR context
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
1000041c:	b580      	push	{r7, lr}
1000041e:	b082      	sub	sp, #8
10000420:	af00      	add	r7, sp, #0
10000422:	6078      	str	r0, [r7, #4]
    mutex_init(mdef);
10000424:	687b      	ldr	r3, [r7, #4]
10000426:	0018      	movs	r0, r3
10000428:	f005 f8cb 	bl	100055c2 <mutex_init>
    return mdef;
1000042c:	687b      	ldr	r3, [r7, #4]
}
1000042e:	0018      	movs	r0, r3
10000430:	46bd      	mov	sp, r7
10000432:	b002      	add	sp, #8
10000434:	bd80      	pop	{r7, pc}

10000436 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static void _prep_out_transaction (cdcd_interface_t* p_cdc)
{
10000436:	b5f0      	push	{r4, r5, r6, r7, lr}
10000438:	b085      	sub	sp, #20
1000043a:	af00      	add	r7, sp, #0
1000043c:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = TUD_OPT_RHPORT;
1000043e:	260f      	movs	r6, #15
10000440:	19bb      	adds	r3, r7, r6
10000442:	2200      	movs	r2, #0
10000444:	701a      	strb	r2, [r3, #0]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10000446:	687b      	ldr	r3, [r7, #4]
10000448:	3310      	adds	r3, #16
1000044a:	250c      	movs	r5, #12
1000044c:	197c      	adds	r4, r7, r5
1000044e:	0018      	movs	r0, r3
10000450:	f001 fe8f 	bl	10002172 <tu_fifo_remaining>
10000454:	0003      	movs	r3, r0
10000456:	8023      	strh	r3, [r4, #0]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10000458:	002c      	movs	r4, r5
1000045a:	193b      	adds	r3, r7, r4
1000045c:	881b      	ldrh	r3, [r3, #0]
1000045e:	2b3f      	cmp	r3, #63	; 0x3f
10000460:	d930      	bls.n	100004c4 <_prep_out_transaction+0x8e>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10000462:	687b      	ldr	r3, [r7, #4]
10000464:	78da      	ldrb	r2, [r3, #3]
10000466:	19bb      	adds	r3, r7, r6
10000468:	781b      	ldrb	r3, [r3, #0]
1000046a:	0011      	movs	r1, r2
1000046c:	0018      	movs	r0, r3
1000046e:	f003 fa31 	bl	100038d4 <usbd_edpt_claim>
10000472:	0003      	movs	r3, r0
10000474:	001a      	movs	r2, r3
10000476:	2301      	movs	r3, #1
10000478:	4053      	eors	r3, r2
1000047a:	b2db      	uxtb	r3, r3
1000047c:	2b00      	cmp	r3, #0
1000047e:	d123      	bne.n	100004c8 <_prep_out_transaction+0x92>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10000480:	687b      	ldr	r3, [r7, #4]
10000482:	3310      	adds	r3, #16
10000484:	0025      	movs	r5, r4
10000486:	193c      	adds	r4, r7, r4
10000488:	0018      	movs	r0, r3
1000048a:	f001 fe72 	bl	10002172 <tu_fifo_remaining>
1000048e:	0003      	movs	r3, r0
10000490:	8023      	strh	r3, [r4, #0]

  if ( available >= sizeof(p_cdc->epout_buf) )
10000492:	197b      	adds	r3, r7, r5
10000494:	881b      	ldrh	r3, [r3, #0]
10000496:	2b3f      	cmp	r3, #63	; 0x3f
10000498:	d90a      	bls.n	100004b0 <_prep_out_transaction+0x7a>
  {
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
1000049a:	687b      	ldr	r3, [r7, #4]
1000049c:	78d9      	ldrb	r1, [r3, #3]
1000049e:	687b      	ldr	r3, [r7, #4]
100004a0:	33d8      	adds	r3, #216	; 0xd8
100004a2:	001a      	movs	r2, r3
100004a4:	19bb      	adds	r3, r7, r6
100004a6:	7818      	ldrb	r0, [r3, #0]
100004a8:	2340      	movs	r3, #64	; 0x40
100004aa:	f003 fb27 	bl	10003afc <usbd_edpt_xfer>
100004ae:	e00c      	b.n	100004ca <_prep_out_transaction+0x94>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
100004b0:	687b      	ldr	r3, [r7, #4]
100004b2:	78da      	ldrb	r2, [r3, #3]
100004b4:	230f      	movs	r3, #15
100004b6:	18fb      	adds	r3, r7, r3
100004b8:	781b      	ldrb	r3, [r3, #0]
100004ba:	0011      	movs	r1, r2
100004bc:	0018      	movs	r0, r3
100004be:	f003 faa7 	bl	10003a10 <usbd_edpt_release>
100004c2:	e002      	b.n	100004ca <_prep_out_transaction+0x94>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
100004c4:	46c0      	nop			; (mov r8, r8)
100004c6:	e000      	b.n	100004ca <_prep_out_transaction+0x94>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
100004c8:	46c0      	nop			; (mov r8, r8)
  }
}
100004ca:	46bd      	mov	sp, r7
100004cc:	b005      	add	sp, #20
100004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

100004d0 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
100004d0:	b580      	push	{r7, lr}
100004d2:	b084      	sub	sp, #16
100004d4:	af00      	add	r7, sp, #0
100004d6:	0002      	movs	r2, r0
100004d8:	1dfb      	adds	r3, r7, #7
100004da:	701a      	strb	r2, [r3, #0]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
100004dc:	f002 f8b0 	bl	10002640 <tud_mounted>
100004e0:	1e03      	subs	r3, r0, #0
100004e2:	d00a      	beq.n	100004fa <tud_cdc_n_connected+0x2a>
100004e4:	f002 f8ba 	bl	1000265c <tud_suspended>
100004e8:	0003      	movs	r3, r0
100004ea:	001a      	movs	r2, r3
100004ec:	2301      	movs	r3, #1
100004ee:	4053      	eors	r3, r2
100004f0:	b2db      	uxtb	r3, r3
100004f2:	2b00      	cmp	r3, #0
100004f4:	d001      	beq.n	100004fa <tud_cdc_n_connected+0x2a>
100004f6:	2301      	movs	r3, #1
100004f8:	e000      	b.n	100004fc <tud_cdc_n_connected+0x2c>
100004fa:	2300      	movs	r3, #0
100004fc:	1c1a      	adds	r2, r3, #0
100004fe:	2301      	movs	r3, #1
10000500:	4013      	ands	r3, r2
10000502:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10000504:	2b00      	cmp	r3, #0
10000506:	d01c      	beq.n	10000542 <tud_cdc_n_connected+0x72>
10000508:	1dfb      	adds	r3, r7, #7
1000050a:	781b      	ldrb	r3, [r3, #0]
1000050c:	4a11      	ldr	r2, [pc, #68]	; (10000554 <tud_cdc_n_connected+0x84>)
1000050e:	21ac      	movs	r1, #172	; 0xac
10000510:	0049      	lsls	r1, r1, #1
10000512:	434b      	muls	r3, r1
10000514:	18d3      	adds	r3, r2, r3
10000516:	3304      	adds	r3, #4
10000518:	781b      	ldrb	r3, [r3, #0]
1000051a:	60fb      	str	r3, [r7, #12]
1000051c:	210b      	movs	r1, #11
1000051e:	187b      	adds	r3, r7, r1
10000520:	2200      	movs	r2, #0
10000522:	701a      	strb	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10000524:	187b      	adds	r3, r7, r1
10000526:	781b      	ldrb	r3, [r3, #0]
10000528:	68fa      	ldr	r2, [r7, #12]
1000052a:	40da      	lsrs	r2, r3
1000052c:	0013      	movs	r3, r2
1000052e:	001a      	movs	r2, r3
10000530:	2301      	movs	r3, #1
10000532:	4013      	ands	r3, r2
10000534:	1e5a      	subs	r2, r3, #1
10000536:	4193      	sbcs	r3, r2
10000538:	b2db      	uxtb	r3, r3
1000053a:	2b00      	cmp	r3, #0
1000053c:	d001      	beq.n	10000542 <tud_cdc_n_connected+0x72>
1000053e:	2301      	movs	r3, #1
10000540:	e000      	b.n	10000544 <tud_cdc_n_connected+0x74>
10000542:	2300      	movs	r3, #0
10000544:	1c1a      	adds	r2, r3, #0
10000546:	2301      	movs	r3, #1
10000548:	4013      	ands	r3, r2
1000054a:	b2db      	uxtb	r3, r3
}
1000054c:	0018      	movs	r0, r3
1000054e:	46bd      	mov	sp, r7
10000550:	b004      	add	sp, #16
10000552:	bd80      	pop	{r7, pc}
10000554:	20000870 	.word	0x20000870

10000558 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
10000558:	b580      	push	{r7, lr}
1000055a:	b082      	sub	sp, #8
1000055c:	af00      	add	r7, sp, #0
1000055e:	0002      	movs	r2, r0
10000560:	1dfb      	adds	r3, r7, #7
10000562:	701a      	strb	r2, [r3, #0]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10000564:	1dfb      	adds	r3, r7, #7
10000566:	781b      	ldrb	r3, [r3, #0]
10000568:	22ac      	movs	r2, #172	; 0xac
1000056a:	0052      	lsls	r2, r2, #1
1000056c:	4353      	muls	r3, r2
1000056e:	3310      	adds	r3, #16
10000570:	001a      	movs	r2, r3
10000572:	4b05      	ldr	r3, [pc, #20]	; (10000588 <tud_cdc_n_available+0x30>)
10000574:	18d3      	adds	r3, r2, r3
10000576:	0018      	movs	r0, r3
10000578:	f001 fdc2 	bl	10002100 <tu_fifo_count>
1000057c:	0003      	movs	r3, r0
}
1000057e:	0018      	movs	r0, r3
10000580:	46bd      	mov	sp, r7
10000582:	b002      	add	sp, #8
10000584:	bd80      	pop	{r7, pc}
10000586:	46c0      	nop			; (mov r8, r8)
10000588:	20000870 	.word	0x20000870

1000058c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
1000058c:	b580      	push	{r7, lr}
1000058e:	b086      	sub	sp, #24
10000590:	af00      	add	r7, sp, #0
10000592:	60b9      	str	r1, [r7, #8]
10000594:	607a      	str	r2, [r7, #4]
10000596:	210f      	movs	r1, #15
10000598:	187b      	adds	r3, r7, r1
1000059a:	1c02      	adds	r2, r0, #0
1000059c:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
1000059e:	187b      	adds	r3, r7, r1
100005a0:	781b      	ldrb	r3, [r3, #0]
100005a2:	22ac      	movs	r2, #172	; 0xac
100005a4:	0052      	lsls	r2, r2, #1
100005a6:	435a      	muls	r2, r3
100005a8:	4b0a      	ldr	r3, [pc, #40]	; (100005d4 <tud_cdc_n_read+0x48>)
100005aa:	18d3      	adds	r3, r2, r3
100005ac:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
100005ae:	697b      	ldr	r3, [r7, #20]
100005b0:	3310      	adds	r3, #16
100005b2:	687a      	ldr	r2, [r7, #4]
100005b4:	b292      	uxth	r2, r2
100005b6:	68b9      	ldr	r1, [r7, #8]
100005b8:	0018      	movs	r0, r3
100005ba:	f001 fe1f 	bl	100021fc <tu_fifo_read_n>
100005be:	0003      	movs	r3, r0
100005c0:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
100005c2:	697b      	ldr	r3, [r7, #20]
100005c4:	0018      	movs	r0, r3
100005c6:	f7ff ff36 	bl	10000436 <_prep_out_transaction>
  return num_read;
100005ca:	693b      	ldr	r3, [r7, #16]
}
100005cc:	0018      	movs	r0, r3
100005ce:	46bd      	mov	sp, r7
100005d0:	b006      	add	sp, #24
100005d2:	bd80      	pop	{r7, pc}
100005d4:	20000870 	.word	0x20000870

100005d8 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
100005d8:	b5b0      	push	{r4, r5, r7, lr}
100005da:	b086      	sub	sp, #24
100005dc:	af00      	add	r7, sp, #0
100005de:	60b9      	str	r1, [r7, #8]
100005e0:	607a      	str	r2, [r7, #4]
100005e2:	250f      	movs	r5, #15
100005e4:	197b      	adds	r3, r7, r5
100005e6:	1c02      	adds	r2, r0, #0
100005e8:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
100005ea:	197b      	adds	r3, r7, r5
100005ec:	781b      	ldrb	r3, [r3, #0]
100005ee:	22ac      	movs	r2, #172	; 0xac
100005f0:	0052      	lsls	r2, r2, #1
100005f2:	435a      	muls	r2, r3
100005f4:	4b11      	ldr	r3, [pc, #68]	; (1000063c <tud_cdc_n_write+0x64>)
100005f6:	18d3      	adds	r3, r2, r3
100005f8:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
100005fa:	697b      	ldr	r3, [r7, #20]
100005fc:	332c      	adds	r3, #44	; 0x2c
100005fe:	687a      	ldr	r2, [r7, #4]
10000600:	b292      	uxth	r2, r2
10000602:	2112      	movs	r1, #18
10000604:	187c      	adds	r4, r7, r1
10000606:	68b9      	ldr	r1, [r7, #8]
10000608:	0018      	movs	r0, r3
1000060a:	f001 fe55 	bl	100022b8 <tu_fifo_write_n>
1000060e:	0003      	movs	r3, r0
10000610:	8023      	strh	r3, [r4, #0]

  // flush if queue more than packet size
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10000612:	697b      	ldr	r3, [r7, #20]
10000614:	332c      	adds	r3, #44	; 0x2c
10000616:	0018      	movs	r0, r3
10000618:	f001 fd72 	bl	10002100 <tu_fifo_count>
1000061c:	0003      	movs	r3, r0
1000061e:	2b3f      	cmp	r3, #63	; 0x3f
10000620:	d904      	bls.n	1000062c <tud_cdc_n_write+0x54>
  {
    tud_cdc_n_write_flush(itf);
10000622:	197b      	adds	r3, r7, r5
10000624:	781b      	ldrb	r3, [r3, #0]
10000626:	0018      	movs	r0, r3
10000628:	f000 f80a 	bl	10000640 <tud_cdc_n_write_flush>
  }

  return ret;
1000062c:	2312      	movs	r3, #18
1000062e:	18fb      	adds	r3, r7, r3
10000630:	881b      	ldrh	r3, [r3, #0]
}
10000632:	0018      	movs	r0, r3
10000634:	46bd      	mov	sp, r7
10000636:	b006      	add	sp, #24
10000638:	bdb0      	pop	{r4, r5, r7, pc}
1000063a:	46c0      	nop			; (mov r8, r8)
1000063c:	20000870 	.word	0x20000870

10000640 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10000640:	b5b0      	push	{r4, r5, r7, lr}
10000642:	b084      	sub	sp, #16
10000644:	af00      	add	r7, sp, #0
10000646:	0002      	movs	r2, r0
10000648:	1dfb      	adds	r3, r7, #7
1000064a:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
1000064c:	1dfb      	adds	r3, r7, #7
1000064e:	781b      	ldrb	r3, [r3, #0]
10000650:	22ac      	movs	r2, #172	; 0xac
10000652:	0052      	lsls	r2, r2, #1
10000654:	435a      	muls	r2, r3
10000656:	4b3f      	ldr	r3, [pc, #252]	; (10000754 <tud_cdc_n_write_flush+0x114>)
10000658:	18d3      	adds	r3, r2, r3
1000065a:	60fb      	str	r3, [r7, #12]
1000065c:	f001 fff0 	bl	10002640 <tud_mounted>
10000660:	1e03      	subs	r3, r0, #0
10000662:	d00a      	beq.n	1000067a <tud_cdc_n_write_flush+0x3a>
10000664:	f001 fffa 	bl	1000265c <tud_suspended>
10000668:	0003      	movs	r3, r0
1000066a:	001a      	movs	r2, r3
1000066c:	2301      	movs	r3, #1
1000066e:	4053      	eors	r3, r2
10000670:	b2db      	uxtb	r3, r3
10000672:	2b00      	cmp	r3, #0
10000674:	d001      	beq.n	1000067a <tud_cdc_n_write_flush+0x3a>
10000676:	2301      	movs	r3, #1
10000678:	e000      	b.n	1000067c <tud_cdc_n_write_flush+0x3c>
1000067a:	2300      	movs	r3, #0
1000067c:	1c1a      	adds	r2, r3, #0
1000067e:	2301      	movs	r3, #1
10000680:	4013      	ands	r3, r2
10000682:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
10000684:	2201      	movs	r2, #1
10000686:	4053      	eors	r3, r2
10000688:	b2db      	uxtb	r3, r3
1000068a:	2b00      	cmp	r3, #0
1000068c:	d001      	beq.n	10000692 <tud_cdc_n_write_flush+0x52>
1000068e:	2300      	movs	r3, #0
10000690:	e05b      	b.n	1000074a <tud_cdc_n_write_flush+0x10a>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10000692:	68fb      	ldr	r3, [r7, #12]
10000694:	332c      	adds	r3, #44	; 0x2c
10000696:	0018      	movs	r0, r3
10000698:	f001 fd32 	bl	10002100 <tu_fifo_count>
1000069c:	1e03      	subs	r3, r0, #0
1000069e:	d101      	bne.n	100006a4 <tud_cdc_n_write_flush+0x64>
100006a0:	2300      	movs	r3, #0
100006a2:	e052      	b.n	1000074a <tud_cdc_n_write_flush+0x10a>

  uint8_t const rhport = TUD_OPT_RHPORT;
100006a4:	210b      	movs	r1, #11
100006a6:	187b      	adds	r3, r7, r1
100006a8:	2200      	movs	r2, #0
100006aa:	701a      	strb	r2, [r3, #0]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
100006ac:	68fb      	ldr	r3, [r7, #12]
100006ae:	789a      	ldrb	r2, [r3, #2]
100006b0:	187b      	adds	r3, r7, r1
100006b2:	781b      	ldrb	r3, [r3, #0]
100006b4:	0011      	movs	r1, r2
100006b6:	0018      	movs	r0, r3
100006b8:	f003 f90c 	bl	100038d4 <usbd_edpt_claim>
100006bc:	0003      	movs	r3, r0
100006be:	001a      	movs	r2, r3
100006c0:	2301      	movs	r3, #1
100006c2:	4053      	eors	r3, r2
100006c4:	b2db      	uxtb	r3, r3
100006c6:	2b00      	cmp	r3, #0
100006c8:	d001      	beq.n	100006ce <tud_cdc_n_write_flush+0x8e>
100006ca:	2300      	movs	r3, #0
100006cc:	e03d      	b.n	1000074a <tud_cdc_n_write_flush+0x10a>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
100006ce:	68fb      	ldr	r3, [r7, #12]
100006d0:	332c      	adds	r3, #44	; 0x2c
100006d2:	0018      	movs	r0, r3
100006d4:	68fb      	ldr	r3, [r7, #12]
100006d6:	3319      	adds	r3, #25
100006d8:	33ff      	adds	r3, #255	; 0xff
100006da:	2508      	movs	r5, #8
100006dc:	197c      	adds	r4, r7, r5
100006de:	2240      	movs	r2, #64	; 0x40
100006e0:	0019      	movs	r1, r3
100006e2:	f001 fd8b 	bl	100021fc <tu_fifo_read_n>
100006e6:	0003      	movs	r3, r0
100006e8:	8023      	strh	r3, [r4, #0]

  if ( count )
100006ea:	0028      	movs	r0, r5
100006ec:	183b      	adds	r3, r7, r0
100006ee:	881b      	ldrh	r3, [r3, #0]
100006f0:	2b00      	cmp	r3, #0
100006f2:	d020      	beq.n	10000736 <tud_cdc_n_write_flush+0xf6>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
100006f4:	68fb      	ldr	r3, [r7, #12]
100006f6:	7899      	ldrb	r1, [r3, #2]
100006f8:	68fb      	ldr	r3, [r7, #12]
100006fa:	3319      	adds	r3, #25
100006fc:	33ff      	adds	r3, #255	; 0xff
100006fe:	001a      	movs	r2, r3
10000700:	183b      	adds	r3, r7, r0
10000702:	881c      	ldrh	r4, [r3, #0]
10000704:	230b      	movs	r3, #11
10000706:	18fb      	adds	r3, r7, r3
10000708:	7818      	ldrb	r0, [r3, #0]
1000070a:	0023      	movs	r3, r4
1000070c:	f003 f9f6 	bl	10003afc <usbd_edpt_xfer>
10000710:	0003      	movs	r3, r0
10000712:	001a      	movs	r2, r3
10000714:	2301      	movs	r3, #1
10000716:	4053      	eors	r3, r2
10000718:	b2db      	uxtb	r3, r3
1000071a:	2b00      	cmp	r3, #0
1000071c:	d007      	beq.n	1000072e <tud_cdc_n_write_flush+0xee>
1000071e:	490e      	ldr	r1, [pc, #56]	; (10000758 <tud_cdc_n_write_flush+0x118>)
10000720:	4b0e      	ldr	r3, [pc, #56]	; (1000075c <tud_cdc_n_write_flush+0x11c>)
10000722:	22c8      	movs	r2, #200	; 0xc8
10000724:	0018      	movs	r0, r3
10000726:	f00a fd5b 	bl	1000b1e0 <__wrap_printf>
1000072a:	2300      	movs	r3, #0
1000072c:	e00d      	b.n	1000074a <tud_cdc_n_write_flush+0x10a>
    return count;
1000072e:	2308      	movs	r3, #8
10000730:	18fb      	adds	r3, r7, r3
10000732:	881b      	ldrh	r3, [r3, #0]
10000734:	e009      	b.n	1000074a <tud_cdc_n_write_flush+0x10a>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
10000736:	68fb      	ldr	r3, [r7, #12]
10000738:	789a      	ldrb	r2, [r3, #2]
1000073a:	230b      	movs	r3, #11
1000073c:	18fb      	adds	r3, r7, r3
1000073e:	781b      	ldrb	r3, [r3, #0]
10000740:	0011      	movs	r1, r2
10000742:	0018      	movs	r0, r3
10000744:	f003 f964 	bl	10003a10 <usbd_edpt_release>
    return 0;
10000748:	2300      	movs	r3, #0
  }
}
1000074a:	0018      	movs	r0, r3
1000074c:	46bd      	mov	sp, r7
1000074e:	b004      	add	sp, #16
10000750:	bdb0      	pop	{r4, r5, r7, pc}
10000752:	46c0      	nop			; (mov r8, r8)
10000754:	20000870 	.word	0x20000870
10000758:	1000d070 	.word	0x1000d070
1000075c:	1000d058 	.word	0x1000d058

10000760 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
10000760:	b5b0      	push	{r4, r5, r7, lr}
10000762:	b08a      	sub	sp, #40	; 0x28
10000764:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10000766:	23ac      	movs	r3, #172	; 0xac
10000768:	005a      	lsls	r2, r3, #1
1000076a:	4b3f      	ldr	r3, [pc, #252]	; (10000868 <cdcd_init+0x108>)
1000076c:	2100      	movs	r1, #0
1000076e:	0018      	movs	r0, r3
10000770:	f00c fbf2 	bl	1000cf58 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
10000774:	231f      	movs	r3, #31
10000776:	18fb      	adds	r3, r7, r3
10000778:	2200      	movs	r2, #0
1000077a:	701a      	strb	r2, [r3, #0]
1000077c:	e069      	b.n	10000852 <cdcd_init+0xf2>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
1000077e:	251f      	movs	r5, #31
10000780:	197b      	adds	r3, r7, r5
10000782:	781b      	ldrb	r3, [r3, #0]
10000784:	22ac      	movs	r2, #172	; 0xac
10000786:	0052      	lsls	r2, r2, #1
10000788:	435a      	muls	r2, r3
1000078a:	4b37      	ldr	r3, [pc, #220]	; (10000868 <cdcd_init+0x108>)
1000078c:	18d3      	adds	r3, r2, r3
1000078e:	61bb      	str	r3, [r7, #24]

    p_cdc->wanted_char = -1;
10000790:	69bb      	ldr	r3, [r7, #24]
10000792:	22ff      	movs	r2, #255	; 0xff
10000794:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
10000796:	69bb      	ldr	r3, [r7, #24]
10000798:	3306      	adds	r3, #6
1000079a:	881a      	ldrh	r2, [r3, #0]
1000079c:	2100      	movs	r1, #0
1000079e:	400a      	ands	r2, r1
100007a0:	1c11      	adds	r1, r2, #0
100007a2:	4a32      	ldr	r2, [pc, #200]	; (1000086c <cdcd_init+0x10c>)
100007a4:	430a      	orrs	r2, r1
100007a6:	801a      	strh	r2, [r3, #0]
100007a8:	885a      	ldrh	r2, [r3, #2]
100007aa:	2100      	movs	r1, #0
100007ac:	400a      	ands	r2, r1
100007ae:	1c11      	adds	r1, r2, #0
100007b0:	2201      	movs	r2, #1
100007b2:	430a      	orrs	r2, r1
100007b4:	805a      	strh	r2, [r3, #2]
    p_cdc->line_coding.stop_bits = 0;
100007b6:	69bb      	ldr	r3, [r7, #24]
100007b8:	2200      	movs	r2, #0
100007ba:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
100007bc:	69bb      	ldr	r3, [r7, #24]
100007be:	2200      	movs	r2, #0
100007c0:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
100007c2:	69bb      	ldr	r3, [r7, #24]
100007c4:	2208      	movs	r2, #8
100007c6:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
100007c8:	69bb      	ldr	r3, [r7, #24]
100007ca:	3310      	adds	r3, #16
100007cc:	0018      	movs	r0, r3
100007ce:	69bb      	ldr	r3, [r7, #24]
100007d0:	3348      	adds	r3, #72	; 0x48
100007d2:	0019      	movs	r1, r3
100007d4:	2300      	movs	r3, #0
100007d6:	9300      	str	r3, [sp, #0]
100007d8:	2301      	movs	r3, #1
100007da:	2240      	movs	r2, #64	; 0x40
100007dc:	f000 fea4 	bl	10001528 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
100007e0:	69bb      	ldr	r3, [r7, #24]
100007e2:	332c      	adds	r3, #44	; 0x2c
100007e4:	0018      	movs	r0, r3
100007e6:	69bb      	ldr	r3, [r7, #24]
100007e8:	3388      	adds	r3, #136	; 0x88
100007ea:	0019      	movs	r1, r3
100007ec:	2301      	movs	r3, #1
100007ee:	9300      	str	r3, [sp, #0]
100007f0:	2301      	movs	r3, #1
100007f2:	2240      	movs	r2, #64	; 0x40
100007f4:	f000 fe98 	bl	10001528 <tu_fifo_config>

#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
100007f8:	69bb      	ldr	r3, [r7, #24]
100007fa:	3310      	adds	r3, #16
100007fc:	001c      	movs	r4, r3
100007fe:	69bb      	ldr	r3, [r7, #24]
10000800:	33c8      	adds	r3, #200	; 0xc8
10000802:	0018      	movs	r0, r3
10000804:	f7ff fe0a 	bl	1000041c <osal_mutex_create>
10000808:	0003      	movs	r3, r0
1000080a:	60bc      	str	r4, [r7, #8]
1000080c:	2200      	movs	r2, #0
1000080e:	607a      	str	r2, [r7, #4]
10000810:	603b      	str	r3, [r7, #0]

#if CFG_FIFO_MUTEX
TU_ATTR_ALWAYS_INLINE static inline
void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t write_mutex_hdl, tu_fifo_mutex_t read_mutex_hdl)
{
  f->mutex_wr = write_mutex_hdl;
10000812:	68bb      	ldr	r3, [r7, #8]
10000814:	687a      	ldr	r2, [r7, #4]
10000816:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
10000818:	68bb      	ldr	r3, [r7, #8]
1000081a:	683a      	ldr	r2, [r7, #0]
1000081c:	619a      	str	r2, [r3, #24]
}
1000081e:	46c0      	nop			; (mov r8, r8)
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
10000820:	69bb      	ldr	r3, [r7, #24]
10000822:	332c      	adds	r3, #44	; 0x2c
10000824:	001c      	movs	r4, r3
10000826:	69bb      	ldr	r3, [r7, #24]
10000828:	33d0      	adds	r3, #208	; 0xd0
1000082a:	0018      	movs	r0, r3
1000082c:	f7ff fdf6 	bl	1000041c <osal_mutex_create>
10000830:	0003      	movs	r3, r0
10000832:	617c      	str	r4, [r7, #20]
10000834:	613b      	str	r3, [r7, #16]
10000836:	2300      	movs	r3, #0
10000838:	60fb      	str	r3, [r7, #12]
  f->mutex_wr = write_mutex_hdl;
1000083a:	697b      	ldr	r3, [r7, #20]
1000083c:	693a      	ldr	r2, [r7, #16]
1000083e:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
10000840:	697b      	ldr	r3, [r7, #20]
10000842:	68fa      	ldr	r2, [r7, #12]
10000844:	619a      	str	r2, [r3, #24]
}
10000846:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
10000848:	197b      	adds	r3, r7, r5
1000084a:	781a      	ldrb	r2, [r3, #0]
1000084c:	197b      	adds	r3, r7, r5
1000084e:	3201      	adds	r2, #1
10000850:	701a      	strb	r2, [r3, #0]
10000852:	231f      	movs	r3, #31
10000854:	18fb      	adds	r3, r7, r3
10000856:	781b      	ldrb	r3, [r3, #0]
10000858:	2b00      	cmp	r3, #0
1000085a:	d090      	beq.n	1000077e <cdcd_init+0x1e>
#endif
  }
}
1000085c:	46c0      	nop			; (mov r8, r8)
1000085e:	46c0      	nop			; (mov r8, r8)
10000860:	46bd      	mov	sp, r7
10000862:	b008      	add	sp, #32
10000864:	bdb0      	pop	{r4, r5, r7, pc}
10000866:	46c0      	nop			; (mov r8, r8)
10000868:	20000870 	.word	0x20000870
1000086c:	ffffc200 	.word	0xffffc200

10000870 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
10000870:	b590      	push	{r4, r7, lr}
10000872:	b085      	sub	sp, #20
10000874:	af00      	add	r7, sp, #0
10000876:	0002      	movs	r2, r0
10000878:	1dfb      	adds	r3, r7, #7
1000087a:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
1000087c:	230f      	movs	r3, #15
1000087e:	18fb      	adds	r3, r7, r3
10000880:	2200      	movs	r2, #0
10000882:	701a      	strb	r2, [r3, #0]
10000884:	e023      	b.n	100008ce <cdcd_reset+0x5e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
10000886:	240f      	movs	r4, #15
10000888:	193b      	adds	r3, r7, r4
1000088a:	781b      	ldrb	r3, [r3, #0]
1000088c:	22ac      	movs	r2, #172	; 0xac
1000088e:	0052      	lsls	r2, r2, #1
10000890:	435a      	muls	r2, r3
10000892:	4b14      	ldr	r3, [pc, #80]	; (100008e4 <cdcd_reset+0x74>)
10000894:	18d3      	adds	r3, r2, r3
10000896:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
10000898:	68bb      	ldr	r3, [r7, #8]
1000089a:	2205      	movs	r2, #5
1000089c:	2100      	movs	r1, #0
1000089e:	0018      	movs	r0, r3
100008a0:	f00c fb5a 	bl	1000cf58 <__wrap_memset>
    tu_fifo_clear(&p_cdc->rx_ff);
100008a4:	68bb      	ldr	r3, [r7, #8]
100008a6:	3310      	adds	r3, #16
100008a8:	0018      	movs	r0, r3
100008aa:	f001 fd18 	bl	100022de <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
100008ae:	68bb      	ldr	r3, [r7, #8]
100008b0:	332c      	adds	r3, #44	; 0x2c
100008b2:	0018      	movs	r0, r3
100008b4:	f001 fd13 	bl	100022de <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
100008b8:	68bb      	ldr	r3, [r7, #8]
100008ba:	332c      	adds	r3, #44	; 0x2c
100008bc:	2101      	movs	r1, #1
100008be:	0018      	movs	r0, r3
100008c0:	f001 fd3f 	bl	10002342 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
100008c4:	193b      	adds	r3, r7, r4
100008c6:	781a      	ldrb	r2, [r3, #0]
100008c8:	193b      	adds	r3, r7, r4
100008ca:	3201      	adds	r2, #1
100008cc:	701a      	strb	r2, [r3, #0]
100008ce:	230f      	movs	r3, #15
100008d0:	18fb      	adds	r3, r7, r3
100008d2:	781b      	ldrb	r3, [r3, #0]
100008d4:	2b00      	cmp	r3, #0
100008d6:	d0d6      	beq.n	10000886 <cdcd_reset+0x16>
  }
}
100008d8:	46c0      	nop			; (mov r8, r8)
100008da:	46c0      	nop			; (mov r8, r8)
100008dc:	46bd      	mov	sp, r7
100008de:	b005      	add	sp, #20
100008e0:	bd90      	pop	{r4, r7, pc}
100008e2:	46c0      	nop			; (mov r8, r8)
100008e4:	20000870 	.word	0x20000870

100008e8 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
100008e8:	b590      	push	{r4, r7, lr}
100008ea:	b089      	sub	sp, #36	; 0x24
100008ec:	af02      	add	r7, sp, #8
100008ee:	6039      	str	r1, [r7, #0]
100008f0:	0011      	movs	r1, r2
100008f2:	1dfb      	adds	r3, r7, #7
100008f4:	1c02      	adds	r2, r0, #0
100008f6:	701a      	strb	r2, [r3, #0]
100008f8:	1d3b      	adds	r3, r7, #4
100008fa:	1c0a      	adds	r2, r1, #0
100008fc:	801a      	strh	r2, [r3, #0]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
100008fe:	683b      	ldr	r3, [r7, #0]
10000900:	795b      	ldrb	r3, [r3, #5]
10000902:	2b02      	cmp	r3, #2
10000904:	d103      	bne.n	1000090e <cdcd_open+0x26>
10000906:	683b      	ldr	r3, [r7, #0]
10000908:	799b      	ldrb	r3, [r3, #6]
1000090a:	2b02      	cmp	r3, #2
1000090c:	d001      	beq.n	10000912 <cdcd_open+0x2a>
1000090e:	2300      	movs	r3, #0
10000910:	e0df      	b.n	10000ad2 <cdcd_open+0x1ea>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
10000912:	2300      	movs	r3, #0
10000914:	617b      	str	r3, [r7, #20]
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
10000916:	2313      	movs	r3, #19
10000918:	18fb      	adds	r3, r7, r3
1000091a:	2200      	movs	r2, #0
1000091c:	701a      	strb	r2, [r3, #0]
1000091e:	e01a      	b.n	10000956 <cdcd_open+0x6e>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10000920:	2013      	movs	r0, #19
10000922:	183b      	adds	r3, r7, r0
10000924:	781b      	ldrb	r3, [r3, #0]
10000926:	4a6d      	ldr	r2, [pc, #436]	; (10000adc <cdcd_open+0x1f4>)
10000928:	21ac      	movs	r1, #172	; 0xac
1000092a:	0049      	lsls	r1, r1, #1
1000092c:	434b      	muls	r3, r1
1000092e:	18d3      	adds	r3, r2, r3
10000930:	3302      	adds	r3, #2
10000932:	781b      	ldrb	r3, [r3, #0]
10000934:	2b00      	cmp	r3, #0
10000936:	d108      	bne.n	1000094a <cdcd_open+0x62>
    {
      p_cdc = &_cdcd_itf[cdc_id];
10000938:	183b      	adds	r3, r7, r0
1000093a:	781b      	ldrb	r3, [r3, #0]
1000093c:	22ac      	movs	r2, #172	; 0xac
1000093e:	0052      	lsls	r2, r2, #1
10000940:	435a      	muls	r2, r3
10000942:	4b66      	ldr	r3, [pc, #408]	; (10000adc <cdcd_open+0x1f4>)
10000944:	18d3      	adds	r3, r2, r3
10000946:	617b      	str	r3, [r7, #20]
      break;
10000948:	e00a      	b.n	10000960 <cdcd_open+0x78>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
1000094a:	2113      	movs	r1, #19
1000094c:	187b      	adds	r3, r7, r1
1000094e:	781a      	ldrb	r2, [r3, #0]
10000950:	187b      	adds	r3, r7, r1
10000952:	3201      	adds	r2, #1
10000954:	701a      	strb	r2, [r3, #0]
10000956:	2313      	movs	r3, #19
10000958:	18fb      	adds	r3, r7, r3
1000095a:	781b      	ldrb	r3, [r3, #0]
1000095c:	2b00      	cmp	r3, #0
1000095e:	d0df      	beq.n	10000920 <cdcd_open+0x38>
    }
  }
  TU_ASSERT(p_cdc, 0);
10000960:	697b      	ldr	r3, [r7, #20]
10000962:	2b00      	cmp	r3, #0
10000964:	d108      	bne.n	10000978 <cdcd_open+0x90>
10000966:	238f      	movs	r3, #143	; 0x8f
10000968:	005a      	lsls	r2, r3, #1
1000096a:	495d      	ldr	r1, [pc, #372]	; (10000ae0 <cdcd_open+0x1f8>)
1000096c:	4b5d      	ldr	r3, [pc, #372]	; (10000ae4 <cdcd_open+0x1fc>)
1000096e:	0018      	movs	r0, r3
10000970:	f00a fc36 	bl	1000b1e0 <__wrap_printf>
10000974:	2300      	movs	r3, #0
10000976:	e0ac      	b.n	10000ad2 <cdcd_open+0x1ea>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10000978:	683b      	ldr	r3, [r7, #0]
1000097a:	789a      	ldrb	r2, [r3, #2]
1000097c:	697b      	ldr	r3, [r7, #20]
1000097e:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
10000980:	2310      	movs	r3, #16
10000982:	18fb      	adds	r3, r7, r3
10000984:	2209      	movs	r2, #9
10000986:	801a      	strh	r2, [r3, #0]
  uint8_t const * p_desc = tu_desc_next( itf_desc );
10000988:	683b      	ldr	r3, [r7, #0]
1000098a:	0018      	movs	r0, r3
1000098c:	f7ff fd22 	bl	100003d4 <tu_desc_next>
10000990:	0003      	movs	r3, r0
10000992:	60fb      	str	r3, [r7, #12]

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10000994:	e011      	b.n	100009ba <cdcd_open+0xd2>
  {
    drv_len += tu_desc_len(p_desc);
10000996:	68fb      	ldr	r3, [r7, #12]
10000998:	0018      	movs	r0, r3
1000099a:	f7ff fd35 	bl	10000408 <tu_desc_len>
1000099e:	0003      	movs	r3, r0
100009a0:	b299      	uxth	r1, r3
100009a2:	2210      	movs	r2, #16
100009a4:	18bb      	adds	r3, r7, r2
100009a6:	18ba      	adds	r2, r7, r2
100009a8:	8812      	ldrh	r2, [r2, #0]
100009aa:	188a      	adds	r2, r1, r2
100009ac:	801a      	strh	r2, [r3, #0]
    p_desc   = tu_desc_next(p_desc);
100009ae:	68fb      	ldr	r3, [r7, #12]
100009b0:	0018      	movs	r0, r3
100009b2:	f7ff fd0f 	bl	100003d4 <tu_desc_next>
100009b6:	0003      	movs	r3, r0
100009b8:	60fb      	str	r3, [r7, #12]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
100009ba:	68fb      	ldr	r3, [r7, #12]
100009bc:	0018      	movs	r0, r3
100009be:	f7ff fd18 	bl	100003f2 <tu_desc_type>
100009c2:	0003      	movs	r3, r0
100009c4:	2b24      	cmp	r3, #36	; 0x24
100009c6:	d106      	bne.n	100009d6 <cdcd_open+0xee>
100009c8:	2310      	movs	r3, #16
100009ca:	18fa      	adds	r2, r7, r3
100009cc:	1d3b      	adds	r3, r7, #4
100009ce:	8812      	ldrh	r2, [r2, #0]
100009d0:	881b      	ldrh	r3, [r3, #0]
100009d2:	429a      	cmp	r2, r3
100009d4:	d9df      	bls.n	10000996 <cdcd_open+0xae>
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
100009d6:	68fb      	ldr	r3, [r7, #12]
100009d8:	0018      	movs	r0, r3
100009da:	f7ff fd0a 	bl	100003f2 <tu_desc_type>
100009de:	0003      	movs	r3, r0
100009e0:	2b05      	cmp	r3, #5
100009e2:	d12e      	bne.n	10000a42 <cdcd_open+0x15a>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
100009e4:	68fb      	ldr	r3, [r7, #12]
100009e6:	60bb      	str	r3, [r7, #8]

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
100009e8:	68ba      	ldr	r2, [r7, #8]
100009ea:	1dfb      	adds	r3, r7, #7
100009ec:	781b      	ldrb	r3, [r3, #0]
100009ee:	0011      	movs	r1, r2
100009f0:	0018      	movs	r0, r3
100009f2:	f002 ff2b 	bl	1000384c <usbd_edpt_open>
100009f6:	0003      	movs	r3, r0
100009f8:	001a      	movs	r2, r3
100009fa:	2301      	movs	r3, #1
100009fc:	4053      	eors	r3, r2
100009fe:	b2db      	uxtb	r3, r3
10000a00:	2b00      	cmp	r3, #0
10000a02:	d008      	beq.n	10000a16 <cdcd_open+0x12e>
10000a04:	2399      	movs	r3, #153	; 0x99
10000a06:	005a      	lsls	r2, r3, #1
10000a08:	4935      	ldr	r1, [pc, #212]	; (10000ae0 <cdcd_open+0x1f8>)
10000a0a:	4b36      	ldr	r3, [pc, #216]	; (10000ae4 <cdcd_open+0x1fc>)
10000a0c:	0018      	movs	r0, r3
10000a0e:	f00a fbe7 	bl	1000b1e0 <__wrap_printf>
10000a12:	2300      	movs	r3, #0
10000a14:	e05d      	b.n	10000ad2 <cdcd_open+0x1ea>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
10000a16:	68bb      	ldr	r3, [r7, #8]
10000a18:	789a      	ldrb	r2, [r3, #2]
10000a1a:	697b      	ldr	r3, [r7, #20]
10000a1c:	705a      	strb	r2, [r3, #1]

    drv_len += tu_desc_len(p_desc);
10000a1e:	68fb      	ldr	r3, [r7, #12]
10000a20:	0018      	movs	r0, r3
10000a22:	f7ff fcf1 	bl	10000408 <tu_desc_len>
10000a26:	0003      	movs	r3, r0
10000a28:	b299      	uxth	r1, r3
10000a2a:	2210      	movs	r2, #16
10000a2c:	18bb      	adds	r3, r7, r2
10000a2e:	18ba      	adds	r2, r7, r2
10000a30:	8812      	ldrh	r2, [r2, #0]
10000a32:	188a      	adds	r2, r1, r2
10000a34:	801a      	strh	r2, [r3, #0]
    p_desc   = tu_desc_next(p_desc);
10000a36:	68fb      	ldr	r3, [r7, #12]
10000a38:	0018      	movs	r0, r3
10000a3a:	f7ff fccb 	bl	100003d4 <tu_desc_next>
10000a3e:	0003      	movs	r3, r0
10000a40:	60fb      	str	r3, [r7, #12]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10000a42:	68fb      	ldr	r3, [r7, #12]
10000a44:	0018      	movs	r0, r3
10000a46:	f7ff fcd4 	bl	100003f2 <tu_desc_type>
10000a4a:	0003      	movs	r3, r0
10000a4c:	2b04      	cmp	r3, #4
10000a4e:	d139      	bne.n	10000ac4 <cdcd_open+0x1dc>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
10000a50:	68fb      	ldr	r3, [r7, #12]
10000a52:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10000a54:	2b0a      	cmp	r3, #10
10000a56:	d135      	bne.n	10000ac4 <cdcd_open+0x1dc>
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
10000a58:	68fb      	ldr	r3, [r7, #12]
10000a5a:	0018      	movs	r0, r3
10000a5c:	f7ff fcd4 	bl	10000408 <tu_desc_len>
10000a60:	0003      	movs	r3, r0
10000a62:	b299      	uxth	r1, r3
10000a64:	2210      	movs	r2, #16
10000a66:	18bb      	adds	r3, r7, r2
10000a68:	18ba      	adds	r2, r7, r2
10000a6a:	8812      	ldrh	r2, [r2, #0]
10000a6c:	188a      	adds	r2, r1, r2
10000a6e:	801a      	strh	r2, [r3, #0]
    p_desc   = tu_desc_next(p_desc);
10000a70:	68fb      	ldr	r3, [r7, #12]
10000a72:	0018      	movs	r0, r3
10000a74:	f7ff fcae 	bl	100003d4 <tu_desc_next>
10000a78:	0003      	movs	r3, r0
10000a7a:	60fb      	str	r3, [r7, #12]

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
10000a7c:	697b      	ldr	r3, [r7, #20]
10000a7e:	3303      	adds	r3, #3
10000a80:	697a      	ldr	r2, [r7, #20]
10000a82:	3202      	adds	r2, #2
10000a84:	68fc      	ldr	r4, [r7, #12]
10000a86:	1df9      	adds	r1, r7, #7
10000a88:	7808      	ldrb	r0, [r1, #0]
10000a8a:	9201      	str	r2, [sp, #4]
10000a8c:	9300      	str	r3, [sp, #0]
10000a8e:	2302      	movs	r3, #2
10000a90:	2202      	movs	r2, #2
10000a92:	0021      	movs	r1, r4
10000a94:	f002 fe6c 	bl	10003770 <usbd_open_edpt_pair>
10000a98:	0003      	movs	r3, r0
10000a9a:	001a      	movs	r2, r3
10000a9c:	2301      	movs	r3, #1
10000a9e:	4053      	eors	r3, r2
10000aa0:	b2db      	uxtb	r3, r3
10000aa2:	2b00      	cmp	r3, #0
10000aa4:	d008      	beq.n	10000ab8 <cdcd_open+0x1d0>
10000aa6:	23a1      	movs	r3, #161	; 0xa1
10000aa8:	005a      	lsls	r2, r3, #1
10000aaa:	490d      	ldr	r1, [pc, #52]	; (10000ae0 <cdcd_open+0x1f8>)
10000aac:	4b0d      	ldr	r3, [pc, #52]	; (10000ae4 <cdcd_open+0x1fc>)
10000aae:	0018      	movs	r0, r3
10000ab0:	f00a fb96 	bl	1000b1e0 <__wrap_printf>
10000ab4:	2300      	movs	r3, #0
10000ab6:	e00c      	b.n	10000ad2 <cdcd_open+0x1ea>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10000ab8:	2210      	movs	r2, #16
10000aba:	18bb      	adds	r3, r7, r2
10000abc:	18ba      	adds	r2, r7, r2
10000abe:	8812      	ldrh	r2, [r2, #0]
10000ac0:	320e      	adds	r2, #14
10000ac2:	801a      	strh	r2, [r3, #0]
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
10000ac4:	697b      	ldr	r3, [r7, #20]
10000ac6:	0018      	movs	r0, r3
10000ac8:	f7ff fcb5 	bl	10000436 <_prep_out_transaction>

  return drv_len;
10000acc:	2310      	movs	r3, #16
10000ace:	18fb      	adds	r3, r7, r3
10000ad0:	881b      	ldrh	r3, [r3, #0]
}
10000ad2:	0018      	movs	r0, r3
10000ad4:	46bd      	mov	sp, r7
10000ad6:	b007      	add	sp, #28
10000ad8:	bd90      	pop	{r4, r7, pc}
10000ada:	46c0      	nop			; (mov r8, r8)
10000adc:	20000870 	.word	0x20000870
10000ae0:	1000d088 	.word	0x1000d088
10000ae4:	1000d058 	.word	0x1000d058

10000ae8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
10000ae8:	b5b0      	push	{r4, r5, r7, lr}
10000aea:	b08a      	sub	sp, #40	; 0x28
10000aec:	af00      	add	r7, sp, #0
10000aee:	603a      	str	r2, [r7, #0]
10000af0:	1dfb      	adds	r3, r7, #7
10000af2:	1c02      	adds	r2, r0, #0
10000af4:	701a      	strb	r2, [r3, #0]
10000af6:	1dbb      	adds	r3, r7, #6
10000af8:	1c0a      	adds	r2, r1, #0
10000afa:	701a      	strb	r2, [r3, #0]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10000afc:	683b      	ldr	r3, [r7, #0]
10000afe:	781b      	ldrb	r3, [r3, #0]
10000b00:	2260      	movs	r2, #96	; 0x60
10000b02:	4013      	ands	r3, r2
10000b04:	b2db      	uxtb	r3, r3
10000b06:	2b20      	cmp	r3, #32
10000b08:	d001      	beq.n	10000b0e <cdcd_control_xfer_cb+0x26>
10000b0a:	2300      	movs	r3, #0
10000b0c:	e0fa      	b.n	10000d04 <cdcd_control_xfer_cb+0x21c>

  uint8_t itf = 0;
10000b0e:	2327      	movs	r3, #39	; 0x27
10000b10:	18fb      	adds	r3, r7, r3
10000b12:	2200      	movs	r2, #0
10000b14:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = _cdcd_itf;
10000b16:	4b7d      	ldr	r3, [pc, #500]	; (10000d0c <cdcd_control_xfer_cb+0x224>)
10000b18:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
10000b1a:	2327      	movs	r3, #39	; 0x27
10000b1c:	18fb      	adds	r3, r7, r3
10000b1e:	781b      	ldrb	r3, [r3, #0]
10000b20:	2b00      	cmp	r3, #0
10000b22:	d001      	beq.n	10000b28 <cdcd_control_xfer_cb+0x40>
10000b24:	2300      	movs	r3, #0
10000b26:	e0ed      	b.n	10000d04 <cdcd_control_xfer_cb+0x21c>

    if ( p_cdc->itf_num == request->wIndex ) break;
10000b28:	6a3b      	ldr	r3, [r7, #32]
10000b2a:	781b      	ldrb	r3, [r3, #0]
10000b2c:	b29a      	uxth	r2, r3
10000b2e:	683b      	ldr	r3, [r7, #0]
10000b30:	7919      	ldrb	r1, [r3, #4]
10000b32:	795b      	ldrb	r3, [r3, #5]
10000b34:	021b      	lsls	r3, r3, #8
10000b36:	430b      	orrs	r3, r1
10000b38:	b29b      	uxth	r3, r3
10000b3a:	429a      	cmp	r2, r3
10000b3c:	d00a      	beq.n	10000b54 <cdcd_control_xfer_cb+0x6c>
  for ( ; ; itf++, p_cdc++)
10000b3e:	2127      	movs	r1, #39	; 0x27
10000b40:	187b      	adds	r3, r7, r1
10000b42:	781a      	ldrb	r2, [r3, #0]
10000b44:	187b      	adds	r3, r7, r1
10000b46:	3201      	adds	r2, #1
10000b48:	701a      	strb	r2, [r3, #0]
10000b4a:	6a3b      	ldr	r3, [r7, #32]
10000b4c:	3359      	adds	r3, #89	; 0x59
10000b4e:	33ff      	adds	r3, #255	; 0xff
10000b50:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
10000b52:	e7e2      	b.n	10000b1a <cdcd_control_xfer_cb+0x32>
    if ( p_cdc->itf_num == request->wIndex ) break;
10000b54:	46c0      	nop			; (mov r8, r8)
  }

  switch ( request->bRequest )
10000b56:	683b      	ldr	r3, [r7, #0]
10000b58:	785b      	ldrb	r3, [r3, #1]
10000b5a:	2b23      	cmp	r3, #35	; 0x23
10000b5c:	d100      	bne.n	10000b60 <cdcd_control_xfer_cb+0x78>
10000b5e:	e0a6      	b.n	10000cae <cdcd_control_xfer_cb+0x1c6>
10000b60:	dd00      	ble.n	10000b64 <cdcd_control_xfer_cb+0x7c>
10000b62:	e0c5      	b.n	10000cf0 <cdcd_control_xfer_cb+0x208>
10000b64:	2b22      	cmp	r3, #34	; 0x22
10000b66:	d034      	beq.n	10000bd2 <cdcd_control_xfer_cb+0xea>
10000b68:	dd00      	ble.n	10000b6c <cdcd_control_xfer_cb+0x84>
10000b6a:	e0c1      	b.n	10000cf0 <cdcd_control_xfer_cb+0x208>
10000b6c:	2b20      	cmp	r3, #32
10000b6e:	d002      	beq.n	10000b76 <cdcd_control_xfer_cb+0x8e>
10000b70:	2b21      	cmp	r3, #33	; 0x21
10000b72:	d020      	beq.n	10000bb6 <cdcd_control_xfer_cb+0xce>
10000b74:	e0bc      	b.n	10000cf0 <cdcd_control_xfer_cb+0x208>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
10000b76:	1dbb      	adds	r3, r7, #6
10000b78:	781b      	ldrb	r3, [r3, #0]
10000b7a:	2b00      	cmp	r3, #0
10000b7c:	d108      	bne.n	10000b90 <cdcd_control_xfer_cb+0xa8>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10000b7e:	6a3b      	ldr	r3, [r7, #32]
10000b80:	1d9a      	adds	r2, r3, #6
10000b82:	6839      	ldr	r1, [r7, #0]
10000b84:	1dfb      	adds	r3, r7, #7
10000b86:	7818      	ldrb	r0, [r3, #0]
10000b88:	2307      	movs	r3, #7
10000b8a:	f003 f9fb 	bl	10003f84 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
10000b8e:	e0b1      	b.n	10000cf4 <cdcd_control_xfer_cb+0x20c>
      else if ( stage == CONTROL_STAGE_ACK)
10000b90:	1dbb      	adds	r3, r7, #6
10000b92:	781b      	ldrb	r3, [r3, #0]
10000b94:	2b02      	cmp	r3, #2
10000b96:	d000      	beq.n	10000b9a <cdcd_control_xfer_cb+0xb2>
10000b98:	e0ac      	b.n	10000cf4 <cdcd_control_xfer_cb+0x20c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
10000b9a:	4b5d      	ldr	r3, [pc, #372]	; (10000d10 <cdcd_control_xfer_cb+0x228>)
10000b9c:	2b00      	cmp	r3, #0
10000b9e:	d100      	bne.n	10000ba2 <cdcd_control_xfer_cb+0xba>
10000ba0:	e0a8      	b.n	10000cf4 <cdcd_control_xfer_cb+0x20c>
10000ba2:	6a3b      	ldr	r3, [r7, #32]
10000ba4:	1d9a      	adds	r2, r3, #6
10000ba6:	2327      	movs	r3, #39	; 0x27
10000ba8:	18fb      	adds	r3, r7, r3
10000baa:	781b      	ldrb	r3, [r3, #0]
10000bac:	0011      	movs	r1, r2
10000bae:	0018      	movs	r0, r3
10000bb0:	f00a fe28 	bl	1000b804 <tud_cdc_line_coding_cb>
    break;
10000bb4:	e09e      	b.n	10000cf4 <cdcd_control_xfer_cb+0x20c>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
10000bb6:	1dbb      	adds	r3, r7, #6
10000bb8:	781b      	ldrb	r3, [r3, #0]
10000bba:	2b00      	cmp	r3, #0
10000bbc:	d000      	beq.n	10000bc0 <cdcd_control_xfer_cb+0xd8>
10000bbe:	e09b      	b.n	10000cf8 <cdcd_control_xfer_cb+0x210>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10000bc0:	6a3b      	ldr	r3, [r7, #32]
10000bc2:	1d9a      	adds	r2, r3, #6
10000bc4:	6839      	ldr	r1, [r7, #0]
10000bc6:	1dfb      	adds	r3, r7, #7
10000bc8:	7818      	ldrb	r0, [r3, #0]
10000bca:	2307      	movs	r3, #7
10000bcc:	f003 f9da 	bl	10003f84 <tud_control_xfer>
      }
    break;
10000bd0:	e092      	b.n	10000cf8 <cdcd_control_xfer_cb+0x210>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
10000bd2:	1dbb      	adds	r3, r7, #6
10000bd4:	781b      	ldrb	r3, [r3, #0]
10000bd6:	2b00      	cmp	r3, #0
10000bd8:	d107      	bne.n	10000bea <cdcd_control_xfer_cb+0x102>
      {
        tud_control_status(rhport, request);
10000bda:	683a      	ldr	r2, [r7, #0]
10000bdc:	1dfb      	adds	r3, r7, #7
10000bde:	781b      	ldrb	r3, [r3, #0]
10000be0:	0011      	movs	r1, r2
10000be2:	0018      	movs	r0, r3
10000be4:	f003 f950 	bl	10003e88 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
10000be8:	e088      	b.n	10000cfc <cdcd_control_xfer_cb+0x214>
      else if (stage == CONTROL_STAGE_ACK)
10000bea:	1dbb      	adds	r3, r7, #6
10000bec:	781b      	ldrb	r3, [r3, #0]
10000bee:	2b02      	cmp	r3, #2
10000bf0:	d000      	beq.n	10000bf4 <cdcd_control_xfer_cb+0x10c>
10000bf2:	e083      	b.n	10000cfc <cdcd_control_xfer_cb+0x214>
        bool const dtr = tu_bit_test(request->wValue, 0);
10000bf4:	683b      	ldr	r3, [r7, #0]
10000bf6:	789a      	ldrb	r2, [r3, #2]
10000bf8:	78db      	ldrb	r3, [r3, #3]
10000bfa:	021b      	lsls	r3, r3, #8
10000bfc:	4313      	orrs	r3, r2
10000bfe:	b29b      	uxth	r3, r3
10000c00:	613b      	str	r3, [r7, #16]
10000c02:	210f      	movs	r1, #15
10000c04:	187b      	adds	r3, r7, r1
10000c06:	2200      	movs	r2, #0
10000c08:	701a      	strb	r2, [r3, #0]
10000c0a:	187b      	adds	r3, r7, r1
10000c0c:	781b      	ldrb	r3, [r3, #0]
10000c0e:	693a      	ldr	r2, [r7, #16]
10000c10:	40da      	lsrs	r2, r3
10000c12:	0013      	movs	r3, r2
10000c14:	001a      	movs	r2, r3
10000c16:	2301      	movs	r3, #1
10000c18:	4013      	ands	r3, r2
10000c1a:	1e5a      	subs	r2, r3, #1
10000c1c:	4193      	sbcs	r3, r2
10000c1e:	b2da      	uxtb	r2, r3
10000c20:	211f      	movs	r1, #31
10000c22:	187b      	adds	r3, r7, r1
10000c24:	701a      	strb	r2, [r3, #0]
        bool const rts = tu_bit_test(request->wValue, 1);
10000c26:	683b      	ldr	r3, [r7, #0]
10000c28:	789a      	ldrb	r2, [r3, #2]
10000c2a:	78db      	ldrb	r3, [r3, #3]
10000c2c:	021b      	lsls	r3, r3, #8
10000c2e:	4313      	orrs	r3, r2
10000c30:	b29b      	uxth	r3, r3
10000c32:	61bb      	str	r3, [r7, #24]
10000c34:	2017      	movs	r0, #23
10000c36:	183b      	adds	r3, r7, r0
10000c38:	2201      	movs	r2, #1
10000c3a:	701a      	strb	r2, [r3, #0]
10000c3c:	183b      	adds	r3, r7, r0
10000c3e:	781b      	ldrb	r3, [r3, #0]
10000c40:	69ba      	ldr	r2, [r7, #24]
10000c42:	40da      	lsrs	r2, r3
10000c44:	0013      	movs	r3, r2
10000c46:	001a      	movs	r2, r3
10000c48:	2301      	movs	r3, #1
10000c4a:	4013      	ands	r3, r2
10000c4c:	1e5a      	subs	r2, r3, #1
10000c4e:	4193      	sbcs	r3, r2
10000c50:	b2da      	uxtb	r2, r3
10000c52:	251e      	movs	r5, #30
10000c54:	197b      	adds	r3, r7, r5
10000c56:	701a      	strb	r2, [r3, #0]
        p_cdc->line_state = (uint8_t) request->wValue;
10000c58:	683b      	ldr	r3, [r7, #0]
10000c5a:	789a      	ldrb	r2, [r3, #2]
10000c5c:	78db      	ldrb	r3, [r3, #3]
10000c5e:	021b      	lsls	r3, r3, #8
10000c60:	4313      	orrs	r3, r2
10000c62:	b29b      	uxth	r3, r3
10000c64:	b2da      	uxtb	r2, r3
10000c66:	6a3b      	ldr	r3, [r7, #32]
10000c68:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
10000c6a:	6a3b      	ldr	r3, [r7, #32]
10000c6c:	332c      	adds	r3, #44	; 0x2c
10000c6e:	001a      	movs	r2, r3
10000c70:	000c      	movs	r4, r1
10000c72:	187b      	adds	r3, r7, r1
10000c74:	781b      	ldrb	r3, [r3, #0]
10000c76:	1e59      	subs	r1, r3, #1
10000c78:	418b      	sbcs	r3, r1
10000c7a:	b2db      	uxtb	r3, r3
10000c7c:	2101      	movs	r1, #1
10000c7e:	404b      	eors	r3, r1
10000c80:	b2db      	uxtb	r3, r3
10000c82:	1c19      	adds	r1, r3, #0
10000c84:	2301      	movs	r3, #1
10000c86:	400b      	ands	r3, r1
10000c88:	b2db      	uxtb	r3, r3
10000c8a:	0019      	movs	r1, r3
10000c8c:	0010      	movs	r0, r2
10000c8e:	f001 fb58 	bl	10002342 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10000c92:	4b20      	ldr	r3, [pc, #128]	; (10000d14 <cdcd_control_xfer_cb+0x22c>)
10000c94:	2b00      	cmp	r3, #0
10000c96:	d031      	beq.n	10000cfc <cdcd_control_xfer_cb+0x214>
10000c98:	197b      	adds	r3, r7, r5
10000c9a:	781a      	ldrb	r2, [r3, #0]
10000c9c:	193b      	adds	r3, r7, r4
10000c9e:	7819      	ldrb	r1, [r3, #0]
10000ca0:	2327      	movs	r3, #39	; 0x27
10000ca2:	18fb      	adds	r3, r7, r3
10000ca4:	781b      	ldrb	r3, [r3, #0]
10000ca6:	0018      	movs	r0, r3
10000ca8:	e000      	b.n	10000cac <cdcd_control_xfer_cb+0x1c4>
10000caa:	bf00      	nop
    break;
10000cac:	e026      	b.n	10000cfc <cdcd_control_xfer_cb+0x214>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
10000cae:	1dbb      	adds	r3, r7, #6
10000cb0:	781b      	ldrb	r3, [r3, #0]
10000cb2:	2b00      	cmp	r3, #0
10000cb4:	d107      	bne.n	10000cc6 <cdcd_control_xfer_cb+0x1de>
      {
        tud_control_status(rhport, request);
10000cb6:	683a      	ldr	r2, [r7, #0]
10000cb8:	1dfb      	adds	r3, r7, #7
10000cba:	781b      	ldrb	r3, [r3, #0]
10000cbc:	0011      	movs	r1, r2
10000cbe:	0018      	movs	r0, r3
10000cc0:	f003 f8e2 	bl	10003e88 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
10000cc4:	e01c      	b.n	10000d00 <cdcd_control_xfer_cb+0x218>
      else if (stage == CONTROL_STAGE_ACK)
10000cc6:	1dbb      	adds	r3, r7, #6
10000cc8:	781b      	ldrb	r3, [r3, #0]
10000cca:	2b02      	cmp	r3, #2
10000ccc:	d118      	bne.n	10000d00 <cdcd_control_xfer_cb+0x218>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
10000cce:	4b12      	ldr	r3, [pc, #72]	; (10000d18 <cdcd_control_xfer_cb+0x230>)
10000cd0:	2b00      	cmp	r3, #0
10000cd2:	d015      	beq.n	10000d00 <cdcd_control_xfer_cb+0x218>
10000cd4:	683b      	ldr	r3, [r7, #0]
10000cd6:	789a      	ldrb	r2, [r3, #2]
10000cd8:	78db      	ldrb	r3, [r3, #3]
10000cda:	021b      	lsls	r3, r3, #8
10000cdc:	4313      	orrs	r3, r2
10000cde:	b29a      	uxth	r2, r3
10000ce0:	2327      	movs	r3, #39	; 0x27
10000ce2:	18fb      	adds	r3, r7, r3
10000ce4:	781b      	ldrb	r3, [r3, #0]
10000ce6:	0011      	movs	r1, r2
10000ce8:	0018      	movs	r0, r3
10000cea:	e000      	b.n	10000cee <cdcd_control_xfer_cb+0x206>
10000cec:	bf00      	nop
    break;
10000cee:	e007      	b.n	10000d00 <cdcd_control_xfer_cb+0x218>

    default: return false; // stall unsupported request
10000cf0:	2300      	movs	r3, #0
10000cf2:	e007      	b.n	10000d04 <cdcd_control_xfer_cb+0x21c>
    break;
10000cf4:	46c0      	nop			; (mov r8, r8)
10000cf6:	e004      	b.n	10000d02 <cdcd_control_xfer_cb+0x21a>
    break;
10000cf8:	46c0      	nop			; (mov r8, r8)
10000cfa:	e002      	b.n	10000d02 <cdcd_control_xfer_cb+0x21a>
    break;
10000cfc:	46c0      	nop			; (mov r8, r8)
10000cfe:	e000      	b.n	10000d02 <cdcd_control_xfer_cb+0x21a>
    break;
10000d00:	46c0      	nop			; (mov r8, r8)
  }

  return true;
10000d02:	2301      	movs	r3, #1
}
10000d04:	0018      	movs	r0, r3
10000d06:	46bd      	mov	sp, r7
10000d08:	b00a      	add	sp, #40	; 0x28
10000d0a:	bdb0      	pop	{r4, r5, r7, pc}
10000d0c:	20000870 	.word	0x20000870
10000d10:	1000b805 	.word	0x1000b805
	...

10000d1c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10000d1c:	b590      	push	{r4, r7, lr}
10000d1e:	b087      	sub	sp, #28
10000d20:	af00      	add	r7, sp, #0
10000d22:	0004      	movs	r4, r0
10000d24:	0008      	movs	r0, r1
10000d26:	0011      	movs	r1, r2
10000d28:	603b      	str	r3, [r7, #0]
10000d2a:	1dfb      	adds	r3, r7, #7
10000d2c:	1c22      	adds	r2, r4, #0
10000d2e:	701a      	strb	r2, [r3, #0]
10000d30:	1dbb      	adds	r3, r7, #6
10000d32:	1c02      	adds	r2, r0, #0
10000d34:	701a      	strb	r2, [r3, #0]
10000d36:	1d7b      	adds	r3, r7, #5
10000d38:	1c0a      	adds	r2, r1, #0
10000d3a:	701a      	strb	r2, [r3, #0]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
10000d3c:	2317      	movs	r3, #23
10000d3e:	18fb      	adds	r3, r7, r3
10000d40:	2200      	movs	r2, #0
10000d42:	701a      	strb	r2, [r3, #0]
10000d44:	e019      	b.n	10000d7a <cdcd_xfer_cb+0x5e>
  {
    p_cdc = &_cdcd_itf[itf];
10000d46:	2117      	movs	r1, #23
10000d48:	187b      	adds	r3, r7, r1
10000d4a:	781b      	ldrb	r3, [r3, #0]
10000d4c:	22ac      	movs	r2, #172	; 0xac
10000d4e:	0052      	lsls	r2, r2, #1
10000d50:	435a      	muls	r2, r3
10000d52:	4b5e      	ldr	r3, [pc, #376]	; (10000ecc <cdcd_xfer_cb+0x1b0>)
10000d54:	18d3      	adds	r3, r2, r3
10000d56:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10000d58:	693b      	ldr	r3, [r7, #16]
10000d5a:	78db      	ldrb	r3, [r3, #3]
10000d5c:	1dba      	adds	r2, r7, #6
10000d5e:	7812      	ldrb	r2, [r2, #0]
10000d60:	429a      	cmp	r2, r3
10000d62:	d00f      	beq.n	10000d84 <cdcd_xfer_cb+0x68>
10000d64:	693b      	ldr	r3, [r7, #16]
10000d66:	789b      	ldrb	r3, [r3, #2]
10000d68:	1dba      	adds	r2, r7, #6
10000d6a:	7812      	ldrb	r2, [r2, #0]
10000d6c:	429a      	cmp	r2, r3
10000d6e:	d009      	beq.n	10000d84 <cdcd_xfer_cb+0x68>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
10000d70:	187b      	adds	r3, r7, r1
10000d72:	781a      	ldrb	r2, [r3, #0]
10000d74:	187b      	adds	r3, r7, r1
10000d76:	3201      	adds	r2, #1
10000d78:	701a      	strb	r2, [r3, #0]
10000d7a:	2317      	movs	r3, #23
10000d7c:	18fb      	adds	r3, r7, r3
10000d7e:	781b      	ldrb	r3, [r3, #0]
10000d80:	2b00      	cmp	r3, #0
10000d82:	d0e0      	beq.n	10000d46 <cdcd_xfer_cb+0x2a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
10000d84:	2317      	movs	r3, #23
10000d86:	18fb      	adds	r3, r7, r3
10000d88:	781b      	ldrb	r3, [r3, #0]
10000d8a:	2b00      	cmp	r3, #0
10000d8c:	d009      	beq.n	10000da2 <cdcd_xfer_cb+0x86>
10000d8e:	23b0      	movs	r3, #176	; 0xb0
10000d90:	33ff      	adds	r3, #255	; 0xff
10000d92:	001a      	movs	r2, r3
10000d94:	494e      	ldr	r1, [pc, #312]	; (10000ed0 <cdcd_xfer_cb+0x1b4>)
10000d96:	4b4f      	ldr	r3, [pc, #316]	; (10000ed4 <cdcd_xfer_cb+0x1b8>)
10000d98:	0018      	movs	r0, r3
10000d9a:	f00a fa21 	bl	1000b1e0 <__wrap_printf>
10000d9e:	2300      	movs	r3, #0
10000da0:	e090      	b.n	10000ec4 <cdcd_xfer_cb+0x1a8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
10000da2:	693b      	ldr	r3, [r7, #16]
10000da4:	78db      	ldrb	r3, [r3, #3]
10000da6:	1dba      	adds	r2, r7, #6
10000da8:	7812      	ldrb	r2, [r2, #0]
10000daa:	429a      	cmp	r2, r3
10000dac:	d152      	bne.n	10000e54 <cdcd_xfer_cb+0x138>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, xferred_bytes);
10000dae:	693b      	ldr	r3, [r7, #16]
10000db0:	3310      	adds	r3, #16
10000db2:	0018      	movs	r0, r3
10000db4:	693b      	ldr	r3, [r7, #16]
10000db6:	33d8      	adds	r3, #216	; 0xd8
10000db8:	683a      	ldr	r2, [r7, #0]
10000dba:	b292      	uxth	r2, r2
10000dbc:	0019      	movs	r1, r3
10000dbe:	f001 fa7b 	bl	100022b8 <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
10000dc2:	4b45      	ldr	r3, [pc, #276]	; (10000ed8 <cdcd_xfer_cb+0x1bc>)
10000dc4:	2b00      	cmp	r3, #0
10000dc6:	d02c      	beq.n	10000e22 <cdcd_xfer_cb+0x106>
10000dc8:	693b      	ldr	r3, [r7, #16]
10000dca:	795b      	ldrb	r3, [r3, #5]
10000dcc:	2bff      	cmp	r3, #255	; 0xff
10000dce:	d028      	beq.n	10000e22 <cdcd_xfer_cb+0x106>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
10000dd0:	2300      	movs	r3, #0
10000dd2:	60fb      	str	r3, [r7, #12]
10000dd4:	e021      	b.n	10000e1a <cdcd_xfer_cb+0xfe>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
10000dd6:	693b      	ldr	r3, [r7, #16]
10000dd8:	795a      	ldrb	r2, [r3, #5]
10000dda:	6939      	ldr	r1, [r7, #16]
10000ddc:	20d8      	movs	r0, #216	; 0xd8
10000dde:	68fb      	ldr	r3, [r7, #12]
10000de0:	18cb      	adds	r3, r1, r3
10000de2:	181b      	adds	r3, r3, r0
10000de4:	781b      	ldrb	r3, [r3, #0]
10000de6:	429a      	cmp	r2, r3
10000de8:	d114      	bne.n	10000e14 <cdcd_xfer_cb+0xf8>
10000dea:	693b      	ldr	r3, [r7, #16]
10000dec:	3310      	adds	r3, #16
10000dee:	0018      	movs	r0, r3
10000df0:	f001 f9ac 	bl	1000214c <tu_fifo_empty>
10000df4:	0003      	movs	r3, r0
10000df6:	001a      	movs	r2, r3
10000df8:	2301      	movs	r3, #1
10000dfa:	4053      	eors	r3, r2
10000dfc:	b2db      	uxtb	r3, r3
10000dfe:	2b00      	cmp	r3, #0
10000e00:	d008      	beq.n	10000e14 <cdcd_xfer_cb+0xf8>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
10000e02:	693b      	ldr	r3, [r7, #16]
10000e04:	795a      	ldrb	r2, [r3, #5]
10000e06:	2317      	movs	r3, #23
10000e08:	18fb      	adds	r3, r7, r3
10000e0a:	781b      	ldrb	r3, [r3, #0]
10000e0c:	0011      	movs	r1, r2
10000e0e:	0018      	movs	r0, r3
10000e10:	e000      	b.n	10000e14 <cdcd_xfer_cb+0xf8>
10000e12:	bf00      	nop
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
10000e14:	68fb      	ldr	r3, [r7, #12]
10000e16:	3301      	adds	r3, #1
10000e18:	60fb      	str	r3, [r7, #12]
10000e1a:	68fa      	ldr	r2, [r7, #12]
10000e1c:	683b      	ldr	r3, [r7, #0]
10000e1e:	429a      	cmp	r2, r3
10000e20:	d3d9      	bcc.n	10000dd6 <cdcd_xfer_cb+0xba>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10000e22:	4b2e      	ldr	r3, [pc, #184]	; (10000edc <cdcd_xfer_cb+0x1c0>)
10000e24:	2b00      	cmp	r3, #0
10000e26:	d011      	beq.n	10000e4c <cdcd_xfer_cb+0x130>
10000e28:	693b      	ldr	r3, [r7, #16]
10000e2a:	3310      	adds	r3, #16
10000e2c:	0018      	movs	r0, r3
10000e2e:	f001 f98d 	bl	1000214c <tu_fifo_empty>
10000e32:	0003      	movs	r3, r0
10000e34:	001a      	movs	r2, r3
10000e36:	2301      	movs	r3, #1
10000e38:	4053      	eors	r3, r2
10000e3a:	b2db      	uxtb	r3, r3
10000e3c:	2b00      	cmp	r3, #0
10000e3e:	d005      	beq.n	10000e4c <cdcd_xfer_cb+0x130>
10000e40:	2317      	movs	r3, #23
10000e42:	18fb      	adds	r3, r7, r3
10000e44:	781b      	ldrb	r3, [r3, #0]
10000e46:	0018      	movs	r0, r3
10000e48:	e000      	b.n	10000e4c <cdcd_xfer_cb+0x130>
10000e4a:	bf00      	nop
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
10000e4c:	693b      	ldr	r3, [r7, #16]
10000e4e:	0018      	movs	r0, r3
10000e50:	f7ff faf1 	bl	10000436 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
10000e54:	693b      	ldr	r3, [r7, #16]
10000e56:	789b      	ldrb	r3, [r3, #2]
10000e58:	1dba      	adds	r2, r7, #6
10000e5a:	7812      	ldrb	r2, [r2, #0]
10000e5c:	429a      	cmp	r2, r3
10000e5e:	d130      	bne.n	10000ec2 <cdcd_xfer_cb+0x1a6>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
10000e60:	4b1f      	ldr	r3, [pc, #124]	; (10000ee0 <cdcd_xfer_cb+0x1c4>)
10000e62:	2b00      	cmp	r3, #0
10000e64:	d005      	beq.n	10000e72 <cdcd_xfer_cb+0x156>
10000e66:	2317      	movs	r3, #23
10000e68:	18fb      	adds	r3, r7, r3
10000e6a:	781b      	ldrb	r3, [r3, #0]
10000e6c:	0018      	movs	r0, r3
10000e6e:	e000      	b.n	10000e72 <cdcd_xfer_cb+0x156>
10000e70:	bf00      	nop

    if ( 0 == tud_cdc_n_write_flush(itf) )
10000e72:	2317      	movs	r3, #23
10000e74:	18fb      	adds	r3, r7, r3
10000e76:	781b      	ldrb	r3, [r3, #0]
10000e78:	0018      	movs	r0, r3
10000e7a:	f7ff fbe1 	bl	10000640 <tud_cdc_n_write_flush>
10000e7e:	1e03      	subs	r3, r0, #0
10000e80:	d11f      	bne.n	10000ec2 <cdcd_xfer_cb+0x1a6>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
10000e82:	693b      	ldr	r3, [r7, #16]
10000e84:	332c      	adds	r3, #44	; 0x2c
10000e86:	0018      	movs	r0, r3
10000e88:	f001 f93a 	bl	10002100 <tu_fifo_count>
10000e8c:	1e03      	subs	r3, r0, #0
10000e8e:	d118      	bne.n	10000ec2 <cdcd_xfer_cb+0x1a6>
10000e90:	683b      	ldr	r3, [r7, #0]
10000e92:	2b00      	cmp	r3, #0
10000e94:	d015      	beq.n	10000ec2 <cdcd_xfer_cb+0x1a6>
10000e96:	683b      	ldr	r3, [r7, #0]
10000e98:	223f      	movs	r2, #63	; 0x3f
10000e9a:	4013      	ands	r3, r2
10000e9c:	d111      	bne.n	10000ec2 <cdcd_xfer_cb+0x1a6>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10000e9e:	693b      	ldr	r3, [r7, #16]
10000ea0:	789a      	ldrb	r2, [r3, #2]
10000ea2:	1dfb      	adds	r3, r7, #7
10000ea4:	781b      	ldrb	r3, [r3, #0]
10000ea6:	0011      	movs	r1, r2
10000ea8:	0018      	movs	r0, r3
10000eaa:	f002 fd13 	bl	100038d4 <usbd_edpt_claim>
10000eae:	1e03      	subs	r3, r0, #0
10000eb0:	d007      	beq.n	10000ec2 <cdcd_xfer_cb+0x1a6>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
10000eb2:	693b      	ldr	r3, [r7, #16]
10000eb4:	7899      	ldrb	r1, [r3, #2]
10000eb6:	1dfb      	adds	r3, r7, #7
10000eb8:	7818      	ldrb	r0, [r3, #0]
10000eba:	2300      	movs	r3, #0
10000ebc:	2200      	movs	r2, #0
10000ebe:	f002 fe1d 	bl	10003afc <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
10000ec2:	2301      	movs	r3, #1
}
10000ec4:	0018      	movs	r0, r3
10000ec6:	46bd      	mov	sp, r7
10000ec8:	b007      	add	sp, #28
10000eca:	bd90      	pop	{r4, r7, pc}
10000ecc:	20000870 	.word	0x20000870
10000ed0:	1000d094 	.word	0x1000d094
10000ed4:	1000d058 	.word	0x1000d058
	...

10000ee4 <tu_desc_next>:
{
10000ee4:	b580      	push	{r7, lr}
10000ee6:	b084      	sub	sp, #16
10000ee8:	af00      	add	r7, sp, #0
10000eea:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
10000eec:	687b      	ldr	r3, [r7, #4]
10000eee:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
10000ef0:	68fb      	ldr	r3, [r7, #12]
10000ef2:	781b      	ldrb	r3, [r3, #0]
10000ef4:	001a      	movs	r2, r3
10000ef6:	68fb      	ldr	r3, [r7, #12]
10000ef8:	189b      	adds	r3, r3, r2
}
10000efa:	0018      	movs	r0, r3
10000efc:	46bd      	mov	sp, r7
10000efe:	b004      	add	sp, #16
10000f00:	bd80      	pop	{r7, pc}

10000f02 <tu_desc_type>:
{
10000f02:	b580      	push	{r7, lr}
10000f04:	b082      	sub	sp, #8
10000f06:	af00      	add	r7, sp, #0
10000f08:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10000f0a:	687b      	ldr	r3, [r7, #4]
10000f0c:	3301      	adds	r3, #1
10000f0e:	781b      	ldrb	r3, [r3, #0]
}
10000f10:	0018      	movs	r0, r3
10000f12:	46bd      	mov	sp, r7
10000f14:	b002      	add	sp, #8
10000f16:	bd80      	pop	{r7, pc}

10000f18 <osal_mutex_create>:
{
10000f18:	b580      	push	{r7, lr}
10000f1a:	b082      	sub	sp, #8
10000f1c:	af00      	add	r7, sp, #0
10000f1e:	6078      	str	r0, [r7, #4]
    mutex_init(mdef);
10000f20:	687b      	ldr	r3, [r7, #4]
10000f22:	0018      	movs	r0, r3
10000f24:	f004 fb4d 	bl	100055c2 <mutex_init>
    return mdef;
10000f28:	687b      	ldr	r3, [r7, #4]
}
10000f2a:	0018      	movs	r0, r3
10000f2c:	46bd      	mov	sp, r7
10000f2e:	b002      	add	sp, #8
10000f30:	bd80      	pop	{r7, pc}
	...

10000f34 <tud_vendor_n_available>:
{
  return _vendord_itf[itf].ep_in && _vendord_itf[itf].ep_out;
}

uint32_t tud_vendor_n_available (uint8_t itf)
{
10000f34:	b580      	push	{r7, lr}
10000f36:	b082      	sub	sp, #8
10000f38:	af00      	add	r7, sp, #0
10000f3a:	0002      	movs	r2, r0
10000f3c:	1dfb      	adds	r3, r7, #7
10000f3e:	701a      	strb	r2, [r3, #0]
  return tu_fifo_count(&_vendord_itf[itf].rx_ff);
10000f40:	1dfb      	adds	r3, r7, #7
10000f42:	781b      	ldrb	r3, [r3, #0]
10000f44:	4a06      	ldr	r2, [pc, #24]	; (10000f60 <tud_vendor_n_available+0x2c>)
10000f46:	435a      	muls	r2, r3
10000f48:	4b06      	ldr	r3, [pc, #24]	; (10000f64 <tud_vendor_n_available+0x30>)
10000f4a:	18d3      	adds	r3, r2, r3
10000f4c:	3304      	adds	r3, #4
10000f4e:	0018      	movs	r0, r3
10000f50:	f001 f8d6 	bl	10002100 <tu_fifo_count>
10000f54:	0003      	movs	r3, r0
}
10000f56:	0018      	movs	r0, r3
10000f58:	46bd      	mov	sp, r7
10000f5a:	b002      	add	sp, #8
10000f5c:	bd80      	pop	{r7, pc}
10000f5e:	46c0      	nop			; (mov r8, r8)
10000f60:	000040cc 	.word	0x000040cc
10000f64:	20000b88 	.word	0x20000b88

10000f68 <_prep_out_transaction>:

//--------------------------------------------------------------------+
// Read API
//--------------------------------------------------------------------+
static void _prep_out_transaction (vendord_interface_t* p_itf)
{
10000f68:	b5b0      	push	{r4, r5, r7, lr}
10000f6a:	b084      	sub	sp, #16
10000f6c:	af00      	add	r7, sp, #0
10000f6e:	6078      	str	r0, [r7, #4]
  // skip if previous transfer not complete
  if ( usbd_edpt_busy(TUD_OPT_RHPORT, p_itf->ep_out) ) return;
10000f70:	687b      	ldr	r3, [r7, #4]
10000f72:	789b      	ldrb	r3, [r3, #2]
10000f74:	0019      	movs	r1, r3
10000f76:	2000      	movs	r0, #0
10000f78:	f002 fe44 	bl	10003c04 <usbd_edpt_busy>
10000f7c:	1e03      	subs	r3, r0, #0
10000f7e:	d116      	bne.n	10000fae <_prep_out_transaction+0x46>

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
10000f80:	687b      	ldr	r3, [r7, #4]
10000f82:	3304      	adds	r3, #4
10000f84:	250e      	movs	r5, #14
10000f86:	197c      	adds	r4, r7, r5
10000f88:	0018      	movs	r0, r3
10000f8a:	f001 f8f2 	bl	10002172 <tu_fifo_remaining>
10000f8e:	0003      	movs	r3, r0
10000f90:	8023      	strh	r3, [r4, #0]
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
10000f92:	197b      	adds	r3, r7, r5
10000f94:	881b      	ldrh	r3, [r3, #0]
10000f96:	2b3f      	cmp	r3, #63	; 0x3f
10000f98:	d90a      	bls.n	10000fb0 <_prep_out_transaction+0x48>
  {
    usbd_edpt_xfer(TUD_OPT_RHPORT, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
10000f9a:	687b      	ldr	r3, [r7, #4]
10000f9c:	7899      	ldrb	r1, [r3, #2]
10000f9e:	687b      	ldr	r3, [r7, #4]
10000fa0:	4a05      	ldr	r2, [pc, #20]	; (10000fb8 <_prep_out_transaction+0x50>)
10000fa2:	189a      	adds	r2, r3, r2
10000fa4:	2340      	movs	r3, #64	; 0x40
10000fa6:	2000      	movs	r0, #0
10000fa8:	f002 fda8 	bl	10003afc <usbd_edpt_xfer>
10000fac:	e000      	b.n	10000fb0 <_prep_out_transaction+0x48>
  if ( usbd_edpt_busy(TUD_OPT_RHPORT, p_itf->ep_out) ) return;
10000fae:	46c0      	nop			; (mov r8, r8)
  }
}
10000fb0:	46bd      	mov	sp, r7
10000fb2:	b004      	add	sp, #16
10000fb4:	bdb0      	pop	{r4, r5, r7, pc}
10000fb6:	46c0      	nop			; (mov r8, r8)
10000fb8:	0000404c 	.word	0x0000404c

10000fbc <tud_vendor_n_read>:

uint32_t tud_vendor_n_read (uint8_t itf, void* buffer, uint32_t bufsize)
{
10000fbc:	b580      	push	{r7, lr}
10000fbe:	b086      	sub	sp, #24
10000fc0:	af00      	add	r7, sp, #0
10000fc2:	60b9      	str	r1, [r7, #8]
10000fc4:	607a      	str	r2, [r7, #4]
10000fc6:	210f      	movs	r1, #15
10000fc8:	187b      	adds	r3, r7, r1
10000fca:	1c02      	adds	r2, r0, #0
10000fcc:	701a      	strb	r2, [r3, #0]
  vendord_interface_t* p_itf = &_vendord_itf[itf];
10000fce:	187b      	adds	r3, r7, r1
10000fd0:	781b      	ldrb	r3, [r3, #0]
10000fd2:	4a0c      	ldr	r2, [pc, #48]	; (10001004 <tud_vendor_n_read+0x48>)
10000fd4:	435a      	muls	r2, r3
10000fd6:	4b0c      	ldr	r3, [pc, #48]	; (10001008 <tud_vendor_n_read+0x4c>)
10000fd8:	18d3      	adds	r3, r2, r3
10000fda:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, bufsize);
10000fdc:	697b      	ldr	r3, [r7, #20]
10000fde:	3304      	adds	r3, #4
10000fe0:	687a      	ldr	r2, [r7, #4]
10000fe2:	b292      	uxth	r2, r2
10000fe4:	68b9      	ldr	r1, [r7, #8]
10000fe6:	0018      	movs	r0, r3
10000fe8:	f001 f908 	bl	100021fc <tu_fifo_read_n>
10000fec:	0003      	movs	r3, r0
10000fee:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_itf);
10000ff0:	697b      	ldr	r3, [r7, #20]
10000ff2:	0018      	movs	r0, r3
10000ff4:	f7ff ffb8 	bl	10000f68 <_prep_out_transaction>
  return num_read;
10000ff8:	693b      	ldr	r3, [r7, #16]
}
10000ffa:	0018      	movs	r0, r3
10000ffc:	46bd      	mov	sp, r7
10000ffe:	b006      	add	sp, #24
10001000:	bd80      	pop	{r7, pc}
10001002:	46c0      	nop			; (mov r8, r8)
10001004:	000040cc 	.word	0x000040cc
10001008:	20000b88 	.word	0x20000b88

1000100c <maybe_transmit>:

//--------------------------------------------------------------------+
// Write API
//--------------------------------------------------------------------+
static bool maybe_transmit(vendord_interface_t* p_itf)
{
1000100c:	b5b0      	push	{r4, r5, r7, lr}
1000100e:	b084      	sub	sp, #16
10001010:	af00      	add	r7, sp, #0
10001012:	6078      	str	r0, [r7, #4]
  // skip if previous transfer not complete
  TU_VERIFY( !usbd_edpt_busy(TUD_OPT_RHPORT, p_itf->ep_in) );
10001014:	687b      	ldr	r3, [r7, #4]
10001016:	785b      	ldrb	r3, [r3, #1]
10001018:	0019      	movs	r1, r3
1000101a:	2000      	movs	r0, #0
1000101c:	f002 fdf2 	bl	10003c04 <usbd_edpt_busy>
10001020:	1e03      	subs	r3, r0, #0
10001022:	d001      	beq.n	10001028 <maybe_transmit+0x1c>
10001024:	2300      	movs	r3, #0
10001026:	e02d      	b.n	10001084 <maybe_transmit+0x78>

  uint16_t count = tu_fifo_read_n(&p_itf->tx_ff, p_itf->epin_buf, CFG_TUD_VENDOR_EPSIZE);
10001028:	687b      	ldr	r3, [r7, #4]
1000102a:	3320      	adds	r3, #32
1000102c:	0018      	movs	r0, r3
1000102e:	687b      	ldr	r3, [r7, #4]
10001030:	4a16      	ldr	r2, [pc, #88]	; (1000108c <maybe_transmit+0x80>)
10001032:	4694      	mov	ip, r2
10001034:	4463      	add	r3, ip
10001036:	250e      	movs	r5, #14
10001038:	197c      	adds	r4, r7, r5
1000103a:	2240      	movs	r2, #64	; 0x40
1000103c:	0019      	movs	r1, r3
1000103e:	f001 f8dd 	bl	100021fc <tu_fifo_read_n>
10001042:	0003      	movs	r3, r0
10001044:	8023      	strh	r3, [r4, #0]
  if (count > 0)
10001046:	0028      	movs	r0, r5
10001048:	183b      	adds	r3, r7, r0
1000104a:	881b      	ldrh	r3, [r3, #0]
1000104c:	2b00      	cmp	r3, #0
1000104e:	d018      	beq.n	10001082 <maybe_transmit+0x76>
  {
    TU_ASSERT( usbd_edpt_xfer(TUD_OPT_RHPORT, p_itf->ep_in, p_itf->epin_buf, count) );
10001050:	687b      	ldr	r3, [r7, #4]
10001052:	7859      	ldrb	r1, [r3, #1]
10001054:	687b      	ldr	r3, [r7, #4]
10001056:	4a0d      	ldr	r2, [pc, #52]	; (1000108c <maybe_transmit+0x80>)
10001058:	189a      	adds	r2, r3, r2
1000105a:	183b      	adds	r3, r7, r0
1000105c:	881b      	ldrh	r3, [r3, #0]
1000105e:	2000      	movs	r0, #0
10001060:	f002 fd4c 	bl	10003afc <usbd_edpt_xfer>
10001064:	0003      	movs	r3, r0
10001066:	001a      	movs	r2, r3
10001068:	2301      	movs	r3, #1
1000106a:	4053      	eors	r3, r2
1000106c:	b2db      	uxtb	r3, r3
1000106e:	2b00      	cmp	r3, #0
10001070:	d007      	beq.n	10001082 <maybe_transmit+0x76>
10001072:	4907      	ldr	r1, [pc, #28]	; (10001090 <maybe_transmit+0x84>)
10001074:	4b07      	ldr	r3, [pc, #28]	; (10001094 <maybe_transmit+0x88>)
10001076:	227c      	movs	r2, #124	; 0x7c
10001078:	0018      	movs	r0, r3
1000107a:	f00a f8b1 	bl	1000b1e0 <__wrap_printf>
1000107e:	2300      	movs	r3, #0
10001080:	e000      	b.n	10001084 <maybe_transmit+0x78>
  }
  return true;
10001082:	2301      	movs	r3, #1
}
10001084:	0018      	movs	r0, r3
10001086:	46bd      	mov	sp, r7
10001088:	b004      	add	sp, #16
1000108a:	bdb0      	pop	{r4, r5, r7, pc}
1000108c:	0000408c 	.word	0x0000408c
10001090:	1000d0bc 	.word	0x1000d0bc
10001094:	1000d0a4 	.word	0x1000d0a4

10001098 <tud_vendor_n_write>:

uint32_t tud_vendor_n_write (uint8_t itf, void const* buffer, uint32_t bufsize)
{
10001098:	b5b0      	push	{r4, r5, r7, lr}
1000109a:	b086      	sub	sp, #24
1000109c:	af00      	add	r7, sp, #0
1000109e:	60b9      	str	r1, [r7, #8]
100010a0:	607a      	str	r2, [r7, #4]
100010a2:	210f      	movs	r1, #15
100010a4:	187b      	adds	r3, r7, r1
100010a6:	1c02      	adds	r2, r0, #0
100010a8:	701a      	strb	r2, [r3, #0]
  vendord_interface_t* p_itf = &_vendord_itf[itf];
100010aa:	187b      	adds	r3, r7, r1
100010ac:	781b      	ldrb	r3, [r3, #0]
100010ae:	4a0d      	ldr	r2, [pc, #52]	; (100010e4 <tud_vendor_n_write+0x4c>)
100010b0:	435a      	muls	r2, r3
100010b2:	4b0d      	ldr	r3, [pc, #52]	; (100010e8 <tud_vendor_n_write+0x50>)
100010b4:	18d3      	adds	r3, r2, r3
100010b6:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_itf->tx_ff, buffer, bufsize);
100010b8:	697b      	ldr	r3, [r7, #20]
100010ba:	3320      	adds	r3, #32
100010bc:	687a      	ldr	r2, [r7, #4]
100010be:	b292      	uxth	r2, r2
100010c0:	2512      	movs	r5, #18
100010c2:	197c      	adds	r4, r7, r5
100010c4:	68b9      	ldr	r1, [r7, #8]
100010c6:	0018      	movs	r0, r3
100010c8:	f001 f8f6 	bl	100022b8 <tu_fifo_write_n>
100010cc:	0003      	movs	r3, r0
100010ce:	8023      	strh	r3, [r4, #0]
  maybe_transmit(p_itf);
100010d0:	697b      	ldr	r3, [r7, #20]
100010d2:	0018      	movs	r0, r3
100010d4:	f7ff ff9a 	bl	1000100c <maybe_transmit>
  return ret;
100010d8:	197b      	adds	r3, r7, r5
100010da:	881b      	ldrh	r3, [r3, #0]
}
100010dc:	0018      	movs	r0, r3
100010de:	46bd      	mov	sp, r7
100010e0:	b006      	add	sp, #24
100010e2:	bdb0      	pop	{r4, r5, r7, pc}
100010e4:	000040cc 	.word	0x000040cc
100010e8:	20000b88 	.word	0x20000b88

100010ec <vendord_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void)
{
100010ec:	b5b0      	push	{r4, r5, r7, lr}
100010ee:	b08a      	sub	sp, #40	; 0x28
100010f0:	af02      	add	r7, sp, #8
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
100010f2:	4a33      	ldr	r2, [pc, #204]	; (100011c0 <vendord_init+0xd4>)
100010f4:	4b33      	ldr	r3, [pc, #204]	; (100011c4 <vendord_init+0xd8>)
100010f6:	2100      	movs	r1, #0
100010f8:	0018      	movs	r0, r3
100010fa:	f00b ff2d 	bl	1000cf58 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
100010fe:	231f      	movs	r3, #31
10001100:	18fb      	adds	r3, r7, r3
10001102:	2200      	movs	r2, #0
10001104:	701a      	strb	r2, [r3, #0]
10001106:	e050      	b.n	100011aa <vendord_init+0xbe>
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];
10001108:	251f      	movs	r5, #31
1000110a:	197b      	adds	r3, r7, r5
1000110c:	781b      	ldrb	r3, [r3, #0]
1000110e:	4a2c      	ldr	r2, [pc, #176]	; (100011c0 <vendord_init+0xd4>)
10001110:	435a      	muls	r2, r3
10001112:	4b2c      	ldr	r3, [pc, #176]	; (100011c4 <vendord_init+0xd8>)
10001114:	18d3      	adds	r3, r2, r3
10001116:	61bb      	str	r3, [r7, #24]

    // config fifo
    tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
10001118:	69bb      	ldr	r3, [r7, #24]
1000111a:	1d18      	adds	r0, r3, #4
1000111c:	69bb      	ldr	r3, [r7, #24]
1000111e:	333c      	adds	r3, #60	; 0x3c
10001120:	0019      	movs	r1, r3
10001122:	2380      	movs	r3, #128	; 0x80
10001124:	019a      	lsls	r2, r3, #6
10001126:	2300      	movs	r3, #0
10001128:	9300      	str	r3, [sp, #0]
1000112a:	2301      	movs	r3, #1
1000112c:	f000 f9fc 	bl	10001528 <tu_fifo_config>
    tu_fifo_config(&p_itf->tx_ff, p_itf->tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE, 1, false);
10001130:	69bb      	ldr	r3, [r7, #24]
10001132:	3320      	adds	r3, #32
10001134:	0018      	movs	r0, r3
10001136:	69bb      	ldr	r3, [r7, #24]
10001138:	4a23      	ldr	r2, [pc, #140]	; (100011c8 <vendord_init+0xdc>)
1000113a:	1899      	adds	r1, r3, r2
1000113c:	2380      	movs	r3, #128	; 0x80
1000113e:	019a      	lsls	r2, r3, #6
10001140:	2300      	movs	r3, #0
10001142:	9300      	str	r3, [sp, #0]
10001144:	2301      	movs	r3, #1
10001146:	f000 f9ef 	bl	10001528 <tu_fifo_config>

#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_itf->rx_ff, NULL, osal_mutex_create(&p_itf->rx_ff_mutex));
1000114a:	69bb      	ldr	r3, [r7, #24]
1000114c:	1d1c      	adds	r4, r3, #4
1000114e:	69bb      	ldr	r3, [r7, #24]
10001150:	4a1e      	ldr	r2, [pc, #120]	; (100011cc <vendord_init+0xe0>)
10001152:	4694      	mov	ip, r2
10001154:	4463      	add	r3, ip
10001156:	0018      	movs	r0, r3
10001158:	f7ff fede 	bl	10000f18 <osal_mutex_create>
1000115c:	0003      	movs	r3, r0
1000115e:	60bc      	str	r4, [r7, #8]
10001160:	2200      	movs	r2, #0
10001162:	607a      	str	r2, [r7, #4]
10001164:	603b      	str	r3, [r7, #0]
  f->mutex_wr = write_mutex_hdl;
10001166:	68bb      	ldr	r3, [r7, #8]
10001168:	687a      	ldr	r2, [r7, #4]
1000116a:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
1000116c:	68bb      	ldr	r3, [r7, #8]
1000116e:	683a      	ldr	r2, [r7, #0]
10001170:	619a      	str	r2, [r3, #24]
}
10001172:	46c0      	nop			; (mov r8, r8)
    tu_fifo_config_mutex(&p_itf->tx_ff, osal_mutex_create(&p_itf->tx_ff_mutex), NULL);
10001174:	69bb      	ldr	r3, [r7, #24]
10001176:	3320      	adds	r3, #32
10001178:	001c      	movs	r4, r3
1000117a:	69bb      	ldr	r3, [r7, #24]
1000117c:	4a14      	ldr	r2, [pc, #80]	; (100011d0 <vendord_init+0xe4>)
1000117e:	4694      	mov	ip, r2
10001180:	4463      	add	r3, ip
10001182:	0018      	movs	r0, r3
10001184:	f7ff fec8 	bl	10000f18 <osal_mutex_create>
10001188:	0003      	movs	r3, r0
1000118a:	617c      	str	r4, [r7, #20]
1000118c:	613b      	str	r3, [r7, #16]
1000118e:	2300      	movs	r3, #0
10001190:	60fb      	str	r3, [r7, #12]
  f->mutex_wr = write_mutex_hdl;
10001192:	697b      	ldr	r3, [r7, #20]
10001194:	693a      	ldr	r2, [r7, #16]
10001196:	615a      	str	r2, [r3, #20]
  f->mutex_rd = read_mutex_hdl;
10001198:	697b      	ldr	r3, [r7, #20]
1000119a:	68fa      	ldr	r2, [r7, #12]
1000119c:	619a      	str	r2, [r3, #24]
}
1000119e:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
100011a0:	197b      	adds	r3, r7, r5
100011a2:	781a      	ldrb	r2, [r3, #0]
100011a4:	197b      	adds	r3, r7, r5
100011a6:	3201      	adds	r2, #1
100011a8:	701a      	strb	r2, [r3, #0]
100011aa:	231f      	movs	r3, #31
100011ac:	18fb      	adds	r3, r7, r3
100011ae:	781b      	ldrb	r3, [r3, #0]
100011b0:	2b00      	cmp	r3, #0
100011b2:	d0a9      	beq.n	10001108 <vendord_init+0x1c>
#endif
  }
}
100011b4:	46c0      	nop			; (mov r8, r8)
100011b6:	46c0      	nop			; (mov r8, r8)
100011b8:	46bd      	mov	sp, r7
100011ba:	b008      	add	sp, #32
100011bc:	bdb0      	pop	{r4, r5, r7, pc}
100011be:	46c0      	nop			; (mov r8, r8)
100011c0:	000040cc 	.word	0x000040cc
100011c4:	20000b88 	.word	0x20000b88
100011c8:	0000203c 	.word	0x0000203c
100011cc:	0000403c 	.word	0x0000403c
100011d0:	00004044 	.word	0x00004044

100011d4 <vendord_reset>:

void vendord_reset(uint8_t rhport)
{
100011d4:	b590      	push	{r4, r7, lr}
100011d6:	b085      	sub	sp, #20
100011d8:	af00      	add	r7, sp, #0
100011da:	0002      	movs	r2, r0
100011dc:	1dfb      	adds	r3, r7, #7
100011de:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
100011e0:	230f      	movs	r3, #15
100011e2:	18fb      	adds	r3, r7, r3
100011e4:	2200      	movs	r2, #0
100011e6:	701a      	strb	r2, [r3, #0]
100011e8:	e01c      	b.n	10001224 <vendord_reset+0x50>
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];
100011ea:	240f      	movs	r4, #15
100011ec:	193b      	adds	r3, r7, r4
100011ee:	781b      	ldrb	r3, [r3, #0]
100011f0:	4a11      	ldr	r2, [pc, #68]	; (10001238 <vendord_reset+0x64>)
100011f2:	435a      	muls	r2, r3
100011f4:	4b11      	ldr	r3, [pc, #68]	; (1000123c <vendord_reset+0x68>)
100011f6:	18d3      	adds	r3, r2, r3
100011f8:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
100011fa:	68bb      	ldr	r3, [r7, #8]
100011fc:	2204      	movs	r2, #4
100011fe:	2100      	movs	r1, #0
10001200:	0018      	movs	r0, r3
10001202:	f00b fea9 	bl	1000cf58 <__wrap_memset>
    tu_fifo_clear(&p_itf->rx_ff);
10001206:	68bb      	ldr	r3, [r7, #8]
10001208:	3304      	adds	r3, #4
1000120a:	0018      	movs	r0, r3
1000120c:	f001 f867 	bl	100022de <tu_fifo_clear>
    tu_fifo_clear(&p_itf->tx_ff);
10001210:	68bb      	ldr	r3, [r7, #8]
10001212:	3320      	adds	r3, #32
10001214:	0018      	movs	r0, r3
10001216:	f001 f862 	bl	100022de <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
1000121a:	193b      	adds	r3, r7, r4
1000121c:	781a      	ldrb	r2, [r3, #0]
1000121e:	193b      	adds	r3, r7, r4
10001220:	3201      	adds	r2, #1
10001222:	701a      	strb	r2, [r3, #0]
10001224:	230f      	movs	r3, #15
10001226:	18fb      	adds	r3, r7, r3
10001228:	781b      	ldrb	r3, [r3, #0]
1000122a:	2b00      	cmp	r3, #0
1000122c:	d0dd      	beq.n	100011ea <vendord_reset+0x16>
  }
}
1000122e:	46c0      	nop			; (mov r8, r8)
10001230:	46c0      	nop			; (mov r8, r8)
10001232:	46bd      	mov	sp, r7
10001234:	b005      	add	sp, #20
10001236:	bd90      	pop	{r4, r7, pc}
10001238:	000040cc 	.word	0x000040cc
1000123c:	20000b88 	.word	0x20000b88

10001240 <vendord_open>:

uint16_t vendord_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
{
10001240:	b5b0      	push	{r4, r5, r7, lr}
10001242:	b088      	sub	sp, #32
10001244:	af02      	add	r7, sp, #8
10001246:	6039      	str	r1, [r7, #0]
10001248:	0011      	movs	r1, r2
1000124a:	1dfb      	adds	r3, r7, #7
1000124c:	1c02      	adds	r2, r0, #0
1000124e:	701a      	strb	r2, [r3, #0]
10001250:	1d3b      	adds	r3, r7, #4
10001252:	1c0a      	adds	r2, r1, #0
10001254:	801a      	strh	r2, [r3, #0]
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
10001256:	683b      	ldr	r3, [r7, #0]
10001258:	795b      	ldrb	r3, [r3, #5]
1000125a:	2bff      	cmp	r3, #255	; 0xff
1000125c:	d001      	beq.n	10001262 <vendord_open+0x22>
1000125e:	2300      	movs	r3, #0
10001260:	e0a9      	b.n	100013b6 <vendord_open+0x176>

  uint8_t const * p_desc = tu_desc_next(desc_itf);
10001262:	683b      	ldr	r3, [r7, #0]
10001264:	0018      	movs	r0, r3
10001266:	f7ff fe3d 	bl	10000ee4 <tu_desc_next>
1000126a:	0003      	movs	r3, r0
1000126c:	617b      	str	r3, [r7, #20]
  uint8_t const * desc_end = p_desc + max_len;
1000126e:	1d3b      	adds	r3, r7, #4
10001270:	881b      	ldrh	r3, [r3, #0]
10001272:	697a      	ldr	r2, [r7, #20]
10001274:	18d3      	adds	r3, r2, r3
10001276:	60bb      	str	r3, [r7, #8]

  // Find available interface
  vendord_interface_t* p_vendor = NULL;
10001278:	2300      	movs	r3, #0
1000127a:	613b      	str	r3, [r7, #16]
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
1000127c:	230f      	movs	r3, #15
1000127e:	18fb      	adds	r3, r7, r3
10001280:	2200      	movs	r2, #0
10001282:	701a      	strb	r2, [r3, #0]
10001284:	e022      	b.n	100012cc <vendord_open+0x8c>
  {
    if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
10001286:	200f      	movs	r0, #15
10001288:	183b      	adds	r3, r7, r0
1000128a:	781b      	ldrb	r3, [r3, #0]
1000128c:	4a4c      	ldr	r2, [pc, #304]	; (100013c0 <vendord_open+0x180>)
1000128e:	494d      	ldr	r1, [pc, #308]	; (100013c4 <vendord_open+0x184>)
10001290:	434b      	muls	r3, r1
10001292:	18d3      	adds	r3, r2, r3
10001294:	3301      	adds	r3, #1
10001296:	781b      	ldrb	r3, [r3, #0]
10001298:	2b00      	cmp	r3, #0
1000129a:	d111      	bne.n	100012c0 <vendord_open+0x80>
1000129c:	183b      	adds	r3, r7, r0
1000129e:	781b      	ldrb	r3, [r3, #0]
100012a0:	4a47      	ldr	r2, [pc, #284]	; (100013c0 <vendord_open+0x180>)
100012a2:	4948      	ldr	r1, [pc, #288]	; (100013c4 <vendord_open+0x184>)
100012a4:	434b      	muls	r3, r1
100012a6:	18d3      	adds	r3, r2, r3
100012a8:	3302      	adds	r3, #2
100012aa:	781b      	ldrb	r3, [r3, #0]
100012ac:	2b00      	cmp	r3, #0
100012ae:	d107      	bne.n	100012c0 <vendord_open+0x80>
    {
      p_vendor = &_vendord_itf[i];
100012b0:	183b      	adds	r3, r7, r0
100012b2:	781b      	ldrb	r3, [r3, #0]
100012b4:	4a43      	ldr	r2, [pc, #268]	; (100013c4 <vendord_open+0x184>)
100012b6:	435a      	muls	r2, r3
100012b8:	4b41      	ldr	r3, [pc, #260]	; (100013c0 <vendord_open+0x180>)
100012ba:	18d3      	adds	r3, r2, r3
100012bc:	613b      	str	r3, [r7, #16]
      break;
100012be:	e00a      	b.n	100012d6 <vendord_open+0x96>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
100012c0:	210f      	movs	r1, #15
100012c2:	187b      	adds	r3, r7, r1
100012c4:	781a      	ldrb	r2, [r3, #0]
100012c6:	187b      	adds	r3, r7, r1
100012c8:	3201      	adds	r2, #1
100012ca:	701a      	strb	r2, [r3, #0]
100012cc:	230f      	movs	r3, #15
100012ce:	18fb      	adds	r3, r7, r3
100012d0:	781b      	ldrb	r3, [r3, #0]
100012d2:	2b00      	cmp	r3, #0
100012d4:	d0d7      	beq.n	10001286 <vendord_open+0x46>
    }
  }
  TU_VERIFY(p_vendor, 0);
100012d6:	693b      	ldr	r3, [r7, #16]
100012d8:	2b00      	cmp	r3, #0
100012da:	d101      	bne.n	100012e0 <vendord_open+0xa0>
100012dc:	2300      	movs	r3, #0
100012de:	e06a      	b.n	100013b6 <vendord_open+0x176>

  p_vendor->itf_num = desc_itf->bInterfaceNumber;
100012e0:	683b      	ldr	r3, [r7, #0]
100012e2:	789a      	ldrb	r2, [r3, #2]
100012e4:	693b      	ldr	r3, [r7, #16]
100012e6:	701a      	strb	r2, [r3, #0]
  if (desc_itf->bNumEndpoints)
100012e8:	683b      	ldr	r3, [r7, #0]
100012ea:	791b      	ldrb	r3, [r3, #4]
100012ec:	2b00      	cmp	r3, #0
100012ee:	d05e      	beq.n	100013ae <vendord_open+0x16e>
  {
    // skip non-endpoint descriptors
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
100012f0:	e005      	b.n	100012fe <vendord_open+0xbe>
    {
      p_desc = tu_desc_next(p_desc);
100012f2:	697b      	ldr	r3, [r7, #20]
100012f4:	0018      	movs	r0, r3
100012f6:	f7ff fdf5 	bl	10000ee4 <tu_desc_next>
100012fa:	0003      	movs	r3, r0
100012fc:	617b      	str	r3, [r7, #20]
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
100012fe:	697b      	ldr	r3, [r7, #20]
10001300:	0018      	movs	r0, r3
10001302:	f7ff fdfe 	bl	10000f02 <tu_desc_type>
10001306:	0003      	movs	r3, r0
10001308:	2b05      	cmp	r3, #5
1000130a:	d003      	beq.n	10001314 <vendord_open+0xd4>
1000130c:	697a      	ldr	r2, [r7, #20]
1000130e:	68bb      	ldr	r3, [r7, #8]
10001310:	429a      	cmp	r2, r3
10001312:	d3ee      	bcc.n	100012f2 <vendord_open+0xb2>
    }

    // Open endpoint pair with usbd helper
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
10001314:	683b      	ldr	r3, [r7, #0]
10001316:	791d      	ldrb	r5, [r3, #4]
10001318:	693b      	ldr	r3, [r7, #16]
1000131a:	3302      	adds	r3, #2
1000131c:	693a      	ldr	r2, [r7, #16]
1000131e:	3201      	adds	r2, #1
10001320:	697c      	ldr	r4, [r7, #20]
10001322:	1df9      	adds	r1, r7, #7
10001324:	7808      	ldrb	r0, [r1, #0]
10001326:	9201      	str	r2, [sp, #4]
10001328:	9300      	str	r3, [sp, #0]
1000132a:	2302      	movs	r3, #2
1000132c:	002a      	movs	r2, r5
1000132e:	0021      	movs	r1, r4
10001330:	f002 fa1e 	bl	10003770 <usbd_open_edpt_pair>
10001334:	0003      	movs	r3, r0
10001336:	001a      	movs	r2, r3
10001338:	2301      	movs	r3, #1
1000133a:	4053      	eors	r3, r2
1000133c:	b2db      	uxtb	r3, r3
1000133e:	2b00      	cmp	r3, #0
10001340:	d007      	beq.n	10001352 <vendord_open+0x112>
10001342:	4921      	ldr	r1, [pc, #132]	; (100013c8 <vendord_open+0x188>)
10001344:	4b21      	ldr	r3, [pc, #132]	; (100013cc <vendord_open+0x18c>)
10001346:	22cf      	movs	r2, #207	; 0xcf
10001348:	0018      	movs	r0, r3
1000134a:	f009 ff49 	bl	1000b1e0 <__wrap_printf>
1000134e:	2300      	movs	r3, #0
10001350:	e031      	b.n	100013b6 <vendord_open+0x176>

    p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
10001352:	683b      	ldr	r3, [r7, #0]
10001354:	791b      	ldrb	r3, [r3, #4]
10001356:	001a      	movs	r2, r3
10001358:	0013      	movs	r3, r2
1000135a:	00db      	lsls	r3, r3, #3
1000135c:	1a9b      	subs	r3, r3, r2
1000135e:	697a      	ldr	r2, [r7, #20]
10001360:	18d3      	adds	r3, r2, r3
10001362:	617b      	str	r3, [r7, #20]

    // Prepare for incoming data
    if ( p_vendor->ep_out )
10001364:	693b      	ldr	r3, [r7, #16]
10001366:	789b      	ldrb	r3, [r3, #2]
10001368:	2b00      	cmp	r3, #0
1000136a:	d018      	beq.n	1000139e <vendord_open+0x15e>
    {
      TU_ASSERT(usbd_edpt_xfer(rhport, p_vendor->ep_out, p_vendor->epout_buf, sizeof(p_vendor->epout_buf)), 0);
1000136c:	693b      	ldr	r3, [r7, #16]
1000136e:	7899      	ldrb	r1, [r3, #2]
10001370:	693b      	ldr	r3, [r7, #16]
10001372:	4a17      	ldr	r2, [pc, #92]	; (100013d0 <vendord_open+0x190>)
10001374:	189a      	adds	r2, r3, r2
10001376:	1dfb      	adds	r3, r7, #7
10001378:	7818      	ldrb	r0, [r3, #0]
1000137a:	2340      	movs	r3, #64	; 0x40
1000137c:	f002 fbbe 	bl	10003afc <usbd_edpt_xfer>
10001380:	0003      	movs	r3, r0
10001382:	001a      	movs	r2, r3
10001384:	2301      	movs	r3, #1
10001386:	4053      	eors	r3, r2
10001388:	b2db      	uxtb	r3, r3
1000138a:	2b00      	cmp	r3, #0
1000138c:	d007      	beq.n	1000139e <vendord_open+0x15e>
1000138e:	490e      	ldr	r1, [pc, #56]	; (100013c8 <vendord_open+0x188>)
10001390:	4b0e      	ldr	r3, [pc, #56]	; (100013cc <vendord_open+0x18c>)
10001392:	22d6      	movs	r2, #214	; 0xd6
10001394:	0018      	movs	r0, r3
10001396:	f009 ff23 	bl	1000b1e0 <__wrap_printf>
1000139a:	2300      	movs	r3, #0
1000139c:	e00b      	b.n	100013b6 <vendord_open+0x176>
    }

    if ( p_vendor->ep_in ) maybe_transmit(p_vendor);
1000139e:	693b      	ldr	r3, [r7, #16]
100013a0:	785b      	ldrb	r3, [r3, #1]
100013a2:	2b00      	cmp	r3, #0
100013a4:	d003      	beq.n	100013ae <vendord_open+0x16e>
100013a6:	693b      	ldr	r3, [r7, #16]
100013a8:	0018      	movs	r0, r3
100013aa:	f7ff fe2f 	bl	1000100c <maybe_transmit>
  }

  return (uintptr_t) p_desc - (uintptr_t) desc_itf;
100013ae:	697a      	ldr	r2, [r7, #20]
100013b0:	683b      	ldr	r3, [r7, #0]
100013b2:	1ad3      	subs	r3, r2, r3
100013b4:	b29b      	uxth	r3, r3
}
100013b6:	0018      	movs	r0, r3
100013b8:	46bd      	mov	sp, r7
100013ba:	b006      	add	sp, #24
100013bc:	bdb0      	pop	{r4, r5, r7, pc}
100013be:	46c0      	nop			; (mov r8, r8)
100013c0:	20000b88 	.word	0x20000b88
100013c4:	000040cc 	.word	0x000040cc
100013c8:	1000d0cc 	.word	0x1000d0cc
100013cc:	1000d0a4 	.word	0x1000d0a4
100013d0:	0000404c 	.word	0x0000404c

100013d4 <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
100013d4:	b590      	push	{r4, r7, lr}
100013d6:	b085      	sub	sp, #20
100013d8:	af00      	add	r7, sp, #0
100013da:	0004      	movs	r4, r0
100013dc:	0008      	movs	r0, r1
100013de:	0011      	movs	r1, r2
100013e0:	603b      	str	r3, [r7, #0]
100013e2:	1dfb      	adds	r3, r7, #7
100013e4:	1c22      	adds	r2, r4, #0
100013e6:	701a      	strb	r2, [r3, #0]
100013e8:	1dbb      	adds	r3, r7, #6
100013ea:	1c02      	adds	r2, r0, #0
100013ec:	701a      	strb	r2, [r3, #0]
100013ee:	1d7b      	adds	r3, r7, #5
100013f0:	1c0a      	adds	r2, r1, #0
100013f2:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) result;

  uint8_t itf = 0;
100013f4:	230f      	movs	r3, #15
100013f6:	18fb      	adds	r3, r7, r3
100013f8:	2200      	movs	r2, #0
100013fa:	701a      	strb	r2, [r3, #0]
  vendord_interface_t* p_itf = _vendord_itf;
100013fc:	4b27      	ldr	r3, [pc, #156]	; (1000149c <vendord_xfer_cb+0xc8>)
100013fe:	60bb      	str	r3, [r7, #8]

  for ( ; ; itf++, p_itf++)
  {
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
10001400:	230f      	movs	r3, #15
10001402:	18fb      	adds	r3, r7, r3
10001404:	781b      	ldrb	r3, [r3, #0]
10001406:	2b00      	cmp	r3, #0
10001408:	d001      	beq.n	1000140e <vendord_xfer_cb+0x3a>
1000140a:	2300      	movs	r3, #0
1000140c:	e041      	b.n	10001492 <vendord_xfer_cb+0xbe>

    if ( ( ep_addr == p_itf->ep_out ) || ( ep_addr == p_itf->ep_in ) ) break;
1000140e:	68bb      	ldr	r3, [r7, #8]
10001410:	789b      	ldrb	r3, [r3, #2]
10001412:	1dba      	adds	r2, r7, #6
10001414:	7812      	ldrb	r2, [r2, #0]
10001416:	429a      	cmp	r2, r3
10001418:	d011      	beq.n	1000143e <vendord_xfer_cb+0x6a>
1000141a:	68bb      	ldr	r3, [r7, #8]
1000141c:	785b      	ldrb	r3, [r3, #1]
1000141e:	1dba      	adds	r2, r7, #6
10001420:	7812      	ldrb	r2, [r2, #0]
10001422:	429a      	cmp	r2, r3
10001424:	d00b      	beq.n	1000143e <vendord_xfer_cb+0x6a>
  for ( ; ; itf++, p_itf++)
10001426:	210f      	movs	r1, #15
10001428:	187b      	adds	r3, r7, r1
1000142a:	781a      	ldrb	r2, [r3, #0]
1000142c:	187b      	adds	r3, r7, r1
1000142e:	3201      	adds	r2, #1
10001430:	701a      	strb	r2, [r3, #0]
10001432:	68bb      	ldr	r3, [r7, #8]
10001434:	4a1a      	ldr	r2, [pc, #104]	; (100014a0 <vendord_xfer_cb+0xcc>)
10001436:	4694      	mov	ip, r2
10001438:	4463      	add	r3, ip
1000143a:	60bb      	str	r3, [r7, #8]
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
1000143c:	e7e0      	b.n	10001400 <vendord_xfer_cb+0x2c>
  }

  if ( ep_addr == p_itf->ep_out )
1000143e:	68bb      	ldr	r3, [r7, #8]
10001440:	789b      	ldrb	r3, [r3, #2]
10001442:	1dba      	adds	r2, r7, #6
10001444:	7812      	ldrb	r2, [r2, #0]
10001446:	429a      	cmp	r2, r3
10001448:	d118      	bne.n	1000147c <vendord_xfer_cb+0xa8>
  {
    // Receive new data
    tu_fifo_write_n(&p_itf->rx_ff, p_itf->epout_buf, xferred_bytes);
1000144a:	68bb      	ldr	r3, [r7, #8]
1000144c:	1d18      	adds	r0, r3, #4
1000144e:	68bb      	ldr	r3, [r7, #8]
10001450:	4a14      	ldr	r2, [pc, #80]	; (100014a4 <vendord_xfer_cb+0xd0>)
10001452:	4694      	mov	ip, r2
10001454:	4463      	add	r3, ip
10001456:	683a      	ldr	r2, [r7, #0]
10001458:	b292      	uxth	r2, r2
1000145a:	0019      	movs	r1, r3
1000145c:	f000 ff2c 	bl	100022b8 <tu_fifo_write_n>

    // Invoked callback if any
    if (tud_vendor_rx_cb) tud_vendor_rx_cb(itf);
10001460:	4b11      	ldr	r3, [pc, #68]	; (100014a8 <vendord_xfer_cb+0xd4>)
10001462:	2b00      	cmp	r3, #0
10001464:	d005      	beq.n	10001472 <vendord_xfer_cb+0x9e>
10001466:	230f      	movs	r3, #15
10001468:	18fb      	adds	r3, r7, r3
1000146a:	781b      	ldrb	r3, [r3, #0]
1000146c:	0018      	movs	r0, r3
1000146e:	e000      	b.n	10001472 <vendord_xfer_cb+0x9e>
10001470:	bf00      	nop

    _prep_out_transaction(p_itf);
10001472:	68bb      	ldr	r3, [r7, #8]
10001474:	0018      	movs	r0, r3
10001476:	f7ff fd77 	bl	10000f68 <_prep_out_transaction>
1000147a:	e009      	b.n	10001490 <vendord_xfer_cb+0xbc>
  }
  else if ( ep_addr == p_itf->ep_in )
1000147c:	68bb      	ldr	r3, [r7, #8]
1000147e:	785b      	ldrb	r3, [r3, #1]
10001480:	1dba      	adds	r2, r7, #6
10001482:	7812      	ldrb	r2, [r2, #0]
10001484:	429a      	cmp	r2, r3
10001486:	d103      	bne.n	10001490 <vendord_xfer_cb+0xbc>
  {
    // Send complete, try to send more if possible
    maybe_transmit(p_itf);
10001488:	68bb      	ldr	r3, [r7, #8]
1000148a:	0018      	movs	r0, r3
1000148c:	f7ff fdbe 	bl	1000100c <maybe_transmit>
  }

  return true;
10001490:	2301      	movs	r3, #1
}
10001492:	0018      	movs	r0, r3
10001494:	46bd      	mov	sp, r7
10001496:	b005      	add	sp, #20
10001498:	bd90      	pop	{r4, r7, pc}
1000149a:	46c0      	nop			; (mov r8, r8)
1000149c:	20000b88 	.word	0x20000b88
100014a0:	000040cc 	.word	0x000040cc
100014a4:	0000404c 	.word	0x0000404c
100014a8:	00000000 	.word	0x00000000

100014ac <osal_mutex_lock>:

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
100014ac:	b580      	push	{r7, lr}
100014ae:	b082      	sub	sp, #8
100014b0:	af00      	add	r7, sp, #0
100014b2:	6078      	str	r0, [r7, #4]
100014b4:	6039      	str	r1, [r7, #0]
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100014b6:	683a      	ldr	r2, [r7, #0]
100014b8:	687b      	ldr	r3, [r7, #4]
100014ba:	0011      	movs	r1, r2
100014bc:	0018      	movs	r0, r3
100014be:	f00b fdaf 	bl	1000d020 <__mutex_enter_timeout_ms_veneer>
100014c2:	0003      	movs	r3, r0
}
100014c4:	0018      	movs	r0, r3
100014c6:	46bd      	mov	sp, r7
100014c8:	b002      	add	sp, #8
100014ca:	bd80      	pop	{r7, pc}

100014cc <osal_mutex_unlock>:

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
100014cc:	b580      	push	{r7, lr}
100014ce:	b082      	sub	sp, #8
100014d0:	af00      	add	r7, sp, #0
100014d2:	6078      	str	r0, [r7, #4]
    mutex_exit(mutex_hdl);
100014d4:	687b      	ldr	r3, [r7, #4]
100014d6:	0018      	movs	r0, r3
100014d8:	f00b fd82 	bl	1000cfe0 <__mutex_exit_veneer>
    return true;
100014dc:	2301      	movs	r3, #1
}
100014de:	0018      	movs	r0, r3
100014e0:	46bd      	mov	sp, r7
100014e2:	b002      	add	sp, #8
100014e4:	bd80      	pop	{r7, pc}

100014e6 <_ff_lock>:

// implement mutex lock and unlock
#if CFG_FIFO_MUTEX

static inline void _ff_lock(tu_fifo_mutex_t mutex)
{
100014e6:	b580      	push	{r7, lr}
100014e8:	b082      	sub	sp, #8
100014ea:	af00      	add	r7, sp, #0
100014ec:	6078      	str	r0, [r7, #4]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
100014ee:	687b      	ldr	r3, [r7, #4]
100014f0:	2b00      	cmp	r3, #0
100014f2:	d006      	beq.n	10001502 <_ff_lock+0x1c>
100014f4:	2301      	movs	r3, #1
100014f6:	425a      	negs	r2, r3
100014f8:	687b      	ldr	r3, [r7, #4]
100014fa:	0011      	movs	r1, r2
100014fc:	0018      	movs	r0, r3
100014fe:	f7ff ffd5 	bl	100014ac <osal_mutex_lock>
}
10001502:	46c0      	nop			; (mov r8, r8)
10001504:	46bd      	mov	sp, r7
10001506:	b002      	add	sp, #8
10001508:	bd80      	pop	{r7, pc}

1000150a <_ff_unlock>:

static inline void _ff_unlock(tu_fifo_mutex_t mutex)
{
1000150a:	b580      	push	{r7, lr}
1000150c:	b082      	sub	sp, #8
1000150e:	af00      	add	r7, sp, #0
10001510:	6078      	str	r0, [r7, #4]
  if (mutex) osal_mutex_unlock(mutex);
10001512:	687b      	ldr	r3, [r7, #4]
10001514:	2b00      	cmp	r3, #0
10001516:	d003      	beq.n	10001520 <_ff_unlock+0x16>
10001518:	687b      	ldr	r3, [r7, #4]
1000151a:	0018      	movs	r0, r3
1000151c:	f7ff ffd6 	bl	100014cc <osal_mutex_unlock>
}
10001520:	46c0      	nop			; (mov r8, r8)
10001522:	46bd      	mov	sp, r7
10001524:	b002      	add	sp, #8
10001526:	bd80      	pop	{r7, pc}

10001528 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
10001528:	b580      	push	{r7, lr}
1000152a:	b084      	sub	sp, #16
1000152c:	af00      	add	r7, sp, #0
1000152e:	60f8      	str	r0, [r7, #12]
10001530:	60b9      	str	r1, [r7, #8]
10001532:	0019      	movs	r1, r3
10001534:	1dbb      	adds	r3, r7, #6
10001536:	801a      	strh	r2, [r3, #0]
10001538:	1d3b      	adds	r3, r7, #4
1000153a:	1c0a      	adds	r2, r1, #0
1000153c:	801a      	strh	r2, [r3, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
1000153e:	1dbb      	adds	r3, r7, #6
10001540:	881a      	ldrh	r2, [r3, #0]
10001542:	2380      	movs	r3, #128	; 0x80
10001544:	021b      	lsls	r3, r3, #8
10001546:	429a      	cmp	r2, r3
10001548:	d901      	bls.n	1000154e <tu_fifo_config+0x26>
1000154a:	2300      	movs	r3, #0
1000154c:	e039      	b.n	100015c2 <tu_fifo_config+0x9a>

  _ff_lock(f->mutex_wr);
1000154e:	68fb      	ldr	r3, [r7, #12]
10001550:	695b      	ldr	r3, [r3, #20]
10001552:	0018      	movs	r0, r3
10001554:	f7ff ffc7 	bl	100014e6 <_ff_lock>
  _ff_lock(f->mutex_rd);
10001558:	68fb      	ldr	r3, [r7, #12]
1000155a:	699b      	ldr	r3, [r3, #24]
1000155c:	0018      	movs	r0, r3
1000155e:	f7ff ffc2 	bl	100014e6 <_ff_lock>

  f->buffer = (uint8_t*) buffer;
10001562:	68fb      	ldr	r3, [r7, #12]
10001564:	68ba      	ldr	r2, [r7, #8]
10001566:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
10001568:	68fb      	ldr	r3, [r7, #12]
1000156a:	1dba      	adds	r2, r7, #6
1000156c:	8812      	ldrh	r2, [r2, #0]
1000156e:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
10001570:	68fb      	ldr	r3, [r7, #12]
10001572:	1d3a      	adds	r2, r7, #4
10001574:	8812      	ldrh	r2, [r2, #0]
10001576:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
10001578:	68fa      	ldr	r2, [r7, #12]
1000157a:	2318      	movs	r3, #24
1000157c:	18fb      	adds	r3, r7, r3
1000157e:	781b      	ldrb	r3, [r3, #0]
10001580:	7213      	strb	r3, [r2, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
10001582:	1dbb      	adds	r3, r7, #6
10001584:	881b      	ldrh	r3, [r3, #0]
10001586:	18db      	adds	r3, r3, r3
10001588:	b29b      	uxth	r3, r3
1000158a:	3b01      	subs	r3, #1
1000158c:	b29a      	uxth	r2, r3
1000158e:	68fb      	ldr	r3, [r7, #12]
10001590:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
10001592:	68fb      	ldr	r3, [r7, #12]
10001594:	899b      	ldrh	r3, [r3, #12]
10001596:	43db      	mvns	r3, r3
10001598:	b29a      	uxth	r2, r3
1000159a:	68fb      	ldr	r3, [r7, #12]
1000159c:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
1000159e:	2100      	movs	r1, #0
100015a0:	68fb      	ldr	r3, [r7, #12]
100015a2:	1c0a      	adds	r2, r1, #0
100015a4:	81da      	strh	r2, [r3, #14]
100015a6:	68fb      	ldr	r3, [r7, #12]
100015a8:	1c0a      	adds	r2, r1, #0
100015aa:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
100015ac:	68fb      	ldr	r3, [r7, #12]
100015ae:	695b      	ldr	r3, [r3, #20]
100015b0:	0018      	movs	r0, r3
100015b2:	f7ff ffaa 	bl	1000150a <_ff_unlock>
  _ff_unlock(f->mutex_rd);
100015b6:	68fb      	ldr	r3, [r7, #12]
100015b8:	699b      	ldr	r3, [r3, #24]
100015ba:	0018      	movs	r0, r3
100015bc:	f7ff ffa5 	bl	1000150a <_ff_unlock>

  return true;
100015c0:	2301      	movs	r3, #1
}
100015c2:	0018      	movs	r0, r3
100015c4:	46bd      	mov	sp, r7
100015c6:	b004      	add	sp, #16
100015c8:	bd80      	pop	{r7, pc}

100015ca <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
100015ca:	b580      	push	{r7, lr}
100015cc:	b082      	sub	sp, #8
100015ce:	af00      	add	r7, sp, #0
100015d0:	0002      	movs	r2, r0
100015d2:	1dbb      	adds	r3, r7, #6
100015d4:	801a      	strh	r2, [r3, #0]
100015d6:	1d3b      	adds	r3, r7, #4
100015d8:	1c0a      	adds	r2, r1, #0
100015da:	801a      	strh	r2, [r3, #0]
  while ( idx >= depth) idx -= depth;
100015dc:	e006      	b.n	100015ec <_ff_mod+0x22>
100015de:	1dbb      	adds	r3, r7, #6
100015e0:	1db9      	adds	r1, r7, #6
100015e2:	1d3a      	adds	r2, r7, #4
100015e4:	8809      	ldrh	r1, [r1, #0]
100015e6:	8812      	ldrh	r2, [r2, #0]
100015e8:	1a8a      	subs	r2, r1, r2
100015ea:	801a      	strh	r2, [r3, #0]
100015ec:	1dba      	adds	r2, r7, #6
100015ee:	1d3b      	adds	r3, r7, #4
100015f0:	8812      	ldrh	r2, [r2, #0]
100015f2:	881b      	ldrh	r3, [r3, #0]
100015f4:	429a      	cmp	r2, r3
100015f6:	d2f2      	bcs.n	100015de <_ff_mod+0x14>
  return idx;
100015f8:	1dbb      	adds	r3, r7, #6
100015fa:	881b      	ldrh	r3, [r3, #0]
}
100015fc:	0018      	movs	r0, r3
100015fe:	46bd      	mov	sp, r7
10001600:	b002      	add	sp, #8
10001602:	bd80      	pop	{r7, pc}

10001604 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
10001604:	b580      	push	{r7, lr}
10001606:	b08c      	sub	sp, #48	; 0x30
10001608:	af00      	add	r7, sp, #0
1000160a:	60f8      	str	r0, [r7, #12]
1000160c:	60b9      	str	r1, [r7, #8]
1000160e:	1dbb      	adds	r3, r7, #6
10001610:	801a      	strh	r2, [r3, #0]
  volatile uint32_t * rx_fifo = (volatile uint32_t *) app_buf;
10001612:	68bb      	ldr	r3, [r7, #8]
10001614:	62bb      	str	r3, [r7, #40]	; 0x28

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
10001616:	232e      	movs	r3, #46	; 0x2e
10001618:	18fb      	adds	r3, r7, r3
1000161a:	1dba      	adds	r2, r7, #6
1000161c:	8812      	ldrh	r2, [r2, #0]
1000161e:	0892      	lsrs	r2, r2, #2
10001620:	801a      	strh	r2, [r3, #0]
  while(full_words--)
10001622:	e033      	b.n	1000168c <_ff_push_const_addr+0x88>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
10001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001626:	681b      	ldr	r3, [r3, #0]
10001628:	68fa      	ldr	r2, [r7, #12]
1000162a:	623a      	str	r2, [r7, #32]
1000162c:	61fb      	str	r3, [r7, #28]
  return ua32->val;
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
1000162e:	6a3b      	ldr	r3, [r7, #32]
10001630:	61bb      	str	r3, [r7, #24]
  ua32->val = value;
10001632:	69bb      	ldr	r3, [r7, #24]
10001634:	221c      	movs	r2, #28
10001636:	18ba      	adds	r2, r7, r2
10001638:	7810      	ldrb	r0, [r2, #0]
1000163a:	781a      	ldrb	r2, [r3, #0]
1000163c:	2100      	movs	r1, #0
1000163e:	400a      	ands	r2, r1
10001640:	1c11      	adds	r1, r2, #0
10001642:	1c02      	adds	r2, r0, #0
10001644:	430a      	orrs	r2, r1
10001646:	701a      	strb	r2, [r3, #0]
10001648:	221d      	movs	r2, #29
1000164a:	18ba      	adds	r2, r7, r2
1000164c:	7810      	ldrb	r0, [r2, #0]
1000164e:	785a      	ldrb	r2, [r3, #1]
10001650:	2100      	movs	r1, #0
10001652:	400a      	ands	r2, r1
10001654:	1c11      	adds	r1, r2, #0
10001656:	1c02      	adds	r2, r0, #0
10001658:	430a      	orrs	r2, r1
1000165a:	705a      	strb	r2, [r3, #1]
1000165c:	221e      	movs	r2, #30
1000165e:	18ba      	adds	r2, r7, r2
10001660:	7810      	ldrb	r0, [r2, #0]
10001662:	789a      	ldrb	r2, [r3, #2]
10001664:	2100      	movs	r1, #0
10001666:	400a      	ands	r2, r1
10001668:	1c11      	adds	r1, r2, #0
1000166a:	1c02      	adds	r2, r0, #0
1000166c:	430a      	orrs	r2, r1
1000166e:	709a      	strb	r2, [r3, #2]
10001670:	221f      	movs	r2, #31
10001672:	18ba      	adds	r2, r7, r2
10001674:	7810      	ldrb	r0, [r2, #0]
10001676:	78da      	ldrb	r2, [r3, #3]
10001678:	2100      	movs	r1, #0
1000167a:	400a      	ands	r2, r1
1000167c:	1c11      	adds	r1, r2, #0
1000167e:	1c02      	adds	r2, r0, #0
10001680:	430a      	orrs	r2, r1
10001682:	70da      	strb	r2, [r3, #3]
}
10001684:	46c0      	nop			; (mov r8, r8)
    ff_buf += 4;
10001686:	68fb      	ldr	r3, [r7, #12]
10001688:	3304      	adds	r3, #4
1000168a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
1000168c:	222e      	movs	r2, #46	; 0x2e
1000168e:	18bb      	adds	r3, r7, r2
10001690:	881b      	ldrh	r3, [r3, #0]
10001692:	18ba      	adds	r2, r7, r2
10001694:	1e59      	subs	r1, r3, #1
10001696:	8011      	strh	r1, [r2, #0]
10001698:	2b00      	cmp	r3, #0
1000169a:	d1c3      	bne.n	10001624 <_ff_push_const_addr+0x20>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
1000169c:	1dbb      	adds	r3, r7, #6
1000169e:	881b      	ldrh	r3, [r3, #0]
100016a0:	b2da      	uxtb	r2, r3
100016a2:	2027      	movs	r0, #39	; 0x27
100016a4:	183b      	adds	r3, r7, r0
100016a6:	2103      	movs	r1, #3
100016a8:	400a      	ands	r2, r1
100016aa:	701a      	strb	r2, [r3, #0]
  if ( bytes_rem )
100016ac:	0002      	movs	r2, r0
100016ae:	18bb      	adds	r3, r7, r2
100016b0:	781b      	ldrb	r3, [r3, #0]
100016b2:	2b00      	cmp	r3, #0
100016b4:	d00a      	beq.n	100016cc <_ff_push_const_addr+0xc8>
  {
    uint32_t tmp32 = *rx_fifo;
100016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	617b      	str	r3, [r7, #20]
    memcpy(ff_buf, &tmp32, bytes_rem);
100016bc:	18bb      	adds	r3, r7, r2
100016be:	781a      	ldrb	r2, [r3, #0]
100016c0:	2314      	movs	r3, #20
100016c2:	18f9      	adds	r1, r7, r3
100016c4:	68fb      	ldr	r3, [r7, #12]
100016c6:	0018      	movs	r0, r3
100016c8:	f00b fc4c 	bl	1000cf64 <__wrap___aeabi_memcpy>
  }
}
100016cc:	46c0      	nop			; (mov r8, r8)
100016ce:	46bd      	mov	sp, r7
100016d0:	b00c      	add	sp, #48	; 0x30
100016d2:	bd80      	pop	{r7, pc}

100016d4 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
100016d4:	b580      	push	{r7, lr}
100016d6:	b08a      	sub	sp, #40	; 0x28
100016d8:	af00      	add	r7, sp, #0
100016da:	60f8      	str	r0, [r7, #12]
100016dc:	60b9      	str	r1, [r7, #8]
100016de:	1dbb      	adds	r3, r7, #6
100016e0:	801a      	strh	r2, [r3, #0]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
100016e2:	68fb      	ldr	r3, [r7, #12]
100016e4:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
100016e6:	2326      	movs	r3, #38	; 0x26
100016e8:	18fb      	adds	r3, r7, r3
100016ea:	1dba      	adds	r2, r7, #6
100016ec:	8812      	ldrh	r2, [r2, #0]
100016ee:	0892      	lsrs	r2, r2, #2
100016f0:	801a      	strh	r2, [r3, #0]
  while(full_words--)
100016f2:	e014      	b.n	1000171e <_ff_pull_const_addr+0x4a>
100016f4:	68bb      	ldr	r3, [r7, #8]
100016f6:	61bb      	str	r3, [r7, #24]
  tu_unaligned_uint32_t const* ua32 = (tu_unaligned_uint32_t const*) mem;
100016f8:	69bb      	ldr	r3, [r7, #24]
100016fa:	617b      	str	r3, [r7, #20]
  return ua32->val;
100016fc:	697b      	ldr	r3, [r7, #20]
100016fe:	781a      	ldrb	r2, [r3, #0]
10001700:	7859      	ldrb	r1, [r3, #1]
10001702:	0209      	lsls	r1, r1, #8
10001704:	430a      	orrs	r2, r1
10001706:	7899      	ldrb	r1, [r3, #2]
10001708:	0409      	lsls	r1, r1, #16
1000170a:	430a      	orrs	r2, r1
1000170c:	78db      	ldrb	r3, [r3, #3]
1000170e:	061b      	lsls	r3, r3, #24
10001710:	4313      	orrs	r3, r2
10001712:	001a      	movs	r2, r3
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
10001714:	6a3b      	ldr	r3, [r7, #32]
10001716:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
10001718:	68bb      	ldr	r3, [r7, #8]
1000171a:	3304      	adds	r3, #4
1000171c:	60bb      	str	r3, [r7, #8]
  while(full_words--)
1000171e:	2226      	movs	r2, #38	; 0x26
10001720:	18bb      	adds	r3, r7, r2
10001722:	881b      	ldrh	r3, [r3, #0]
10001724:	18ba      	adds	r2, r7, r2
10001726:	1e59      	subs	r1, r3, #1
10001728:	8011      	strh	r1, [r2, #0]
1000172a:	2b00      	cmp	r3, #0
1000172c:	d1e2      	bne.n	100016f4 <_ff_pull_const_addr+0x20>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
1000172e:	1dbb      	adds	r3, r7, #6
10001730:	881b      	ldrh	r3, [r3, #0]
10001732:	b2da      	uxtb	r2, r3
10001734:	201f      	movs	r0, #31
10001736:	183b      	adds	r3, r7, r0
10001738:	2103      	movs	r1, #3
1000173a:	400a      	ands	r2, r1
1000173c:	701a      	strb	r2, [r3, #0]
  if ( bytes_rem )
1000173e:	0002      	movs	r2, r0
10001740:	18bb      	adds	r3, r7, r2
10001742:	781b      	ldrb	r3, [r3, #0]
10001744:	2b00      	cmp	r3, #0
10001746:	d00c      	beq.n	10001762 <_ff_pull_const_addr+0x8e>
  {
    uint32_t tmp32 = 0;
10001748:	2300      	movs	r3, #0
1000174a:	613b      	str	r3, [r7, #16]
    memcpy(&tmp32, ff_buf, bytes_rem);
1000174c:	18bb      	adds	r3, r7, r2
1000174e:	781a      	ldrb	r2, [r3, #0]
10001750:	68b9      	ldr	r1, [r7, #8]
10001752:	2310      	movs	r3, #16
10001754:	18fb      	adds	r3, r7, r3
10001756:	0018      	movs	r0, r3
10001758:	f00b fc04 	bl	1000cf64 <__wrap___aeabi_memcpy>

    *tx_fifo = tmp32;
1000175c:	693a      	ldr	r2, [r7, #16]
1000175e:	6a3b      	ldr	r3, [r7, #32]
10001760:	601a      	str	r2, [r3, #0]
  }
}
10001762:	46c0      	nop			; (mov r8, r8)
10001764:	46bd      	mov	sp, r7
10001766:	b00a      	add	sp, #40	; 0x28
10001768:	bd80      	pop	{r7, pc}

1000176a <_ff_push>:

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
1000176a:	b580      	push	{r7, lr}
1000176c:	b084      	sub	sp, #16
1000176e:	af00      	add	r7, sp, #0
10001770:	60f8      	str	r0, [r7, #12]
10001772:	60b9      	str	r1, [r7, #8]
10001774:	1dbb      	adds	r3, r7, #6
10001776:	801a      	strh	r2, [r3, #0]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
10001778:	68fb      	ldr	r3, [r7, #12]
1000177a:	681b      	ldr	r3, [r3, #0]
1000177c:	1dba      	adds	r2, r7, #6
1000177e:	8812      	ldrh	r2, [r2, #0]
10001780:	68f9      	ldr	r1, [r7, #12]
10001782:	88c9      	ldrh	r1, [r1, #6]
10001784:	434a      	muls	r2, r1
10001786:	1898      	adds	r0, r3, r2
10001788:	68fb      	ldr	r3, [r7, #12]
1000178a:	88db      	ldrh	r3, [r3, #6]
1000178c:	001a      	movs	r2, r3
1000178e:	68bb      	ldr	r3, [r7, #8]
10001790:	0019      	movs	r1, r3
10001792:	f00b fbe7 	bl	1000cf64 <__wrap___aeabi_memcpy>
}
10001796:	46c0      	nop			; (mov r8, r8)
10001798:	46bd      	mov	sp, r7
1000179a:	b004      	add	sp, #16
1000179c:	bd80      	pop	{r7, pc}

1000179e <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
1000179e:	b5b0      	push	{r4, r5, r7, lr}
100017a0:	b08e      	sub	sp, #56	; 0x38
100017a2:	af00      	add	r7, sp, #0
100017a4:	60f8      	str	r0, [r7, #12]
100017a6:	60b9      	str	r1, [r7, #8]
100017a8:	0019      	movs	r1, r3
100017aa:	1dbb      	adds	r3, r7, #6
100017ac:	801a      	strh	r2, [r3, #0]
100017ae:	1d3b      	adds	r3, r7, #4
100017b0:	1c0a      	adds	r2, r1, #0
100017b2:	801a      	strh	r2, [r3, #0]
  uint16_t const nLin = f->depth - rel;
100017b4:	68fb      	ldr	r3, [r7, #12]
100017b6:	8899      	ldrh	r1, [r3, #4]
100017b8:	2026      	movs	r0, #38	; 0x26
100017ba:	183b      	adds	r3, r7, r0
100017bc:	1d3a      	adds	r2, r7, #4
100017be:	8812      	ldrh	r2, [r2, #0]
100017c0:	1a8a      	subs	r2, r1, r2
100017c2:	801a      	strh	r2, [r3, #0]
  uint16_t const nWrap = n - nLin;
100017c4:	2424      	movs	r4, #36	; 0x24
100017c6:	193b      	adds	r3, r7, r4
100017c8:	1db9      	adds	r1, r7, #6
100017ca:	183a      	adds	r2, r7, r0
100017cc:	8809      	ldrh	r1, [r1, #0]
100017ce:	8812      	ldrh	r2, [r2, #0]
100017d0:	1a8a      	subs	r2, r1, r2
100017d2:	801a      	strh	r2, [r3, #0]

  uint16_t nLin_bytes = nLin * f->item_size;
100017d4:	68fb      	ldr	r3, [r7, #12]
100017d6:	88da      	ldrh	r2, [r3, #6]
100017d8:	2322      	movs	r3, #34	; 0x22
100017da:	18fb      	adds	r3, r7, r3
100017dc:	1839      	adds	r1, r7, r0
100017de:	8809      	ldrh	r1, [r1, #0]
100017e0:	434a      	muls	r2, r1
100017e2:	801a      	strh	r2, [r3, #0]
  uint16_t nWrap_bytes = nWrap * f->item_size;
100017e4:	68fb      	ldr	r3, [r7, #12]
100017e6:	88da      	ldrh	r2, [r3, #6]
100017e8:	2336      	movs	r3, #54	; 0x36
100017ea:	18fb      	adds	r3, r7, r3
100017ec:	1939      	adds	r1, r7, r4
100017ee:	8809      	ldrh	r1, [r1, #0]
100017f0:	434a      	muls	r2, r1
100017f2:	801a      	strh	r2, [r3, #0]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
100017f4:	68fb      	ldr	r3, [r7, #12]
100017f6:	681b      	ldr	r3, [r3, #0]
100017f8:	1d3a      	adds	r2, r7, #4
100017fa:	8812      	ldrh	r2, [r2, #0]
100017fc:	68f9      	ldr	r1, [r7, #12]
100017fe:	88c9      	ldrh	r1, [r1, #6]
10001800:	434a      	muls	r2, r1
10001802:	189b      	adds	r3, r3, r2
10001804:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
10001806:	2340      	movs	r3, #64	; 0x40
10001808:	2208      	movs	r2, #8
1000180a:	189b      	adds	r3, r3, r2
1000180c:	19db      	adds	r3, r3, r7
1000180e:	781b      	ldrb	r3, [r3, #0]
10001810:	2b00      	cmp	r3, #0
10001812:	d002      	beq.n	1000181a <_ff_push_n+0x7c>
10001814:	2b01      	cmp	r3, #1
10001816:	d028      	beq.n	1000186a <_ff_push_n+0xcc>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
10001818:	e0c0      	b.n	1000199c <_ff_push_n+0x1fe>
      if(n <= nLin)
1000181a:	1dba      	adds	r2, r7, #6
1000181c:	2326      	movs	r3, #38	; 0x26
1000181e:	18fb      	adds	r3, r7, r3
10001820:	8812      	ldrh	r2, [r2, #0]
10001822:	881b      	ldrh	r3, [r3, #0]
10001824:	429a      	cmp	r2, r3
10001826:	d80b      	bhi.n	10001840 <_ff_push_n+0xa2>
        memcpy(ff_buf, app_buf, n*f->item_size);
10001828:	1dbb      	adds	r3, r7, #6
1000182a:	881b      	ldrh	r3, [r3, #0]
1000182c:	68fa      	ldr	r2, [r7, #12]
1000182e:	88d2      	ldrh	r2, [r2, #6]
10001830:	4353      	muls	r3, r2
10001832:	001a      	movs	r2, r3
10001834:	68b9      	ldr	r1, [r7, #8]
10001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001838:	0018      	movs	r0, r3
1000183a:	f00b fb93 	bl	1000cf64 <__wrap___aeabi_memcpy>
      break;
1000183e:	e0ad      	b.n	1000199c <_ff_push_n+0x1fe>
        memcpy(ff_buf, app_buf, nLin_bytes);
10001840:	2422      	movs	r4, #34	; 0x22
10001842:	193b      	adds	r3, r7, r4
10001844:	881a      	ldrh	r2, [r3, #0]
10001846:	68b9      	ldr	r1, [r7, #8]
10001848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000184a:	0018      	movs	r0, r3
1000184c:	f00b fb8a 	bl	1000cf64 <__wrap___aeabi_memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
10001850:	68fb      	ldr	r3, [r7, #12]
10001852:	6818      	ldr	r0, [r3, #0]
10001854:	193b      	adds	r3, r7, r4
10001856:	881b      	ldrh	r3, [r3, #0]
10001858:	68ba      	ldr	r2, [r7, #8]
1000185a:	18d1      	adds	r1, r2, r3
1000185c:	2336      	movs	r3, #54	; 0x36
1000185e:	18fb      	adds	r3, r7, r3
10001860:	881b      	ldrh	r3, [r3, #0]
10001862:	001a      	movs	r2, r3
10001864:	f00b fb7e 	bl	1000cf64 <__wrap___aeabi_memcpy>
      break;
10001868:	e098      	b.n	1000199c <_ff_push_n+0x1fe>
      if(n <= nLin)
1000186a:	1dba      	adds	r2, r7, #6
1000186c:	2326      	movs	r3, #38	; 0x26
1000186e:	18fb      	adds	r3, r7, r3
10001870:	8812      	ldrh	r2, [r2, #0]
10001872:	881b      	ldrh	r3, [r3, #0]
10001874:	429a      	cmp	r2, r3
10001876:	d80b      	bhi.n	10001890 <_ff_push_n+0xf2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
10001878:	68fb      	ldr	r3, [r7, #12]
1000187a:	88db      	ldrh	r3, [r3, #6]
1000187c:	1dba      	adds	r2, r7, #6
1000187e:	8812      	ldrh	r2, [r2, #0]
10001880:	4353      	muls	r3, r2
10001882:	b29a      	uxth	r2, r3
10001884:	68b9      	ldr	r1, [r7, #8]
10001886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001888:	0018      	movs	r0, r3
1000188a:	f7ff febb 	bl	10001604 <_ff_push_const_addr>
      break;
1000188e:	e084      	b.n	1000199a <_ff_push_n+0x1fc>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
10001890:	2020      	movs	r0, #32
10001892:	183b      	adds	r3, r7, r0
10001894:	2522      	movs	r5, #34	; 0x22
10001896:	197a      	adds	r2, r7, r5
10001898:	8812      	ldrh	r2, [r2, #0]
1000189a:	2103      	movs	r1, #3
1000189c:	438a      	bics	r2, r1
1000189e:	801a      	strh	r2, [r3, #0]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
100018a0:	0004      	movs	r4, r0
100018a2:	183b      	adds	r3, r7, r0
100018a4:	881a      	ldrh	r2, [r3, #0]
100018a6:	68b9      	ldr	r1, [r7, #8]
100018a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100018aa:	0018      	movs	r0, r3
100018ac:	f7ff feaa 	bl	10001604 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
100018b0:	193b      	adds	r3, r7, r4
100018b2:	881b      	ldrh	r3, [r3, #0]
100018b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100018b6:	18d3      	adds	r3, r2, r3
100018b8:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * rx_fifo = (volatile uint32_t *) app_buf;
100018ba:	68bb      	ldr	r3, [r7, #8]
100018bc:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
100018be:	197b      	adds	r3, r7, r5
100018c0:	881b      	ldrh	r3, [r3, #0]
100018c2:	b2da      	uxtb	r2, r3
100018c4:	202f      	movs	r0, #47	; 0x2f
100018c6:	183b      	adds	r3, r7, r0
100018c8:	2103      	movs	r1, #3
100018ca:	400a      	ands	r2, r1
100018cc:	701a      	strb	r2, [r3, #0]
        if (rem > 0)
100018ce:	0002      	movs	r2, r0
100018d0:	18bb      	adds	r3, r7, r2
100018d2:	781b      	ldrb	r3, [r3, #0]
100018d4:	2b00      	cmp	r3, #0
100018d6:	d051      	beq.n	1000197c <_ff_push_n+0x1de>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
100018d8:	18bb      	adds	r3, r7, r2
100018da:	781b      	ldrb	r3, [r3, #0]
100018dc:	b29b      	uxth	r3, r3
100018de:	2204      	movs	r2, #4
100018e0:	1ad3      	subs	r3, r2, r3
100018e2:	b299      	uxth	r1, r3
100018e4:	201a      	movs	r0, #26
100018e6:	183b      	adds	r3, r7, r0
100018e8:	2236      	movs	r2, #54	; 0x36
100018ea:	18ba      	adds	r2, r7, r2
100018ec:	8812      	ldrh	r2, [r2, #0]
100018ee:	801a      	strh	r2, [r3, #0]
100018f0:	2418      	movs	r4, #24
100018f2:	193b      	adds	r3, r7, r4
100018f4:	1c0a      	adds	r2, r1, #0
100018f6:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
100018f8:	183b      	adds	r3, r7, r0
100018fa:	193a      	adds	r2, r7, r4
100018fc:	8810      	ldrh	r0, [r2, #0]
100018fe:	881b      	ldrh	r3, [r3, #0]
10001900:	b299      	uxth	r1, r3
10001902:	b282      	uxth	r2, r0
10001904:	4291      	cmp	r1, r2
10001906:	d900      	bls.n	1000190a <_ff_push_n+0x16c>
10001908:	1c03      	adds	r3, r0, #0
1000190a:	b29a      	uxth	r2, r3
1000190c:	212e      	movs	r1, #46	; 0x2e
1000190e:	187b      	adds	r3, r7, r1
10001910:	701a      	strb	r2, [r3, #0]
          nWrap_bytes -= remrem;
10001912:	187b      	adds	r3, r7, r1
10001914:	781b      	ldrb	r3, [r3, #0]
10001916:	b29a      	uxth	r2, r3
10001918:	2136      	movs	r1, #54	; 0x36
1000191a:	187b      	adds	r3, r7, r1
1000191c:	1879      	adds	r1, r7, r1
1000191e:	8809      	ldrh	r1, [r1, #0]
10001920:	1a8a      	subs	r2, r1, r2
10001922:	801a      	strh	r2, [r3, #0]
          uint32_t tmp32 = *rx_fifo;
10001924:	69fb      	ldr	r3, [r7, #28]
10001926:	681b      	ldr	r3, [r3, #0]
10001928:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
1000192a:	2314      	movs	r3, #20
1000192c:	18fb      	adds	r3, r7, r3
1000192e:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
10001930:	e007      	b.n	10001942 <_ff_push_n+0x1a4>
10001932:	6aba      	ldr	r2, [r7, #40]	; 0x28
10001934:	1c53      	adds	r3, r2, #1
10001936:	62bb      	str	r3, [r7, #40]	; 0x28
10001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000193a:	1c59      	adds	r1, r3, #1
1000193c:	6339      	str	r1, [r7, #48]	; 0x30
1000193e:	7812      	ldrb	r2, [r2, #0]
10001940:	701a      	strb	r2, [r3, #0]
10001942:	222f      	movs	r2, #47	; 0x2f
10001944:	18bb      	adds	r3, r7, r2
10001946:	781b      	ldrb	r3, [r3, #0]
10001948:	18ba      	adds	r2, r7, r2
1000194a:	1e59      	subs	r1, r3, #1
1000194c:	7011      	strb	r1, [r2, #0]
1000194e:	2b00      	cmp	r3, #0
10001950:	d1ef      	bne.n	10001932 <_ff_push_n+0x194>
          ff_buf = f->buffer;
10001952:	68fb      	ldr	r3, [r7, #12]
10001954:	681b      	ldr	r3, [r3, #0]
10001956:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
10001958:	e007      	b.n	1000196a <_ff_push_n+0x1cc>
1000195a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000195c:	1c53      	adds	r3, r2, #1
1000195e:	62bb      	str	r3, [r7, #40]	; 0x28
10001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001962:	1c59      	adds	r1, r3, #1
10001964:	6339      	str	r1, [r7, #48]	; 0x30
10001966:	7812      	ldrb	r2, [r2, #0]
10001968:	701a      	strb	r2, [r3, #0]
1000196a:	222e      	movs	r2, #46	; 0x2e
1000196c:	18bb      	adds	r3, r7, r2
1000196e:	781b      	ldrb	r3, [r3, #0]
10001970:	18ba      	adds	r2, r7, r2
10001972:	1e59      	subs	r1, r3, #1
10001974:	7011      	strb	r1, [r2, #0]
10001976:	2b00      	cmp	r3, #0
10001978:	d1ef      	bne.n	1000195a <_ff_push_n+0x1bc>
1000197a:	e002      	b.n	10001982 <_ff_push_n+0x1e4>
          ff_buf = f->buffer; // wrap around to beginning
1000197c:	68fb      	ldr	r3, [r7, #12]
1000197e:	681b      	ldr	r3, [r3, #0]
10001980:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
10001982:	2236      	movs	r2, #54	; 0x36
10001984:	18bb      	adds	r3, r7, r2
10001986:	881b      	ldrh	r3, [r3, #0]
10001988:	2b00      	cmp	r3, #0
1000198a:	d006      	beq.n	1000199a <_ff_push_n+0x1fc>
1000198c:	18bb      	adds	r3, r7, r2
1000198e:	881a      	ldrh	r2, [r3, #0]
10001990:	68b9      	ldr	r1, [r7, #8]
10001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001994:	0018      	movs	r0, r3
10001996:	f7ff fe35 	bl	10001604 <_ff_push_const_addr>
      break;
1000199a:	46c0      	nop			; (mov r8, r8)
}
1000199c:	46c0      	nop			; (mov r8, r8)
1000199e:	46bd      	mov	sp, r7
100019a0:	b00e      	add	sp, #56	; 0x38
100019a2:	bdb0      	pop	{r4, r5, r7, pc}

100019a4 <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
100019a4:	b580      	push	{r7, lr}
100019a6:	b084      	sub	sp, #16
100019a8:	af00      	add	r7, sp, #0
100019aa:	60f8      	str	r0, [r7, #12]
100019ac:	60b9      	str	r1, [r7, #8]
100019ae:	1dbb      	adds	r3, r7, #6
100019b0:	801a      	strh	r2, [r3, #0]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
100019b2:	68fb      	ldr	r3, [r7, #12]
100019b4:	681b      	ldr	r3, [r3, #0]
100019b6:	1dba      	adds	r2, r7, #6
100019b8:	8812      	ldrh	r2, [r2, #0]
100019ba:	68f9      	ldr	r1, [r7, #12]
100019bc:	88c9      	ldrh	r1, [r1, #6]
100019be:	434a      	muls	r2, r1
100019c0:	1899      	adds	r1, r3, r2
100019c2:	68fb      	ldr	r3, [r7, #12]
100019c4:	88db      	ldrh	r3, [r3, #6]
100019c6:	001a      	movs	r2, r3
100019c8:	68bb      	ldr	r3, [r7, #8]
100019ca:	0018      	movs	r0, r3
100019cc:	f00b faca 	bl	1000cf64 <__wrap___aeabi_memcpy>
}
100019d0:	46c0      	nop			; (mov r8, r8)
100019d2:	46bd      	mov	sp, r7
100019d4:	b004      	add	sp, #16
100019d6:	bd80      	pop	{r7, pc}

100019d8 <_ff_pull_n>:

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
100019d8:	b5b0      	push	{r4, r5, r7, lr}
100019da:	b08e      	sub	sp, #56	; 0x38
100019dc:	af00      	add	r7, sp, #0
100019de:	60f8      	str	r0, [r7, #12]
100019e0:	60b9      	str	r1, [r7, #8]
100019e2:	0019      	movs	r1, r3
100019e4:	1dbb      	adds	r3, r7, #6
100019e6:	801a      	strh	r2, [r3, #0]
100019e8:	1d3b      	adds	r3, r7, #4
100019ea:	1c0a      	adds	r2, r1, #0
100019ec:	801a      	strh	r2, [r3, #0]
  uint16_t const nLin = f->depth - rel;
100019ee:	68fb      	ldr	r3, [r7, #12]
100019f0:	8899      	ldrh	r1, [r3, #4]
100019f2:	2026      	movs	r0, #38	; 0x26
100019f4:	183b      	adds	r3, r7, r0
100019f6:	1d3a      	adds	r2, r7, #4
100019f8:	8812      	ldrh	r2, [r2, #0]
100019fa:	1a8a      	subs	r2, r1, r2
100019fc:	801a      	strh	r2, [r3, #0]
  uint16_t const nWrap = n - nLin; // only used if wrapped
100019fe:	2424      	movs	r4, #36	; 0x24
10001a00:	193b      	adds	r3, r7, r4
10001a02:	1db9      	adds	r1, r7, #6
10001a04:	183a      	adds	r2, r7, r0
10001a06:	8809      	ldrh	r1, [r1, #0]
10001a08:	8812      	ldrh	r2, [r2, #0]
10001a0a:	1a8a      	subs	r2, r1, r2
10001a0c:	801a      	strh	r2, [r3, #0]

  uint16_t nLin_bytes = nLin * f->item_size;
10001a0e:	68fb      	ldr	r3, [r7, #12]
10001a10:	88da      	ldrh	r2, [r3, #6]
10001a12:	2322      	movs	r3, #34	; 0x22
10001a14:	18fb      	adds	r3, r7, r3
10001a16:	1839      	adds	r1, r7, r0
10001a18:	8809      	ldrh	r1, [r1, #0]
10001a1a:	434a      	muls	r2, r1
10001a1c:	801a      	strh	r2, [r3, #0]
  uint16_t nWrap_bytes = nWrap * f->item_size;
10001a1e:	68fb      	ldr	r3, [r7, #12]
10001a20:	88da      	ldrh	r2, [r3, #6]
10001a22:	2336      	movs	r3, #54	; 0x36
10001a24:	18fb      	adds	r3, r7, r3
10001a26:	1939      	adds	r1, r7, r4
10001a28:	8809      	ldrh	r1, [r1, #0]
10001a2a:	434a      	muls	r2, r1
10001a2c:	801a      	strh	r2, [r3, #0]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
10001a2e:	68fb      	ldr	r3, [r7, #12]
10001a30:	681b      	ldr	r3, [r3, #0]
10001a32:	1d3a      	adds	r2, r7, #4
10001a34:	8812      	ldrh	r2, [r2, #0]
10001a36:	68f9      	ldr	r1, [r7, #12]
10001a38:	88c9      	ldrh	r1, [r1, #6]
10001a3a:	434a      	muls	r2, r1
10001a3c:	189b      	adds	r3, r3, r2
10001a3e:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
10001a40:	2340      	movs	r3, #64	; 0x40
10001a42:	2208      	movs	r2, #8
10001a44:	189b      	adds	r3, r3, r2
10001a46:	19db      	adds	r3, r3, r7
10001a48:	781b      	ldrb	r3, [r3, #0]
10001a4a:	2b00      	cmp	r3, #0
10001a4c:	d002      	beq.n	10001a54 <_ff_pull_n+0x7c>
10001a4e:	2b01      	cmp	r3, #1
10001a50:	d028      	beq.n	10001aa4 <_ff_pull_n+0xcc>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
10001a52:	e0c2      	b.n	10001bda <_ff_pull_n+0x202>
      if ( n <= nLin )
10001a54:	1dba      	adds	r2, r7, #6
10001a56:	2326      	movs	r3, #38	; 0x26
10001a58:	18fb      	adds	r3, r7, r3
10001a5a:	8812      	ldrh	r2, [r2, #0]
10001a5c:	881b      	ldrh	r3, [r3, #0]
10001a5e:	429a      	cmp	r2, r3
10001a60:	d80b      	bhi.n	10001a7a <_ff_pull_n+0xa2>
        memcpy(app_buf, ff_buf, n*f->item_size);
10001a62:	1dbb      	adds	r3, r7, #6
10001a64:	881b      	ldrh	r3, [r3, #0]
10001a66:	68fa      	ldr	r2, [r7, #12]
10001a68:	88d2      	ldrh	r2, [r2, #6]
10001a6a:	4353      	muls	r3, r2
10001a6c:	001a      	movs	r2, r3
10001a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
10001a70:	68bb      	ldr	r3, [r7, #8]
10001a72:	0018      	movs	r0, r3
10001a74:	f00b fa76 	bl	1000cf64 <__wrap___aeabi_memcpy>
    break;
10001a78:	e0af      	b.n	10001bda <_ff_pull_n+0x202>
        memcpy(app_buf, ff_buf, nLin_bytes);
10001a7a:	2422      	movs	r4, #34	; 0x22
10001a7c:	193b      	adds	r3, r7, r4
10001a7e:	881a      	ldrh	r2, [r3, #0]
10001a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
10001a82:	68bb      	ldr	r3, [r7, #8]
10001a84:	0018      	movs	r0, r3
10001a86:	f00b fa6d 	bl	1000cf64 <__wrap___aeabi_memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
10001a8a:	193b      	adds	r3, r7, r4
10001a8c:	881b      	ldrh	r3, [r3, #0]
10001a8e:	68ba      	ldr	r2, [r7, #8]
10001a90:	18d0      	adds	r0, r2, r3
10001a92:	68fb      	ldr	r3, [r7, #12]
10001a94:	6819      	ldr	r1, [r3, #0]
10001a96:	2336      	movs	r3, #54	; 0x36
10001a98:	18fb      	adds	r3, r7, r3
10001a9a:	881b      	ldrh	r3, [r3, #0]
10001a9c:	001a      	movs	r2, r3
10001a9e:	f00b fa61 	bl	1000cf64 <__wrap___aeabi_memcpy>
    break;
10001aa2:	e09a      	b.n	10001bda <_ff_pull_n+0x202>
      if ( n <= nLin )
10001aa4:	1dba      	adds	r2, r7, #6
10001aa6:	2326      	movs	r3, #38	; 0x26
10001aa8:	18fb      	adds	r3, r7, r3
10001aaa:	8812      	ldrh	r2, [r2, #0]
10001aac:	881b      	ldrh	r3, [r3, #0]
10001aae:	429a      	cmp	r2, r3
10001ab0:	d80b      	bhi.n	10001aca <_ff_pull_n+0xf2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
10001ab2:	68fb      	ldr	r3, [r7, #12]
10001ab4:	88db      	ldrh	r3, [r3, #6]
10001ab6:	1dba      	adds	r2, r7, #6
10001ab8:	8812      	ldrh	r2, [r2, #0]
10001aba:	4353      	muls	r3, r2
10001abc:	b29a      	uxth	r2, r3
10001abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
10001ac0:	68bb      	ldr	r3, [r7, #8]
10001ac2:	0018      	movs	r0, r3
10001ac4:	f7ff fe06 	bl	100016d4 <_ff_pull_const_addr>
    break;
10001ac8:	e086      	b.n	10001bd8 <_ff_pull_n+0x200>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
10001aca:	2020      	movs	r0, #32
10001acc:	183b      	adds	r3, r7, r0
10001ace:	2522      	movs	r5, #34	; 0x22
10001ad0:	197a      	adds	r2, r7, r5
10001ad2:	8812      	ldrh	r2, [r2, #0]
10001ad4:	2103      	movs	r1, #3
10001ad6:	438a      	bics	r2, r1
10001ad8:	801a      	strh	r2, [r3, #0]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
10001ada:	0004      	movs	r4, r0
10001adc:	183b      	adds	r3, r7, r0
10001ade:	881a      	ldrh	r2, [r3, #0]
10001ae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
10001ae2:	68bb      	ldr	r3, [r7, #8]
10001ae4:	0018      	movs	r0, r3
10001ae6:	f7ff fdf5 	bl	100016d4 <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
10001aea:	193b      	adds	r3, r7, r4
10001aec:	881b      	ldrh	r3, [r3, #0]
10001aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10001af0:	18d3      	adds	r3, r2, r3
10001af2:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
10001af4:	68bb      	ldr	r3, [r7, #8]
10001af6:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
10001af8:	197b      	adds	r3, r7, r5
10001afa:	881b      	ldrh	r3, [r3, #0]
10001afc:	b2da      	uxtb	r2, r3
10001afe:	202f      	movs	r0, #47	; 0x2f
10001b00:	183b      	adds	r3, r7, r0
10001b02:	2103      	movs	r1, #3
10001b04:	400a      	ands	r2, r1
10001b06:	701a      	strb	r2, [r3, #0]
        if (rem > 0)
10001b08:	0002      	movs	r2, r0
10001b0a:	18bb      	adds	r3, r7, r2
10001b0c:	781b      	ldrb	r3, [r3, #0]
10001b0e:	2b00      	cmp	r3, #0
10001b10:	d053      	beq.n	10001bba <_ff_pull_n+0x1e2>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
10001b12:	18bb      	adds	r3, r7, r2
10001b14:	781b      	ldrb	r3, [r3, #0]
10001b16:	b29b      	uxth	r3, r3
10001b18:	2204      	movs	r2, #4
10001b1a:	1ad3      	subs	r3, r2, r3
10001b1c:	b299      	uxth	r1, r3
10001b1e:	201a      	movs	r0, #26
10001b20:	183b      	adds	r3, r7, r0
10001b22:	2236      	movs	r2, #54	; 0x36
10001b24:	18ba      	adds	r2, r7, r2
10001b26:	8812      	ldrh	r2, [r2, #0]
10001b28:	801a      	strh	r2, [r3, #0]
10001b2a:	2418      	movs	r4, #24
10001b2c:	193b      	adds	r3, r7, r4
10001b2e:	1c0a      	adds	r2, r1, #0
10001b30:	801a      	strh	r2, [r3, #0]
10001b32:	183b      	adds	r3, r7, r0
10001b34:	193a      	adds	r2, r7, r4
10001b36:	8810      	ldrh	r0, [r2, #0]
10001b38:	881b      	ldrh	r3, [r3, #0]
10001b3a:	b299      	uxth	r1, r3
10001b3c:	b282      	uxth	r2, r0
10001b3e:	4291      	cmp	r1, r2
10001b40:	d900      	bls.n	10001b44 <_ff_pull_n+0x16c>
10001b42:	1c03      	adds	r3, r0, #0
10001b44:	b29a      	uxth	r2, r3
10001b46:	212e      	movs	r1, #46	; 0x2e
10001b48:	187b      	adds	r3, r7, r1
10001b4a:	701a      	strb	r2, [r3, #0]
          nWrap_bytes -= remrem;
10001b4c:	187b      	adds	r3, r7, r1
10001b4e:	781b      	ldrb	r3, [r3, #0]
10001b50:	b29a      	uxth	r2, r3
10001b52:	2136      	movs	r1, #54	; 0x36
10001b54:	187b      	adds	r3, r7, r1
10001b56:	1879      	adds	r1, r7, r1
10001b58:	8809      	ldrh	r1, [r1, #0]
10001b5a:	1a8a      	subs	r2, r1, r2
10001b5c:	801a      	strh	r2, [r3, #0]
          uint32_t tmp32=0;
10001b5e:	2300      	movs	r3, #0
10001b60:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
10001b62:	2314      	movs	r3, #20
10001b64:	18fb      	adds	r3, r7, r3
10001b66:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
10001b68:	e007      	b.n	10001b7a <_ff_pull_n+0x1a2>
10001b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10001b6c:	1c53      	adds	r3, r2, #1
10001b6e:	633b      	str	r3, [r7, #48]	; 0x30
10001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001b72:	1c59      	adds	r1, r3, #1
10001b74:	62b9      	str	r1, [r7, #40]	; 0x28
10001b76:	7812      	ldrb	r2, [r2, #0]
10001b78:	701a      	strb	r2, [r3, #0]
10001b7a:	222f      	movs	r2, #47	; 0x2f
10001b7c:	18bb      	adds	r3, r7, r2
10001b7e:	781b      	ldrb	r3, [r3, #0]
10001b80:	18ba      	adds	r2, r7, r2
10001b82:	1e59      	subs	r1, r3, #1
10001b84:	7011      	strb	r1, [r2, #0]
10001b86:	2b00      	cmp	r3, #0
10001b88:	d1ef      	bne.n	10001b6a <_ff_pull_n+0x192>
          ff_buf = f->buffer;
10001b8a:	68fb      	ldr	r3, [r7, #12]
10001b8c:	681b      	ldr	r3, [r3, #0]
10001b8e:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
10001b90:	e007      	b.n	10001ba2 <_ff_pull_n+0x1ca>
10001b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10001b94:	1c53      	adds	r3, r2, #1
10001b96:	633b      	str	r3, [r7, #48]	; 0x30
10001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001b9a:	1c59      	adds	r1, r3, #1
10001b9c:	62b9      	str	r1, [r7, #40]	; 0x28
10001b9e:	7812      	ldrb	r2, [r2, #0]
10001ba0:	701a      	strb	r2, [r3, #0]
10001ba2:	222e      	movs	r2, #46	; 0x2e
10001ba4:	18bb      	adds	r3, r7, r2
10001ba6:	781b      	ldrb	r3, [r3, #0]
10001ba8:	18ba      	adds	r2, r7, r2
10001baa:	1e59      	subs	r1, r3, #1
10001bac:	7011      	strb	r1, [r2, #0]
10001bae:	2b00      	cmp	r3, #0
10001bb0:	d1ef      	bne.n	10001b92 <_ff_pull_n+0x1ba>
          *tx_fifo = tmp32;
10001bb2:	697a      	ldr	r2, [r7, #20]
10001bb4:	69fb      	ldr	r3, [r7, #28]
10001bb6:	601a      	str	r2, [r3, #0]
10001bb8:	e002      	b.n	10001bc0 <_ff_pull_n+0x1e8>
          ff_buf = f->buffer; // wrap around to beginning
10001bba:	68fb      	ldr	r3, [r7, #12]
10001bbc:	681b      	ldr	r3, [r3, #0]
10001bbe:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
10001bc0:	2236      	movs	r2, #54	; 0x36
10001bc2:	18bb      	adds	r3, r7, r2
10001bc4:	881b      	ldrh	r3, [r3, #0]
10001bc6:	2b00      	cmp	r3, #0
10001bc8:	d006      	beq.n	10001bd8 <_ff_pull_n+0x200>
10001bca:	18bb      	adds	r3, r7, r2
10001bcc:	881a      	ldrh	r2, [r3, #0]
10001bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
10001bd0:	68bb      	ldr	r3, [r7, #8]
10001bd2:	0018      	movs	r0, r3
10001bd4:	f7ff fd7e 	bl	100016d4 <_ff_pull_const_addr>
    break;
10001bd8:	46c0      	nop			; (mov r8, r8)
  }
}
10001bda:	46c0      	nop			; (mov r8, r8)
10001bdc:	46bd      	mov	sp, r7
10001bde:	b00e      	add	sp, #56	; 0x38
10001be0:	bdb0      	pop	{r4, r5, r7, pc}

10001be2 <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
10001be2:	b580      	push	{r7, lr}
10001be4:	b082      	sub	sp, #8
10001be6:	af00      	add	r7, sp, #0
10001be8:	6078      	str	r0, [r7, #4]
10001bea:	0008      	movs	r0, r1
10001bec:	0011      	movs	r1, r2
10001bee:	1cbb      	adds	r3, r7, #2
10001bf0:	1c02      	adds	r2, r0, #0
10001bf2:	801a      	strh	r2, [r3, #0]
10001bf4:	003b      	movs	r3, r7
10001bf6:	1c0a      	adds	r2, r1, #0
10001bf8:	801a      	strh	r2, [r3, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
10001bfa:	1cba      	adds	r2, r7, #2
10001bfc:	003b      	movs	r3, r7
10001bfe:	8812      	ldrh	r2, [r2, #0]
10001c00:	881b      	ldrh	r3, [r3, #0]
10001c02:	18d3      	adds	r3, r2, r3
10001c04:	b29b      	uxth	r3, r3
10001c06:	1cba      	adds	r2, r7, #2
10001c08:	8812      	ldrh	r2, [r2, #0]
10001c0a:	429a      	cmp	r2, r3
10001c0c:	d809      	bhi.n	10001c22 <advance_pointer+0x40>
10001c0e:	1cba      	adds	r2, r7, #2
10001c10:	003b      	movs	r3, r7
10001c12:	8812      	ldrh	r2, [r2, #0]
10001c14:	881b      	ldrh	r3, [r3, #0]
10001c16:	18d3      	adds	r3, r2, r3
10001c18:	b29a      	uxth	r2, r3
10001c1a:	687b      	ldr	r3, [r7, #4]
10001c1c:	899b      	ldrh	r3, [r3, #12]
10001c1e:	429a      	cmp	r2, r3
10001c20:	d90b      	bls.n	10001c3a <advance_pointer+0x58>
  {
    p = (p + offset) + f->non_used_index_space;
10001c22:	1cba      	adds	r2, r7, #2
10001c24:	003b      	movs	r3, r7
10001c26:	8812      	ldrh	r2, [r2, #0]
10001c28:	881b      	ldrh	r3, [r3, #0]
10001c2a:	18d3      	adds	r3, r2, r3
10001c2c:	b299      	uxth	r1, r3
10001c2e:	687b      	ldr	r3, [r7, #4]
10001c30:	895a      	ldrh	r2, [r3, #10]
10001c32:	1cbb      	adds	r3, r7, #2
10001c34:	188a      	adds	r2, r1, r2
10001c36:	801a      	strh	r2, [r3, #0]
10001c38:	e006      	b.n	10001c48 <advance_pointer+0x66>
  }
  else
  {
    p += offset;
10001c3a:	1cbb      	adds	r3, r7, #2
10001c3c:	1cb9      	adds	r1, r7, #2
10001c3e:	003a      	movs	r2, r7
10001c40:	8809      	ldrh	r1, [r1, #0]
10001c42:	8812      	ldrh	r2, [r2, #0]
10001c44:	188a      	adds	r2, r1, r2
10001c46:	801a      	strh	r2, [r3, #0]
  }
  return p;
10001c48:	1cbb      	adds	r3, r7, #2
10001c4a:	881b      	ldrh	r3, [r3, #0]
}
10001c4c:	0018      	movs	r0, r3
10001c4e:	46bd      	mov	sp, r7
10001c50:	b002      	add	sp, #8
10001c52:	bd80      	pop	{r7, pc}

10001c54 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
10001c54:	b580      	push	{r7, lr}
10001c56:	b082      	sub	sp, #8
10001c58:	af00      	add	r7, sp, #0
10001c5a:	6078      	str	r0, [r7, #4]
10001c5c:	0008      	movs	r0, r1
10001c5e:	0011      	movs	r1, r2
10001c60:	1cbb      	adds	r3, r7, #2
10001c62:	1c02      	adds	r2, r0, #0
10001c64:	801a      	strh	r2, [r3, #0]
10001c66:	003b      	movs	r3, r7
10001c68:	1c0a      	adds	r2, r1, #0
10001c6a:	801a      	strh	r2, [r3, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
10001c6c:	003a      	movs	r2, r7
10001c6e:	1cbb      	adds	r3, r7, #2
10001c70:	8812      	ldrh	r2, [r2, #0]
10001c72:	881b      	ldrh	r3, [r3, #0]
10001c74:	429a      	cmp	r2, r3
10001c76:	d809      	bhi.n	10001c8c <backward_pointer+0x38>
10001c78:	1cba      	adds	r2, r7, #2
10001c7a:	003b      	movs	r3, r7
10001c7c:	8812      	ldrh	r2, [r2, #0]
10001c7e:	881b      	ldrh	r3, [r3, #0]
10001c80:	1ad3      	subs	r3, r2, r3
10001c82:	b29a      	uxth	r2, r3
10001c84:	687b      	ldr	r3, [r7, #4]
10001c86:	899b      	ldrh	r3, [r3, #12]
10001c88:	429a      	cmp	r2, r3
10001c8a:	d90b      	bls.n	10001ca4 <backward_pointer+0x50>
  {
    p = (p - offset) - f->non_used_index_space;
10001c8c:	1cba      	adds	r2, r7, #2
10001c8e:	003b      	movs	r3, r7
10001c90:	8812      	ldrh	r2, [r2, #0]
10001c92:	881b      	ldrh	r3, [r3, #0]
10001c94:	1ad3      	subs	r3, r2, r3
10001c96:	b299      	uxth	r1, r3
10001c98:	687b      	ldr	r3, [r7, #4]
10001c9a:	895a      	ldrh	r2, [r3, #10]
10001c9c:	1cbb      	adds	r3, r7, #2
10001c9e:	1a8a      	subs	r2, r1, r2
10001ca0:	801a      	strh	r2, [r3, #0]
10001ca2:	e006      	b.n	10001cb2 <backward_pointer+0x5e>
  }
  else
  {
    p -= offset;
10001ca4:	1cbb      	adds	r3, r7, #2
10001ca6:	1cb9      	adds	r1, r7, #2
10001ca8:	003a      	movs	r2, r7
10001caa:	8809      	ldrh	r1, [r1, #0]
10001cac:	8812      	ldrh	r2, [r2, #0]
10001cae:	1a8a      	subs	r2, r1, r2
10001cb0:	801a      	strh	r2, [r3, #0]
  }
  return p;
10001cb2:	1cbb      	adds	r3, r7, #2
10001cb4:	881b      	ldrh	r3, [r3, #0]
}
10001cb6:	0018      	movs	r0, r3
10001cb8:	46bd      	mov	sp, r7
10001cba:	b002      	add	sp, #8
10001cbc:	bd80      	pop	{r7, pc}

10001cbe <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
10001cbe:	b580      	push	{r7, lr}
10001cc0:	b082      	sub	sp, #8
10001cc2:	af00      	add	r7, sp, #0
10001cc4:	6078      	str	r0, [r7, #4]
10001cc6:	000a      	movs	r2, r1
10001cc8:	1cbb      	adds	r3, r7, #2
10001cca:	801a      	strh	r2, [r3, #0]
  return _ff_mod(p, f->depth);
10001ccc:	687b      	ldr	r3, [r7, #4]
10001cce:	889a      	ldrh	r2, [r3, #4]
10001cd0:	1cbb      	adds	r3, r7, #2
10001cd2:	881b      	ldrh	r3, [r3, #0]
10001cd4:	0011      	movs	r1, r2
10001cd6:	0018      	movs	r0, r3
10001cd8:	f7ff fc77 	bl	100015ca <_ff_mod>
10001cdc:	0003      	movs	r3, r0
}
10001cde:	0018      	movs	r0, r3
10001ce0:	46bd      	mov	sp, r7
10001ce2:	b002      	add	sp, #8
10001ce4:	bd80      	pop	{r7, pc}

10001ce6 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
10001ce6:	b580      	push	{r7, lr}
10001ce8:	b084      	sub	sp, #16
10001cea:	af00      	add	r7, sp, #0
10001cec:	6078      	str	r0, [r7, #4]
10001cee:	0008      	movs	r0, r1
10001cf0:	0011      	movs	r1, r2
10001cf2:	1cbb      	adds	r3, r7, #2
10001cf4:	1c02      	adds	r2, r0, #0
10001cf6:	801a      	strh	r2, [r3, #0]
10001cf8:	003b      	movs	r3, r7
10001cfa:	1c0a      	adds	r2, r1, #0
10001cfc:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = wAbs-rAbs;
10001cfe:	200e      	movs	r0, #14
10001d00:	183b      	adds	r3, r7, r0
10001d02:	1cb9      	adds	r1, r7, #2
10001d04:	003a      	movs	r2, r7
10001d06:	8809      	ldrh	r1, [r1, #0]
10001d08:	8812      	ldrh	r2, [r2, #0]
10001d0a:	1a8a      	subs	r2, r1, r2
10001d0c:	801a      	strh	r2, [r3, #0]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10001d0e:	003a      	movs	r2, r7
10001d10:	1cbb      	adds	r3, r7, #2
10001d12:	8812      	ldrh	r2, [r2, #0]
10001d14:	881b      	ldrh	r3, [r3, #0]
10001d16:	429a      	cmp	r2, r3
10001d18:	d906      	bls.n	10001d28 <_tu_fifo_count+0x42>
10001d1a:	687b      	ldr	r3, [r7, #4]
10001d1c:	895a      	ldrh	r2, [r3, #10]
10001d1e:	183b      	adds	r3, r7, r0
10001d20:	1839      	adds	r1, r7, r0
10001d22:	8809      	ldrh	r1, [r1, #0]
10001d24:	1a8a      	subs	r2, r1, r2
10001d26:	801a      	strh	r2, [r3, #0]

  return cnt;
10001d28:	230e      	movs	r3, #14
10001d2a:	18fb      	adds	r3, r7, r3
10001d2c:	881b      	ldrh	r3, [r3, #0]
}
10001d2e:	0018      	movs	r0, r3
10001d30:	46bd      	mov	sp, r7
10001d32:	b004      	add	sp, #16
10001d34:	bd80      	pop	{r7, pc}

10001d36 <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
10001d36:	b580      	push	{r7, lr}
10001d38:	b082      	sub	sp, #8
10001d3a:	af00      	add	r7, sp, #0
10001d3c:	0002      	movs	r2, r0
10001d3e:	1dbb      	adds	r3, r7, #6
10001d40:	801a      	strh	r2, [r3, #0]
10001d42:	1d3b      	adds	r3, r7, #4
10001d44:	1c0a      	adds	r2, r1, #0
10001d46:	801a      	strh	r2, [r3, #0]
  return wAbs == rAbs;
10001d48:	1dba      	adds	r2, r7, #6
10001d4a:	1d3b      	adds	r3, r7, #4
10001d4c:	8812      	ldrh	r2, [r2, #0]
10001d4e:	881b      	ldrh	r3, [r3, #0]
10001d50:	1ad3      	subs	r3, r2, r3
10001d52:	425a      	negs	r2, r3
10001d54:	4153      	adcs	r3, r2
10001d56:	b2db      	uxtb	r3, r3
}
10001d58:	0018      	movs	r0, r3
10001d5a:	46bd      	mov	sp, r7
10001d5c:	b002      	add	sp, #8
10001d5e:	bd80      	pop	{r7, pc}

10001d60 <_tu_fifo_full>:

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
10001d60:	b580      	push	{r7, lr}
10001d62:	b082      	sub	sp, #8
10001d64:	af00      	add	r7, sp, #0
10001d66:	6078      	str	r0, [r7, #4]
10001d68:	0008      	movs	r0, r1
10001d6a:	0011      	movs	r1, r2
10001d6c:	1cbb      	adds	r3, r7, #2
10001d6e:	1c02      	adds	r2, r0, #0
10001d70:	801a      	strh	r2, [r3, #0]
10001d72:	003b      	movs	r3, r7
10001d74:	1c0a      	adds	r2, r1, #0
10001d76:	801a      	strh	r2, [r3, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
10001d78:	003b      	movs	r3, r7
10001d7a:	881a      	ldrh	r2, [r3, #0]
10001d7c:	1cbb      	adds	r3, r7, #2
10001d7e:	8819      	ldrh	r1, [r3, #0]
10001d80:	687b      	ldr	r3, [r7, #4]
10001d82:	0018      	movs	r0, r3
10001d84:	f7ff ffaf 	bl	10001ce6 <_tu_fifo_count>
10001d88:	0003      	movs	r3, r0
10001d8a:	001a      	movs	r2, r3
10001d8c:	687b      	ldr	r3, [r7, #4]
10001d8e:	889b      	ldrh	r3, [r3, #4]
10001d90:	1ad3      	subs	r3, r2, r3
10001d92:	425a      	negs	r2, r3
10001d94:	4153      	adcs	r3, r2
10001d96:	b2db      	uxtb	r3, r3
}
10001d98:	0018      	movs	r0, r3
10001d9a:	46bd      	mov	sp, r7
10001d9c:	b002      	add	sp, #8
10001d9e:	bd80      	pop	{r7, pc}

10001da0 <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
10001da0:	b580      	push	{r7, lr}
10001da2:	b082      	sub	sp, #8
10001da4:	af00      	add	r7, sp, #0
10001da6:	6078      	str	r0, [r7, #4]
10001da8:	000a      	movs	r2, r1
10001daa:	1cbb      	adds	r3, r7, #2
10001dac:	801a      	strh	r2, [r3, #0]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10001dae:	687b      	ldr	r3, [r7, #4]
10001db0:	889a      	ldrh	r2, [r3, #4]
10001db2:	1cbb      	adds	r3, r7, #2
10001db4:	8819      	ldrh	r1, [r3, #0]
10001db6:	687b      	ldr	r3, [r7, #4]
10001db8:	0018      	movs	r0, r3
10001dba:	f7ff ff4b 	bl	10001c54 <backward_pointer>
10001dbe:	0003      	movs	r3, r0
10001dc0:	001a      	movs	r2, r3
10001dc2:	687b      	ldr	r3, [r7, #4]
10001dc4:	821a      	strh	r2, [r3, #16]
}
10001dc6:	46c0      	nop			; (mov r8, r8)
10001dc8:	46bd      	mov	sp, r7
10001dca:	b002      	add	sp, #8
10001dcc:	bd80      	pop	{r7, pc}

10001dce <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
10001dce:	b5b0      	push	{r4, r5, r7, lr}
10001dd0:	b086      	sub	sp, #24
10001dd2:	af00      	add	r7, sp, #0
10001dd4:	60f8      	str	r0, [r7, #12]
10001dd6:	60b9      	str	r1, [r7, #8]
10001dd8:	0019      	movs	r1, r3
10001dda:	1dbb      	adds	r3, r7, #6
10001ddc:	801a      	strh	r2, [r3, #0]
10001dde:	1d3b      	adds	r3, r7, #4
10001de0:	1c0a      	adds	r2, r1, #0
10001de2:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
10001de4:	2516      	movs	r5, #22
10001de6:	197c      	adds	r4, r7, r5
10001de8:	1d3b      	adds	r3, r7, #4
10001dea:	881a      	ldrh	r2, [r3, #0]
10001dec:	1dbb      	adds	r3, r7, #6
10001dee:	8819      	ldrh	r1, [r3, #0]
10001df0:	68fb      	ldr	r3, [r7, #12]
10001df2:	0018      	movs	r0, r3
10001df4:	f7ff ff77 	bl	10001ce6 <_tu_fifo_count>
10001df8:	0003      	movs	r3, r0
10001dfa:	8023      	strh	r3, [r4, #0]

  // Check overflow and correct if required
  if (cnt > f->depth)
10001dfc:	68fb      	ldr	r3, [r7, #12]
10001dfe:	889b      	ldrh	r3, [r3, #4]
10001e00:	197a      	adds	r2, r7, r5
10001e02:	8812      	ldrh	r2, [r2, #0]
10001e04:	429a      	cmp	r2, r3
10001e06:	d90a      	bls.n	10001e1e <_tu_fifo_peek+0x50>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
10001e08:	1dbb      	adds	r3, r7, #6
10001e0a:	881a      	ldrh	r2, [r3, #0]
10001e0c:	68fb      	ldr	r3, [r7, #12]
10001e0e:	0011      	movs	r1, r2
10001e10:	0018      	movs	r0, r3
10001e12:	f7ff ffc5 	bl	10001da0 <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
10001e16:	197b      	adds	r3, r7, r5
10001e18:	68fa      	ldr	r2, [r7, #12]
10001e1a:	8892      	ldrh	r2, [r2, #4]
10001e1c:	801a      	strh	r2, [r3, #0]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
10001e1e:	2316      	movs	r3, #22
10001e20:	18fb      	adds	r3, r7, r3
10001e22:	881b      	ldrh	r3, [r3, #0]
10001e24:	2b00      	cmp	r3, #0
10001e26:	d101      	bne.n	10001e2c <_tu_fifo_peek+0x5e>
10001e28:	2300      	movs	r3, #0
10001e2a:	e012      	b.n	10001e52 <_tu_fifo_peek+0x84>

  uint16_t rRel = get_relative_pointer(f, rAbs);
10001e2c:	2514      	movs	r5, #20
10001e2e:	197c      	adds	r4, r7, r5
10001e30:	1d3b      	adds	r3, r7, #4
10001e32:	881a      	ldrh	r2, [r3, #0]
10001e34:	68fb      	ldr	r3, [r7, #12]
10001e36:	0011      	movs	r1, r2
10001e38:	0018      	movs	r0, r3
10001e3a:	f7ff ff40 	bl	10001cbe <get_relative_pointer>
10001e3e:	0003      	movs	r3, r0
10001e40:	8023      	strh	r3, [r4, #0]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
10001e42:	197b      	adds	r3, r7, r5
10001e44:	881a      	ldrh	r2, [r3, #0]
10001e46:	68b9      	ldr	r1, [r7, #8]
10001e48:	68fb      	ldr	r3, [r7, #12]
10001e4a:	0018      	movs	r0, r3
10001e4c:	f7ff fdaa 	bl	100019a4 <_ff_pull>

  return true;
10001e50:	2301      	movs	r3, #1
}
10001e52:	0018      	movs	r0, r3
10001e54:	46bd      	mov	sp, r7
10001e56:	b006      	add	sp, #24
10001e58:	bdb0      	pop	{r4, r5, r7, pc}

10001e5a <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
10001e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e5c:	b089      	sub	sp, #36	; 0x24
10001e5e:	af02      	add	r7, sp, #8
10001e60:	60f8      	str	r0, [r7, #12]
10001e62:	60b9      	str	r1, [r7, #8]
10001e64:	0019      	movs	r1, r3
10001e66:	1dbb      	adds	r3, r7, #6
10001e68:	801a      	strh	r2, [r3, #0]
10001e6a:	1d3b      	adds	r3, r7, #4
10001e6c:	1c0a      	adds	r2, r1, #0
10001e6e:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
10001e70:	2516      	movs	r5, #22
10001e72:	197c      	adds	r4, r7, r5
10001e74:	2628      	movs	r6, #40	; 0x28
10001e76:	2308      	movs	r3, #8
10001e78:	18f2      	adds	r2, r6, r3
10001e7a:	19d3      	adds	r3, r2, r7
10001e7c:	881a      	ldrh	r2, [r3, #0]
10001e7e:	1d3b      	adds	r3, r7, #4
10001e80:	8819      	ldrh	r1, [r3, #0]
10001e82:	68fb      	ldr	r3, [r7, #12]
10001e84:	0018      	movs	r0, r3
10001e86:	f7ff ff2e 	bl	10001ce6 <_tu_fifo_count>
10001e8a:	0003      	movs	r3, r0
10001e8c:	8023      	strh	r3, [r4, #0]

  // Check overflow and correct if required
  if (cnt > f->depth)
10001e8e:	68fb      	ldr	r3, [r7, #12]
10001e90:	889b      	ldrh	r3, [r3, #4]
10001e92:	197a      	adds	r2, r7, r5
10001e94:	8812      	ldrh	r2, [r2, #0]
10001e96:	429a      	cmp	r2, r3
10001e98:	d910      	bls.n	10001ebc <_tu_fifo_peek_n+0x62>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
10001e9a:	1d3b      	adds	r3, r7, #4
10001e9c:	881a      	ldrh	r2, [r3, #0]
10001e9e:	68fb      	ldr	r3, [r7, #12]
10001ea0:	0011      	movs	r1, r2
10001ea2:	0018      	movs	r0, r3
10001ea4:	f7ff ff7c 	bl	10001da0 <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
10001ea8:	2308      	movs	r3, #8
10001eaa:	18f3      	adds	r3, r6, r3
10001eac:	19db      	adds	r3, r3, r7
10001eae:	68fa      	ldr	r2, [r7, #12]
10001eb0:	8a12      	ldrh	r2, [r2, #16]
10001eb2:	801a      	strh	r2, [r3, #0]
    cnt = f->depth;
10001eb4:	197b      	adds	r3, r7, r5
10001eb6:	68fa      	ldr	r2, [r7, #12]
10001eb8:	8892      	ldrh	r2, [r2, #4]
10001eba:	801a      	strh	r2, [r3, #0]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
10001ebc:	2316      	movs	r3, #22
10001ebe:	18fb      	adds	r3, r7, r3
10001ec0:	881b      	ldrh	r3, [r3, #0]
10001ec2:	2b00      	cmp	r3, #0
10001ec4:	d101      	bne.n	10001eca <_tu_fifo_peek_n+0x70>
10001ec6:	2300      	movs	r3, #0
10001ec8:	e028      	b.n	10001f1c <_tu_fifo_peek_n+0xc2>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
10001eca:	2116      	movs	r1, #22
10001ecc:	187a      	adds	r2, r7, r1
10001ece:	1dbb      	adds	r3, r7, #6
10001ed0:	8812      	ldrh	r2, [r2, #0]
10001ed2:	881b      	ldrh	r3, [r3, #0]
10001ed4:	429a      	cmp	r2, r3
10001ed6:	d203      	bcs.n	10001ee0 <_tu_fifo_peek_n+0x86>
10001ed8:	1dbb      	adds	r3, r7, #6
10001eda:	187a      	adds	r2, r7, r1
10001edc:	8812      	ldrh	r2, [r2, #0]
10001ede:	801a      	strh	r2, [r3, #0]

  uint16_t rRel = get_relative_pointer(f, rAbs);
10001ee0:	2514      	movs	r5, #20
10001ee2:	197c      	adds	r4, r7, r5
10001ee4:	2328      	movs	r3, #40	; 0x28
10001ee6:	2608      	movs	r6, #8
10001ee8:	199b      	adds	r3, r3, r6
10001eea:	19db      	adds	r3, r3, r7
10001eec:	881a      	ldrh	r2, [r3, #0]
10001eee:	68fb      	ldr	r3, [r7, #12]
10001ef0:	0011      	movs	r1, r2
10001ef2:	0018      	movs	r0, r3
10001ef4:	f7ff fee3 	bl	10001cbe <get_relative_pointer>
10001ef8:	0003      	movs	r3, r0
10001efa:	8023      	strh	r3, [r4, #0]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
10001efc:	197b      	adds	r3, r7, r5
10001efe:	881c      	ldrh	r4, [r3, #0]
10001f00:	1dbb      	adds	r3, r7, #6
10001f02:	881a      	ldrh	r2, [r3, #0]
10001f04:	68b9      	ldr	r1, [r7, #8]
10001f06:	68f8      	ldr	r0, [r7, #12]
10001f08:	232c      	movs	r3, #44	; 0x2c
10001f0a:	199b      	adds	r3, r3, r6
10001f0c:	19db      	adds	r3, r3, r7
10001f0e:	781b      	ldrb	r3, [r3, #0]
10001f10:	9300      	str	r3, [sp, #0]
10001f12:	0023      	movs	r3, r4
10001f14:	f7ff fd60 	bl	100019d8 <_ff_pull_n>

  return n;
10001f18:	1dbb      	adds	r3, r7, #6
10001f1a:	881b      	ldrh	r3, [r3, #0]
}
10001f1c:	0018      	movs	r0, r3
10001f1e:	46bd      	mov	sp, r7
10001f20:	b007      	add	sp, #28
10001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001f24 <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
10001f24:	b590      	push	{r4, r7, lr}
10001f26:	b083      	sub	sp, #12
10001f28:	af00      	add	r7, sp, #0
10001f2a:	6078      	str	r0, [r7, #4]
10001f2c:	0008      	movs	r0, r1
10001f2e:	0011      	movs	r1, r2
10001f30:	1cbb      	adds	r3, r7, #2
10001f32:	1c02      	adds	r2, r0, #0
10001f34:	801a      	strh	r2, [r3, #0]
10001f36:	003b      	movs	r3, r7
10001f38:	1c0a      	adds	r2, r1, #0
10001f3a:	801a      	strh	r2, [r3, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10001f3c:	687b      	ldr	r3, [r7, #4]
10001f3e:	889c      	ldrh	r4, [r3, #4]
10001f40:	003b      	movs	r3, r7
10001f42:	881a      	ldrh	r2, [r3, #0]
10001f44:	1cbb      	adds	r3, r7, #2
10001f46:	8819      	ldrh	r1, [r3, #0]
10001f48:	687b      	ldr	r3, [r7, #4]
10001f4a:	0018      	movs	r0, r3
10001f4c:	f7ff fecb 	bl	10001ce6 <_tu_fifo_count>
10001f50:	0003      	movs	r3, r0
10001f52:	1ae3      	subs	r3, r4, r3
10001f54:	b29b      	uxth	r3, r3
}
10001f56:	0018      	movs	r0, r3
10001f58:	46bd      	mov	sp, r7
10001f5a:	b003      	add	sp, #12
10001f5c:	bd90      	pop	{r4, r7, pc}

10001f5e <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
10001f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f60:	b08b      	sub	sp, #44	; 0x2c
10001f62:	af02      	add	r7, sp, #8
10001f64:	60f8      	str	r0, [r7, #12]
10001f66:	60b9      	str	r1, [r7, #8]
10001f68:	0019      	movs	r1, r3
10001f6a:	1dbb      	adds	r3, r7, #6
10001f6c:	801a      	strh	r2, [r3, #0]
10001f6e:	1d7b      	adds	r3, r7, #5
10001f70:	1c0a      	adds	r2, r1, #0
10001f72:	701a      	strb	r2, [r3, #0]
  if ( n == 0 ) return 0;
10001f74:	1dbb      	adds	r3, r7, #6
10001f76:	881b      	ldrh	r3, [r3, #0]
10001f78:	2b00      	cmp	r3, #0
10001f7a:	d101      	bne.n	10001f80 <_tu_fifo_write_n+0x22>
10001f7c:	2300      	movs	r3, #0
10001f7e:	e07e      	b.n	1000207e <_tu_fifo_write_n+0x120>

  _ff_lock(f->mutex_wr);
10001f80:	68fb      	ldr	r3, [r7, #12]
10001f82:	695b      	ldr	r3, [r3, #20]
10001f84:	0018      	movs	r0, r3
10001f86:	f7ff faae 	bl	100014e6 <_ff_lock>

  uint16_t w = f->wr_idx, r = f->rd_idx;
10001f8a:	211e      	movs	r1, #30
10001f8c:	187b      	adds	r3, r7, r1
10001f8e:	68fa      	ldr	r2, [r7, #12]
10001f90:	89d2      	ldrh	r2, [r2, #14]
10001f92:	801a      	strh	r2, [r3, #0]
10001f94:	2016      	movs	r0, #22
10001f96:	183b      	adds	r3, r7, r0
10001f98:	68fa      	ldr	r2, [r7, #12]
10001f9a:	8a12      	ldrh	r2, [r2, #16]
10001f9c:	801a      	strh	r2, [r3, #0]
  uint8_t const* buf8 = (uint8_t const*) data;
10001f9e:	68bb      	ldr	r3, [r7, #8]
10001fa0:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
10001fa2:	68fb      	ldr	r3, [r7, #12]
10001fa4:	7a1b      	ldrb	r3, [r3, #8]
10001fa6:	2201      	movs	r2, #1
10001fa8:	4053      	eors	r3, r2
10001faa:	b2db      	uxtb	r3, r3
10001fac:	2b00      	cmp	r3, #0
10001fae:	d01f      	beq.n	10001ff0 <_tu_fifo_write_n+0x92>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
10001fb0:	183b      	adds	r3, r7, r0
10001fb2:	881a      	ldrh	r2, [r3, #0]
10001fb4:	187b      	adds	r3, r7, r1
10001fb6:	8819      	ldrh	r1, [r3, #0]
10001fb8:	68fb      	ldr	r3, [r7, #12]
10001fba:	0018      	movs	r0, r3
10001fbc:	f7ff ffb2 	bl	10001f24 <_tu_fifo_remaining>
10001fc0:	0003      	movs	r3, r0
10001fc2:	0019      	movs	r1, r3
10001fc4:	2012      	movs	r0, #18
10001fc6:	183b      	adds	r3, r7, r0
10001fc8:	1dba      	adds	r2, r7, #6
10001fca:	8812      	ldrh	r2, [r2, #0]
10001fcc:	801a      	strh	r2, [r3, #0]
10001fce:	2410      	movs	r4, #16
10001fd0:	193b      	adds	r3, r7, r4
10001fd2:	1c0a      	adds	r2, r1, #0
10001fd4:	801a      	strh	r2, [r3, #0]
10001fd6:	183b      	adds	r3, r7, r0
10001fd8:	193a      	adds	r2, r7, r4
10001fda:	8810      	ldrh	r0, [r2, #0]
10001fdc:	881b      	ldrh	r3, [r3, #0]
10001fde:	b299      	uxth	r1, r3
10001fe0:	b282      	uxth	r2, r0
10001fe2:	4291      	cmp	r1, r2
10001fe4:	d900      	bls.n	10001fe8 <_tu_fifo_write_n+0x8a>
10001fe6:	1c03      	adds	r3, r0, #0
10001fe8:	b29a      	uxth	r2, r3
10001fea:	1dbb      	adds	r3, r7, #6
10001fec:	801a      	strh	r2, [r3, #0]
10001fee:	e01b      	b.n	10002028 <_tu_fifo_write_n+0xca>
  }
  else if (n >= f->depth)
10001ff0:	68fb      	ldr	r3, [r7, #12]
10001ff2:	889b      	ldrh	r3, [r3, #4]
10001ff4:	1dba      	adds	r2, r7, #6
10001ff6:	8812      	ldrh	r2, [r2, #0]
10001ff8:	429a      	cmp	r2, r3
10001ffa:	d315      	bcc.n	10002028 <_tu_fifo_write_n+0xca>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
10001ffc:	1dbb      	adds	r3, r7, #6
10001ffe:	881b      	ldrh	r3, [r3, #0]
10002000:	68fa      	ldr	r2, [r7, #12]
10002002:	8892      	ldrh	r2, [r2, #4]
10002004:	1a9b      	subs	r3, r3, r2
10002006:	68fa      	ldr	r2, [r7, #12]
10002008:	88d2      	ldrh	r2, [r2, #6]
1000200a:	4353      	muls	r3, r2
1000200c:	001a      	movs	r2, r3
1000200e:	69bb      	ldr	r3, [r7, #24]
10002010:	189b      	adds	r3, r3, r2
10002012:	61bb      	str	r3, [r7, #24]
    n = f->depth;
10002014:	1dbb      	adds	r3, r7, #6
10002016:	68fa      	ldr	r2, [r7, #12]
10002018:	8892      	ldrh	r2, [r2, #4]
1000201a:	801a      	strh	r2, [r3, #0]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
1000201c:	231e      	movs	r3, #30
1000201e:	18fb      	adds	r3, r7, r3
10002020:	2216      	movs	r2, #22
10002022:	18ba      	adds	r2, r7, r2
10002024:	8812      	ldrh	r2, [r2, #0]
10002026:	801a      	strh	r2, [r3, #0]
  }

  uint16_t wRel = get_relative_pointer(f, w);
10002028:	2514      	movs	r5, #20
1000202a:	197c      	adds	r4, r7, r5
1000202c:	261e      	movs	r6, #30
1000202e:	19bb      	adds	r3, r7, r6
10002030:	881a      	ldrh	r2, [r3, #0]
10002032:	68fb      	ldr	r3, [r7, #12]
10002034:	0011      	movs	r1, r2
10002036:	0018      	movs	r0, r3
10002038:	f7ff fe41 	bl	10001cbe <get_relative_pointer>
1000203c:	0003      	movs	r3, r0
1000203e:	8023      	strh	r3, [r4, #0]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
10002040:	197b      	adds	r3, r7, r5
10002042:	881c      	ldrh	r4, [r3, #0]
10002044:	1dbb      	adds	r3, r7, #6
10002046:	881a      	ldrh	r2, [r3, #0]
10002048:	69b9      	ldr	r1, [r7, #24]
1000204a:	68f8      	ldr	r0, [r7, #12]
1000204c:	1d7b      	adds	r3, r7, #5
1000204e:	781b      	ldrb	r3, [r3, #0]
10002050:	9300      	str	r3, [sp, #0]
10002052:	0023      	movs	r3, r4
10002054:	f7ff fba3 	bl	1000179e <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
10002058:	1dbb      	adds	r3, r7, #6
1000205a:	881a      	ldrh	r2, [r3, #0]
1000205c:	19bb      	adds	r3, r7, r6
1000205e:	8819      	ldrh	r1, [r3, #0]
10002060:	68fb      	ldr	r3, [r7, #12]
10002062:	0018      	movs	r0, r3
10002064:	f7ff fdbd 	bl	10001be2 <advance_pointer>
10002068:	0003      	movs	r3, r0
1000206a:	001a      	movs	r2, r3
1000206c:	68fb      	ldr	r3, [r7, #12]
1000206e:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);
10002070:	68fb      	ldr	r3, [r7, #12]
10002072:	695b      	ldr	r3, [r3, #20]
10002074:	0018      	movs	r0, r3
10002076:	f7ff fa48 	bl	1000150a <_ff_unlock>

  return n;
1000207a:	1dbb      	adds	r3, r7, #6
1000207c:	881b      	ldrh	r3, [r3, #0]
}
1000207e:	0018      	movs	r0, r3
10002080:	46bd      	mov	sp, r7
10002082:	b009      	add	sp, #36	; 0x24
10002084:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002086 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
10002086:	b5f0      	push	{r4, r5, r6, r7, lr}
10002088:	b087      	sub	sp, #28
1000208a:	af02      	add	r7, sp, #8
1000208c:	60f8      	str	r0, [r7, #12]
1000208e:	60b9      	str	r1, [r7, #8]
10002090:	0019      	movs	r1, r3
10002092:	1dbb      	adds	r3, r7, #6
10002094:	801a      	strh	r2, [r3, #0]
10002096:	1d7b      	adds	r3, r7, #5
10002098:	1c0a      	adds	r2, r1, #0
1000209a:	701a      	strb	r2, [r3, #0]
  _ff_lock(f->mutex_rd);
1000209c:	68fb      	ldr	r3, [r7, #12]
1000209e:	699b      	ldr	r3, [r3, #24]
100020a0:	0018      	movs	r0, r3
100020a2:	f7ff fa20 	bl	100014e6 <_ff_lock>

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
100020a6:	68fb      	ldr	r3, [r7, #12]
100020a8:	89db      	ldrh	r3, [r3, #14]
100020aa:	b29e      	uxth	r6, r3
100020ac:	68fb      	ldr	r3, [r7, #12]
100020ae:	8a1b      	ldrh	r3, [r3, #16]
100020b0:	b29b      	uxth	r3, r3
100020b2:	1dbc      	adds	r4, r7, #6
100020b4:	1dba      	adds	r2, r7, #6
100020b6:	8815      	ldrh	r5, [r2, #0]
100020b8:	68b9      	ldr	r1, [r7, #8]
100020ba:	68f8      	ldr	r0, [r7, #12]
100020bc:	1d7a      	adds	r2, r7, #5
100020be:	7812      	ldrb	r2, [r2, #0]
100020c0:	9201      	str	r2, [sp, #4]
100020c2:	9300      	str	r3, [sp, #0]
100020c4:	0033      	movs	r3, r6
100020c6:	002a      	movs	r2, r5
100020c8:	f7ff fec7 	bl	10001e5a <_tu_fifo_peek_n>
100020cc:	0003      	movs	r3, r0
100020ce:	8023      	strh	r3, [r4, #0]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
100020d0:	68fb      	ldr	r3, [r7, #12]
100020d2:	8a1b      	ldrh	r3, [r3, #16]
100020d4:	b299      	uxth	r1, r3
100020d6:	1dbb      	adds	r3, r7, #6
100020d8:	881a      	ldrh	r2, [r3, #0]
100020da:	68fb      	ldr	r3, [r7, #12]
100020dc:	0018      	movs	r0, r3
100020de:	f7ff fd80 	bl	10001be2 <advance_pointer>
100020e2:	0003      	movs	r3, r0
100020e4:	001a      	movs	r2, r3
100020e6:	68fb      	ldr	r3, [r7, #12]
100020e8:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
100020ea:	68fb      	ldr	r3, [r7, #12]
100020ec:	699b      	ldr	r3, [r3, #24]
100020ee:	0018      	movs	r0, r3
100020f0:	f7ff fa0b 	bl	1000150a <_ff_unlock>
  return n;
100020f4:	1dbb      	adds	r3, r7, #6
100020f6:	881b      	ldrh	r3, [r3, #0]
}
100020f8:	0018      	movs	r0, r3
100020fa:	46bd      	mov	sp, r7
100020fc:	b005      	add	sp, #20
100020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002100 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
10002100:	b580      	push	{r7, lr}
10002102:	b084      	sub	sp, #16
10002104:	af00      	add	r7, sp, #0
10002106:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
10002108:	687b      	ldr	r3, [r7, #4]
1000210a:	89db      	ldrh	r3, [r3, #14]
1000210c:	b299      	uxth	r1, r3
1000210e:	687b      	ldr	r3, [r7, #4]
10002110:	8a1b      	ldrh	r3, [r3, #16]
10002112:	b29a      	uxth	r2, r3
10002114:	687b      	ldr	r3, [r7, #4]
10002116:	0018      	movs	r0, r3
10002118:	f7ff fde5 	bl	10001ce6 <_tu_fifo_count>
1000211c:	0003      	movs	r3, r0
1000211e:	0019      	movs	r1, r3
10002120:	687b      	ldr	r3, [r7, #4]
10002122:	889a      	ldrh	r2, [r3, #4]
10002124:	200e      	movs	r0, #14
10002126:	183b      	adds	r3, r7, r0
10002128:	8019      	strh	r1, [r3, #0]
1000212a:	210c      	movs	r1, #12
1000212c:	187b      	adds	r3, r7, r1
1000212e:	801a      	strh	r2, [r3, #0]
10002130:	183b      	adds	r3, r7, r0
10002132:	187a      	adds	r2, r7, r1
10002134:	8810      	ldrh	r0, [r2, #0]
10002136:	881b      	ldrh	r3, [r3, #0]
10002138:	b299      	uxth	r1, r3
1000213a:	b282      	uxth	r2, r0
1000213c:	4291      	cmp	r1, r2
1000213e:	d900      	bls.n	10002142 <tu_fifo_count+0x42>
10002140:	1c03      	adds	r3, r0, #0
10002142:	b29b      	uxth	r3, r3
}
10002144:	0018      	movs	r0, r3
10002146:	46bd      	mov	sp, r7
10002148:	b004      	add	sp, #16
1000214a:	bd80      	pop	{r7, pc}

1000214c <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
1000214c:	b580      	push	{r7, lr}
1000214e:	b082      	sub	sp, #8
10002150:	af00      	add	r7, sp, #0
10002152:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
10002154:	687b      	ldr	r3, [r7, #4]
10002156:	89db      	ldrh	r3, [r3, #14]
10002158:	b29a      	uxth	r2, r3
1000215a:	687b      	ldr	r3, [r7, #4]
1000215c:	8a1b      	ldrh	r3, [r3, #16]
1000215e:	b29b      	uxth	r3, r3
10002160:	0019      	movs	r1, r3
10002162:	0010      	movs	r0, r2
10002164:	f7ff fde7 	bl	10001d36 <_tu_fifo_empty>
10002168:	0003      	movs	r3, r0
}
1000216a:	0018      	movs	r0, r3
1000216c:	46bd      	mov	sp, r7
1000216e:	b002      	add	sp, #8
10002170:	bd80      	pop	{r7, pc}

10002172 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
10002172:	b580      	push	{r7, lr}
10002174:	b082      	sub	sp, #8
10002176:	af00      	add	r7, sp, #0
10002178:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
1000217a:	687b      	ldr	r3, [r7, #4]
1000217c:	89db      	ldrh	r3, [r3, #14]
1000217e:	b299      	uxth	r1, r3
10002180:	687b      	ldr	r3, [r7, #4]
10002182:	8a1b      	ldrh	r3, [r3, #16]
10002184:	b29a      	uxth	r2, r3
10002186:	687b      	ldr	r3, [r7, #4]
10002188:	0018      	movs	r0, r3
1000218a:	f7ff fecb 	bl	10001f24 <_tu_fifo_remaining>
1000218e:	0003      	movs	r3, r0
}
10002190:	0018      	movs	r0, r3
10002192:	46bd      	mov	sp, r7
10002194:	b002      	add	sp, #8
10002196:	bd80      	pop	{r7, pc}

10002198 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
10002198:	b5b0      	push	{r4, r5, r7, lr}
1000219a:	b084      	sub	sp, #16
1000219c:	af00      	add	r7, sp, #0
1000219e:	6078      	str	r0, [r7, #4]
100021a0:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);
100021a2:	687b      	ldr	r3, [r7, #4]
100021a4:	699b      	ldr	r3, [r3, #24]
100021a6:	0018      	movs	r0, r3
100021a8:	f7ff f99d 	bl	100014e6 <_ff_lock>

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
100021ac:	687b      	ldr	r3, [r7, #4]
100021ae:	89db      	ldrh	r3, [r3, #14]
100021b0:	b29a      	uxth	r2, r3
100021b2:	687b      	ldr	r3, [r7, #4]
100021b4:	8a1b      	ldrh	r3, [r3, #16]
100021b6:	b29b      	uxth	r3, r3
100021b8:	250f      	movs	r5, #15
100021ba:	197c      	adds	r4, r7, r5
100021bc:	6839      	ldr	r1, [r7, #0]
100021be:	6878      	ldr	r0, [r7, #4]
100021c0:	f7ff fe05 	bl	10001dce <_tu_fifo_peek>
100021c4:	0003      	movs	r3, r0
100021c6:	7023      	strb	r3, [r4, #0]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
100021c8:	687b      	ldr	r3, [r7, #4]
100021ca:	8a1b      	ldrh	r3, [r3, #16]
100021cc:	b299      	uxth	r1, r3
100021ce:	002c      	movs	r4, r5
100021d0:	193b      	adds	r3, r7, r4
100021d2:	781b      	ldrb	r3, [r3, #0]
100021d4:	b29a      	uxth	r2, r3
100021d6:	687b      	ldr	r3, [r7, #4]
100021d8:	0018      	movs	r0, r3
100021da:	f7ff fd02 	bl	10001be2 <advance_pointer>
100021de:	0003      	movs	r3, r0
100021e0:	001a      	movs	r2, r3
100021e2:	687b      	ldr	r3, [r7, #4]
100021e4:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
100021e6:	687b      	ldr	r3, [r7, #4]
100021e8:	699b      	ldr	r3, [r3, #24]
100021ea:	0018      	movs	r0, r3
100021ec:	f7ff f98d 	bl	1000150a <_ff_unlock>
  return ret;
100021f0:	193b      	adds	r3, r7, r4
100021f2:	781b      	ldrb	r3, [r3, #0]
}
100021f4:	0018      	movs	r0, r3
100021f6:	46bd      	mov	sp, r7
100021f8:	b004      	add	sp, #16
100021fa:	bdb0      	pop	{r4, r5, r7, pc}

100021fc <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
100021fc:	b580      	push	{r7, lr}
100021fe:	b084      	sub	sp, #16
10002200:	af00      	add	r7, sp, #0
10002202:	60f8      	str	r0, [r7, #12]
10002204:	60b9      	str	r1, [r7, #8]
10002206:	1dbb      	adds	r3, r7, #6
10002208:	801a      	strh	r2, [r3, #0]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
1000220a:	1dbb      	adds	r3, r7, #6
1000220c:	881a      	ldrh	r2, [r3, #0]
1000220e:	68b9      	ldr	r1, [r7, #8]
10002210:	68f8      	ldr	r0, [r7, #12]
10002212:	2300      	movs	r3, #0
10002214:	f7ff ff37 	bl	10002086 <_tu_fifo_read_n>
10002218:	0003      	movs	r3, r0
}
1000221a:	0018      	movs	r0, r3
1000221c:	46bd      	mov	sp, r7
1000221e:	b004      	add	sp, #16
10002220:	bd80      	pop	{r7, pc}

10002222 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
10002222:	b5f0      	push	{r4, r5, r6, r7, lr}
10002224:	b085      	sub	sp, #20
10002226:	af00      	add	r7, sp, #0
10002228:	6078      	str	r0, [r7, #4]
1000222a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);
1000222c:	687b      	ldr	r3, [r7, #4]
1000222e:	695b      	ldr	r3, [r3, #20]
10002230:	0018      	movs	r0, r3
10002232:	f7ff f958 	bl	100014e6 <_ff_lock>

  uint16_t w = f->wr_idx;
10002236:	210e      	movs	r1, #14
10002238:	187b      	adds	r3, r7, r1
1000223a:	687a      	ldr	r2, [r7, #4]
1000223c:	89d2      	ldrh	r2, [r2, #14]
1000223e:	801a      	strh	r2, [r3, #0]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10002240:	687b      	ldr	r3, [r7, #4]
10002242:	8a1b      	ldrh	r3, [r3, #16]
10002244:	b29a      	uxth	r2, r3
10002246:	187b      	adds	r3, r7, r1
10002248:	8819      	ldrh	r1, [r3, #0]
1000224a:	687b      	ldr	r3, [r7, #4]
1000224c:	0018      	movs	r0, r3
1000224e:	f7ff fd87 	bl	10001d60 <_tu_fifo_full>
10002252:	1e03      	subs	r3, r0, #0
10002254:	d008      	beq.n	10002268 <tu_fifo_write+0x46>
10002256:	687b      	ldr	r3, [r7, #4]
10002258:	7a1b      	ldrb	r3, [r3, #8]
1000225a:	2201      	movs	r2, #1
1000225c:	4053      	eors	r3, r2
1000225e:	b2db      	uxtb	r3, r3
10002260:	2b00      	cmp	r3, #0
10002262:	d001      	beq.n	10002268 <tu_fifo_write+0x46>
10002264:	2300      	movs	r3, #0
10002266:	e023      	b.n	100022b0 <tu_fifo_write+0x8e>

  uint16_t wRel = get_relative_pointer(f, w);
10002268:	250c      	movs	r5, #12
1000226a:	197c      	adds	r4, r7, r5
1000226c:	260e      	movs	r6, #14
1000226e:	19bb      	adds	r3, r7, r6
10002270:	881a      	ldrh	r2, [r3, #0]
10002272:	687b      	ldr	r3, [r7, #4]
10002274:	0011      	movs	r1, r2
10002276:	0018      	movs	r0, r3
10002278:	f7ff fd21 	bl	10001cbe <get_relative_pointer>
1000227c:	0003      	movs	r3, r0
1000227e:	8023      	strh	r3, [r4, #0]

  // Write data
  _ff_push(f, data, wRel);
10002280:	197b      	adds	r3, r7, r5
10002282:	881a      	ldrh	r2, [r3, #0]
10002284:	6839      	ldr	r1, [r7, #0]
10002286:	687b      	ldr	r3, [r7, #4]
10002288:	0018      	movs	r0, r3
1000228a:	f7ff fa6e 	bl	1000176a <_ff_push>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);
1000228e:	19bb      	adds	r3, r7, r6
10002290:	8819      	ldrh	r1, [r3, #0]
10002292:	687b      	ldr	r3, [r7, #4]
10002294:	2201      	movs	r2, #1
10002296:	0018      	movs	r0, r3
10002298:	f7ff fca3 	bl	10001be2 <advance_pointer>
1000229c:	0003      	movs	r3, r0
1000229e:	001a      	movs	r2, r3
100022a0:	687b      	ldr	r3, [r7, #4]
100022a2:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);
100022a4:	687b      	ldr	r3, [r7, #4]
100022a6:	695b      	ldr	r3, [r3, #20]
100022a8:	0018      	movs	r0, r3
100022aa:	f7ff f92e 	bl	1000150a <_ff_unlock>

  return true;
100022ae:	2301      	movs	r3, #1
}
100022b0:	0018      	movs	r0, r3
100022b2:	46bd      	mov	sp, r7
100022b4:	b005      	add	sp, #20
100022b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100022b8 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
100022b8:	b580      	push	{r7, lr}
100022ba:	b084      	sub	sp, #16
100022bc:	af00      	add	r7, sp, #0
100022be:	60f8      	str	r0, [r7, #12]
100022c0:	60b9      	str	r1, [r7, #8]
100022c2:	1dbb      	adds	r3, r7, #6
100022c4:	801a      	strh	r2, [r3, #0]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
100022c6:	1dbb      	adds	r3, r7, #6
100022c8:	881a      	ldrh	r2, [r3, #0]
100022ca:	68b9      	ldr	r1, [r7, #8]
100022cc:	68f8      	ldr	r0, [r7, #12]
100022ce:	2300      	movs	r3, #0
100022d0:	f7ff fe45 	bl	10001f5e <_tu_fifo_write_n>
100022d4:	0003      	movs	r3, r0
}
100022d6:	0018      	movs	r0, r3
100022d8:	46bd      	mov	sp, r7
100022da:	b004      	add	sp, #16
100022dc:	bd80      	pop	{r7, pc}

100022de <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
100022de:	b580      	push	{r7, lr}
100022e0:	b082      	sub	sp, #8
100022e2:	af00      	add	r7, sp, #0
100022e4:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
100022e6:	687b      	ldr	r3, [r7, #4]
100022e8:	695b      	ldr	r3, [r3, #20]
100022ea:	0018      	movs	r0, r3
100022ec:	f7ff f8fb 	bl	100014e6 <_ff_lock>
  _ff_lock(f->mutex_rd);
100022f0:	687b      	ldr	r3, [r7, #4]
100022f2:	699b      	ldr	r3, [r3, #24]
100022f4:	0018      	movs	r0, r3
100022f6:	f7ff f8f6 	bl	100014e6 <_ff_lock>

  f->rd_idx = f->wr_idx = 0;
100022fa:	2100      	movs	r1, #0
100022fc:	687b      	ldr	r3, [r7, #4]
100022fe:	1c0a      	adds	r2, r1, #0
10002300:	81da      	strh	r2, [r3, #14]
10002302:	687b      	ldr	r3, [r7, #4]
10002304:	1c0a      	adds	r2, r1, #0
10002306:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = 2*f->depth-1;
10002308:	687b      	ldr	r3, [r7, #4]
1000230a:	889b      	ldrh	r3, [r3, #4]
1000230c:	18db      	adds	r3, r3, r3
1000230e:	b29b      	uxth	r3, r3
10002310:	3b01      	subs	r3, #1
10002312:	b29a      	uxth	r2, r3
10002314:	687b      	ldr	r3, [r7, #4]
10002316:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
10002318:	687b      	ldr	r3, [r7, #4]
1000231a:	899b      	ldrh	r3, [r3, #12]
1000231c:	43db      	mvns	r3, r3
1000231e:	b29a      	uxth	r2, r3
10002320:	687b      	ldr	r3, [r7, #4]
10002322:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
10002324:	687b      	ldr	r3, [r7, #4]
10002326:	695b      	ldr	r3, [r3, #20]
10002328:	0018      	movs	r0, r3
1000232a:	f7ff f8ee 	bl	1000150a <_ff_unlock>
  _ff_unlock(f->mutex_rd);
1000232e:	687b      	ldr	r3, [r7, #4]
10002330:	699b      	ldr	r3, [r3, #24]
10002332:	0018      	movs	r0, r3
10002334:	f7ff f8e9 	bl	1000150a <_ff_unlock>
  return true;
10002338:	2301      	movs	r3, #1
}
1000233a:	0018      	movs	r0, r3
1000233c:	46bd      	mov	sp, r7
1000233e:	b002      	add	sp, #8
10002340:	bd80      	pop	{r7, pc}

10002342 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
10002342:	b580      	push	{r7, lr}
10002344:	b082      	sub	sp, #8
10002346:	af00      	add	r7, sp, #0
10002348:	6078      	str	r0, [r7, #4]
1000234a:	000a      	movs	r2, r1
1000234c:	1cfb      	adds	r3, r7, #3
1000234e:	701a      	strb	r2, [r3, #0]
  _ff_lock(f->mutex_wr);
10002350:	687b      	ldr	r3, [r7, #4]
10002352:	695b      	ldr	r3, [r3, #20]
10002354:	0018      	movs	r0, r3
10002356:	f7ff f8c6 	bl	100014e6 <_ff_lock>
  _ff_lock(f->mutex_rd);
1000235a:	687b      	ldr	r3, [r7, #4]
1000235c:	699b      	ldr	r3, [r3, #24]
1000235e:	0018      	movs	r0, r3
10002360:	f7ff f8c1 	bl	100014e6 <_ff_lock>

  f->overwritable = overwritable;
10002364:	687b      	ldr	r3, [r7, #4]
10002366:	1cfa      	adds	r2, r7, #3
10002368:	7812      	ldrb	r2, [r2, #0]
1000236a:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
1000236c:	687b      	ldr	r3, [r7, #4]
1000236e:	695b      	ldr	r3, [r3, #20]
10002370:	0018      	movs	r0, r3
10002372:	f7ff f8ca 	bl	1000150a <_ff_unlock>
  _ff_unlock(f->mutex_rd);
10002376:	687b      	ldr	r3, [r7, #4]
10002378:	699b      	ldr	r3, [r3, #24]
1000237a:	0018      	movs	r0, r3
1000237c:	f7ff f8c5 	bl	1000150a <_ff_unlock>

  return true;
10002380:	2301      	movs	r3, #1
}
10002382:	0018      	movs	r0, r3
10002384:	46bd      	mov	sp, r7
10002386:	b002      	add	sp, #8
10002388:	bd80      	pop	{r7, pc}

1000238a <tu_edpt_dir>:
{
1000238a:	b580      	push	{r7, lr}
1000238c:	b082      	sub	sp, #8
1000238e:	af00      	add	r7, sp, #0
10002390:	0002      	movs	r2, r0
10002392:	1dfb      	adds	r3, r7, #7
10002394:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10002396:	1dfb      	adds	r3, r7, #7
10002398:	781b      	ldrb	r3, [r3, #0]
1000239a:	09db      	lsrs	r3, r3, #7
1000239c:	b2db      	uxtb	r3, r3
}
1000239e:	0018      	movs	r0, r3
100023a0:	46bd      	mov	sp, r7
100023a2:	b002      	add	sp, #8
100023a4:	bd80      	pop	{r7, pc}

100023a6 <tu_edpt_number>:
{
100023a6:	b580      	push	{r7, lr}
100023a8:	b082      	sub	sp, #8
100023aa:	af00      	add	r7, sp, #0
100023ac:	0002      	movs	r2, r0
100023ae:	1dfb      	adds	r3, r7, #7
100023b0:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
100023b2:	1dfb      	adds	r3, r7, #7
100023b4:	781b      	ldrb	r3, [r3, #0]
100023b6:	227f      	movs	r2, #127	; 0x7f
100023b8:	4013      	ands	r3, r2
100023ba:	b2db      	uxtb	r3, r3
}
100023bc:	0018      	movs	r0, r3
100023be:	46bd      	mov	sp, r7
100023c0:	b002      	add	sp, #8
100023c2:	bd80      	pop	{r7, pc}

100023c4 <tu_desc_next>:
{
100023c4:	b580      	push	{r7, lr}
100023c6:	b084      	sub	sp, #16
100023c8:	af00      	add	r7, sp, #0
100023ca:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
100023cc:	687b      	ldr	r3, [r7, #4]
100023ce:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
100023d0:	68fb      	ldr	r3, [r7, #12]
100023d2:	781b      	ldrb	r3, [r3, #0]
100023d4:	001a      	movs	r2, r3
100023d6:	68fb      	ldr	r3, [r7, #12]
100023d8:	189b      	adds	r3, r3, r2
}
100023da:	0018      	movs	r0, r3
100023dc:	46bd      	mov	sp, r7
100023de:	b004      	add	sp, #16
100023e0:	bd80      	pop	{r7, pc}

100023e2 <tu_desc_type>:
{
100023e2:	b580      	push	{r7, lr}
100023e4:	b082      	sub	sp, #8
100023e6:	af00      	add	r7, sp, #0
100023e8:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
100023ea:	687b      	ldr	r3, [r7, #4]
100023ec:	3301      	adds	r3, #1
100023ee:	781b      	ldrb	r3, [r3, #0]
}
100023f0:	0018      	movs	r0, r3
100023f2:	46bd      	mov	sp, r7
100023f4:	b002      	add	sp, #8
100023f6:	bd80      	pop	{r7, pc}

100023f8 <critical_section_enter_blocking>:
 * If the spin lock associated with this critical section is in use, then this
 * method will block until it is released.
 *
 * \param crit_sec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *crit_sec) {
100023f8:	b580      	push	{r7, lr}
100023fa:	b086      	sub	sp, #24
100023fc:	af00      	add	r7, sp, #0
100023fe:	6078      	str	r0, [r7, #4]
    crit_sec->save = spin_lock_blocking(crit_sec->spin_lock);
10002400:	687b      	ldr	r3, [r7, #4]
10002402:	681b      	ldr	r3, [r3, #0]
10002404:	617b      	str	r3, [r7, #20]
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
__force_inline static uint32_t save_and_disable_interrupts(void) {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002406:	f3ef 8310 	mrs	r3, PRIMASK
1000240a:	613b      	str	r3, [r7, #16]
    __asm volatile ("cpsid i");
1000240c:	b672      	cpsid	i
    return status;
1000240e:	693b      	ldr	r3, [r7, #16]
 *
 * \param lock Spinlock instance
 * \return interrupt status to be used when unlocking, to restore to original state
 */
__force_inline static uint32_t spin_lock_blocking(spin_lock_t *lock) {
    uint32_t save = save_and_disable_interrupts();
10002410:	60fb      	str	r3, [r7, #12]
10002412:	697b      	ldr	r3, [r7, #20]
10002414:	60bb      	str	r3, [r7, #8]
    while (__builtin_expect(!*lock, 0));
10002416:	46c0      	nop			; (mov r8, r8)
10002418:	68bb      	ldr	r3, [r7, #8]
1000241a:	681b      	ldr	r3, [r3, #0]
1000241c:	425a      	negs	r2, r3
1000241e:	4153      	adcs	r3, r2
10002420:	b2db      	uxtb	r3, r3
10002422:	2b00      	cmp	r3, #0
10002424:	d1f8      	bne.n	10002418 <critical_section_enter_blocking+0x20>
    __asm volatile ("dmb" : : : "memory");
10002426:	f3bf 8f5f 	dmb	sy
}
1000242a:	46c0      	nop			; (mov r8, r8)
}
1000242c:	46c0      	nop			; (mov r8, r8)
}
1000242e:	46c0      	nop			; (mov r8, r8)
    spin_lock_unsafe_blocking(lock);
    return save;
10002430:	68fa      	ldr	r2, [r7, #12]
10002432:	687b      	ldr	r3, [r7, #4]
10002434:	605a      	str	r2, [r3, #4]
}
10002436:	46c0      	nop			; (mov r8, r8)
10002438:	46bd      	mov	sp, r7
1000243a:	b006      	add	sp, #24
1000243c:	bd80      	pop	{r7, pc}

1000243e <critical_section_exit>:
/*! \brief  Release a critical_section
 *  \ingroup critical_section
 *
 * \param crit_sec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *crit_sec) {
1000243e:	b580      	push	{r7, lr}
10002440:	b086      	sub	sp, #24
10002442:	af00      	add	r7, sp, #0
10002444:	6078      	str	r0, [r7, #4]
    spin_unlock(crit_sec->spin_lock, crit_sec->save);
10002446:	687b      	ldr	r3, [r7, #4]
10002448:	681a      	ldr	r2, [r3, #0]
1000244a:	687b      	ldr	r3, [r7, #4]
1000244c:	685b      	ldr	r3, [r3, #4]
1000244e:	617a      	str	r2, [r7, #20]
10002450:	613b      	str	r3, [r7, #16]
10002452:	697b      	ldr	r3, [r7, #20]
10002454:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
10002456:	f3bf 8f5f 	dmb	sy
}
1000245a:	46c0      	nop			; (mov r8, r8)
}
1000245c:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
1000245e:	68fb      	ldr	r3, [r7, #12]
10002460:	2200      	movs	r2, #0
10002462:	601a      	str	r2, [r3, #0]
}
10002464:	46c0      	nop			; (mov r8, r8)
10002466:	693b      	ldr	r3, [r7, #16]
10002468:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000246a:	68bb      	ldr	r3, [r7, #8]
1000246c:	f383 8810 	msr	PRIMASK, r3
}
10002470:	46c0      	nop			; (mov r8, r8)
 * \sa spin_lock_blocking()
 */
__force_inline static void spin_unlock(spin_lock_t *lock, uint32_t saved_irq) {
    spin_unlock_unsafe(lock);
    restore_interrupts(saved_irq);
}
10002472:	46c0      	nop			; (mov r8, r8)
}
10002474:	46c0      	nop			; (mov r8, r8)
10002476:	46bd      	mov	sp, r7
10002478:	b006      	add	sp, #24
1000247a:	bd80      	pop	{r7, pc}

1000247c <osal_mutex_create>:
{
1000247c:	b580      	push	{r7, lr}
1000247e:	b082      	sub	sp, #8
10002480:	af00      	add	r7, sp, #0
10002482:	6078      	str	r0, [r7, #4]
    mutex_init(mdef);
10002484:	687b      	ldr	r3, [r7, #4]
10002486:	0018      	movs	r0, r3
10002488:	f003 f89b 	bl	100055c2 <mutex_init>
    return mdef;
1000248c:	687b      	ldr	r3, [r7, #4]
}
1000248e:	0018      	movs	r0, r3
10002490:	46bd      	mov	sp, r7
10002492:	b002      	add	sp, #8
10002494:	bd80      	pop	{r7, pc}

10002496 <osal_mutex_lock>:
{
10002496:	b580      	push	{r7, lr}
10002498:	b082      	sub	sp, #8
1000249a:	af00      	add	r7, sp, #0
1000249c:	6078      	str	r0, [r7, #4]
1000249e:	6039      	str	r1, [r7, #0]
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100024a0:	683a      	ldr	r2, [r7, #0]
100024a2:	687b      	ldr	r3, [r7, #4]
100024a4:	0011      	movs	r1, r2
100024a6:	0018      	movs	r0, r3
100024a8:	f00a fdba 	bl	1000d020 <__mutex_enter_timeout_ms_veneer>
100024ac:	0003      	movs	r3, r0
}
100024ae:	0018      	movs	r0, r3
100024b0:	46bd      	mov	sp, r7
100024b2:	b002      	add	sp, #8
100024b4:	bd80      	pop	{r7, pc}

100024b6 <osal_mutex_unlock>:
{
100024b6:	b580      	push	{r7, lr}
100024b8:	b082      	sub	sp, #8
100024ba:	af00      	add	r7, sp, #0
100024bc:	6078      	str	r0, [r7, #4]
    mutex_exit(mutex_hdl);
100024be:	687b      	ldr	r3, [r7, #4]
100024c0:	0018      	movs	r0, r3
100024c2:	f00a fd8d 	bl	1000cfe0 <__mutex_exit_veneer>
    return true;
100024c6:	2301      	movs	r3, #1
}
100024c8:	0018      	movs	r0, r3
100024ca:	46bd      	mov	sp, r7
100024cc:	b002      	add	sp, #8
100024ce:	bd80      	pop	{r7, pc}

100024d0 <_osal_q_lock>:
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

// lock queue by disable USB interrupt
static inline void _osal_q_lock(osal_queue_t qhdl)
{
100024d0:	b580      	push	{r7, lr}
100024d2:	b082      	sub	sp, #8
100024d4:	af00      	add	r7, sp, #0
100024d6:	6078      	str	r0, [r7, #4]
    critical_section_enter_blocking(&qhdl->critsec);
100024d8:	687b      	ldr	r3, [r7, #4]
100024da:	331c      	adds	r3, #28
100024dc:	0018      	movs	r0, r3
100024de:	f7ff ff8b 	bl	100023f8 <critical_section_enter_blocking>
}
100024e2:	46c0      	nop			; (mov r8, r8)
100024e4:	46bd      	mov	sp, r7
100024e6:	b002      	add	sp, #8
100024e8:	bd80      	pop	{r7, pc}

100024ea <_osal_q_unlock>:

// unlock queue
static inline void _osal_q_unlock(osal_queue_t qhdl)
{
100024ea:	b580      	push	{r7, lr}
100024ec:	b082      	sub	sp, #8
100024ee:	af00      	add	r7, sp, #0
100024f0:	6078      	str	r0, [r7, #4]
    critical_section_exit(&qhdl->critsec);
100024f2:	687b      	ldr	r3, [r7, #4]
100024f4:	331c      	adds	r3, #28
100024f6:	0018      	movs	r0, r3
100024f8:	f7ff ffa1 	bl	1000243e <critical_section_exit>
}
100024fc:	46c0      	nop			; (mov r8, r8)
100024fe:	46bd      	mov	sp, r7
10002500:	b002      	add	sp, #8
10002502:	bd80      	pop	{r7, pc}

10002504 <osal_queue_create>:

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
10002504:	b580      	push	{r7, lr}
10002506:	b082      	sub	sp, #8
10002508:	af00      	add	r7, sp, #0
1000250a:	6078      	str	r0, [r7, #4]
  critical_section_init(&qdef->critsec);
1000250c:	687b      	ldr	r3, [r7, #4]
1000250e:	331c      	adds	r3, #28
10002510:	0018      	movs	r0, r3
10002512:	f002 ff76 	bl	10005402 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
10002516:	687b      	ldr	r3, [r7, #4]
10002518:	0018      	movs	r0, r3
1000251a:	f7ff fee0 	bl	100022de <tu_fifo_clear>
  return (osal_queue_t) qdef;
1000251e:	687b      	ldr	r3, [r7, #4]
}
10002520:	0018      	movs	r0, r3
10002522:	46bd      	mov	sp, r7
10002524:	b002      	add	sp, #8
10002526:	bd80      	pop	{r7, pc}

10002528 <osal_queue_receive>:

static inline bool osal_queue_receive(osal_queue_t qhdl, void* data)
{
10002528:	b5b0      	push	{r4, r5, r7, lr}
1000252a:	b084      	sub	sp, #16
1000252c:	af00      	add	r7, sp, #0
1000252e:	6078      	str	r0, [r7, #4]
10002530:	6039      	str	r1, [r7, #0]
  // TODO: revisit... docs say that mutexes are never used from IRQ context,
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  //assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
10002532:	687b      	ldr	r3, [r7, #4]
10002534:	0018      	movs	r0, r3
10002536:	f7ff ffcb 	bl	100024d0 <_osal_q_lock>
  bool success = tu_fifo_read(&qhdl->ff, data);
1000253a:	687b      	ldr	r3, [r7, #4]
1000253c:	250f      	movs	r5, #15
1000253e:	197c      	adds	r4, r7, r5
10002540:	683a      	ldr	r2, [r7, #0]
10002542:	0011      	movs	r1, r2
10002544:	0018      	movs	r0, r3
10002546:	f7ff fe27 	bl	10002198 <tu_fifo_read>
1000254a:	0003      	movs	r3, r0
1000254c:	7023      	strb	r3, [r4, #0]
  _osal_q_unlock(qhdl);
1000254e:	687b      	ldr	r3, [r7, #4]
10002550:	0018      	movs	r0, r3
10002552:	f7ff ffca 	bl	100024ea <_osal_q_unlock>

  return success;
10002556:	197b      	adds	r3, r7, r5
10002558:	781b      	ldrb	r3, [r3, #0]
}
1000255a:	0018      	movs	r0, r3
1000255c:	46bd      	mov	sp, r7
1000255e:	b004      	add	sp, #16
10002560:	bdb0      	pop	{r4, r5, r7, pc}
	...

10002564 <osal_queue_send>:

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
10002564:	b5b0      	push	{r4, r5, r7, lr}
10002566:	b086      	sub	sp, #24
10002568:	af00      	add	r7, sp, #0
1000256a:	60f8      	str	r0, [r7, #12]
1000256c:	60b9      	str	r1, [r7, #8]
1000256e:	1dfb      	adds	r3, r7, #7
10002570:	701a      	strb	r2, [r3, #0]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  //assert(!qhdl->ff.mutex);
  (void) in_isr;

  _osal_q_lock(qhdl);
10002572:	68fb      	ldr	r3, [r7, #12]
10002574:	0018      	movs	r0, r3
10002576:	f7ff ffab 	bl	100024d0 <_osal_q_lock>
  bool success = tu_fifo_write(&qhdl->ff, data);
1000257a:	68fb      	ldr	r3, [r7, #12]
1000257c:	2517      	movs	r5, #23
1000257e:	197c      	adds	r4, r7, r5
10002580:	68ba      	ldr	r2, [r7, #8]
10002582:	0011      	movs	r1, r2
10002584:	0018      	movs	r0, r3
10002586:	f7ff fe4c 	bl	10002222 <tu_fifo_write>
1000258a:	0003      	movs	r3, r0
1000258c:	7023      	strb	r3, [r4, #0]
  _osal_q_unlock(qhdl);
1000258e:	68fb      	ldr	r3, [r7, #12]
10002590:	0018      	movs	r0, r3
10002592:	f7ff ffaa 	bl	100024ea <_osal_q_unlock>

  TU_ASSERT(success);
10002596:	197b      	adds	r3, r7, r5
10002598:	781b      	ldrb	r3, [r3, #0]
1000259a:	2201      	movs	r2, #1
1000259c:	4053      	eors	r3, r2
1000259e:	b2db      	uxtb	r3, r3
100025a0:	2b00      	cmp	r3, #0
100025a2:	d007      	beq.n	100025b4 <osal_queue_send+0x50>
100025a4:	4907      	ldr	r1, [pc, #28]	; (100025c4 <osal_queue_send+0x60>)
100025a6:	4b08      	ldr	r3, [pc, #32]	; (100025c8 <osal_queue_send+0x64>)
100025a8:	22a8      	movs	r2, #168	; 0xa8
100025aa:	0018      	movs	r0, r3
100025ac:	f008 fe18 	bl	1000b1e0 <__wrap_printf>
100025b0:	2300      	movs	r3, #0
100025b2:	e002      	b.n	100025ba <osal_queue_send+0x56>

  return success;
100025b4:	2317      	movs	r3, #23
100025b6:	18fb      	adds	r3, r7, r3
100025b8:	781b      	ldrb	r3, [r3, #0]
}
100025ba:	0018      	movs	r0, r3
100025bc:	46bd      	mov	sp, r7
100025be:	b006      	add	sp, #24
100025c0:	bdb0      	pop	{r4, r5, r7, pc}
100025c2:	46c0      	nop			; (mov r8, r8)
100025c4:	1000d20c 	.word	0x1000d20c
100025c8:	1000d0dc 	.word	0x1000d0dc

100025cc <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
100025cc:	b580      	push	{r7, lr}
100025ce:	b082      	sub	sp, #8
100025d0:	af00      	add	r7, sp, #0
100025d2:	0002      	movs	r2, r0
100025d4:	1dfb      	adds	r3, r7, #7
100025d6:	701a      	strb	r2, [r3, #0]
  // Application drivers
  if ( usbd_app_driver_get_cb )
100025d8:	4b15      	ldr	r3, [pc, #84]	; (10002630 <get_driver+0x64>)
100025da:	2b00      	cmp	r3, #0
100025dc:	d016      	beq.n	1000260c <get_driver+0x40>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100025de:	4b15      	ldr	r3, [pc, #84]	; (10002634 <get_driver+0x68>)
100025e0:	781b      	ldrb	r3, [r3, #0]
100025e2:	1dfa      	adds	r2, r7, #7
100025e4:	7812      	ldrb	r2, [r2, #0]
100025e6:	429a      	cmp	r2, r3
100025e8:	d209      	bcs.n	100025fe <get_driver+0x32>
100025ea:	4b13      	ldr	r3, [pc, #76]	; (10002638 <get_driver+0x6c>)
100025ec:	6819      	ldr	r1, [r3, #0]
100025ee:	1dfb      	adds	r3, r7, #7
100025f0:	781a      	ldrb	r2, [r3, #0]
100025f2:	0013      	movs	r3, r2
100025f4:	005b      	lsls	r3, r3, #1
100025f6:	189b      	adds	r3, r3, r2
100025f8:	00db      	lsls	r3, r3, #3
100025fa:	18cb      	adds	r3, r1, r3
100025fc:	e014      	b.n	10002628 <get_driver+0x5c>
    drvid -= _app_driver_count;
100025fe:	4b0d      	ldr	r3, [pc, #52]	; (10002634 <get_driver+0x68>)
10002600:	781a      	ldrb	r2, [r3, #0]
10002602:	1dfb      	adds	r3, r7, #7
10002604:	1df9      	adds	r1, r7, #7
10002606:	7809      	ldrb	r1, [r1, #0]
10002608:	1a8a      	subs	r2, r1, r2
1000260a:	701a      	strb	r2, [r3, #0]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000260c:	1dfb      	adds	r3, r7, #7
1000260e:	781b      	ldrb	r3, [r3, #0]
10002610:	2b01      	cmp	r3, #1
10002612:	d808      	bhi.n	10002626 <get_driver+0x5a>
10002614:	1dfb      	adds	r3, r7, #7
10002616:	781a      	ldrb	r2, [r3, #0]
10002618:	0013      	movs	r3, r2
1000261a:	005b      	lsls	r3, r3, #1
1000261c:	189b      	adds	r3, r3, r2
1000261e:	00db      	lsls	r3, r3, #3
10002620:	4a06      	ldr	r2, [pc, #24]	; (1000263c <get_driver+0x70>)
10002622:	189b      	adds	r3, r3, r2
10002624:	e000      	b.n	10002628 <get_driver+0x5c>

  return NULL;
10002626:	2300      	movs	r3, #0
}
10002628:	0018      	movs	r0, r3
1000262a:	46bd      	mov	sp, r7
1000262c:	b002      	add	sp, #8
1000262e:	bd80      	pop	{r7, pc}
10002630:	00000000 	.word	0x00000000
10002634:	20009442 	.word	0x20009442
10002638:	2000086c 	.word	0x2000086c
1000263c:	1000d0f4 	.word	0x1000d0f4

10002640 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
10002640:	b580      	push	{r7, lr}
10002642:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
10002644:	4b04      	ldr	r3, [pc, #16]	; (10002658 <tud_mounted+0x18>)
10002646:	785b      	ldrb	r3, [r3, #1]
10002648:	b2db      	uxtb	r3, r3
1000264a:	1e5a      	subs	r2, r3, #1
1000264c:	4193      	sbcs	r3, r2
1000264e:	b2db      	uxtb	r3, r3
}
10002650:	0018      	movs	r0, r3
10002652:	46bd      	mov	sp, r7
10002654:	bd80      	pop	{r7, pc}
10002656:	46c0      	nop			; (mov r8, r8)
10002658:	20000a64 	.word	0x20000a64

1000265c <tud_suspended>:

bool tud_suspended(void)
{
1000265c:	b580      	push	{r7, lr}
1000265e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
10002660:	4b05      	ldr	r3, [pc, #20]	; (10002678 <tud_suspended+0x1c>)
10002662:	781b      	ldrb	r3, [r3, #0]
10002664:	075b      	lsls	r3, r3, #29
10002666:	0fdb      	lsrs	r3, r3, #31
10002668:	b2db      	uxtb	r3, r3
1000266a:	1e5a      	subs	r2, r3, #1
1000266c:	4193      	sbcs	r3, r2
1000266e:	b2db      	uxtb	r3, r3
}
10002670:	0018      	movs	r0, r3
10002672:	46bd      	mov	sp, r7
10002674:	bd80      	pop	{r7, pc}
10002676:	46c0      	nop			; (mov r8, r8)
10002678:	20000a64 	.word	0x20000a64

1000267c <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
1000267c:	b580      	push	{r7, lr}
1000267e:	af00      	add	r7, sp, #0
  return _usbd_initialized;
10002680:	4b02      	ldr	r3, [pc, #8]	; (1000268c <tud_inited+0x10>)
10002682:	781b      	ldrb	r3, [r3, #0]
}
10002684:	0018      	movs	r0, r3
10002686:	46bd      	mov	sp, r7
10002688:	bd80      	pop	{r7, pc}
1000268a:	46c0      	nop			; (mov r8, r8)
1000268c:	20009443 	.word	0x20009443

10002690 <tud_init>:

bool tud_init (uint8_t rhport)
{
10002690:	b590      	push	{r4, r7, lr}
10002692:	b085      	sub	sp, #20
10002694:	af00      	add	r7, sp, #0
10002696:	0002      	movs	r2, r0
10002698:	1dfb      	adds	r3, r7, #7
1000269a:	701a      	strb	r2, [r3, #0]
  // skip if already initialized
  if (_usbd_initialized) return _usbd_initialized;
1000269c:	4b37      	ldr	r3, [pc, #220]	; (1000277c <tud_init+0xec>)
1000269e:	781b      	ldrb	r3, [r3, #0]
100026a0:	2b00      	cmp	r3, #0
100026a2:	d002      	beq.n	100026aa <tud_init+0x1a>
100026a4:	4b35      	ldr	r3, [pc, #212]	; (1000277c <tud_init+0xec>)
100026a6:	781b      	ldrb	r3, [r3, #0]
100026a8:	e063      	b.n	10002772 <tud_init+0xe2>

  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
100026aa:	4b35      	ldr	r3, [pc, #212]	; (10002780 <tud_init+0xf0>)
100026ac:	2253      	movs	r2, #83	; 0x53
100026ae:	2100      	movs	r1, #0
100026b0:	0018      	movs	r0, r3
100026b2:	f00a fc51 	bl	1000cf58 <__wrap_memset>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
100026b6:	4b33      	ldr	r3, [pc, #204]	; (10002784 <tud_init+0xf4>)
100026b8:	0018      	movs	r0, r3
100026ba:	f7ff fedf 	bl	1000247c <osal_mutex_create>
100026be:	0002      	movs	r2, r0
100026c0:	4b31      	ldr	r3, [pc, #196]	; (10002788 <tud_init+0xf8>)
100026c2:	601a      	str	r2, [r3, #0]
  TU_ASSERT(_usbd_mutex);
100026c4:	4b30      	ldr	r3, [pc, #192]	; (10002788 <tud_init+0xf8>)
100026c6:	681b      	ldr	r3, [r3, #0]
100026c8:	2b00      	cmp	r3, #0
100026ca:	d109      	bne.n	100026e0 <tud_init+0x50>
100026cc:	23a2      	movs	r3, #162	; 0xa2
100026ce:	33ff      	adds	r3, #255	; 0xff
100026d0:	001a      	movs	r2, r3
100026d2:	492e      	ldr	r1, [pc, #184]	; (1000278c <tud_init+0xfc>)
100026d4:	4b2e      	ldr	r3, [pc, #184]	; (10002790 <tud_init+0x100>)
100026d6:	0018      	movs	r0, r3
100026d8:	f008 fd82 	bl	1000b1e0 <__wrap_printf>
100026dc:	2300      	movs	r3, #0
100026de:	e048      	b.n	10002772 <tud_init+0xe2>
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
100026e0:	4b2c      	ldr	r3, [pc, #176]	; (10002794 <tud_init+0x104>)
100026e2:	0018      	movs	r0, r3
100026e4:	f7ff ff0e 	bl	10002504 <osal_queue_create>
100026e8:	0002      	movs	r2, r0
100026ea:	4b2b      	ldr	r3, [pc, #172]	; (10002798 <tud_init+0x108>)
100026ec:	601a      	str	r2, [r3, #0]
  TU_ASSERT(_usbd_q);
100026ee:	4b2a      	ldr	r3, [pc, #168]	; (10002798 <tud_init+0x108>)
100026f0:	681b      	ldr	r3, [r3, #0]
100026f2:	2b00      	cmp	r3, #0
100026f4:	d108      	bne.n	10002708 <tud_init+0x78>
100026f6:	23d3      	movs	r3, #211	; 0xd3
100026f8:	005a      	lsls	r2, r3, #1
100026fa:	4924      	ldr	r1, [pc, #144]	; (1000278c <tud_init+0xfc>)
100026fc:	4b24      	ldr	r3, [pc, #144]	; (10002790 <tud_init+0x100>)
100026fe:	0018      	movs	r0, r3
10002700:	f008 fd6e 	bl	1000b1e0 <__wrap_printf>
10002704:	2300      	movs	r3, #0
10002706:	e034      	b.n	10002772 <tud_init+0xe2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
10002708:	4b24      	ldr	r3, [pc, #144]	; (1000279c <tud_init+0x10c>)
1000270a:	2b00      	cmp	r3, #0
1000270c:	d006      	beq.n	1000271c <tud_init+0x8c>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
1000270e:	4b24      	ldr	r3, [pc, #144]	; (100027a0 <tud_init+0x110>)
10002710:	0018      	movs	r0, r3
10002712:	e000      	b.n	10002716 <tud_init+0x86>
10002714:	bf00      	nop
10002716:	0002      	movs	r2, r0
10002718:	4b22      	ldr	r3, [pc, #136]	; (100027a4 <tud_init+0x114>)
1000271a:	601a      	str	r2, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000271c:	230f      	movs	r3, #15
1000271e:	18fb      	adds	r3, r7, r3
10002720:	2200      	movs	r2, #0
10002722:	701a      	strb	r2, [r3, #0]
10002724:	e00f      	b.n	10002746 <tud_init+0xb6>
  {
    usbd_class_driver_t const * driver = get_driver(i);
10002726:	240f      	movs	r4, #15
10002728:	193b      	adds	r3, r7, r4
1000272a:	781b      	ldrb	r3, [r3, #0]
1000272c:	0018      	movs	r0, r3
1000272e:	f7ff ff4d 	bl	100025cc <get_driver>
10002732:	0003      	movs	r3, r0
10002734:	60bb      	str	r3, [r7, #8]
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
10002736:	68bb      	ldr	r3, [r7, #8]
10002738:	681b      	ldr	r3, [r3, #0]
1000273a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000273c:	193b      	adds	r3, r7, r4
1000273e:	781a      	ldrb	r2, [r3, #0]
10002740:	193b      	adds	r3, r7, r4
10002742:	3201      	adds	r2, #1
10002744:	701a      	strb	r2, [r3, #0]
10002746:	4b16      	ldr	r3, [pc, #88]	; (100027a0 <tud_init+0x110>)
10002748:	781b      	ldrb	r3, [r3, #0]
1000274a:	1c5a      	adds	r2, r3, #1
1000274c:	230f      	movs	r3, #15
1000274e:	18fb      	adds	r3, r7, r3
10002750:	781b      	ldrb	r3, [r3, #0]
10002752:	429a      	cmp	r2, r3
10002754:	dae7      	bge.n	10002726 <tud_init+0x96>
  }

  // Init device controller driver
  dcd_init(rhport);
10002756:	1dfb      	adds	r3, r7, #7
10002758:	781b      	ldrb	r3, [r3, #0]
1000275a:	0018      	movs	r0, r3
1000275c:	f002 f86a 	bl	10004834 <dcd_init>
  dcd_int_enable(rhport);
10002760:	1dfb      	adds	r3, r7, #7
10002762:	781b      	ldrb	r3, [r3, #0]
10002764:	0018      	movs	r0, r3
10002766:	f002 f8b5 	bl	100048d4 <dcd_int_enable>

  _usbd_initialized = true;
1000276a:	4b04      	ldr	r3, [pc, #16]	; (1000277c <tud_init+0xec>)
1000276c:	2201      	movs	r2, #1
1000276e:	701a      	strb	r2, [r3, #0]

  return true;
10002770:	2301      	movs	r3, #1
}
10002772:	0018      	movs	r0, r3
10002774:	46bd      	mov	sp, r7
10002776:	b005      	add	sp, #20
10002778:	bd90      	pop	{r4, r7, pc}
1000277a:	46c0      	nop			; (mov r8, r8)
1000277c:	20009443 	.word	0x20009443
10002780:	20000a64 	.word	0x20000a64
10002784:	20000a1c 	.word	0x20000a1c
10002788:	20000ab8 	.word	0x20000ab8
1000278c:	1000d1b0 	.word	0x1000d1b0
10002790:	1000d0dc 	.word	0x1000d0dc
10002794:	20000648 	.word	0x20000648
10002798:	20000abc 	.word	0x20000abc
1000279c:	00000000 	.word	0x00000000
100027a0:	20009442 	.word	0x20009442
100027a4:	2000086c 	.word	0x2000086c

100027a8 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
100027a8:	b590      	push	{r4, r7, lr}
100027aa:	b085      	sub	sp, #20
100027ac:	af00      	add	r7, sp, #0
100027ae:	0002      	movs	r2, r0
100027b0:	1dfb      	adds	r3, r7, #7
100027b2:	701a      	strb	r2, [r3, #0]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100027b4:	230f      	movs	r3, #15
100027b6:	18fb      	adds	r3, r7, r3
100027b8:	2200      	movs	r2, #0
100027ba:	701a      	strb	r2, [r3, #0]
100027bc:	e010      	b.n	100027e0 <configuration_reset+0x38>
  {
    get_driver(i)->reset(rhport);
100027be:	240f      	movs	r4, #15
100027c0:	193b      	adds	r3, r7, r4
100027c2:	781b      	ldrb	r3, [r3, #0]
100027c4:	0018      	movs	r0, r3
100027c6:	f7ff ff01 	bl	100025cc <get_driver>
100027ca:	0003      	movs	r3, r0
100027cc:	685b      	ldr	r3, [r3, #4]
100027ce:	1dfa      	adds	r2, r7, #7
100027d0:	7812      	ldrb	r2, [r2, #0]
100027d2:	0010      	movs	r0, r2
100027d4:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100027d6:	193b      	adds	r3, r7, r4
100027d8:	781a      	ldrb	r2, [r3, #0]
100027da:	193b      	adds	r3, r7, r4
100027dc:	3201      	adds	r2, #1
100027de:	701a      	strb	r2, [r3, #0]
100027e0:	4b0e      	ldr	r3, [pc, #56]	; (1000281c <configuration_reset+0x74>)
100027e2:	781b      	ldrb	r3, [r3, #0]
100027e4:	1c5a      	adds	r2, r3, #1
100027e6:	230f      	movs	r3, #15
100027e8:	18fb      	adds	r3, r7, r3
100027ea:	781b      	ldrb	r3, [r3, #0]
100027ec:	429a      	cmp	r2, r3
100027ee:	dae6      	bge.n	100027be <configuration_reset+0x16>
  }

  tu_varclr(&_usbd_dev);
100027f0:	4b0b      	ldr	r3, [pc, #44]	; (10002820 <configuration_reset+0x78>)
100027f2:	2253      	movs	r2, #83	; 0x53
100027f4:	2100      	movs	r1, #0
100027f6:	0018      	movs	r0, r3
100027f8:	f00a fbae 	bl	1000cf58 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
100027fc:	4b09      	ldr	r3, [pc, #36]	; (10002824 <configuration_reset+0x7c>)
100027fe:	2210      	movs	r2, #16
10002800:	21ff      	movs	r1, #255	; 0xff
10002802:	0018      	movs	r0, r3
10002804:	f00a fba8 	bl	1000cf58 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10002808:	4b07      	ldr	r3, [pc, #28]	; (10002828 <configuration_reset+0x80>)
1000280a:	2220      	movs	r2, #32
1000280c:	21ff      	movs	r1, #255	; 0xff
1000280e:	0018      	movs	r0, r3
10002810:	f00a fba2 	bl	1000cf58 <__wrap_memset>
}
10002814:	46c0      	nop			; (mov r8, r8)
10002816:	46bd      	mov	sp, r7
10002818:	b005      	add	sp, #20
1000281a:	bd90      	pop	{r4, r7, pc}
1000281c:	20009442 	.word	0x20009442
10002820:	20000a64 	.word	0x20000a64
10002824:	20000a67 	.word	0x20000a67
10002828:	20000a77 	.word	0x20000a77

1000282c <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
1000282c:	b580      	push	{r7, lr}
1000282e:	b082      	sub	sp, #8
10002830:	af00      	add	r7, sp, #0
10002832:	0002      	movs	r2, r0
10002834:	1dfb      	adds	r3, r7, #7
10002836:	701a      	strb	r2, [r3, #0]
  configuration_reset(rhport);
10002838:	1dfb      	adds	r3, r7, #7
1000283a:	781b      	ldrb	r3, [r3, #0]
1000283c:	0018      	movs	r0, r3
1000283e:	f7ff ffb3 	bl	100027a8 <configuration_reset>
  usbd_control_reset();
10002842:	f001 fc25 	bl	10004090 <usbd_control_reset>
}
10002846:	46c0      	nop			; (mov r8, r8)
10002848:	46bd      	mov	sp, r7
1000284a:	b002      	add	sp, #8
1000284c:	bd80      	pop	{r7, pc}
	...

10002850 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
10002850:	b5f0      	push	{r4, r5, r6, r7, lr}
10002852:	b087      	sub	sp, #28
10002854:	af00      	add	r7, sp, #0
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
10002856:	f002 fce1 	bl	1000521c <tusb_inited>
1000285a:	0003      	movs	r3, r0
1000285c:	001a      	movs	r2, r3
1000285e:	2301      	movs	r3, #1
10002860:	4053      	eors	r3, r2
10002862:	b2db      	uxtb	r3, r3
10002864:	2b00      	cmp	r3, #0
10002866:	d000      	beq.n	1000286a <tud_task+0x1a>
10002868:	e135      	b.n	10002ad6 <tud_task+0x286>
  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;

    if ( !osal_queue_receive(_usbd_q, &event) ) return;
1000286a:	4b9e      	ldr	r3, [pc, #632]	; (10002ae4 <tud_task+0x294>)
1000286c:	681b      	ldr	r3, [r3, #0]
1000286e:	003a      	movs	r2, r7
10002870:	0011      	movs	r1, r2
10002872:	0018      	movs	r0, r3
10002874:	f7ff fe58 	bl	10002528 <osal_queue_receive>
10002878:	0003      	movs	r3, r0
1000287a:	001a      	movs	r2, r3
1000287c:	2301      	movs	r3, #1
1000287e:	4053      	eors	r3, r2
10002880:	b2db      	uxtb	r3, r3
10002882:	2b00      	cmp	r3, #0
10002884:	d000      	beq.n	10002888 <tud_task+0x38>
10002886:	e128      	b.n	10002ada <tud_task+0x28a>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
10002888:	003b      	movs	r3, r7
1000288a:	785b      	ldrb	r3, [r3, #1]
1000288c:	2b08      	cmp	r3, #8
1000288e:	d900      	bls.n	10002892 <tud_task+0x42>
10002890:	e115      	b.n	10002abe <tud_task+0x26e>
10002892:	009a      	lsls	r2, r3, #2
10002894:	4b94      	ldr	r3, [pc, #592]	; (10002ae8 <tud_task+0x298>)
10002896:	18d3      	adds	r3, r2, r3
10002898:	681b      	ldr	r3, [r3, #0]
1000289a:	469f      	mov	pc, r3
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG2(": %s Speed\r\n", _tusb_speed_str[event.bus_reset.speed]);
        usbd_reset(event.rhport);
1000289c:	003b      	movs	r3, r7
1000289e:	781b      	ldrb	r3, [r3, #0]
100028a0:	0018      	movs	r0, r3
100028a2:	f7ff ffc3 	bl	1000282c <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
100028a6:	003b      	movs	r3, r7
100028a8:	791a      	ldrb	r2, [r3, #4]
100028aa:	4b90      	ldr	r3, [pc, #576]	; (10002aec <tud_task+0x29c>)
100028ac:	709a      	strb	r2, [r3, #2]
      break;
100028ae:	e111      	b.n	10002ad4 <tud_task+0x284>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG2("\r\n");
        usbd_reset(event.rhport);
100028b0:	003b      	movs	r3, r7
100028b2:	781b      	ldrb	r3, [r3, #0]
100028b4:	0018      	movs	r0, r3
100028b6:	f7ff ffb9 	bl	1000282c <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
100028ba:	4b8d      	ldr	r3, [pc, #564]	; (10002af0 <tud_task+0x2a0>)
100028bc:	2b00      	cmp	r3, #0
100028be:	d100      	bne.n	100028c2 <tud_task+0x72>
100028c0:	e0ff      	b.n	10002ac2 <tud_task+0x272>
100028c2:	e000      	b.n	100028c6 <tud_task+0x76>
100028c4:	bf00      	nop
      break;
100028c6:	e0fc      	b.n	10002ac2 <tud_task+0x272>
        TU_LOG2_VAR(&event.setup_received);
        TU_LOG2("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
100028c8:	4a88      	ldr	r2, [pc, #544]	; (10002aec <tud_task+0x29c>)
100028ca:	7813      	ldrb	r3, [r2, #0]
100028cc:	2101      	movs	r1, #1
100028ce:	430b      	orrs	r3, r1
100028d0:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
100028d2:	4a86      	ldr	r2, [pc, #536]	; (10002aec <tud_task+0x29c>)
100028d4:	2133      	movs	r1, #51	; 0x33
100028d6:	5c53      	ldrb	r3, [r2, r1]
100028d8:	2001      	movs	r0, #1
100028da:	4383      	bics	r3, r0
100028dc:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
100028de:	4a83      	ldr	r2, [pc, #524]	; (10002aec <tud_task+0x29c>)
100028e0:	2133      	movs	r1, #51	; 0x33
100028e2:	5c53      	ldrb	r3, [r2, r1]
100028e4:	2004      	movs	r0, #4
100028e6:	4383      	bics	r3, r0
100028e8:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
100028ea:	4a80      	ldr	r2, [pc, #512]	; (10002aec <tud_task+0x29c>)
100028ec:	2134      	movs	r1, #52	; 0x34
100028ee:	5c53      	ldrb	r3, [r2, r1]
100028f0:	2001      	movs	r0, #1
100028f2:	4383      	bics	r3, r0
100028f4:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
100028f6:	4a7d      	ldr	r2, [pc, #500]	; (10002aec <tud_task+0x29c>)
100028f8:	2134      	movs	r1, #52	; 0x34
100028fa:	5c53      	ldrb	r3, [r2, r1]
100028fc:	2004      	movs	r0, #4
100028fe:	4383      	bics	r3, r0
10002900:	5453      	strb	r3, [r2, r1]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
10002902:	003b      	movs	r3, r7
10002904:	781a      	ldrb	r2, [r3, #0]
10002906:	003b      	movs	r3, r7
10002908:	3304      	adds	r3, #4
1000290a:	0019      	movs	r1, r3
1000290c:	0010      	movs	r0, r2
1000290e:	f000 f919 	bl	10002b44 <process_control_request>
10002912:	0003      	movs	r3, r0
10002914:	001a      	movs	r2, r3
10002916:	2301      	movs	r3, #1
10002918:	4053      	eors	r3, r2
1000291a:	b2db      	uxtb	r3, r3
1000291c:	2b00      	cmp	r3, #0
1000291e:	d100      	bne.n	10002922 <tud_task+0xd2>
10002920:	e0d1      	b.n	10002ac6 <tud_task+0x276>
        {
          TU_LOG2("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
10002922:	003b      	movs	r3, r7
10002924:	781b      	ldrb	r3, [r3, #0]
10002926:	2100      	movs	r1, #0
10002928:	0018      	movs	r0, r3
1000292a:	f002 f8b9 	bl	10004aa0 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
1000292e:	003b      	movs	r3, r7
10002930:	781b      	ldrb	r3, [r3, #0]
10002932:	2180      	movs	r1, #128	; 0x80
10002934:	0018      	movs	r0, r3
10002936:	f002 f8b3 	bl	10004aa0 <dcd_edpt_stall>
        }
      break;
1000293a:	e0c4      	b.n	10002ac6 <tud_task+0x276>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
1000293c:	2516      	movs	r5, #22
1000293e:	197b      	adds	r3, r7, r5
10002940:	003a      	movs	r2, r7
10002942:	7912      	ldrb	r2, [r2, #4]
10002944:	701a      	strb	r2, [r3, #0]
        uint8_t const epnum   = tu_edpt_number(ep_addr);
10002946:	2615      	movs	r6, #21
10002948:	19bc      	adds	r4, r7, r6
1000294a:	197b      	adds	r3, r7, r5
1000294c:	781b      	ldrb	r3, [r3, #0]
1000294e:	0018      	movs	r0, r3
10002950:	f7ff fd29 	bl	100023a6 <tu_edpt_number>
10002954:	0003      	movs	r3, r0
10002956:	7023      	strb	r3, [r4, #0]
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
10002958:	2414      	movs	r4, #20
1000295a:	193c      	adds	r4, r7, r4
1000295c:	197b      	adds	r3, r7, r5
1000295e:	781b      	ldrb	r3, [r3, #0]
10002960:	0018      	movs	r0, r3
10002962:	f7ff fd12 	bl	1000238a <tu_edpt_dir>
10002966:	0003      	movs	r3, r0
10002968:	7023      	strb	r3, [r4, #0]

        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
1000296a:	19bb      	adds	r3, r7, r6
1000296c:	781a      	ldrb	r2, [r3, #0]
1000296e:	2414      	movs	r4, #20
10002970:	193b      	adds	r3, r7, r4
10002972:	781b      	ldrb	r3, [r3, #0]
10002974:	495d      	ldr	r1, [pc, #372]	; (10002aec <tud_task+0x29c>)
10002976:	2030      	movs	r0, #48	; 0x30
10002978:	0052      	lsls	r2, r2, #1
1000297a:	188a      	adds	r2, r1, r2
1000297c:	18d3      	adds	r3, r2, r3
1000297e:	181a      	adds	r2, r3, r0
10002980:	78d3      	ldrb	r3, [r2, #3]
10002982:	2101      	movs	r1, #1
10002984:	438b      	bics	r3, r1
10002986:	70d3      	strb	r3, [r2, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
10002988:	19bb      	adds	r3, r7, r6
1000298a:	781a      	ldrb	r2, [r3, #0]
1000298c:	193b      	adds	r3, r7, r4
1000298e:	781b      	ldrb	r3, [r3, #0]
10002990:	4956      	ldr	r1, [pc, #344]	; (10002aec <tud_task+0x29c>)
10002992:	2030      	movs	r0, #48	; 0x30
10002994:	0052      	lsls	r2, r2, #1
10002996:	188a      	adds	r2, r1, r2
10002998:	18d3      	adds	r3, r2, r3
1000299a:	181a      	adds	r2, r3, r0
1000299c:	78d3      	ldrb	r3, [r2, #3]
1000299e:	2104      	movs	r1, #4
100029a0:	438b      	bics	r3, r1
100029a2:	70d3      	strb	r3, [r2, #3]

        if ( 0 == epnum )
100029a4:	19bb      	adds	r3, r7, r6
100029a6:	781b      	ldrb	r3, [r3, #0]
100029a8:	2b00      	cmp	r3, #0
100029aa:	d10b      	bne.n	100029c4 <tud_task+0x174>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
100029ac:	003b      	movs	r3, r7
100029ae:	7818      	ldrb	r0, [r3, #0]
100029b0:	003b      	movs	r3, r7
100029b2:	795a      	ldrb	r2, [r3, #5]
100029b4:	003b      	movs	r3, r7
100029b6:	689c      	ldr	r4, [r3, #8]
100029b8:	197b      	adds	r3, r7, r5
100029ba:	7819      	ldrb	r1, [r3, #0]
100029bc:	0023      	movs	r3, r4
100029be:	f001 fb9f 	bl	10004100 <usbd_control_xfer_cb>

          TU_LOG2("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
100029c2:	e087      	b.n	10002ad4 <tud_task+0x284>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
100029c4:	2315      	movs	r3, #21
100029c6:	18fb      	adds	r3, r7, r3
100029c8:	781a      	ldrb	r2, [r3, #0]
100029ca:	2314      	movs	r3, #20
100029cc:	18fb      	adds	r3, r7, r3
100029ce:	781b      	ldrb	r3, [r3, #0]
100029d0:	4946      	ldr	r1, [pc, #280]	; (10002aec <tud_task+0x29c>)
100029d2:	0052      	lsls	r2, r2, #1
100029d4:	188a      	adds	r2, r1, r2
100029d6:	18d3      	adds	r3, r2, r3
100029d8:	3313      	adds	r3, #19
100029da:	781b      	ldrb	r3, [r3, #0]
100029dc:	0018      	movs	r0, r3
100029de:	f7ff fdf5 	bl	100025cc <get_driver>
100029e2:	0003      	movs	r3, r0
100029e4:	613b      	str	r3, [r7, #16]
          TU_ASSERT(driver, );
100029e6:	693b      	ldr	r3, [r7, #16]
100029e8:	2b00      	cmp	r3, #0
100029ea:	d106      	bne.n	100029fa <tud_task+0x1aa>
100029ec:	4a41      	ldr	r2, [pc, #260]	; (10002af4 <tud_task+0x2a4>)
100029ee:	4942      	ldr	r1, [pc, #264]	; (10002af8 <tud_task+0x2a8>)
100029f0:	4b42      	ldr	r3, [pc, #264]	; (10002afc <tud_task+0x2ac>)
100029f2:	0018      	movs	r0, r3
100029f4:	f008 fbf4 	bl	1000b1e0 <__wrap_printf>
100029f8:	e070      	b.n	10002adc <tud_task+0x28c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
100029fa:	693b      	ldr	r3, [r7, #16]
100029fc:	691c      	ldr	r4, [r3, #16]
100029fe:	003b      	movs	r3, r7
10002a00:	7818      	ldrb	r0, [r3, #0]
10002a02:	003b      	movs	r3, r7
10002a04:	795a      	ldrb	r2, [r3, #5]
10002a06:	003b      	movs	r3, r7
10002a08:	689d      	ldr	r5, [r3, #8]
10002a0a:	2316      	movs	r3, #22
10002a0c:	18fb      	adds	r3, r7, r3
10002a0e:	7819      	ldrb	r1, [r3, #0]
10002a10:	002b      	movs	r3, r5
10002a12:	47a0      	blx	r4
      break;
10002a14:	e05e      	b.n	10002ad4 <tud_task+0x284>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
10002a16:	4b35      	ldr	r3, [pc, #212]	; (10002aec <tud_task+0x29c>)
10002a18:	781b      	ldrb	r3, [r3, #0]
10002a1a:	07db      	lsls	r3, r3, #31
10002a1c:	0fdb      	lsrs	r3, r3, #31
10002a1e:	b2db      	uxtb	r3, r3
10002a20:	2b00      	cmp	r3, #0
10002a22:	d052      	beq.n	10002aca <tud_task+0x27a>
        {
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
10002a24:	4b36      	ldr	r3, [pc, #216]	; (10002b00 <tud_task+0x2b0>)
10002a26:	2b00      	cmp	r3, #0
10002a28:	d04f      	beq.n	10002aca <tud_task+0x27a>
10002a2a:	4b30      	ldr	r3, [pc, #192]	; (10002aec <tud_task+0x29c>)
10002a2c:	781b      	ldrb	r3, [r3, #0]
10002a2e:	071b      	lsls	r3, r3, #28
10002a30:	0fdb      	lsrs	r3, r3, #31
10002a32:	b2db      	uxtb	r3, r3
10002a34:	1e5a      	subs	r2, r3, #1
10002a36:	4193      	sbcs	r3, r2
10002a38:	b2db      	uxtb	r3, r3
10002a3a:	0018      	movs	r0, r3
10002a3c:	e000      	b.n	10002a40 <tud_task+0x1f0>
10002a3e:	bf00      	nop
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
10002a40:	e043      	b.n	10002aca <tud_task+0x27a>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
10002a42:	4b2a      	ldr	r3, [pc, #168]	; (10002aec <tud_task+0x29c>)
10002a44:	781b      	ldrb	r3, [r3, #0]
10002a46:	07db      	lsls	r3, r3, #31
10002a48:	0fdb      	lsrs	r3, r3, #31
10002a4a:	b2db      	uxtb	r3, r3
10002a4c:	2b00      	cmp	r3, #0
10002a4e:	d03e      	beq.n	10002ace <tud_task+0x27e>
        {
          TU_LOG2("\r\n");
          if (tud_resume_cb) tud_resume_cb();
10002a50:	4b2c      	ldr	r3, [pc, #176]	; (10002b04 <tud_task+0x2b4>)
10002a52:	2b00      	cmp	r3, #0
10002a54:	d03b      	beq.n	10002ace <tud_task+0x27e>
10002a56:	e000      	b.n	10002a5a <tud_task+0x20a>
10002a58:	bf00      	nop
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
10002a5a:	e038      	b.n	10002ace <tud_task+0x27e>

      case DCD_EVENT_SOF:
        TU_LOG2("\r\n");
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10002a5c:	2317      	movs	r3, #23
10002a5e:	18fb      	adds	r3, r7, r3
10002a60:	2200      	movs	r2, #0
10002a62:	701a      	strb	r2, [r3, #0]
10002a64:	e017      	b.n	10002a96 <tud_task+0x246>
        {
          usbd_class_driver_t const * driver = get_driver(i);
10002a66:	2317      	movs	r3, #23
10002a68:	18fb      	adds	r3, r7, r3
10002a6a:	781b      	ldrb	r3, [r3, #0]
10002a6c:	0018      	movs	r0, r3
10002a6e:	f7ff fdad 	bl	100025cc <get_driver>
10002a72:	0003      	movs	r3, r0
10002a74:	60fb      	str	r3, [r7, #12]
          if ( driver->sof ) driver->sof(event.rhport);
10002a76:	68fb      	ldr	r3, [r7, #12]
10002a78:	695b      	ldr	r3, [r3, #20]
10002a7a:	2b00      	cmp	r3, #0
10002a7c:	d005      	beq.n	10002a8a <tud_task+0x23a>
10002a7e:	68fb      	ldr	r3, [r7, #12]
10002a80:	695b      	ldr	r3, [r3, #20]
10002a82:	003a      	movs	r2, r7
10002a84:	7812      	ldrb	r2, [r2, #0]
10002a86:	0010      	movs	r0, r2
10002a88:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10002a8a:	2117      	movs	r1, #23
10002a8c:	187b      	adds	r3, r7, r1
10002a8e:	781a      	ldrb	r2, [r3, #0]
10002a90:	187b      	adds	r3, r7, r1
10002a92:	3201      	adds	r2, #1
10002a94:	701a      	strb	r2, [r3, #0]
10002a96:	4b1c      	ldr	r3, [pc, #112]	; (10002b08 <tud_task+0x2b8>)
10002a98:	781b      	ldrb	r3, [r3, #0]
10002a9a:	1c5a      	adds	r2, r3, #1
10002a9c:	2317      	movs	r3, #23
10002a9e:	18fb      	adds	r3, r7, r3
10002aa0:	781b      	ldrb	r3, [r3, #0]
10002aa2:	429a      	cmp	r2, r3
10002aa4:	dadf      	bge.n	10002a66 <tud_task+0x216>
        }
      break;
10002aa6:	e015      	b.n	10002ad4 <tud_task+0x284>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
10002aa8:	003b      	movs	r3, r7
10002aaa:	685b      	ldr	r3, [r3, #4]
10002aac:	2b00      	cmp	r3, #0
10002aae:	d010      	beq.n	10002ad2 <tud_task+0x282>
10002ab0:	003b      	movs	r3, r7
10002ab2:	685a      	ldr	r2, [r3, #4]
10002ab4:	003b      	movs	r3, r7
10002ab6:	689b      	ldr	r3, [r3, #8]
10002ab8:	0018      	movs	r0, r3
10002aba:	4790      	blx	r2
      break;
10002abc:	e009      	b.n	10002ad2 <tud_task+0x282>

      default:
        TU_BREAKPOINT();
      break;
10002abe:	46c0      	nop			; (mov r8, r8)
10002ac0:	e6d3      	b.n	1000286a <tud_task+0x1a>
      break;
10002ac2:	46c0      	nop			; (mov r8, r8)
10002ac4:	e6d1      	b.n	1000286a <tud_task+0x1a>
      break;
10002ac6:	46c0      	nop			; (mov r8, r8)
10002ac8:	e6cf      	b.n	1000286a <tud_task+0x1a>
      break;
10002aca:	46c0      	nop			; (mov r8, r8)
10002acc:	e6cd      	b.n	1000286a <tud_task+0x1a>
      break;
10002ace:	46c0      	nop			; (mov r8, r8)
10002ad0:	e6cb      	b.n	1000286a <tud_task+0x1a>
      break;
10002ad2:	46c0      	nop			; (mov r8, r8)
  {
10002ad4:	e6c9      	b.n	1000286a <tud_task+0x1a>
  if ( !tusb_inited() ) return;
10002ad6:	46c0      	nop			; (mov r8, r8)
10002ad8:	e000      	b.n	10002adc <tud_task+0x28c>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
10002ada:	46c0      	nop			; (mov r8, r8)
    }
  }
}
10002adc:	46bd      	mov	sp, r7
10002ade:	b007      	add	sp, #28
10002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002ae2:	46c0      	nop			; (mov r8, r8)
10002ae4:	20000abc 	.word	0x20000abc
10002ae8:	1000d124 	.word	0x1000d124
10002aec:	20000a64 	.word	0x20000a64
10002af0:	00000000 	.word	0x00000000
10002af4:	00000237 	.word	0x00000237
10002af8:	1000d1bc 	.word	0x1000d1bc
10002afc:	1000d0dc 	.word	0x1000d0dc
	...
10002b08:	20009442 	.word	0x20009442

10002b0c <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
10002b0c:	b590      	push	{r4, r7, lr}
10002b0e:	b085      	sub	sp, #20
10002b10:	af00      	add	r7, sp, #0
10002b12:	60b9      	str	r1, [r7, #8]
10002b14:	607a      	str	r2, [r7, #4]
10002b16:	240f      	movs	r4, #15
10002b18:	193b      	adds	r3, r7, r4
10002b1a:	1c02      	adds	r2, r0, #0
10002b1c:	701a      	strb	r2, [r3, #0]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
10002b1e:	68bb      	ldr	r3, [r7, #8]
10002b20:	68db      	ldr	r3, [r3, #12]
10002b22:	0018      	movs	r0, r3
10002b24:	f001 fac2 	bl	100040ac <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
10002b28:	68bb      	ldr	r3, [r7, #8]
10002b2a:	68db      	ldr	r3, [r3, #12]
10002b2c:	6879      	ldr	r1, [r7, #4]
10002b2e:	193a      	adds	r2, r7, r4
10002b30:	7810      	ldrb	r0, [r2, #0]
10002b32:	000a      	movs	r2, r1
10002b34:	2100      	movs	r1, #0
10002b36:	4798      	blx	r3
10002b38:	0003      	movs	r3, r0
}
10002b3a:	0018      	movs	r0, r3
10002b3c:	46bd      	mov	sp, r7
10002b3e:	b005      	add	sp, #20
10002b40:	bd90      	pop	{r4, r7, pc}
	...

10002b44 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
10002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b46:	b08d      	sub	sp, #52	; 0x34
10002b48:	af00      	add	r7, sp, #0
10002b4a:	0002      	movs	r2, r0
10002b4c:	6039      	str	r1, [r7, #0]
10002b4e:	1dfb      	adds	r3, r7, #7
10002b50:	701a      	strb	r2, [r3, #0]
  usbd_control_set_complete_callback(NULL);
10002b52:	2000      	movs	r0, #0
10002b54:	f001 faaa 	bl	100040ac <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
10002b58:	683b      	ldr	r3, [r7, #0]
10002b5a:	781b      	ldrb	r3, [r3, #0]
10002b5c:	2260      	movs	r2, #96	; 0x60
10002b5e:	4013      	ands	r3, r2
10002b60:	b2db      	uxtb	r3, r3
10002b62:	2b60      	cmp	r3, #96	; 0x60
10002b64:	d107      	bne.n	10002b76 <process_control_request+0x32>
10002b66:	4ad7      	ldr	r2, [pc, #860]	; (10002ec4 <process_control_request+0x380>)
10002b68:	49d7      	ldr	r1, [pc, #860]	; (10002ec8 <process_control_request+0x384>)
10002b6a:	4bd8      	ldr	r3, [pc, #864]	; (10002ecc <process_control_request+0x388>)
10002b6c:	0018      	movs	r0, r3
10002b6e:	f008 fb37 	bl	1000b1e0 <__wrap_printf>
10002b72:	2300      	movs	r3, #0
10002b74:	e26d      	b.n	10003052 <process_control_request+0x50e>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
10002b76:	683b      	ldr	r3, [r7, #0]
10002b78:	781b      	ldrb	r3, [r3, #0]
10002b7a:	2260      	movs	r2, #96	; 0x60
10002b7c:	4013      	ands	r3, r2
10002b7e:	b2db      	uxtb	r3, r3
10002b80:	2b40      	cmp	r3, #64	; 0x40
10002b82:	d111      	bne.n	10002ba8 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
10002b84:	4bd2      	ldr	r3, [pc, #840]	; (10002ed0 <process_control_request+0x38c>)
10002b86:	2b00      	cmp	r3, #0
10002b88:	d101      	bne.n	10002b8e <process_control_request+0x4a>
10002b8a:	2300      	movs	r3, #0
10002b8c:	e261      	b.n	10003052 <process_control_request+0x50e>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
10002b8e:	4bd0      	ldr	r3, [pc, #832]	; (10002ed0 <process_control_request+0x38c>)
10002b90:	0018      	movs	r0, r3
10002b92:	f001 fa8b 	bl	100040ac <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
10002b96:	683a      	ldr	r2, [r7, #0]
10002b98:	1dfb      	adds	r3, r7, #7
10002b9a:	781b      	ldrb	r3, [r3, #0]
10002b9c:	2100      	movs	r1, #0
10002b9e:	0018      	movs	r0, r3
10002ba0:	e000      	b.n	10002ba4 <process_control_request+0x60>
10002ba2:	bf00      	nop
10002ba4:	0003      	movs	r3, r0
10002ba6:	e254      	b.n	10003052 <process_control_request+0x50e>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
10002ba8:	683b      	ldr	r3, [r7, #0]
10002baa:	781b      	ldrb	r3, [r3, #0]
10002bac:	06db      	lsls	r3, r3, #27
10002bae:	0edb      	lsrs	r3, r3, #27
10002bb0:	b2db      	uxtb	r3, r3
10002bb2:	2b02      	cmp	r3, #2
10002bb4:	d100      	bne.n	10002bb8 <process_control_request+0x74>
10002bb6:	e193      	b.n	10002ee0 <process_control_request+0x39c>
10002bb8:	dd00      	ble.n	10002bbc <process_control_request+0x78>
10002bba:	e247      	b.n	1000304c <process_control_request+0x508>
10002bbc:	2b00      	cmp	r3, #0
10002bbe:	d003      	beq.n	10002bc8 <process_control_request+0x84>
10002bc0:	2b01      	cmp	r3, #1
10002bc2:	d100      	bne.n	10002bc6 <process_control_request+0x82>
10002bc4:	e11e      	b.n	10002e04 <process_control_request+0x2c0>
10002bc6:	e241      	b.n	1000304c <process_control_request+0x508>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
10002bc8:	683b      	ldr	r3, [r7, #0]
10002bca:	781b      	ldrb	r3, [r3, #0]
10002bcc:	2260      	movs	r2, #96	; 0x60
10002bce:	4013      	ands	r3, r2
10002bd0:	b2db      	uxtb	r3, r3
10002bd2:	2b20      	cmp	r3, #32
10002bd4:	d12d      	bne.n	10002c32 <process_control_request+0xee>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
10002bd6:	683b      	ldr	r3, [r7, #0]
10002bd8:	791a      	ldrb	r2, [r3, #4]
10002bda:	795b      	ldrb	r3, [r3, #5]
10002bdc:	021b      	lsls	r3, r3, #8
10002bde:	4313      	orrs	r3, r2
10002be0:	b29a      	uxth	r2, r3
10002be2:	2116      	movs	r1, #22
10002be4:	187b      	adds	r3, r7, r1
10002be6:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
10002be8:	187b      	adds	r3, r7, r1
10002bea:	881b      	ldrh	r3, [r3, #0]
10002bec:	b2da      	uxtb	r2, r3
10002bee:	211d      	movs	r1, #29
10002bf0:	187b      	adds	r3, r7, r1
10002bf2:	701a      	strb	r2, [r3, #0]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10002bf4:	187b      	adds	r3, r7, r1
10002bf6:	781b      	ldrb	r3, [r3, #0]
10002bf8:	2b0f      	cmp	r3, #15
10002bfa:	d901      	bls.n	10002c00 <process_control_request+0xbc>
10002bfc:	2300      	movs	r3, #0
10002bfe:	e228      	b.n	10003052 <process_control_request+0x50e>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10002c00:	231d      	movs	r3, #29
10002c02:	18fb      	adds	r3, r7, r3
10002c04:	781b      	ldrb	r3, [r3, #0]
10002c06:	4ab3      	ldr	r2, [pc, #716]	; (10002ed4 <process_control_request+0x390>)
10002c08:	18d3      	adds	r3, r2, r3
10002c0a:	78db      	ldrb	r3, [r3, #3]
10002c0c:	0018      	movs	r0, r3
10002c0e:	f7ff fcdd 	bl	100025cc <get_driver>
10002c12:	0003      	movs	r3, r0
10002c14:	61bb      	str	r3, [r7, #24]
        TU_VERIFY(driver);
10002c16:	69bb      	ldr	r3, [r7, #24]
10002c18:	2b00      	cmp	r3, #0
10002c1a:	d101      	bne.n	10002c20 <process_control_request+0xdc>
10002c1c:	2300      	movs	r3, #0
10002c1e:	e218      	b.n	10003052 <process_control_request+0x50e>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
10002c20:	683a      	ldr	r2, [r7, #0]
10002c22:	69b9      	ldr	r1, [r7, #24]
10002c24:	1dfb      	adds	r3, r7, #7
10002c26:	781b      	ldrb	r3, [r3, #0]
10002c28:	0018      	movs	r0, r3
10002c2a:	f7ff ff6f 	bl	10002b0c <invoke_class_control>
10002c2e:	0003      	movs	r3, r0
10002c30:	e20f      	b.n	10003052 <process_control_request+0x50e>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
10002c32:	683b      	ldr	r3, [r7, #0]
10002c34:	781b      	ldrb	r3, [r3, #0]
10002c36:	2260      	movs	r2, #96	; 0x60
10002c38:	4013      	ands	r3, r2
10002c3a:	b2db      	uxtb	r3, r3
10002c3c:	2b00      	cmp	r3, #0
10002c3e:	d001      	beq.n	10002c44 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
10002c40:	2300      	movs	r3, #0
10002c42:	e206      	b.n	10003052 <process_control_request+0x50e>
      }

      switch ( p_request->bRequest )
10002c44:	683b      	ldr	r3, [r7, #0]
10002c46:	785b      	ldrb	r3, [r3, #1]
10002c48:	2b09      	cmp	r3, #9
10002c4a:	d900      	bls.n	10002c4e <process_control_request+0x10a>
10002c4c:	e0d6      	b.n	10002dfc <process_control_request+0x2b8>
10002c4e:	009a      	lsls	r2, r3, #2
10002c50:	4ba1      	ldr	r3, [pc, #644]	; (10002ed8 <process_control_request+0x394>)
10002c52:	18d3      	adds	r3, r2, r3
10002c54:	681b      	ldr	r3, [r3, #0]
10002c56:	469f      	mov	pc, r3
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10002c58:	683b      	ldr	r3, [r7, #0]
10002c5a:	0018      	movs	r0, r3
10002c5c:	f001 fa34 	bl	100040c8 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10002c60:	683b      	ldr	r3, [r7, #0]
10002c62:	789a      	ldrb	r2, [r3, #2]
10002c64:	78db      	ldrb	r3, [r3, #3]
10002c66:	021b      	lsls	r3, r3, #8
10002c68:	4313      	orrs	r3, r2
10002c6a:	b29b      	uxth	r3, r3
10002c6c:	b2da      	uxtb	r2, r3
10002c6e:	1dfb      	adds	r3, r7, #7
10002c70:	781b      	ldrb	r3, [r3, #0]
10002c72:	0011      	movs	r1, r2
10002c74:	0018      	movs	r0, r3
10002c76:	f001 fe4d 	bl	10004914 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
10002c7a:	4a96      	ldr	r2, [pc, #600]	; (10002ed4 <process_control_request+0x390>)
10002c7c:	7813      	ldrb	r3, [r2, #0]
10002c7e:	2102      	movs	r1, #2
10002c80:	430b      	orrs	r3, r1
10002c82:	7013      	strb	r3, [r2, #0]
        break;
10002c84:	e0bd      	b.n	10002e02 <process_control_request+0x2be>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
10002c86:	4b93      	ldr	r3, [pc, #588]	; (10002ed4 <process_control_request+0x390>)
10002c88:	785b      	ldrb	r3, [r3, #1]
10002c8a:	b2da      	uxtb	r2, r3
10002c8c:	2111      	movs	r1, #17
10002c8e:	187b      	adds	r3, r7, r1
10002c90:	701a      	strb	r2, [r3, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10002c92:	187a      	adds	r2, r7, r1
10002c94:	6839      	ldr	r1, [r7, #0]
10002c96:	1dfb      	adds	r3, r7, #7
10002c98:	7818      	ldrb	r0, [r3, #0]
10002c9a:	2301      	movs	r3, #1
10002c9c:	f001 f972 	bl	10003f84 <tud_control_xfer>
        }
        break;
10002ca0:	e0af      	b.n	10002e02 <process_control_request+0x2be>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10002ca2:	683b      	ldr	r3, [r7, #0]
10002ca4:	789a      	ldrb	r2, [r3, #2]
10002ca6:	78db      	ldrb	r3, [r3, #3]
10002ca8:	021b      	lsls	r3, r3, #8
10002caa:	4313      	orrs	r3, r2
10002cac:	b29a      	uxth	r2, r3
10002cae:	211f      	movs	r1, #31
10002cb0:	187b      	adds	r3, r7, r1
10002cb2:	701a      	strb	r2, [r3, #0]

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
10002cb4:	4b87      	ldr	r3, [pc, #540]	; (10002ed4 <process_control_request+0x390>)
10002cb6:	785b      	ldrb	r3, [r3, #1]
10002cb8:	b2db      	uxtb	r3, r3
10002cba:	187a      	adds	r2, r7, r1
10002cbc:	7812      	ldrb	r2, [r2, #0]
10002cbe:	429a      	cmp	r2, r3
10002cc0:	d033      	beq.n	10002d2a <process_control_request+0x1e6>
          {
            if ( _usbd_dev.cfg_num )
10002cc2:	4b84      	ldr	r3, [pc, #528]	; (10002ed4 <process_control_request+0x390>)
10002cc4:	785b      	ldrb	r3, [r3, #1]
10002cc6:	b2db      	uxtb	r3, r3
10002cc8:	2b00      	cmp	r3, #0
10002cca:	d012      	beq.n	10002cf2 <process_control_request+0x1ae>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
10002ccc:	1dfb      	adds	r3, r7, #7
10002cce:	781b      	ldrb	r3, [r3, #0]
10002cd0:	0018      	movs	r0, r3
10002cd2:	f001 feab 	bl	10004a2c <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
10002cd6:	241e      	movs	r4, #30
10002cd8:	193b      	adds	r3, r7, r4
10002cda:	4a7e      	ldr	r2, [pc, #504]	; (10002ed4 <process_control_request+0x390>)
10002cdc:	7892      	ldrb	r2, [r2, #2]
10002cde:	701a      	strb	r2, [r3, #0]
              configuration_reset(rhport);
10002ce0:	1dfb      	adds	r3, r7, #7
10002ce2:	781b      	ldrb	r3, [r3, #0]
10002ce4:	0018      	movs	r0, r3
10002ce6:	f7ff fd5f 	bl	100027a8 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
10002cea:	4b7a      	ldr	r3, [pc, #488]	; (10002ed4 <process_control_request+0x390>)
10002cec:	193a      	adds	r2, r7, r4
10002cee:	7812      	ldrb	r2, [r2, #0]
10002cf0:	709a      	strb	r2, [r3, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10002cf2:	221f      	movs	r2, #31
10002cf4:	18bb      	adds	r3, r7, r2
10002cf6:	781b      	ldrb	r3, [r3, #0]
10002cf8:	2b00      	cmp	r3, #0
10002cfa:	d016      	beq.n	10002d2a <process_control_request+0x1e6>
10002cfc:	18bb      	adds	r3, r7, r2
10002cfe:	781a      	ldrb	r2, [r3, #0]
10002d00:	1dfb      	adds	r3, r7, #7
10002d02:	781b      	ldrb	r3, [r3, #0]
10002d04:	0011      	movs	r1, r2
10002d06:	0018      	movs	r0, r3
10002d08:	f000 f9b0 	bl	1000306c <process_set_config>
10002d0c:	0003      	movs	r3, r0
10002d0e:	001a      	movs	r2, r3
10002d10:	2301      	movs	r3, #1
10002d12:	4053      	eors	r3, r2
10002d14:	b2db      	uxtb	r3, r3
10002d16:	2b00      	cmp	r3, #0
10002d18:	d007      	beq.n	10002d2a <process_control_request+0x1e6>
10002d1a:	4a70      	ldr	r2, [pc, #448]	; (10002edc <process_control_request+0x398>)
10002d1c:	496a      	ldr	r1, [pc, #424]	; (10002ec8 <process_control_request+0x384>)
10002d1e:	4b6b      	ldr	r3, [pc, #428]	; (10002ecc <process_control_request+0x388>)
10002d20:	0018      	movs	r0, r3
10002d22:	f008 fa5d 	bl	1000b1e0 <__wrap_printf>
10002d26:	2300      	movs	r3, #0
10002d28:	e193      	b.n	10003052 <process_control_request+0x50e>
          }

          _usbd_dev.cfg_num = cfg_num;
10002d2a:	4b6a      	ldr	r3, [pc, #424]	; (10002ed4 <process_control_request+0x390>)
10002d2c:	221f      	movs	r2, #31
10002d2e:	18ba      	adds	r2, r7, r2
10002d30:	7812      	ldrb	r2, [r2, #0]
10002d32:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10002d34:	683a      	ldr	r2, [r7, #0]
10002d36:	1dfb      	adds	r3, r7, #7
10002d38:	781b      	ldrb	r3, [r3, #0]
10002d3a:	0011      	movs	r1, r2
10002d3c:	0018      	movs	r0, r3
10002d3e:	f001 f8a3 	bl	10003e88 <tud_control_status>
        }
        break;
10002d42:	e05e      	b.n	10002e02 <process_control_request+0x2be>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10002d44:	683a      	ldr	r2, [r7, #0]
10002d46:	1dfb      	adds	r3, r7, #7
10002d48:	781b      	ldrb	r3, [r3, #0]
10002d4a:	0011      	movs	r1, r2
10002d4c:	0018      	movs	r0, r3
10002d4e:	f000 fac9 	bl	100032e4 <process_get_descriptor>
10002d52:	0003      	movs	r3, r0
10002d54:	001a      	movs	r2, r3
10002d56:	2301      	movs	r3, #1
10002d58:	4053      	eors	r3, r2
10002d5a:	b2db      	uxtb	r3, r3
10002d5c:	2b00      	cmp	r3, #0
10002d5e:	d04f      	beq.n	10002e00 <process_control_request+0x2bc>
10002d60:	2300      	movs	r3, #0
10002d62:	e176      	b.n	10003052 <process_control_request+0x50e>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10002d64:	683b      	ldr	r3, [r7, #0]
10002d66:	789a      	ldrb	r2, [r3, #2]
10002d68:	78db      	ldrb	r3, [r3, #3]
10002d6a:	021b      	lsls	r3, r3, #8
10002d6c:	4313      	orrs	r3, r2
10002d6e:	b29b      	uxth	r3, r3
10002d70:	2b01      	cmp	r3, #1
10002d72:	d001      	beq.n	10002d78 <process_control_request+0x234>
10002d74:	2300      	movs	r3, #0
10002d76:	e16c      	b.n	10003052 <process_control_request+0x50e>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
10002d78:	4b56      	ldr	r3, [pc, #344]	; (10002ed4 <process_control_request+0x390>)
10002d7a:	781a      	ldrb	r2, [r3, #0]
10002d7c:	2108      	movs	r1, #8
10002d7e:	430a      	orrs	r2, r1
10002d80:	701a      	strb	r2, [r3, #0]
          tud_control_status(rhport, p_request);
10002d82:	683a      	ldr	r2, [r7, #0]
10002d84:	1dfb      	adds	r3, r7, #7
10002d86:	781b      	ldrb	r3, [r3, #0]
10002d88:	0011      	movs	r1, r2
10002d8a:	0018      	movs	r0, r3
10002d8c:	f001 f87c 	bl	10003e88 <tud_control_status>
        break;
10002d90:	e037      	b.n	10002e02 <process_control_request+0x2be>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10002d92:	683b      	ldr	r3, [r7, #0]
10002d94:	789a      	ldrb	r2, [r3, #2]
10002d96:	78db      	ldrb	r3, [r3, #3]
10002d98:	021b      	lsls	r3, r3, #8
10002d9a:	4313      	orrs	r3, r2
10002d9c:	b29b      	uxth	r3, r3
10002d9e:	2b01      	cmp	r3, #1
10002da0:	d001      	beq.n	10002da6 <process_control_request+0x262>
10002da2:	2300      	movs	r3, #0
10002da4:	e155      	b.n	10003052 <process_control_request+0x50e>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
10002da6:	4b4b      	ldr	r3, [pc, #300]	; (10002ed4 <process_control_request+0x390>)
10002da8:	781a      	ldrb	r2, [r3, #0]
10002daa:	2108      	movs	r1, #8
10002dac:	438a      	bics	r2, r1
10002dae:	701a      	strb	r2, [r3, #0]
          tud_control_status(rhport, p_request);
10002db0:	683a      	ldr	r2, [r7, #0]
10002db2:	1dfb      	adds	r3, r7, #7
10002db4:	781b      	ldrb	r3, [r3, #0]
10002db6:	0011      	movs	r1, r2
10002db8:	0018      	movs	r0, r3
10002dba:	f001 f865 	bl	10003e88 <tud_control_status>
        break;
10002dbe:	e020      	b.n	10002e02 <process_control_request+0x2be>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10002dc0:	4b44      	ldr	r3, [pc, #272]	; (10002ed4 <process_control_request+0x390>)
10002dc2:	781b      	ldrb	r3, [r3, #0]
10002dc4:	095b      	lsrs	r3, r3, #5
10002dc6:	b2db      	uxtb	r3, r3
10002dc8:	b21b      	sxth	r3, r3
10002dca:	2201      	movs	r2, #1
10002dcc:	4013      	ands	r3, r2
10002dce:	b21a      	sxth	r2, r3
10002dd0:	4b40      	ldr	r3, [pc, #256]	; (10002ed4 <process_control_request+0x390>)
10002dd2:	781b      	ldrb	r3, [r3, #0]
10002dd4:	089b      	lsrs	r3, r3, #2
10002dd6:	b2db      	uxtb	r3, r3
10002dd8:	b21b      	sxth	r3, r3
10002dda:	2102      	movs	r1, #2
10002ddc:	400b      	ands	r3, r1
10002dde:	b21b      	sxth	r3, r3
10002de0:	4313      	orrs	r3, r2
10002de2:	b21b      	sxth	r3, r3
10002de4:	b29a      	uxth	r2, r3
10002de6:	210e      	movs	r1, #14
10002de8:	187b      	adds	r3, r7, r1
10002dea:	801a      	strh	r2, [r3, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10002dec:	187a      	adds	r2, r7, r1
10002dee:	6839      	ldr	r1, [r7, #0]
10002df0:	1dfb      	adds	r3, r7, #7
10002df2:	7818      	ldrb	r0, [r3, #0]
10002df4:	2302      	movs	r3, #2
10002df6:	f001 f8c5 	bl	10003f84 <tud_control_xfer>
        }
        break;
10002dfa:	e002      	b.n	10002e02 <process_control_request+0x2be>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
10002dfc:	2300      	movs	r3, #0
10002dfe:	e128      	b.n	10003052 <process_control_request+0x50e>
        break;
10002e00:	46c0      	nop			; (mov r8, r8)
      }
    break;
10002e02:	e125      	b.n	10003050 <process_control_request+0x50c>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
10002e04:	683b      	ldr	r3, [r7, #0]
10002e06:	791a      	ldrb	r2, [r3, #4]
10002e08:	795b      	ldrb	r3, [r3, #5]
10002e0a:	021b      	lsls	r3, r3, #8
10002e0c:	4313      	orrs	r3, r2
10002e0e:	b29a      	uxth	r2, r3
10002e10:	2114      	movs	r1, #20
10002e12:	187b      	adds	r3, r7, r1
10002e14:	801a      	strh	r2, [r3, #0]
10002e16:	187b      	adds	r3, r7, r1
10002e18:	881b      	ldrh	r3, [r3, #0]
10002e1a:	b2da      	uxtb	r2, r3
10002e1c:	2127      	movs	r1, #39	; 0x27
10002e1e:	187b      	adds	r3, r7, r1
10002e20:	701a      	strb	r2, [r3, #0]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10002e22:	187b      	adds	r3, r7, r1
10002e24:	781b      	ldrb	r3, [r3, #0]
10002e26:	2b0f      	cmp	r3, #15
10002e28:	d901      	bls.n	10002e2e <process_control_request+0x2ea>
10002e2a:	2300      	movs	r3, #0
10002e2c:	e111      	b.n	10003052 <process_control_request+0x50e>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10002e2e:	2327      	movs	r3, #39	; 0x27
10002e30:	18fb      	adds	r3, r7, r3
10002e32:	781b      	ldrb	r3, [r3, #0]
10002e34:	4a27      	ldr	r2, [pc, #156]	; (10002ed4 <process_control_request+0x390>)
10002e36:	18d3      	adds	r3, r2, r3
10002e38:	78db      	ldrb	r3, [r3, #3]
10002e3a:	0018      	movs	r0, r3
10002e3c:	f7ff fbc6 	bl	100025cc <get_driver>
10002e40:	0003      	movs	r3, r0
10002e42:	623b      	str	r3, [r7, #32]
      TU_VERIFY(driver);
10002e44:	6a3b      	ldr	r3, [r7, #32]
10002e46:	2b00      	cmp	r3, #0
10002e48:	d101      	bne.n	10002e4e <process_control_request+0x30a>
10002e4a:	2300      	movs	r3, #0
10002e4c:	e101      	b.n	10003052 <process_control_request+0x50e>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
10002e4e:	683a      	ldr	r2, [r7, #0]
10002e50:	6a39      	ldr	r1, [r7, #32]
10002e52:	1dfb      	adds	r3, r7, #7
10002e54:	781b      	ldrb	r3, [r3, #0]
10002e56:	0018      	movs	r0, r3
10002e58:	f7ff fe58 	bl	10002b0c <invoke_class_control>
10002e5c:	0003      	movs	r3, r0
10002e5e:	001a      	movs	r2, r3
10002e60:	2301      	movs	r3, #1
10002e62:	4053      	eors	r3, r2
10002e64:	b2db      	uxtb	r3, r3
10002e66:	2b00      	cmp	r3, #0
10002e68:	d02a      	beq.n	10002ec0 <process_control_request+0x37c>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
10002e6a:	683b      	ldr	r3, [r7, #0]
10002e6c:	781b      	ldrb	r3, [r3, #0]
10002e6e:	2260      	movs	r2, #96	; 0x60
10002e70:	4013      	ands	r3, r2
10002e72:	b2db      	uxtb	r3, r3
10002e74:	2b00      	cmp	r3, #0
10002e76:	d001      	beq.n	10002e7c <process_control_request+0x338>
10002e78:	2300      	movs	r3, #0
10002e7a:	e0ea      	b.n	10003052 <process_control_request+0x50e>

        switch(p_request->bRequest)
10002e7c:	683b      	ldr	r3, [r7, #0]
10002e7e:	785b      	ldrb	r3, [r3, #1]
10002e80:	3b0a      	subs	r3, #10
10002e82:	2b01      	cmp	r3, #1
10002e84:	d81a      	bhi.n	10002ebc <process_control_request+0x378>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
10002e86:	2000      	movs	r0, #0
10002e88:	f001 f910 	bl	100040ac <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
10002e8c:	683b      	ldr	r3, [r7, #0]
10002e8e:	785b      	ldrb	r3, [r3, #1]
10002e90:	2b0a      	cmp	r3, #10
10002e92:	d10b      	bne.n	10002eac <process_control_request+0x368>
            {
              uint8_t alternate = 0;
10002e94:	210d      	movs	r1, #13
10002e96:	187b      	adds	r3, r7, r1
10002e98:	2200      	movs	r2, #0
10002e9a:	701a      	strb	r2, [r3, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
10002e9c:	187a      	adds	r2, r7, r1
10002e9e:	6839      	ldr	r1, [r7, #0]
10002ea0:	1dfb      	adds	r3, r7, #7
10002ea2:	7818      	ldrb	r0, [r3, #0]
10002ea4:	2301      	movs	r3, #1
10002ea6:	f001 f86d 	bl	10003f84 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
10002eaa:	e00a      	b.n	10002ec2 <process_control_request+0x37e>
              tud_control_status(rhport, p_request);
10002eac:	683a      	ldr	r2, [r7, #0]
10002eae:	1dfb      	adds	r3, r7, #7
10002eb0:	781b      	ldrb	r3, [r3, #0]
10002eb2:	0011      	movs	r1, r2
10002eb4:	0018      	movs	r0, r3
10002eb6:	f000 ffe7 	bl	10003e88 <tud_control_status>
          break;
10002eba:	e002      	b.n	10002ec2 <process_control_request+0x37e>

          default: return false;
10002ebc:	2300      	movs	r3, #0
10002ebe:	e0c8      	b.n	10003052 <process_control_request+0x50e>
        }
      }
10002ec0:	46c0      	nop			; (mov r8, r8)
    }
    break;
10002ec2:	e0c5      	b.n	10003050 <process_control_request+0x50c>
10002ec4:	0000027f 	.word	0x0000027f
10002ec8:	1000d1c8 	.word	0x1000d1c8
10002ecc:	1000d0dc 	.word	0x1000d0dc
10002ed0:	00000000 	.word	0x00000000
10002ed4:	20000a64 	.word	0x20000a64
10002ed8:	1000d148 	.word	0x1000d148
10002edc:	000002d3 	.word	0x000002d3

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
10002ee0:	683b      	ldr	r3, [r7, #0]
10002ee2:	791a      	ldrb	r2, [r3, #4]
10002ee4:	795b      	ldrb	r3, [r3, #5]
10002ee6:	021b      	lsls	r3, r3, #8
10002ee8:	4313      	orrs	r3, r2
10002eea:	b29a      	uxth	r2, r3
10002eec:	2112      	movs	r1, #18
10002eee:	187b      	adds	r3, r7, r1
10002ef0:	801a      	strh	r2, [r3, #0]
10002ef2:	187b      	adds	r3, r7, r1
10002ef4:	881b      	ldrh	r3, [r3, #0]
10002ef6:	b2da      	uxtb	r2, r3
10002ef8:	252f      	movs	r5, #47	; 0x2f
10002efa:	197b      	adds	r3, r7, r5
10002efc:	701a      	strb	r2, [r3, #0]
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
10002efe:	262e      	movs	r6, #46	; 0x2e
10002f00:	19bc      	adds	r4, r7, r6
10002f02:	197b      	adds	r3, r7, r5
10002f04:	781b      	ldrb	r3, [r3, #0]
10002f06:	0018      	movs	r0, r3
10002f08:	f7ff fa4d 	bl	100023a6 <tu_edpt_number>
10002f0c:	0003      	movs	r3, r0
10002f0e:	7023      	strb	r3, [r4, #0]
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
10002f10:	232d      	movs	r3, #45	; 0x2d
10002f12:	18fc      	adds	r4, r7, r3
10002f14:	197b      	adds	r3, r7, r5
10002f16:	781b      	ldrb	r3, [r3, #0]
10002f18:	0018      	movs	r0, r3
10002f1a:	f7ff fa36 	bl	1000238a <tu_edpt_dir>
10002f1e:	0003      	movs	r3, r0
10002f20:	7023      	strb	r3, [r4, #0]

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10002f22:	19bb      	adds	r3, r7, r6
10002f24:	781b      	ldrb	r3, [r3, #0]
10002f26:	2b0f      	cmp	r3, #15
10002f28:	d907      	bls.n	10002f3a <process_control_request+0x3f6>
10002f2a:	4a4c      	ldr	r2, [pc, #304]	; (1000305c <process_control_request+0x518>)
10002f2c:	494c      	ldr	r1, [pc, #304]	; (10003060 <process_control_request+0x51c>)
10002f2e:	4b4d      	ldr	r3, [pc, #308]	; (10003064 <process_control_request+0x520>)
10002f30:	0018      	movs	r0, r3
10002f32:	f008 f955 	bl	1000b1e0 <__wrap_printf>
10002f36:	2300      	movs	r3, #0
10002f38:	e08b      	b.n	10003052 <process_control_request+0x50e>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10002f3a:	232e      	movs	r3, #46	; 0x2e
10002f3c:	18fb      	adds	r3, r7, r3
10002f3e:	781a      	ldrb	r2, [r3, #0]
10002f40:	232d      	movs	r3, #45	; 0x2d
10002f42:	18fb      	adds	r3, r7, r3
10002f44:	781b      	ldrb	r3, [r3, #0]
10002f46:	4948      	ldr	r1, [pc, #288]	; (10003068 <process_control_request+0x524>)
10002f48:	0052      	lsls	r2, r2, #1
10002f4a:	188a      	adds	r2, r1, r2
10002f4c:	18d3      	adds	r3, r2, r3
10002f4e:	3313      	adds	r3, #19
10002f50:	781b      	ldrb	r3, [r3, #0]
10002f52:	0018      	movs	r0, r3
10002f54:	f7ff fb3a 	bl	100025cc <get_driver>
10002f58:	0003      	movs	r3, r0
10002f5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
10002f5c:	683b      	ldr	r3, [r7, #0]
10002f5e:	781b      	ldrb	r3, [r3, #0]
10002f60:	2260      	movs	r2, #96	; 0x60
10002f62:	4013      	ands	r3, r2
10002f64:	b2db      	uxtb	r3, r3
10002f66:	2b00      	cmp	r3, #0
10002f68:	d00d      	beq.n	10002f86 <process_control_request+0x442>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
10002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002f6c:	2b00      	cmp	r3, #0
10002f6e:	d101      	bne.n	10002f74 <process_control_request+0x430>
10002f70:	2300      	movs	r3, #0
10002f72:	e06e      	b.n	10003052 <process_control_request+0x50e>
        return invoke_class_control(rhport, driver, p_request);
10002f74:	683a      	ldr	r2, [r7, #0]
10002f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10002f78:	1dfb      	adds	r3, r7, #7
10002f7a:	781b      	ldrb	r3, [r3, #0]
10002f7c:	0018      	movs	r0, r3
10002f7e:	f7ff fdc5 	bl	10002b0c <invoke_class_control>
10002f82:	0003      	movs	r3, r0
10002f84:	e065      	b.n	10003052 <process_control_request+0x50e>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
10002f86:	683b      	ldr	r3, [r7, #0]
10002f88:	785b      	ldrb	r3, [r3, #1]
10002f8a:	2b03      	cmp	r3, #3
10002f8c:	d01b      	beq.n	10002fc6 <process_control_request+0x482>
10002f8e:	dc59      	bgt.n	10003044 <process_control_request+0x500>
10002f90:	2b00      	cmp	r3, #0
10002f92:	d002      	beq.n	10002f9a <process_control_request+0x456>
10002f94:	2b01      	cmp	r3, #1
10002f96:	d016      	beq.n	10002fc6 <process_control_request+0x482>
10002f98:	e054      	b.n	10003044 <process_control_request+0x500>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10002f9a:	232f      	movs	r3, #47	; 0x2f
10002f9c:	18fb      	adds	r3, r7, r3
10002f9e:	781a      	ldrb	r2, [r3, #0]
10002fa0:	1dfb      	adds	r3, r7, #7
10002fa2:	781b      	ldrb	r3, [r3, #0]
10002fa4:	0011      	movs	r1, r2
10002fa6:	0018      	movs	r0, r3
10002fa8:	f000 ff0e 	bl	10003dc8 <usbd_edpt_stalled>
10002fac:	0003      	movs	r3, r0
10002fae:	b29a      	uxth	r2, r3
10002fb0:	210a      	movs	r1, #10
10002fb2:	187b      	adds	r3, r7, r1
10002fb4:	801a      	strh	r2, [r3, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10002fb6:	187a      	adds	r2, r7, r1
10002fb8:	6839      	ldr	r1, [r7, #0]
10002fba:	1dfb      	adds	r3, r7, #7
10002fbc:	7818      	ldrb	r0, [r3, #0]
10002fbe:	2302      	movs	r3, #2
10002fc0:	f000 ffe0 	bl	10003f84 <tud_control_xfer>
          }
          break;
10002fc4:	e041      	b.n	1000304a <process_control_request+0x506>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
10002fc6:	683b      	ldr	r3, [r7, #0]
10002fc8:	789a      	ldrb	r2, [r3, #2]
10002fca:	78db      	ldrb	r3, [r3, #3]
10002fcc:	021b      	lsls	r3, r3, #8
10002fce:	4313      	orrs	r3, r2
10002fd0:	b29b      	uxth	r3, r3
10002fd2:	2b00      	cmp	r3, #0
10002fd4:	d116      	bne.n	10003004 <process_control_request+0x4c0>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
10002fd6:	683b      	ldr	r3, [r7, #0]
10002fd8:	785b      	ldrb	r3, [r3, #1]
10002fda:	2b01      	cmp	r3, #1
10002fdc:	d109      	bne.n	10002ff2 <process_control_request+0x4ae>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
10002fde:	232f      	movs	r3, #47	; 0x2f
10002fe0:	18fb      	adds	r3, r7, r3
10002fe2:	781a      	ldrb	r2, [r3, #0]
10002fe4:	1dfb      	adds	r3, r7, #7
10002fe6:	781b      	ldrb	r3, [r3, #0]
10002fe8:	0011      	movs	r1, r2
10002fea:	0018      	movs	r0, r3
10002fec:	f000 fe94 	bl	10003d18 <usbd_edpt_clear_stall>
10002ff0:	e008      	b.n	10003004 <process_control_request+0x4c0>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
10002ff2:	232f      	movs	r3, #47	; 0x2f
10002ff4:	18fb      	adds	r3, r7, r3
10002ff6:	781a      	ldrb	r2, [r3, #0]
10002ff8:	1dfb      	adds	r3, r7, #7
10002ffa:	781b      	ldrb	r3, [r3, #0]
10002ffc:	0011      	movs	r1, r2
10002ffe:	0018      	movs	r0, r3
10003000:	f000 fe30 	bl	10003c64 <usbd_edpt_stall>
              }
            }

            if (driver)
10003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
10003006:	2b00      	cmp	r3, #0
10003008:	d01e      	beq.n	10003048 <process_control_request+0x504>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
1000300a:	683a      	ldr	r2, [r7, #0]
1000300c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
1000300e:	1dfb      	adds	r3, r7, #7
10003010:	781b      	ldrb	r3, [r3, #0]
10003012:	0018      	movs	r0, r3
10003014:	f7ff fd7a 	bl	10002b0c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
10003018:	2000      	movs	r0, #0
1000301a:	f001 f847 	bl	100040ac <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
1000301e:	4b12      	ldr	r3, [pc, #72]	; (10003068 <process_control_request+0x524>)
10003020:	2234      	movs	r2, #52	; 0x34
10003022:	5c9b      	ldrb	r3, [r3, r2]
10003024:	07db      	lsls	r3, r3, #31
10003026:	0fdb      	lsrs	r3, r3, #31
10003028:	b2db      	uxtb	r3, r3
1000302a:	2201      	movs	r2, #1
1000302c:	4053      	eors	r3, r2
1000302e:	b2db      	uxtb	r3, r3
10003030:	2b00      	cmp	r3, #0
10003032:	d009      	beq.n	10003048 <process_control_request+0x504>
10003034:	683a      	ldr	r2, [r7, #0]
10003036:	1dfb      	adds	r3, r7, #7
10003038:	781b      	ldrb	r3, [r3, #0]
1000303a:	0011      	movs	r1, r2
1000303c:	0018      	movs	r0, r3
1000303e:	f000 ff23 	bl	10003e88 <tud_control_status>
            }
          }
          break;
10003042:	e001      	b.n	10003048 <process_control_request+0x504>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
10003044:	2300      	movs	r3, #0
10003046:	e004      	b.n	10003052 <process_control_request+0x50e>
          break;
10003048:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
    break;
1000304a:	e001      	b.n	10003050 <process_control_request+0x50c>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
1000304c:	2300      	movs	r3, #0
1000304e:	e000      	b.n	10003052 <process_control_request+0x50e>
  }

  return true;
10003050:	2301      	movs	r3, #1
}
10003052:	0018      	movs	r0, r3
10003054:	46bd      	mov	sp, r7
10003056:	b00d      	add	sp, #52	; 0x34
10003058:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000305a:	46c0      	nop			; (mov r8, r8)
1000305c:	00000333 	.word	0x00000333
10003060:	1000d1c8 	.word	0x1000d1c8
10003064:	1000d0dc 	.word	0x1000d0dc
10003068:	20000a64 	.word	0x20000a64

1000306c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
1000306c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000306e:	b08d      	sub	sp, #52	; 0x34
10003070:	af00      	add	r7, sp, #0
10003072:	0002      	movs	r2, r0
10003074:	1dfb      	adds	r3, r7, #7
10003076:	701a      	strb	r2, [r3, #0]
10003078:	1dbb      	adds	r3, r7, #6
1000307a:	1c0a      	adds	r2, r1, #0
1000307c:	701a      	strb	r2, [r3, #0]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
1000307e:	1dbb      	adds	r3, r7, #6
10003080:	781b      	ldrb	r3, [r3, #0]
10003082:	3b01      	subs	r3, #1
10003084:	b2db      	uxtb	r3, r3
10003086:	0018      	movs	r0, r3
10003088:	f009 fb6e 	bl	1000c768 <tud_descriptor_configuration_cb>
1000308c:	0003      	movs	r3, r0
1000308e:	627b      	str	r3, [r7, #36]	; 0x24
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003092:	2b00      	cmp	r3, #0
10003094:	d003      	beq.n	1000309e <process_set_config+0x32>
10003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003098:	785b      	ldrb	r3, [r3, #1]
1000309a:	2b02      	cmp	r3, #2
1000309c:	d007      	beq.n	100030ae <process_set_config+0x42>
1000309e:	4a87      	ldr	r2, [pc, #540]	; (100032bc <process_set_config+0x250>)
100030a0:	4987      	ldr	r1, [pc, #540]	; (100032c0 <process_set_config+0x254>)
100030a2:	4b88      	ldr	r3, [pc, #544]	; (100032c4 <process_set_config+0x258>)
100030a4:	0018      	movs	r0, r3
100030a6:	f008 f89b 	bl	1000b1e0 <__wrap_printf>
100030aa:	2300      	movs	r3, #0
100030ac:	e102      	b.n	100032b4 <process_set_config+0x248>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
100030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100030b0:	79db      	ldrb	r3, [r3, #7]
100030b2:	115b      	asrs	r3, r3, #5
100030b4:	1c1a      	adds	r2, r3, #0
100030b6:	2301      	movs	r3, #1
100030b8:	4013      	ands	r3, r2
100030ba:	b2da      	uxtb	r2, r3
100030bc:	4b82      	ldr	r3, [pc, #520]	; (100032c8 <process_set_config+0x25c>)
100030be:	2101      	movs	r1, #1
100030c0:	400a      	ands	r2, r1
100030c2:	0110      	lsls	r0, r2, #4
100030c4:	781a      	ldrb	r2, [r3, #0]
100030c6:	2110      	movs	r1, #16
100030c8:	438a      	bics	r2, r1
100030ca:	1c11      	adds	r1, r2, #0
100030cc:	1c02      	adds	r2, r0, #0
100030ce:	430a      	orrs	r2, r1
100030d0:	701a      	strb	r2, [r3, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
100030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100030d4:	79db      	ldrb	r3, [r3, #7]
100030d6:	119b      	asrs	r3, r3, #6
100030d8:	1c1a      	adds	r2, r3, #0
100030da:	2301      	movs	r3, #1
100030dc:	4013      	ands	r3, r2
100030de:	b2da      	uxtb	r2, r3
100030e0:	4b79      	ldr	r3, [pc, #484]	; (100032c8 <process_set_config+0x25c>)
100030e2:	2101      	movs	r1, #1
100030e4:	400a      	ands	r2, r1
100030e6:	0150      	lsls	r0, r2, #5
100030e8:	781a      	ldrb	r2, [r3, #0]
100030ea:	2120      	movs	r1, #32
100030ec:	438a      	bics	r2, r1
100030ee:	1c11      	adds	r1, r2, #0
100030f0:	1c02      	adds	r2, r0, #0
100030f2:	430a      	orrs	r2, r1
100030f4:	701a      	strb	r2, [r3, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
100030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100030f8:	3309      	adds	r3, #9
100030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
100030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100030fe:	789a      	ldrb	r2, [r3, #2]
10003100:	78db      	ldrb	r3, [r3, #3]
10003102:	021b      	lsls	r3, r3, #8
10003104:	4313      	orrs	r3, r2
10003106:	b29b      	uxth	r3, r3
10003108:	001a      	movs	r2, r3
1000310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000310c:	189b      	adds	r3, r3, r2
1000310e:	623b      	str	r3, [r7, #32]

  while( p_desc < desc_end )
10003110:	e0c5      	b.n	1000329e <process_set_config+0x232>
  {
    uint8_t assoc_itf_count = 1;
10003112:	242b      	movs	r4, #43	; 0x2b
10003114:	193b      	adds	r3, r7, r4
10003116:	2201      	movs	r2, #1
10003118:	701a      	strb	r2, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
1000311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000311c:	0018      	movs	r0, r3
1000311e:	f7ff f960 	bl	100023e2 <tu_desc_type>
10003122:	0003      	movs	r3, r0
10003124:	2b0b      	cmp	r3, #11
10003126:	d10b      	bne.n	10003140 <process_set_config+0xd4>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
10003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000312a:	61fb      	str	r3, [r7, #28]
      assoc_itf_count = desc_iad->bInterfaceCount;
1000312c:	193b      	adds	r3, r7, r4
1000312e:	69fa      	ldr	r2, [r7, #28]
10003130:	78d2      	ldrb	r2, [r2, #3]
10003132:	701a      	strb	r2, [r3, #0]

      p_desc = tu_desc_next(p_desc); // next to Interface
10003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003136:	0018      	movs	r0, r3
10003138:	f7ff f944 	bl	100023c4 <tu_desc_next>
1000313c:	0003      	movs	r3, r0
1000313e:	62fb      	str	r3, [r7, #44]	; 0x2c
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003142:	0018      	movs	r0, r3
10003144:	f7ff f94d 	bl	100023e2 <tu_desc_type>
10003148:	0003      	movs	r3, r0
1000314a:	2b04      	cmp	r3, #4
1000314c:	d007      	beq.n	1000315e <process_set_config+0xf2>
1000314e:	4a5f      	ldr	r2, [pc, #380]	; (100032cc <process_set_config+0x260>)
10003150:	495b      	ldr	r1, [pc, #364]	; (100032c0 <process_set_config+0x254>)
10003152:	4b5c      	ldr	r3, [pc, #368]	; (100032c4 <process_set_config+0x258>)
10003154:	0018      	movs	r0, r3
10003156:	f008 f843 	bl	1000b1e0 <__wrap_printf>
1000315a:	2300      	movs	r3, #0
1000315c:	e0aa      	b.n	100032b4 <process_set_config+0x248>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
1000315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003160:	61bb      	str	r3, [r7, #24]

    // Find driver for this interface
    uint16_t const remaining_len = desc_end-p_desc;
10003162:	6a3a      	ldr	r2, [r7, #32]
10003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10003166:	1ad2      	subs	r2, r2, r3
10003168:	2316      	movs	r3, #22
1000316a:	18fb      	adds	r3, r7, r3
1000316c:	801a      	strh	r2, [r3, #0]
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
1000316e:	232a      	movs	r3, #42	; 0x2a
10003170:	18fb      	adds	r3, r7, r3
10003172:	2200      	movs	r2, #0
10003174:	701a      	strb	r2, [r3, #0]
10003176:	e078      	b.n	1000326a <process_set_config+0x1fe>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
10003178:	232a      	movs	r3, #42	; 0x2a
1000317a:	18fb      	adds	r3, r7, r3
1000317c:	781b      	ldrb	r3, [r3, #0]
1000317e:	0018      	movs	r0, r3
10003180:	f7ff fa24 	bl	100025cc <get_driver>
10003184:	0003      	movs	r3, r0
10003186:	613b      	str	r3, [r7, #16]
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003188:	693b      	ldr	r3, [r7, #16]
1000318a:	689b      	ldr	r3, [r3, #8]
1000318c:	260e      	movs	r6, #14
1000318e:	19bc      	adds	r4, r7, r6
10003190:	2216      	movs	r2, #22
10003192:	18ba      	adds	r2, r7, r2
10003194:	8815      	ldrh	r5, [r2, #0]
10003196:	69b9      	ldr	r1, [r7, #24]
10003198:	1dfa      	adds	r2, r7, #7
1000319a:	7810      	ldrb	r0, [r2, #0]
1000319c:	002a      	movs	r2, r5
1000319e:	4798      	blx	r3
100031a0:	0003      	movs	r3, r0
100031a2:	8023      	strh	r3, [r4, #0]

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
100031a4:	19bb      	adds	r3, r7, r6
100031a6:	881b      	ldrh	r3, [r3, #0]
100031a8:	2b08      	cmp	r3, #8
100031aa:	d958      	bls.n	1000325e <process_set_config+0x1f2>
100031ac:	19ba      	adds	r2, r7, r6
100031ae:	2316      	movs	r3, #22
100031b0:	18fb      	adds	r3, r7, r3
100031b2:	8812      	ldrh	r2, [r2, #0]
100031b4:	881b      	ldrh	r3, [r3, #0]
100031b6:	429a      	cmp	r2, r3
100031b8:	d851      	bhi.n	1000325e <process_set_config+0x1f2>
        // Open successfully
        TU_LOG2("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
100031ba:	212b      	movs	r1, #43	; 0x2b
100031bc:	187b      	adds	r3, r7, r1
100031be:	781b      	ldrb	r3, [r3, #0]
100031c0:	2b01      	cmp	r3, #1
100031c2:	d107      	bne.n	100031d4 <process_set_config+0x168>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
100031c4:	693b      	ldr	r3, [r7, #16]
100031c6:	689a      	ldr	r2, [r3, #8]
100031c8:	4b41      	ldr	r3, [pc, #260]	; (100032d0 <process_set_config+0x264>)
100031ca:	429a      	cmp	r2, r3
100031cc:	d102      	bne.n	100031d4 <process_set_config+0x168>
100031ce:	187b      	adds	r3, r7, r1
100031d0:	2202      	movs	r2, #2
100031d2:	701a      	strb	r2, [r3, #0]
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
100031d4:	2329      	movs	r3, #41	; 0x29
100031d6:	18fb      	adds	r3, r7, r3
100031d8:	2200      	movs	r2, #0
100031da:	701a      	strb	r2, [r3, #0]
100031dc:	e026      	b.n	1000322c <process_set_config+0x1c0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
100031de:	69bb      	ldr	r3, [r7, #24]
100031e0:	7899      	ldrb	r1, [r3, #2]
100031e2:	200d      	movs	r0, #13
100031e4:	183b      	adds	r3, r7, r0
100031e6:	2229      	movs	r2, #41	; 0x29
100031e8:	18ba      	adds	r2, r7, r2
100031ea:	7812      	ldrb	r2, [r2, #0]
100031ec:	188a      	adds	r2, r1, r2
100031ee:	701a      	strb	r2, [r3, #0]

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
100031f0:	183b      	adds	r3, r7, r0
100031f2:	781b      	ldrb	r3, [r3, #0]
100031f4:	4a34      	ldr	r2, [pc, #208]	; (100032c8 <process_set_config+0x25c>)
100031f6:	18d3      	adds	r3, r2, r3
100031f8:	78db      	ldrb	r3, [r3, #3]
100031fa:	2bff      	cmp	r3, #255	; 0xff
100031fc:	d007      	beq.n	1000320e <process_set_config+0x1a2>
100031fe:	4a35      	ldr	r2, [pc, #212]	; (100032d4 <process_set_config+0x268>)
10003200:	492f      	ldr	r1, [pc, #188]	; (100032c0 <process_set_config+0x254>)
10003202:	4b30      	ldr	r3, [pc, #192]	; (100032c4 <process_set_config+0x258>)
10003204:	0018      	movs	r0, r3
10003206:	f007 ffeb 	bl	1000b1e0 <__wrap_printf>
1000320a:	2300      	movs	r3, #0
1000320c:	e052      	b.n	100032b4 <process_set_config+0x248>
          _usbd_dev.itf2drv[itf_num] = drv_id;
1000320e:	230d      	movs	r3, #13
10003210:	18fb      	adds	r3, r7, r3
10003212:	781b      	ldrb	r3, [r3, #0]
10003214:	4a2c      	ldr	r2, [pc, #176]	; (100032c8 <process_set_config+0x25c>)
10003216:	18d3      	adds	r3, r2, r3
10003218:	222a      	movs	r2, #42	; 0x2a
1000321a:	18ba      	adds	r2, r7, r2
1000321c:	7812      	ldrb	r2, [r2, #0]
1000321e:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
10003220:	2129      	movs	r1, #41	; 0x29
10003222:	187b      	adds	r3, r7, r1
10003224:	781a      	ldrb	r2, [r3, #0]
10003226:	187b      	adds	r3, r7, r1
10003228:	3201      	adds	r2, #1
1000322a:	701a      	strb	r2, [r3, #0]
1000322c:	2329      	movs	r3, #41	; 0x29
1000322e:	18fa      	adds	r2, r7, r3
10003230:	232b      	movs	r3, #43	; 0x2b
10003232:	18fb      	adds	r3, r7, r3
10003234:	7812      	ldrb	r2, [r2, #0]
10003236:	781b      	ldrb	r3, [r3, #0]
10003238:	429a      	cmp	r2, r3
1000323a:	d3d0      	bcc.n	100031de <process_set_config+0x172>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
1000323c:	232a      	movs	r3, #42	; 0x2a
1000323e:	18fb      	adds	r3, r7, r3
10003240:	781c      	ldrb	r4, [r3, #0]
10003242:	250e      	movs	r5, #14
10003244:	197b      	adds	r3, r7, r5
10003246:	881a      	ldrh	r2, [r3, #0]
10003248:	69b9      	ldr	r1, [r7, #24]
1000324a:	4823      	ldr	r0, [pc, #140]	; (100032d8 <process_set_config+0x26c>)
1000324c:	0023      	movs	r3, r4
1000324e:	f002 f889 	bl	10005364 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
10003252:	197b      	adds	r3, r7, r5
10003254:	881b      	ldrh	r3, [r3, #0]
10003256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10003258:	18d3      	adds	r3, r2, r3
1000325a:	62fb      	str	r3, [r7, #44]	; 0x2c

        break; // exit driver find loop
1000325c:	e00e      	b.n	1000327c <process_set_config+0x210>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
1000325e:	212a      	movs	r1, #42	; 0x2a
10003260:	187b      	adds	r3, r7, r1
10003262:	781a      	ldrb	r2, [r3, #0]
10003264:	187b      	adds	r3, r7, r1
10003266:	3201      	adds	r2, #1
10003268:	701a      	strb	r2, [r3, #0]
1000326a:	4b1c      	ldr	r3, [pc, #112]	; (100032dc <process_set_config+0x270>)
1000326c:	781b      	ldrb	r3, [r3, #0]
1000326e:	1c5a      	adds	r2, r3, #1
10003270:	232a      	movs	r3, #42	; 0x2a
10003272:	18fb      	adds	r3, r7, r3
10003274:	781b      	ldrb	r3, [r3, #0]
10003276:	429a      	cmp	r2, r3
10003278:	db00      	blt.n	1000327c <process_set_config+0x210>
1000327a:	e77d      	b.n	10003178 <process_set_config+0x10c>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
1000327c:	4b17      	ldr	r3, [pc, #92]	; (100032dc <process_set_config+0x270>)
1000327e:	781b      	ldrb	r3, [r3, #0]
10003280:	1c5a      	adds	r2, r3, #1
10003282:	232a      	movs	r3, #42	; 0x2a
10003284:	18fb      	adds	r3, r7, r3
10003286:	781b      	ldrb	r3, [r3, #0]
10003288:	429a      	cmp	r2, r3
1000328a:	da08      	bge.n	1000329e <process_set_config+0x232>
1000328c:	23f3      	movs	r3, #243	; 0xf3
1000328e:	009a      	lsls	r2, r3, #2
10003290:	490b      	ldr	r1, [pc, #44]	; (100032c0 <process_set_config+0x254>)
10003292:	4b0c      	ldr	r3, [pc, #48]	; (100032c4 <process_set_config+0x258>)
10003294:	0018      	movs	r0, r3
10003296:	f007 ffa3 	bl	1000b1e0 <__wrap_printf>
1000329a:	2300      	movs	r3, #0
1000329c:	e00a      	b.n	100032b4 <process_set_config+0x248>
  while( p_desc < desc_end )
1000329e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100032a0:	6a3b      	ldr	r3, [r7, #32]
100032a2:	429a      	cmp	r2, r3
100032a4:	d200      	bcs.n	100032a8 <process_set_config+0x23c>
100032a6:	e734      	b.n	10003112 <process_set_config+0xa6>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
100032a8:	4b0d      	ldr	r3, [pc, #52]	; (100032e0 <process_set_config+0x274>)
100032aa:	2b00      	cmp	r3, #0
100032ac:	d001      	beq.n	100032b2 <process_set_config+0x246>
100032ae:	e000      	b.n	100032b2 <process_set_config+0x246>
100032b0:	bf00      	nop

  return true;
100032b2:	2301      	movs	r3, #1
}
100032b4:	0018      	movs	r0, r3
100032b6:	46bd      	mov	sp, r7
100032b8:	b00d      	add	sp, #52	; 0x34
100032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100032bc:	0000037b 	.word	0x0000037b
100032c0:	1000d1e0 	.word	0x1000d1e0
100032c4:	1000d0dc 	.word	0x1000d0dc
100032c8:	20000a64 	.word	0x20000a64
100032cc:	00000396 	.word	0x00000396
100032d0:	100008e9 	.word	0x100008e9
100032d4:	000003bd 	.word	0x000003bd
100032d8:	20000a77 	.word	0x20000a77
100032dc:	20009442 	.word	0x20009442
100032e0:	00000000 	.word	0x00000000

100032e4 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
100032e4:	b5b0      	push	{r4, r5, r7, lr}
100032e6:	b08e      	sub	sp, #56	; 0x38
100032e8:	af00      	add	r7, sp, #0
100032ea:	0002      	movs	r2, r0
100032ec:	6039      	str	r1, [r7, #0]
100032ee:	1dfb      	adds	r3, r7, #7
100032f0:	701a      	strb	r2, [r3, #0]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
100032f2:	683b      	ldr	r3, [r7, #0]
100032f4:	789a      	ldrb	r2, [r3, #2]
100032f6:	78db      	ldrb	r3, [r3, #3]
100032f8:	021b      	lsls	r3, r3, #8
100032fa:	4313      	orrs	r3, r2
100032fc:	b29a      	uxth	r2, r3
100032fe:	2118      	movs	r1, #24
10003300:	187b      	adds	r3, r7, r1
10003302:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
10003304:	187b      	adds	r3, r7, r1
10003306:	881b      	ldrh	r3, [r3, #0]
10003308:	0a1b      	lsrs	r3, r3, #8
1000330a:	b29b      	uxth	r3, r3
1000330c:	b2da      	uxtb	r2, r3
1000330e:	2133      	movs	r1, #51	; 0x33
10003310:	187b      	adds	r3, r7, r1
10003312:	701a      	strb	r2, [r3, #0]
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
10003314:	683b      	ldr	r3, [r7, #0]
10003316:	789a      	ldrb	r2, [r3, #2]
10003318:	78db      	ldrb	r3, [r3, #3]
1000331a:	021b      	lsls	r3, r3, #8
1000331c:	4313      	orrs	r3, r2
1000331e:	b29a      	uxth	r2, r3
10003320:	201a      	movs	r0, #26
10003322:	183b      	adds	r3, r7, r0
10003324:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
10003326:	183b      	adds	r3, r7, r0
10003328:	881b      	ldrh	r3, [r3, #0]
1000332a:	b2da      	uxtb	r2, r3
1000332c:	2332      	movs	r3, #50	; 0x32
1000332e:	18fb      	adds	r3, r7, r3
10003330:	701a      	strb	r2, [r3, #0]

  switch(desc_type)
10003332:	187b      	adds	r3, r7, r1
10003334:	781b      	ldrb	r3, [r3, #0]
10003336:	2b0f      	cmp	r3, #15
10003338:	d900      	bls.n	1000333c <process_get_descriptor+0x58>
1000333a:	e0b1      	b.n	100034a0 <process_get_descriptor+0x1bc>
1000333c:	009a      	lsls	r2, r3, #2
1000333e:	4b5b      	ldr	r3, [pc, #364]	; (100034ac <process_get_descriptor+0x1c8>)
10003340:	18d3      	adds	r3, r2, r3
10003342:	681b      	ldr	r3, [r3, #0]
10003344:	469f      	mov	pc, r3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG2(" Device\r\n");

      uint16_t len = sizeof(tusb_desc_device_t);
10003346:	251c      	movs	r5, #28
10003348:	197b      	adds	r3, r7, r5
1000334a:	2212      	movs	r2, #18
1000334c:	801a      	strh	r2, [r3, #0]

        // Hack here: we modify the request length to prevent usbd_control response with zlp
        ((tusb_control_request_t*) p_request)->wLength = CFG_TUD_ENDPOINT0_SIZE;
      }

      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
1000334e:	f009 fa03 	bl	1000c758 <tud_descriptor_device_cb>
10003352:	0004      	movs	r4, r0
10003354:	197b      	adds	r3, r7, r5
10003356:	881a      	ldrh	r2, [r3, #0]
10003358:	6839      	ldr	r1, [r7, #0]
1000335a:	1dfb      	adds	r3, r7, #7
1000335c:	7818      	ldrb	r0, [r3, #0]
1000335e:	0013      	movs	r3, r2
10003360:	0022      	movs	r2, r4
10003362:	f000 fe0f 	bl	10003f84 <tud_control_xfer>
10003366:	0003      	movs	r3, r0
10003368:	e09b      	b.n	100034a2 <process_get_descriptor+0x1be>
    case TUSB_DESC_BOS:
    {
      TU_LOG2(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
1000336a:	4b51      	ldr	r3, [pc, #324]	; (100034b0 <process_get_descriptor+0x1cc>)
1000336c:	2b00      	cmp	r3, #0
1000336e:	d101      	bne.n	10003374 <process_get_descriptor+0x90>
10003370:	2300      	movs	r3, #0
10003372:	e096      	b.n	100034a2 <process_get_descriptor+0x1be>

      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10003374:	e000      	b.n	10003378 <process_get_descriptor+0x94>
10003376:	bf00      	nop
10003378:	0003      	movs	r3, r0
1000337a:	62fb      	str	r3, [r7, #44]	; 0x2c

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((uint8_t*) desc_bos + offsetof(tusb_desc_bos_t, wTotalLength)) );
1000337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000337e:	3302      	adds	r3, #2
10003380:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
10003382:	697b      	ldr	r3, [r7, #20]
10003384:	613b      	str	r3, [r7, #16]
  return ua16->val;
10003386:	693b      	ldr	r3, [r7, #16]
10003388:	781a      	ldrb	r2, [r3, #0]
1000338a:	785b      	ldrb	r3, [r3, #1]
1000338c:	021b      	lsls	r3, r3, #8
1000338e:	4313      	orrs	r3, r2
10003390:	b29a      	uxth	r2, r3
10003392:	212a      	movs	r1, #42	; 0x2a
10003394:	187b      	adds	r3, r7, r1
10003396:	801a      	strh	r2, [r3, #0]

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
10003398:	187b      	adds	r3, r7, r1
1000339a:	881c      	ldrh	r4, [r3, #0]
1000339c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000339e:	6839      	ldr	r1, [r7, #0]
100033a0:	1dfb      	adds	r3, r7, #7
100033a2:	7818      	ldrb	r0, [r3, #0]
100033a4:	0023      	movs	r3, r4
100033a6:	f000 fded 	bl	10003f84 <tud_control_xfer>
100033aa:	0003      	movs	r3, r0
100033ac:	e079      	b.n	100034a2 <process_get_descriptor+0x1be>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      tusb_desc_configuration_t const* desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
100033ae:	2333      	movs	r3, #51	; 0x33
100033b0:	18fb      	adds	r3, r7, r3
100033b2:	781b      	ldrb	r3, [r3, #0]
100033b4:	2b02      	cmp	r3, #2
100033b6:	d108      	bne.n	100033ca <process_get_descriptor+0xe6>
      {
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
        desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
100033b8:	2332      	movs	r3, #50	; 0x32
100033ba:	18fb      	adds	r3, r7, r3
100033bc:	781b      	ldrb	r3, [r3, #0]
100033be:	0018      	movs	r0, r3
100033c0:	f009 f9d2 	bl	1000c768 <tud_descriptor_configuration_cb>
100033c4:	0003      	movs	r3, r0
100033c6:	637b      	str	r3, [r7, #52]	; 0x34
100033c8:	e00c      	b.n	100033e4 <process_get_descriptor+0x100>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG2(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
100033ca:	4b3a      	ldr	r3, [pc, #232]	; (100034b4 <process_get_descriptor+0x1d0>)
100033cc:	2b00      	cmp	r3, #0
100033ce:	d101      	bne.n	100033d4 <process_get_descriptor+0xf0>
100033d0:	2300      	movs	r3, #0
100033d2:	e066      	b.n	100034a2 <process_get_descriptor+0x1be>
        desc_config = (tusb_desc_configuration_t const*) tud_descriptor_other_speed_configuration_cb(desc_index);
100033d4:	2332      	movs	r3, #50	; 0x32
100033d6:	18fb      	adds	r3, r7, r3
100033d8:	781b      	ldrb	r3, [r3, #0]
100033da:	0018      	movs	r0, r3
100033dc:	e000      	b.n	100033e0 <process_get_descriptor+0xfc>
100033de:	bf00      	nop
100033e0:	0003      	movs	r3, r0
100033e2:	637b      	str	r3, [r7, #52]	; 0x34
      }

      TU_ASSERT(desc_config);
100033e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100033e6:	2b00      	cmp	r3, #0
100033e8:	d107      	bne.n	100033fa <process_get_descriptor+0x116>
100033ea:	4a33      	ldr	r2, [pc, #204]	; (100034b8 <process_get_descriptor+0x1d4>)
100033ec:	4933      	ldr	r1, [pc, #204]	; (100034bc <process_get_descriptor+0x1d8>)
100033ee:	4b34      	ldr	r3, [pc, #208]	; (100034c0 <process_get_descriptor+0x1dc>)
100033f0:	0018      	movs	r0, r3
100033f2:	f007 fef5 	bl	1000b1e0 <__wrap_printf>
100033f6:	2300      	movs	r3, #0
100033f8:	e053      	b.n	100034a2 <process_get_descriptor+0x1be>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength)) );
100033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100033fc:	3302      	adds	r3, #2
100033fe:	60fb      	str	r3, [r7, #12]
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
10003400:	68fb      	ldr	r3, [r7, #12]
10003402:	60bb      	str	r3, [r7, #8]
  return ua16->val;
10003404:	68bb      	ldr	r3, [r7, #8]
10003406:	781a      	ldrb	r2, [r3, #0]
10003408:	785b      	ldrb	r3, [r3, #1]
1000340a:	021b      	lsls	r3, r3, #8
1000340c:	4313      	orrs	r3, r2
1000340e:	b29a      	uxth	r2, r3
10003410:	211e      	movs	r1, #30
10003412:	187b      	adds	r3, r7, r1
10003414:	801a      	strh	r2, [r3, #0]

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10003416:	187b      	adds	r3, r7, r1
10003418:	881c      	ldrh	r4, [r3, #0]
1000341a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
1000341c:	6839      	ldr	r1, [r7, #0]
1000341e:	1dfb      	adds	r3, r7, #7
10003420:	7818      	ldrb	r0, [r3, #0]
10003422:	0023      	movs	r3, r4
10003424:	f000 fdae 	bl	10003f84 <tud_control_xfer>
10003428:	0003      	movs	r3, r0
1000342a:	e03a      	b.n	100034a2 <process_get_descriptor+0x1be>
    case TUSB_DESC_STRING:
    {
      TU_LOG2(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
1000342c:	683b      	ldr	r3, [r7, #0]
1000342e:	791a      	ldrb	r2, [r3, #4]
10003430:	795b      	ldrb	r3, [r3, #5]
10003432:	021b      	lsls	r3, r3, #8
10003434:	4313      	orrs	r3, r2
10003436:	b29a      	uxth	r2, r3
10003438:	2332      	movs	r3, #50	; 0x32
1000343a:	18fb      	adds	r3, r7, r3
1000343c:	781b      	ldrb	r3, [r3, #0]
1000343e:	0011      	movs	r1, r2
10003440:	0018      	movs	r0, r3
10003442:	f009 f99f 	bl	1000c784 <tud_descriptor_string_cb>
10003446:	0003      	movs	r3, r0
10003448:	623b      	str	r3, [r7, #32]
      TU_VERIFY(desc_str);
1000344a:	6a3b      	ldr	r3, [r7, #32]
1000344c:	2b00      	cmp	r3, #0
1000344e:	d101      	bne.n	10003454 <process_get_descriptor+0x170>
10003450:	2300      	movs	r3, #0
10003452:	e026      	b.n	100034a2 <process_get_descriptor+0x1be>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) desc_str, desc_str[0]);
10003454:	6a3b      	ldr	r3, [r7, #32]
10003456:	781b      	ldrb	r3, [r3, #0]
10003458:	b29c      	uxth	r4, r3
1000345a:	6a3a      	ldr	r2, [r7, #32]
1000345c:	6839      	ldr	r1, [r7, #0]
1000345e:	1dfb      	adds	r3, r7, #7
10003460:	7818      	ldrb	r0, [r3, #0]
10003462:	0023      	movs	r3, r4
10003464:	f000 fd8e 	bl	10003f84 <tud_control_xfer>
10003468:	0003      	movs	r3, r0
1000346a:	e01a      	b.n	100034a2 <process_get_descriptor+0x1be>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG2(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
1000346c:	4b15      	ldr	r3, [pc, #84]	; (100034c4 <process_get_descriptor+0x1e0>)
1000346e:	2b00      	cmp	r3, #0
10003470:	d101      	bne.n	10003476 <process_get_descriptor+0x192>
10003472:	2300      	movs	r3, #0
10003474:	e015      	b.n	100034a2 <process_get_descriptor+0x1be>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
10003476:	e000      	b.n	1000347a <process_get_descriptor+0x196>
10003478:	bf00      	nop
1000347a:	0003      	movs	r3, r0
1000347c:	627b      	str	r3, [r7, #36]	; 0x24
      TU_VERIFY(desc_qualifier);
1000347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003480:	2b00      	cmp	r3, #0
10003482:	d101      	bne.n	10003488 <process_get_descriptor+0x1a4>
10003484:	2300      	movs	r3, #0
10003486:	e00c      	b.n	100034a2 <process_get_descriptor+0x1be>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000348a:	781b      	ldrb	r3, [r3, #0]
1000348c:	b29c      	uxth	r4, r3
1000348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10003490:	6839      	ldr	r1, [r7, #0]
10003492:	1dfb      	adds	r3, r7, #7
10003494:	7818      	ldrb	r0, [r3, #0]
10003496:	0023      	movs	r3, r4
10003498:	f000 fd74 	bl	10003f84 <tud_control_xfer>
1000349c:	0003      	movs	r3, r0
1000349e:	e000      	b.n	100034a2 <process_get_descriptor+0x1be>
    }
    break;

    default: return false;
100034a0:	2300      	movs	r3, #0
  }
}
100034a2:	0018      	movs	r0, r3
100034a4:	46bd      	mov	sp, r7
100034a6:	b00e      	add	sp, #56	; 0x38
100034a8:	bdb0      	pop	{r4, r5, r7, pc}
100034aa:	46c0      	nop			; (mov r8, r8)
100034ac:	1000d170 	.word	0x1000d170
	...
100034b8:	00000414 	.word	0x00000414
100034bc:	1000d1f4 	.word	0x1000d1f4
100034c0:	1000d0dc 	.word	0x1000d0dc
100034c4:	00000000 	.word	0x00000000

100034c8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
100034c8:	b590      	push	{r4, r7, lr}
100034ca:	b087      	sub	sp, #28
100034cc:	af00      	add	r7, sp, #0
100034ce:	6078      	str	r0, [r7, #4]
100034d0:	000a      	movs	r2, r1
100034d2:	1cfb      	adds	r3, r7, #3
100034d4:	701a      	strb	r2, [r3, #0]
  switch (event->event_id)
100034d6:	687b      	ldr	r3, [r7, #4]
100034d8:	785b      	ldrb	r3, [r3, #1]
100034da:	2b05      	cmp	r3, #5
100034dc:	d039      	beq.n	10003552 <dcd_event_handler+0x8a>
100034de:	dd00      	ble.n	100034e2 <dcd_event_handler+0x1a>
100034e0:	e071      	b.n	100035c6 <dcd_event_handler+0xfe>
100034e2:	2b04      	cmp	r3, #4
100034e4:	d020      	beq.n	10003528 <dcd_event_handler+0x60>
100034e6:	dc6e      	bgt.n	100035c6 <dcd_event_handler+0xfe>
100034e8:	2b02      	cmp	r3, #2
100034ea:	d002      	beq.n	100034f2 <dcd_event_handler+0x2a>
100034ec:	2b03      	cmp	r3, #3
100034ee:	d045      	beq.n	1000357c <dcd_event_handler+0xb4>
100034f0:	e069      	b.n	100035c6 <dcd_event_handler+0xfe>
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
100034f2:	4a3e      	ldr	r2, [pc, #248]	; (100035ec <dcd_event_handler+0x124>)
100034f4:	7813      	ldrb	r3, [r2, #0]
100034f6:	2101      	movs	r1, #1
100034f8:	438b      	bics	r3, r1
100034fa:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
100034fc:	4a3b      	ldr	r2, [pc, #236]	; (100035ec <dcd_event_handler+0x124>)
100034fe:	7813      	ldrb	r3, [r2, #0]
10003500:	2102      	movs	r1, #2
10003502:	438b      	bics	r3, r1
10003504:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
10003506:	4b39      	ldr	r3, [pc, #228]	; (100035ec <dcd_event_handler+0x124>)
10003508:	2200      	movs	r2, #0
1000350a:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
1000350c:	4a37      	ldr	r2, [pc, #220]	; (100035ec <dcd_event_handler+0x124>)
1000350e:	7813      	ldrb	r3, [r2, #0]
10003510:	2104      	movs	r1, #4
10003512:	438b      	bics	r3, r1
10003514:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
10003516:	4b36      	ldr	r3, [pc, #216]	; (100035f0 <dcd_event_handler+0x128>)
10003518:	6818      	ldr	r0, [r3, #0]
1000351a:	1cfb      	adds	r3, r7, #3
1000351c:	781a      	ldrb	r2, [r3, #0]
1000351e:	687b      	ldr	r3, [r7, #4]
10003520:	0019      	movs	r1, r3
10003522:	f7ff f81f 	bl	10002564 <osal_queue_send>
    break;
10003526:	e05c      	b.n	100035e2 <dcd_event_handler+0x11a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
10003528:	4b30      	ldr	r3, [pc, #192]	; (100035ec <dcd_event_handler+0x124>)
1000352a:	781b      	ldrb	r3, [r3, #0]
1000352c:	07db      	lsls	r3, r3, #31
1000352e:	0fdb      	lsrs	r3, r3, #31
10003530:	b2db      	uxtb	r3, r3
10003532:	2b00      	cmp	r3, #0
10003534:	d050      	beq.n	100035d8 <dcd_event_handler+0x110>
      {
        _usbd_dev.suspended = 1;
10003536:	4a2d      	ldr	r2, [pc, #180]	; (100035ec <dcd_event_handler+0x124>)
10003538:	7813      	ldrb	r3, [r2, #0]
1000353a:	2104      	movs	r1, #4
1000353c:	430b      	orrs	r3, r1
1000353e:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10003540:	4b2b      	ldr	r3, [pc, #172]	; (100035f0 <dcd_event_handler+0x128>)
10003542:	6818      	ldr	r0, [r3, #0]
10003544:	1cfb      	adds	r3, r7, #3
10003546:	781a      	ldrb	r2, [r3, #0]
10003548:	687b      	ldr	r3, [r7, #4]
1000354a:	0019      	movs	r1, r3
1000354c:	f7ff f80a 	bl	10002564 <osal_queue_send>
      }
    break;
10003550:	e042      	b.n	100035d8 <dcd_event_handler+0x110>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
10003552:	4b26      	ldr	r3, [pc, #152]	; (100035ec <dcd_event_handler+0x124>)
10003554:	781b      	ldrb	r3, [r3, #0]
10003556:	07db      	lsls	r3, r3, #31
10003558:	0fdb      	lsrs	r3, r3, #31
1000355a:	b2db      	uxtb	r3, r3
1000355c:	2b00      	cmp	r3, #0
1000355e:	d03d      	beq.n	100035dc <dcd_event_handler+0x114>
      {
        _usbd_dev.suspended = 0;
10003560:	4a22      	ldr	r2, [pc, #136]	; (100035ec <dcd_event_handler+0x124>)
10003562:	7813      	ldrb	r3, [r2, #0]
10003564:	2104      	movs	r1, #4
10003566:	438b      	bics	r3, r1
10003568:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
1000356a:	4b21      	ldr	r3, [pc, #132]	; (100035f0 <dcd_event_handler+0x128>)
1000356c:	6818      	ldr	r0, [r3, #0]
1000356e:	1cfb      	adds	r3, r7, #3
10003570:	781a      	ldrb	r2, [r3, #0]
10003572:	687b      	ldr	r3, [r7, #4]
10003574:	0019      	movs	r1, r3
10003576:	f7fe fff5 	bl	10002564 <osal_queue_send>
      }
    break;
1000357a:	e02f      	b.n	100035dc <dcd_event_handler+0x114>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
1000357c:	4b1b      	ldr	r3, [pc, #108]	; (100035ec <dcd_event_handler+0x124>)
1000357e:	781b      	ldrb	r3, [r3, #0]
10003580:	075b      	lsls	r3, r3, #29
10003582:	0fdb      	lsrs	r3, r3, #31
10003584:	b2db      	uxtb	r3, r3
10003586:	2b00      	cmp	r3, #0
10003588:	d02a      	beq.n	100035e0 <dcd_event_handler+0x118>
      {
        _usbd_dev.suspended = 0;
1000358a:	4a18      	ldr	r2, [pc, #96]	; (100035ec <dcd_event_handler+0x124>)
1000358c:	7813      	ldrb	r3, [r2, #0]
1000358e:	2104      	movs	r1, #4
10003590:	438b      	bics	r3, r1
10003592:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
10003594:	240c      	movs	r4, #12
10003596:	193b      	adds	r3, r7, r4
10003598:	0018      	movs	r0, r3
1000359a:	230c      	movs	r3, #12
1000359c:	001a      	movs	r2, r3
1000359e:	2100      	movs	r1, #0
100035a0:	f009 fcda 	bl	1000cf58 <__wrap_memset>
100035a4:	687b      	ldr	r3, [r7, #4]
100035a6:	781a      	ldrb	r2, [r3, #0]
100035a8:	0021      	movs	r1, r4
100035aa:	187b      	adds	r3, r7, r1
100035ac:	701a      	strb	r2, [r3, #0]
100035ae:	187b      	adds	r3, r7, r1
100035b0:	2205      	movs	r2, #5
100035b2:	705a      	strb	r2, [r3, #1]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
100035b4:	4b0e      	ldr	r3, [pc, #56]	; (100035f0 <dcd_event_handler+0x128>)
100035b6:	6818      	ldr	r0, [r3, #0]
100035b8:	1cfb      	adds	r3, r7, #3
100035ba:	781a      	ldrb	r2, [r3, #0]
100035bc:	187b      	adds	r3, r7, r1
100035be:	0019      	movs	r1, r3
100035c0:	f7fe ffd0 	bl	10002564 <osal_queue_send>
      }
    break;
100035c4:	e00c      	b.n	100035e0 <dcd_event_handler+0x118>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
100035c6:	4b0a      	ldr	r3, [pc, #40]	; (100035f0 <dcd_event_handler+0x128>)
100035c8:	6818      	ldr	r0, [r3, #0]
100035ca:	1cfb      	adds	r3, r7, #3
100035cc:	781a      	ldrb	r2, [r3, #0]
100035ce:	687b      	ldr	r3, [r7, #4]
100035d0:	0019      	movs	r1, r3
100035d2:	f7fe ffc7 	bl	10002564 <osal_queue_send>
    break;
100035d6:	e004      	b.n	100035e2 <dcd_event_handler+0x11a>
    break;
100035d8:	46c0      	nop			; (mov r8, r8)
100035da:	e002      	b.n	100035e2 <dcd_event_handler+0x11a>
    break;
100035dc:	46c0      	nop			; (mov r8, r8)
100035de:	e000      	b.n	100035e2 <dcd_event_handler+0x11a>
    break;
100035e0:	46c0      	nop			; (mov r8, r8)
  }
}
100035e2:	46c0      	nop			; (mov r8, r8)
100035e4:	46bd      	mov	sp, r7
100035e6:	b007      	add	sp, #28
100035e8:	bd90      	pop	{r4, r7, pc}
100035ea:	46c0      	nop			; (mov r8, r8)
100035ec:	20000a64 	.word	0x20000a64
100035f0:	20000abc 	.word	0x20000abc

100035f4 <dcd_event_bus_signal>:

void dcd_event_bus_signal (uint8_t rhport, dcd_eventid_t eid, bool in_isr)
{
100035f4:	b590      	push	{r4, r7, lr}
100035f6:	b087      	sub	sp, #28
100035f8:	af00      	add	r7, sp, #0
100035fa:	0004      	movs	r4, r0
100035fc:	0008      	movs	r0, r1
100035fe:	0011      	movs	r1, r2
10003600:	1dfb      	adds	r3, r7, #7
10003602:	1c22      	adds	r2, r4, #0
10003604:	701a      	strb	r2, [r3, #0]
10003606:	1dbb      	adds	r3, r7, #6
10003608:	1c02      	adds	r2, r0, #0
1000360a:	701a      	strb	r2, [r3, #0]
1000360c:	1d7b      	adds	r3, r7, #5
1000360e:	1c0a      	adds	r2, r1, #0
10003610:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10003612:	240c      	movs	r4, #12
10003614:	193b      	adds	r3, r7, r4
10003616:	0018      	movs	r0, r3
10003618:	230c      	movs	r3, #12
1000361a:	001a      	movs	r2, r3
1000361c:	2100      	movs	r1, #0
1000361e:	f009 fc9b 	bl	1000cf58 <__wrap_memset>
10003622:	0021      	movs	r1, r4
10003624:	187b      	adds	r3, r7, r1
10003626:	1dfa      	adds	r2, r7, #7
10003628:	7812      	ldrb	r2, [r2, #0]
1000362a:	701a      	strb	r2, [r3, #0]
1000362c:	187b      	adds	r3, r7, r1
1000362e:	1dba      	adds	r2, r7, #6
10003630:	7812      	ldrb	r2, [r2, #0]
10003632:	705a      	strb	r2, [r3, #1]
  dcd_event_handler(&event, in_isr);
10003634:	1d7b      	adds	r3, r7, #5
10003636:	781a      	ldrb	r2, [r3, #0]
10003638:	187b      	adds	r3, r7, r1
1000363a:	0011      	movs	r1, r2
1000363c:	0018      	movs	r0, r3
1000363e:	f7ff ff43 	bl	100034c8 <dcd_event_handler>
}
10003642:	46c0      	nop			; (mov r8, r8)
10003644:	46bd      	mov	sp, r7
10003646:	b007      	add	sp, #28
10003648:	bd90      	pop	{r4, r7, pc}

1000364a <dcd_event_bus_reset>:

void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
1000364a:	b590      	push	{r4, r7, lr}
1000364c:	b087      	sub	sp, #28
1000364e:	af00      	add	r7, sp, #0
10003650:	0004      	movs	r4, r0
10003652:	0008      	movs	r0, r1
10003654:	0011      	movs	r1, r2
10003656:	1dfb      	adds	r3, r7, #7
10003658:	1c22      	adds	r2, r4, #0
1000365a:	701a      	strb	r2, [r3, #0]
1000365c:	1dbb      	adds	r3, r7, #6
1000365e:	1c02      	adds	r2, r0, #0
10003660:	701a      	strb	r2, [r3, #0]
10003662:	1d7b      	adds	r3, r7, #5
10003664:	1c0a      	adds	r2, r1, #0
10003666:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
10003668:	240c      	movs	r4, #12
1000366a:	193b      	adds	r3, r7, r4
1000366c:	0018      	movs	r0, r3
1000366e:	230c      	movs	r3, #12
10003670:	001a      	movs	r2, r3
10003672:	2100      	movs	r1, #0
10003674:	f009 fc70 	bl	1000cf58 <__wrap_memset>
10003678:	0021      	movs	r1, r4
1000367a:	187b      	adds	r3, r7, r1
1000367c:	1dfa      	adds	r2, r7, #7
1000367e:	7812      	ldrb	r2, [r2, #0]
10003680:	701a      	strb	r2, [r3, #0]
10003682:	187b      	adds	r3, r7, r1
10003684:	2201      	movs	r2, #1
10003686:	705a      	strb	r2, [r3, #1]
  event.bus_reset.speed = speed;
10003688:	187b      	adds	r3, r7, r1
1000368a:	1dba      	adds	r2, r7, #6
1000368c:	7812      	ldrb	r2, [r2, #0]
1000368e:	711a      	strb	r2, [r3, #4]
  dcd_event_handler(&event, in_isr);
10003690:	1d7b      	adds	r3, r7, #5
10003692:	781a      	ldrb	r2, [r3, #0]
10003694:	187b      	adds	r3, r7, r1
10003696:	0011      	movs	r1, r2
10003698:	0018      	movs	r0, r3
1000369a:	f7ff ff15 	bl	100034c8 <dcd_event_handler>
}
1000369e:	46c0      	nop			; (mov r8, r8)
100036a0:	46bd      	mov	sp, r7
100036a2:	b007      	add	sp, #28
100036a4:	bd90      	pop	{r4, r7, pc}

100036a6 <dcd_event_setup_received>:

void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
100036a6:	b590      	push	{r4, r7, lr}
100036a8:	b087      	sub	sp, #28
100036aa:	af00      	add	r7, sp, #0
100036ac:	6039      	str	r1, [r7, #0]
100036ae:	0011      	movs	r1, r2
100036b0:	1dfb      	adds	r3, r7, #7
100036b2:	1c02      	adds	r2, r0, #0
100036b4:	701a      	strb	r2, [r3, #0]
100036b6:	1dbb      	adds	r3, r7, #6
100036b8:	1c0a      	adds	r2, r1, #0
100036ba:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
100036bc:	240c      	movs	r4, #12
100036be:	193b      	adds	r3, r7, r4
100036c0:	0018      	movs	r0, r3
100036c2:	230c      	movs	r3, #12
100036c4:	001a      	movs	r2, r3
100036c6:	2100      	movs	r1, #0
100036c8:	f009 fc46 	bl	1000cf58 <__wrap_memset>
100036cc:	193b      	adds	r3, r7, r4
100036ce:	1dfa      	adds	r2, r7, #7
100036d0:	7812      	ldrb	r2, [r2, #0]
100036d2:	701a      	strb	r2, [r3, #0]
100036d4:	193b      	adds	r3, r7, r4
100036d6:	2206      	movs	r2, #6
100036d8:	705a      	strb	r2, [r3, #1]
  memcpy(&event.setup_received, setup, 8);
100036da:	193b      	adds	r3, r7, r4
100036dc:	683a      	ldr	r2, [r7, #0]
100036de:	3304      	adds	r3, #4
100036e0:	0011      	movs	r1, r2
100036e2:	2208      	movs	r2, #8
100036e4:	0018      	movs	r0, r3
100036e6:	f009 fc3d 	bl	1000cf64 <__wrap___aeabi_memcpy>

  dcd_event_handler(&event, in_isr);
100036ea:	1dbb      	adds	r3, r7, #6
100036ec:	781a      	ldrb	r2, [r3, #0]
100036ee:	193b      	adds	r3, r7, r4
100036f0:	0011      	movs	r1, r2
100036f2:	0018      	movs	r0, r3
100036f4:	f7ff fee8 	bl	100034c8 <dcd_event_handler>
}
100036f8:	46c0      	nop			; (mov r8, r8)
100036fa:	46bd      	mov	sp, r7
100036fc:	b007      	add	sp, #28
100036fe:	bd90      	pop	{r4, r7, pc}

10003700 <dcd_event_xfer_complete>:

void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
10003700:	b590      	push	{r4, r7, lr}
10003702:	b087      	sub	sp, #28
10003704:	af00      	add	r7, sp, #0
10003706:	0004      	movs	r4, r0
10003708:	0008      	movs	r0, r1
1000370a:	603a      	str	r2, [r7, #0]
1000370c:	0019      	movs	r1, r3
1000370e:	1dfb      	adds	r3, r7, #7
10003710:	1c22      	adds	r2, r4, #0
10003712:	701a      	strb	r2, [r3, #0]
10003714:	1dbb      	adds	r3, r7, #6
10003716:	1c02      	adds	r2, r0, #0
10003718:	701a      	strb	r2, [r3, #0]
1000371a:	1d7b      	adds	r3, r7, #5
1000371c:	1c0a      	adds	r2, r1, #0
1000371e:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10003720:	240c      	movs	r4, #12
10003722:	193b      	adds	r3, r7, r4
10003724:	0018      	movs	r0, r3
10003726:	230c      	movs	r3, #12
10003728:	001a      	movs	r2, r3
1000372a:	2100      	movs	r1, #0
1000372c:	f009 fc14 	bl	1000cf58 <__wrap_memset>
10003730:	0021      	movs	r1, r4
10003732:	187b      	adds	r3, r7, r1
10003734:	1dfa      	adds	r2, r7, #7
10003736:	7812      	ldrb	r2, [r2, #0]
10003738:	701a      	strb	r2, [r3, #0]
1000373a:	187b      	adds	r3, r7, r1
1000373c:	2207      	movs	r2, #7
1000373e:	705a      	strb	r2, [r3, #1]

  event.xfer_complete.ep_addr = ep_addr;
10003740:	187b      	adds	r3, r7, r1
10003742:	1dba      	adds	r2, r7, #6
10003744:	7812      	ldrb	r2, [r2, #0]
10003746:	711a      	strb	r2, [r3, #4]
  event.xfer_complete.len     = xferred_bytes;
10003748:	187b      	adds	r3, r7, r1
1000374a:	683a      	ldr	r2, [r7, #0]
1000374c:	609a      	str	r2, [r3, #8]
  event.xfer_complete.result  = result;
1000374e:	187b      	adds	r3, r7, r1
10003750:	1d7a      	adds	r2, r7, #5
10003752:	7812      	ldrb	r2, [r2, #0]
10003754:	715a      	strb	r2, [r3, #5]

  dcd_event_handler(&event, in_isr);
10003756:	2328      	movs	r3, #40	; 0x28
10003758:	18fb      	adds	r3, r7, r3
1000375a:	781a      	ldrb	r2, [r3, #0]
1000375c:	187b      	adds	r3, r7, r1
1000375e:	0011      	movs	r1, r2
10003760:	0018      	movs	r0, r3
10003762:	f7ff feb1 	bl	100034c8 <dcd_event_handler>
}
10003766:	46c0      	nop			; (mov r8, r8)
10003768:	46bd      	mov	sp, r7
1000376a:	b007      	add	sp, #28
1000376c:	bd90      	pop	{r4, r7, pc}
	...

10003770 <usbd_open_edpt_pair>:
// USBD API For Class Driver
//--------------------------------------------------------------------+

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
10003770:	b590      	push	{r4, r7, lr}
10003772:	b085      	sub	sp, #20
10003774:	af00      	add	r7, sp, #0
10003776:	0004      	movs	r4, r0
10003778:	6039      	str	r1, [r7, #0]
1000377a:	0010      	movs	r0, r2
1000377c:	0019      	movs	r1, r3
1000377e:	1dfb      	adds	r3, r7, #7
10003780:	1c22      	adds	r2, r4, #0
10003782:	701a      	strb	r2, [r3, #0]
10003784:	1dbb      	adds	r3, r7, #6
10003786:	1c02      	adds	r2, r0, #0
10003788:	701a      	strb	r2, [r3, #0]
1000378a:	1d7b      	adds	r3, r7, #5
1000378c:	1c0a      	adds	r2, r1, #0
1000378e:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<ep_count; i++)
10003790:	2300      	movs	r3, #0
10003792:	60fb      	str	r3, [r7, #12]
10003794:	e047      	b.n	10003826 <usbd_open_edpt_pair+0xb6>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
10003796:	683b      	ldr	r3, [r7, #0]
10003798:	60bb      	str	r3, [r7, #8]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
1000379a:	68bb      	ldr	r3, [r7, #8]
1000379c:	785b      	ldrb	r3, [r3, #1]
1000379e:	2b05      	cmp	r3, #5
100037a0:	d109      	bne.n	100037b6 <usbd_open_edpt_pair+0x46>
100037a2:	68bb      	ldr	r3, [r7, #8]
100037a4:	78db      	ldrb	r3, [r3, #3]
100037a6:	079b      	lsls	r3, r3, #30
100037a8:	0f9b      	lsrs	r3, r3, #30
100037aa:	b2db      	uxtb	r3, r3
100037ac:	001a      	movs	r2, r3
100037ae:	1d7b      	adds	r3, r7, #5
100037b0:	781b      	ldrb	r3, [r3, #0]
100037b2:	4293      	cmp	r3, r2
100037b4:	d007      	beq.n	100037c6 <usbd_open_edpt_pair+0x56>
100037b6:	4a21      	ldr	r2, [pc, #132]	; (1000383c <usbd_open_edpt_pair+0xcc>)
100037b8:	4921      	ldr	r1, [pc, #132]	; (10003840 <usbd_open_edpt_pair+0xd0>)
100037ba:	4b22      	ldr	r3, [pc, #136]	; (10003844 <usbd_open_edpt_pair+0xd4>)
100037bc:	0018      	movs	r0, r3
100037be:	f007 fd0f 	bl	1000b1e0 <__wrap_printf>
100037c2:	2300      	movs	r3, #0
100037c4:	e035      	b.n	10003832 <usbd_open_edpt_pair+0xc2>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
100037c6:	68ba      	ldr	r2, [r7, #8]
100037c8:	1dfb      	adds	r3, r7, #7
100037ca:	781b      	ldrb	r3, [r3, #0]
100037cc:	0011      	movs	r1, r2
100037ce:	0018      	movs	r0, r3
100037d0:	f000 f83c 	bl	1000384c <usbd_edpt_open>
100037d4:	0003      	movs	r3, r0
100037d6:	001a      	movs	r2, r3
100037d8:	2301      	movs	r3, #1
100037da:	4053      	eors	r3, r2
100037dc:	b2db      	uxtb	r3, r3
100037de:	2b00      	cmp	r3, #0
100037e0:	d007      	beq.n	100037f2 <usbd_open_edpt_pair+0x82>
100037e2:	4a19      	ldr	r2, [pc, #100]	; (10003848 <usbd_open_edpt_pair+0xd8>)
100037e4:	4916      	ldr	r1, [pc, #88]	; (10003840 <usbd_open_edpt_pair+0xd0>)
100037e6:	4b17      	ldr	r3, [pc, #92]	; (10003844 <usbd_open_edpt_pair+0xd4>)
100037e8:	0018      	movs	r0, r3
100037ea:	f007 fcf9 	bl	1000b1e0 <__wrap_printf>
100037ee:	2300      	movs	r3, #0
100037f0:	e01f      	b.n	10003832 <usbd_open_edpt_pair+0xc2>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
100037f2:	68bb      	ldr	r3, [r7, #8]
100037f4:	789b      	ldrb	r3, [r3, #2]
100037f6:	0018      	movs	r0, r3
100037f8:	f7fe fdc7 	bl	1000238a <tu_edpt_dir>
100037fc:	0003      	movs	r3, r0
100037fe:	2b01      	cmp	r3, #1
10003800:	d104      	bne.n	1000380c <usbd_open_edpt_pair+0x9c>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
10003802:	68bb      	ldr	r3, [r7, #8]
10003804:	789a      	ldrb	r2, [r3, #2]
10003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10003808:	701a      	strb	r2, [r3, #0]
1000380a:	e003      	b.n	10003814 <usbd_open_edpt_pair+0xa4>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
1000380c:	68bb      	ldr	r3, [r7, #8]
1000380e:	789a      	ldrb	r2, [r3, #2]
10003810:	6a3b      	ldr	r3, [r7, #32]
10003812:	701a      	strb	r2, [r3, #0]
    }

    p_desc = tu_desc_next(p_desc);
10003814:	683b      	ldr	r3, [r7, #0]
10003816:	0018      	movs	r0, r3
10003818:	f7fe fdd4 	bl	100023c4 <tu_desc_next>
1000381c:	0003      	movs	r3, r0
1000381e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
10003820:	68fb      	ldr	r3, [r7, #12]
10003822:	3301      	adds	r3, #1
10003824:	60fb      	str	r3, [r7, #12]
10003826:	1dbb      	adds	r3, r7, #6
10003828:	781b      	ldrb	r3, [r3, #0]
1000382a:	68fa      	ldr	r2, [r7, #12]
1000382c:	429a      	cmp	r2, r3
1000382e:	dbb2      	blt.n	10003796 <usbd_open_edpt_pair+0x26>
  }

  return true;
10003830:	2301      	movs	r3, #1
}
10003832:	0018      	movs	r0, r3
10003834:	46bd      	mov	sp, r7
10003836:	b005      	add	sp, #20
10003838:	bd90      	pop	{r4, r7, pc}
1000383a:	46c0      	nop			; (mov r8, r8)
1000383c:	0000049c 	.word	0x0000049c
10003840:	1000d21c 	.word	0x1000d21c
10003844:	1000d0dc 	.word	0x1000d0dc
10003848:	0000049d 	.word	0x0000049d

1000384c <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
1000384c:	b580      	push	{r7, lr}
1000384e:	b082      	sub	sp, #8
10003850:	af00      	add	r7, sp, #0
10003852:	0002      	movs	r2, r0
10003854:	6039      	str	r1, [r7, #0]
10003856:	1dfb      	adds	r3, r7, #7
10003858:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
1000385a:	683b      	ldr	r3, [r7, #0]
1000385c:	789b      	ldrb	r3, [r3, #2]
1000385e:	0018      	movs	r0, r3
10003860:	f7fe fda1 	bl	100023a6 <tu_edpt_number>
10003864:	0003      	movs	r3, r0
10003866:	2b0f      	cmp	r3, #15
10003868:	d907      	bls.n	1000387a <usbd_edpt_open+0x2e>
1000386a:	4a15      	ldr	r2, [pc, #84]	; (100038c0 <usbd_edpt_open+0x74>)
1000386c:	4915      	ldr	r1, [pc, #84]	; (100038c4 <usbd_edpt_open+0x78>)
1000386e:	4b16      	ldr	r3, [pc, #88]	; (100038c8 <usbd_edpt_open+0x7c>)
10003870:	0018      	movs	r0, r3
10003872:	f007 fcb5 	bl	1000b1e0 <__wrap_printf>
10003876:	2300      	movs	r3, #0
10003878:	e01d      	b.n	100038b6 <usbd_edpt_open+0x6a>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
1000387a:	4b14      	ldr	r3, [pc, #80]	; (100038cc <usbd_edpt_open+0x80>)
1000387c:	789a      	ldrb	r2, [r3, #2]
1000387e:	683b      	ldr	r3, [r7, #0]
10003880:	0011      	movs	r1, r2
10003882:	0018      	movs	r0, r3
10003884:	f001 fce8 	bl	10005258 <tu_edpt_validate>
10003888:	0003      	movs	r3, r0
1000388a:	001a      	movs	r2, r3
1000388c:	2301      	movs	r3, #1
1000388e:	4053      	eors	r3, r2
10003890:	b2db      	uxtb	r3, r3
10003892:	2b00      	cmp	r3, #0
10003894:	d007      	beq.n	100038a6 <usbd_edpt_open+0x5a>
10003896:	4a0e      	ldr	r2, [pc, #56]	; (100038d0 <usbd_edpt_open+0x84>)
10003898:	490a      	ldr	r1, [pc, #40]	; (100038c4 <usbd_edpt_open+0x78>)
1000389a:	4b0b      	ldr	r3, [pc, #44]	; (100038c8 <usbd_edpt_open+0x7c>)
1000389c:	0018      	movs	r0, r3
1000389e:	f007 fc9f 	bl	1000b1e0 <__wrap_printf>
100038a2:	2300      	movs	r3, #0
100038a4:	e007      	b.n	100038b6 <usbd_edpt_open+0x6a>

  return dcd_edpt_open(rhport, desc_ep);
100038a6:	683a      	ldr	r2, [r7, #0]
100038a8:	1dfb      	adds	r3, r7, #7
100038aa:	781b      	ldrb	r3, [r3, #0]
100038ac:	0011      	movs	r1, r2
100038ae:	0018      	movs	r0, r3
100038b0:	f001 f88c 	bl	100049cc <dcd_edpt_open>
100038b4:	0003      	movs	r3, r0
}
100038b6:	0018      	movs	r0, r3
100038b8:	46bd      	mov	sp, r7
100038ba:	b002      	add	sp, #8
100038bc:	bd80      	pop	{r7, pc}
100038be:	46c0      	nop			; (mov r8, r8)
100038c0:	000004c2 	.word	0x000004c2
100038c4:	1000d230 	.word	0x1000d230
100038c8:	1000d0dc 	.word	0x1000d0dc
100038cc:	20000a64 	.word	0x20000a64
100038d0:	000004c3 	.word	0x000004c3

100038d4 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
100038d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100038d6:	b085      	sub	sp, #20
100038d8:	af00      	add	r7, sp, #0
100038da:	0002      	movs	r2, r0
100038dc:	1dfb      	adds	r3, r7, #7
100038de:	701a      	strb	r2, [r3, #0]
100038e0:	1dbb      	adds	r3, r7, #6
100038e2:	1c0a      	adds	r2, r1, #0
100038e4:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
100038e6:	250f      	movs	r5, #15
100038e8:	197c      	adds	r4, r7, r5
100038ea:	1dbb      	adds	r3, r7, #6
100038ec:	781b      	ldrb	r3, [r3, #0]
100038ee:	0018      	movs	r0, r3
100038f0:	f7fe fd59 	bl	100023a6 <tu_edpt_number>
100038f4:	0003      	movs	r3, r0
100038f6:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
100038f8:	260e      	movs	r6, #14
100038fa:	19bc      	adds	r4, r7, r6
100038fc:	1dbb      	adds	r3, r7, #6
100038fe:	781b      	ldrb	r3, [r3, #0]
10003900:	0018      	movs	r0, r3
10003902:	f7fe fd42 	bl	1000238a <tu_edpt_dir>
10003906:	0003      	movs	r3, r0
10003908:	7023      	strb	r3, [r4, #0]

#if CFG_TUSB_OS != OPT_OS_NONE
  // pre-check to help reducing mutex lock
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
1000390a:	002c      	movs	r4, r5
1000390c:	193b      	adds	r3, r7, r4
1000390e:	781a      	ldrb	r2, [r3, #0]
10003910:	0035      	movs	r5, r6
10003912:	197b      	adds	r3, r7, r5
10003914:	781b      	ldrb	r3, [r3, #0]
10003916:	493c      	ldr	r1, [pc, #240]	; (10003a08 <usbd_edpt_claim+0x134>)
10003918:	2030      	movs	r0, #48	; 0x30
1000391a:	0052      	lsls	r2, r2, #1
1000391c:	188a      	adds	r2, r1, r2
1000391e:	18d3      	adds	r3, r2, r3
10003920:	181b      	adds	r3, r3, r0
10003922:	78db      	ldrb	r3, [r3, #3]
10003924:	07db      	lsls	r3, r3, #31
10003926:	0fdb      	lsrs	r3, r3, #31
10003928:	b2db      	uxtb	r3, r3
1000392a:	2b00      	cmp	r3, #0
1000392c:	d10f      	bne.n	1000394e <usbd_edpt_claim+0x7a>
1000392e:	193b      	adds	r3, r7, r4
10003930:	781a      	ldrb	r2, [r3, #0]
10003932:	197b      	adds	r3, r7, r5
10003934:	781b      	ldrb	r3, [r3, #0]
10003936:	4934      	ldr	r1, [pc, #208]	; (10003a08 <usbd_edpt_claim+0x134>)
10003938:	2030      	movs	r0, #48	; 0x30
1000393a:	0052      	lsls	r2, r2, #1
1000393c:	188a      	adds	r2, r1, r2
1000393e:	18d3      	adds	r3, r2, r3
10003940:	181b      	adds	r3, r3, r0
10003942:	78db      	ldrb	r3, [r3, #3]
10003944:	075b      	lsls	r3, r3, #29
10003946:	0fdb      	lsrs	r3, r3, #31
10003948:	b2db      	uxtb	r3, r3
1000394a:	2b00      	cmp	r3, #0
1000394c:	d001      	beq.n	10003952 <usbd_edpt_claim+0x7e>
1000394e:	2300      	movs	r3, #0
10003950:	e055      	b.n	100039fe <usbd_edpt_claim+0x12a>
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10003952:	4b2e      	ldr	r3, [pc, #184]	; (10003a0c <usbd_edpt_claim+0x138>)
10003954:	681b      	ldr	r3, [r3, #0]
10003956:	2201      	movs	r2, #1
10003958:	4252      	negs	r2, r2
1000395a:	0011      	movs	r1, r2
1000395c:	0018      	movs	r0, r3
1000395e:	f7fe fd9a 	bl	10002496 <osal_mutex_lock>
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10003962:	240f      	movs	r4, #15
10003964:	193b      	adds	r3, r7, r4
10003966:	781a      	ldrb	r2, [r3, #0]
10003968:	250e      	movs	r5, #14
1000396a:	197b      	adds	r3, r7, r5
1000396c:	781b      	ldrb	r3, [r3, #0]
1000396e:	4926      	ldr	r1, [pc, #152]	; (10003a08 <usbd_edpt_claim+0x134>)
10003970:	2030      	movs	r0, #48	; 0x30
10003972:	0052      	lsls	r2, r2, #1
10003974:	188a      	adds	r2, r1, r2
10003976:	18d3      	adds	r3, r2, r3
10003978:	181b      	adds	r3, r3, r0
1000397a:	78db      	ldrb	r3, [r3, #3]
1000397c:	07db      	lsls	r3, r3, #31
1000397e:	0fdb      	lsrs	r3, r3, #31
10003980:	b2db      	uxtb	r3, r3
10003982:	2201      	movs	r2, #1
10003984:	4053      	eors	r3, r2
10003986:	b2db      	uxtb	r3, r3
10003988:	2b00      	cmp	r3, #0
1000398a:	d014      	beq.n	100039b6 <usbd_edpt_claim+0xe2>
1000398c:	193b      	adds	r3, r7, r4
1000398e:	781a      	ldrb	r2, [r3, #0]
10003990:	197b      	adds	r3, r7, r5
10003992:	781b      	ldrb	r3, [r3, #0]
10003994:	491c      	ldr	r1, [pc, #112]	; (10003a08 <usbd_edpt_claim+0x134>)
10003996:	2030      	movs	r0, #48	; 0x30
10003998:	0052      	lsls	r2, r2, #1
1000399a:	188a      	adds	r2, r1, r2
1000399c:	18d3      	adds	r3, r2, r3
1000399e:	181b      	adds	r3, r3, r0
100039a0:	78db      	ldrb	r3, [r3, #3]
100039a2:	075b      	lsls	r3, r3, #29
100039a4:	0fdb      	lsrs	r3, r3, #31
100039a6:	b2db      	uxtb	r3, r3
100039a8:	2201      	movs	r2, #1
100039aa:	4053      	eors	r3, r2
100039ac:	b2db      	uxtb	r3, r3
100039ae:	2b00      	cmp	r3, #0
100039b0:	d001      	beq.n	100039b6 <usbd_edpt_claim+0xe2>
100039b2:	2201      	movs	r2, #1
100039b4:	e000      	b.n	100039b8 <usbd_edpt_claim+0xe4>
100039b6:	2200      	movs	r2, #0
100039b8:	200d      	movs	r0, #13
100039ba:	183b      	adds	r3, r7, r0
100039bc:	701a      	strb	r2, [r3, #0]
100039be:	781a      	ldrb	r2, [r3, #0]
100039c0:	2101      	movs	r1, #1
100039c2:	400a      	ands	r2, r1
100039c4:	701a      	strb	r2, [r3, #0]
  if (ret)
100039c6:	183b      	adds	r3, r7, r0
100039c8:	781b      	ldrb	r3, [r3, #0]
100039ca:	2b00      	cmp	r3, #0
100039cc:	d00f      	beq.n	100039ee <usbd_edpt_claim+0x11a>
  {
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
100039ce:	230f      	movs	r3, #15
100039d0:	18fb      	adds	r3, r7, r3
100039d2:	781a      	ldrb	r2, [r3, #0]
100039d4:	230e      	movs	r3, #14
100039d6:	18fb      	adds	r3, r7, r3
100039d8:	781b      	ldrb	r3, [r3, #0]
100039da:	490b      	ldr	r1, [pc, #44]	; (10003a08 <usbd_edpt_claim+0x134>)
100039dc:	2030      	movs	r0, #48	; 0x30
100039de:	0052      	lsls	r2, r2, #1
100039e0:	188a      	adds	r2, r1, r2
100039e2:	18d3      	adds	r3, r2, r3
100039e4:	181a      	adds	r2, r3, r0
100039e6:	78d3      	ldrb	r3, [r2, #3]
100039e8:	2104      	movs	r1, #4
100039ea:	430b      	orrs	r3, r1
100039ec:	70d3      	strb	r3, [r2, #3]
  }

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_unlock(_usbd_mutex);
100039ee:	4b07      	ldr	r3, [pc, #28]	; (10003a0c <usbd_edpt_claim+0x138>)
100039f0:	681b      	ldr	r3, [r3, #0]
100039f2:	0018      	movs	r0, r3
100039f4:	f7fe fd5f 	bl	100024b6 <osal_mutex_unlock>
#endif

  return ret;
100039f8:	230d      	movs	r3, #13
100039fa:	18fb      	adds	r3, r7, r3
100039fc:	781b      	ldrb	r3, [r3, #0]
}
100039fe:	0018      	movs	r0, r3
10003a00:	46bd      	mov	sp, r7
10003a02:	b005      	add	sp, #20
10003a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003a06:	46c0      	nop			; (mov r8, r8)
10003a08:	20000a64 	.word	0x20000a64
10003a0c:	20000ab8 	.word	0x20000ab8

10003a10 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
10003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a12:	b085      	sub	sp, #20
10003a14:	af00      	add	r7, sp, #0
10003a16:	0002      	movs	r2, r0
10003a18:	1dfb      	adds	r3, r7, #7
10003a1a:	701a      	strb	r2, [r3, #0]
10003a1c:	1dbb      	adds	r3, r7, #6
10003a1e:	1c0a      	adds	r2, r1, #0
10003a20:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
10003a22:	250f      	movs	r5, #15
10003a24:	197c      	adds	r4, r7, r5
10003a26:	1dbb      	adds	r3, r7, #6
10003a28:	781b      	ldrb	r3, [r3, #0]
10003a2a:	0018      	movs	r0, r3
10003a2c:	f7fe fcbb 	bl	100023a6 <tu_edpt_number>
10003a30:	0003      	movs	r3, r0
10003a32:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
10003a34:	260e      	movs	r6, #14
10003a36:	19bc      	adds	r4, r7, r6
10003a38:	1dbb      	adds	r3, r7, #6
10003a3a:	781b      	ldrb	r3, [r3, #0]
10003a3c:	0018      	movs	r0, r3
10003a3e:	f7fe fca4 	bl	1000238a <tu_edpt_dir>
10003a42:	0003      	movs	r3, r0
10003a44:	7023      	strb	r3, [r4, #0]

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10003a46:	4b2b      	ldr	r3, [pc, #172]	; (10003af4 <usbd_edpt_release+0xe4>)
10003a48:	681b      	ldr	r3, [r3, #0]
10003a4a:	2201      	movs	r2, #1
10003a4c:	4252      	negs	r2, r2
10003a4e:	0011      	movs	r1, r2
10003a50:	0018      	movs	r0, r3
10003a52:	f7fe fd20 	bl	10002496 <osal_mutex_lock>
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
10003a56:	002c      	movs	r4, r5
10003a58:	193b      	adds	r3, r7, r4
10003a5a:	781a      	ldrb	r2, [r3, #0]
10003a5c:	0035      	movs	r5, r6
10003a5e:	197b      	adds	r3, r7, r5
10003a60:	781b      	ldrb	r3, [r3, #0]
10003a62:	4925      	ldr	r1, [pc, #148]	; (10003af8 <usbd_edpt_release+0xe8>)
10003a64:	2030      	movs	r0, #48	; 0x30
10003a66:	0052      	lsls	r2, r2, #1
10003a68:	188a      	adds	r2, r1, r2
10003a6a:	18d3      	adds	r3, r2, r3
10003a6c:	181b      	adds	r3, r3, r0
10003a6e:	78db      	ldrb	r3, [r3, #3]
10003a70:	07db      	lsls	r3, r3, #31
10003a72:	0fdb      	lsrs	r3, r3, #31
10003a74:	b2db      	uxtb	r3, r3
10003a76:	2201      	movs	r2, #1
10003a78:	4053      	eors	r3, r2
10003a7a:	b2db      	uxtb	r3, r3
10003a7c:	2b00      	cmp	r3, #0
10003a7e:	d011      	beq.n	10003aa4 <usbd_edpt_release+0x94>
10003a80:	193b      	adds	r3, r7, r4
10003a82:	781a      	ldrb	r2, [r3, #0]
10003a84:	197b      	adds	r3, r7, r5
10003a86:	781b      	ldrb	r3, [r3, #0]
10003a88:	491b      	ldr	r1, [pc, #108]	; (10003af8 <usbd_edpt_release+0xe8>)
10003a8a:	2030      	movs	r0, #48	; 0x30
10003a8c:	0052      	lsls	r2, r2, #1
10003a8e:	188a      	adds	r2, r1, r2
10003a90:	18d3      	adds	r3, r2, r3
10003a92:	181b      	adds	r3, r3, r0
10003a94:	78db      	ldrb	r3, [r3, #3]
10003a96:	075b      	lsls	r3, r3, #29
10003a98:	0fdb      	lsrs	r3, r3, #31
10003a9a:	b2db      	uxtb	r3, r3
10003a9c:	2b00      	cmp	r3, #0
10003a9e:	d001      	beq.n	10003aa4 <usbd_edpt_release+0x94>
10003aa0:	2201      	movs	r2, #1
10003aa2:	e000      	b.n	10003aa6 <usbd_edpt_release+0x96>
10003aa4:	2200      	movs	r2, #0
10003aa6:	200d      	movs	r0, #13
10003aa8:	183b      	adds	r3, r7, r0
10003aaa:	701a      	strb	r2, [r3, #0]
10003aac:	781a      	ldrb	r2, [r3, #0]
10003aae:	2101      	movs	r1, #1
10003ab0:	400a      	ands	r2, r1
10003ab2:	701a      	strb	r2, [r3, #0]
  if (ret)
10003ab4:	183b      	adds	r3, r7, r0
10003ab6:	781b      	ldrb	r3, [r3, #0]
10003ab8:	2b00      	cmp	r3, #0
10003aba:	d00f      	beq.n	10003adc <usbd_edpt_release+0xcc>
  {
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
10003abc:	230f      	movs	r3, #15
10003abe:	18fb      	adds	r3, r7, r3
10003ac0:	781a      	ldrb	r2, [r3, #0]
10003ac2:	230e      	movs	r3, #14
10003ac4:	18fb      	adds	r3, r7, r3
10003ac6:	781b      	ldrb	r3, [r3, #0]
10003ac8:	490b      	ldr	r1, [pc, #44]	; (10003af8 <usbd_edpt_release+0xe8>)
10003aca:	2030      	movs	r0, #48	; 0x30
10003acc:	0052      	lsls	r2, r2, #1
10003ace:	188a      	adds	r2, r1, r2
10003ad0:	18d3      	adds	r3, r2, r3
10003ad2:	181a      	adds	r2, r3, r0
10003ad4:	78d3      	ldrb	r3, [r2, #3]
10003ad6:	2104      	movs	r1, #4
10003ad8:	438b      	bics	r3, r1
10003ada:	70d3      	strb	r3, [r2, #3]
  }

#if CFG_TUSB_OS != OPT_OS_NONE
  osal_mutex_unlock(_usbd_mutex);
10003adc:	4b05      	ldr	r3, [pc, #20]	; (10003af4 <usbd_edpt_release+0xe4>)
10003ade:	681b      	ldr	r3, [r3, #0]
10003ae0:	0018      	movs	r0, r3
10003ae2:	f7fe fce8 	bl	100024b6 <osal_mutex_unlock>
#endif

  return ret;
10003ae6:	230d      	movs	r3, #13
10003ae8:	18fb      	adds	r3, r7, r3
10003aea:	781b      	ldrb	r3, [r3, #0]
}
10003aec:	0018      	movs	r0, r3
10003aee:	46bd      	mov	sp, r7
10003af0:	b005      	add	sp, #20
10003af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003af4:	20000ab8 	.word	0x20000ab8
10003af8:	20000a64 	.word	0x20000a64

10003afc <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
10003afc:	b5f0      	push	{r4, r5, r6, r7, lr}
10003afe:	b085      	sub	sp, #20
10003b00:	af00      	add	r7, sp, #0
10003b02:	0004      	movs	r4, r0
10003b04:	0008      	movs	r0, r1
10003b06:	603a      	str	r2, [r7, #0]
10003b08:	0019      	movs	r1, r3
10003b0a:	1dfb      	adds	r3, r7, #7
10003b0c:	1c22      	adds	r2, r4, #0
10003b0e:	701a      	strb	r2, [r3, #0]
10003b10:	1dbb      	adds	r3, r7, #6
10003b12:	1c02      	adds	r2, r0, #0
10003b14:	701a      	strb	r2, [r3, #0]
10003b16:	1d3b      	adds	r3, r7, #4
10003b18:	1c0a      	adds	r2, r1, #0
10003b1a:	801a      	strh	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
10003b1c:	250f      	movs	r5, #15
10003b1e:	197c      	adds	r4, r7, r5
10003b20:	1dbb      	adds	r3, r7, #6
10003b22:	781b      	ldrb	r3, [r3, #0]
10003b24:	0018      	movs	r0, r3
10003b26:	f7fe fc3e 	bl	100023a6 <tu_edpt_number>
10003b2a:	0003      	movs	r3, r0
10003b2c:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
10003b2e:	260e      	movs	r6, #14
10003b30:	19bc      	adds	r4, r7, r6
10003b32:	1dbb      	adds	r3, r7, #6
10003b34:	781b      	ldrb	r3, [r3, #0]
10003b36:	0018      	movs	r0, r3
10003b38:	f7fe fc27 	bl	1000238a <tu_edpt_dir>
10003b3c:	0003      	movs	r3, r0
10003b3e:	7023      	strb	r3, [r4, #0]
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10003b40:	197b      	adds	r3, r7, r5
10003b42:	781a      	ldrb	r2, [r3, #0]
10003b44:	19bb      	adds	r3, r7, r6
10003b46:	781b      	ldrb	r3, [r3, #0]
10003b48:	492a      	ldr	r1, [pc, #168]	; (10003bf4 <usbd_edpt_xfer+0xf8>)
10003b4a:	2030      	movs	r0, #48	; 0x30
10003b4c:	0052      	lsls	r2, r2, #1
10003b4e:	188a      	adds	r2, r1, r2
10003b50:	18d3      	adds	r3, r2, r3
10003b52:	181b      	adds	r3, r3, r0
10003b54:	78db      	ldrb	r3, [r3, #3]
10003b56:	07db      	lsls	r3, r3, #31
10003b58:	0fdb      	lsrs	r3, r3, #31
10003b5a:	b2db      	uxtb	r3, r3
10003b5c:	2b00      	cmp	r3, #0
10003b5e:	d007      	beq.n	10003b70 <usbd_edpt_xfer+0x74>
10003b60:	4a25      	ldr	r2, [pc, #148]	; (10003bf8 <usbd_edpt_xfer+0xfc>)
10003b62:	4926      	ldr	r1, [pc, #152]	; (10003bfc <usbd_edpt_xfer+0x100>)
10003b64:	4b26      	ldr	r3, [pc, #152]	; (10003c00 <usbd_edpt_xfer+0x104>)
10003b66:	0018      	movs	r0, r3
10003b68:	f007 fb3a 	bl	1000b1e0 <__wrap_printf>
10003b6c:	2300      	movs	r3, #0
10003b6e:	e03c      	b.n	10003bea <usbd_edpt_xfer+0xee>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
10003b70:	230f      	movs	r3, #15
10003b72:	18fb      	adds	r3, r7, r3
10003b74:	781a      	ldrb	r2, [r3, #0]
10003b76:	230e      	movs	r3, #14
10003b78:	18fb      	adds	r3, r7, r3
10003b7a:	781b      	ldrb	r3, [r3, #0]
10003b7c:	491d      	ldr	r1, [pc, #116]	; (10003bf4 <usbd_edpt_xfer+0xf8>)
10003b7e:	2030      	movs	r0, #48	; 0x30
10003b80:	0052      	lsls	r2, r2, #1
10003b82:	188a      	adds	r2, r1, r2
10003b84:	18d3      	adds	r3, r2, r3
10003b86:	181a      	adds	r2, r3, r0
10003b88:	78d3      	ldrb	r3, [r2, #3]
10003b8a:	2101      	movs	r1, #1
10003b8c:	430b      	orrs	r3, r1
10003b8e:	70d3      	strb	r3, [r2, #3]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
10003b90:	1d3b      	adds	r3, r7, #4
10003b92:	881c      	ldrh	r4, [r3, #0]
10003b94:	683a      	ldr	r2, [r7, #0]
10003b96:	1dbb      	adds	r3, r7, #6
10003b98:	7819      	ldrb	r1, [r3, #0]
10003b9a:	1dfb      	adds	r3, r7, #7
10003b9c:	7818      	ldrb	r0, [r3, #0]
10003b9e:	0023      	movs	r3, r4
10003ba0:	f000 ff50 	bl	10004a44 <dcd_edpt_xfer>
10003ba4:	1e03      	subs	r3, r0, #0
10003ba6:	d001      	beq.n	10003bac <usbd_edpt_xfer+0xb0>
  {
    return true;
10003ba8:	2301      	movs	r3, #1
10003baa:	e01e      	b.n	10003bea <usbd_edpt_xfer+0xee>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
10003bac:	240f      	movs	r4, #15
10003bae:	193b      	adds	r3, r7, r4
10003bb0:	781a      	ldrb	r2, [r3, #0]
10003bb2:	250e      	movs	r5, #14
10003bb4:	197b      	adds	r3, r7, r5
10003bb6:	781b      	ldrb	r3, [r3, #0]
10003bb8:	490e      	ldr	r1, [pc, #56]	; (10003bf4 <usbd_edpt_xfer+0xf8>)
10003bba:	2030      	movs	r0, #48	; 0x30
10003bbc:	0052      	lsls	r2, r2, #1
10003bbe:	188a      	adds	r2, r1, r2
10003bc0:	18d3      	adds	r3, r2, r3
10003bc2:	181a      	adds	r2, r3, r0
10003bc4:	78d3      	ldrb	r3, [r2, #3]
10003bc6:	2101      	movs	r1, #1
10003bc8:	438b      	bics	r3, r1
10003bca:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
10003bcc:	193b      	adds	r3, r7, r4
10003bce:	781a      	ldrb	r2, [r3, #0]
10003bd0:	197b      	adds	r3, r7, r5
10003bd2:	781b      	ldrb	r3, [r3, #0]
10003bd4:	4907      	ldr	r1, [pc, #28]	; (10003bf4 <usbd_edpt_xfer+0xf8>)
10003bd6:	2030      	movs	r0, #48	; 0x30
10003bd8:	0052      	lsls	r2, r2, #1
10003bda:	188a      	adds	r2, r1, r2
10003bdc:	18d3      	adds	r3, r2, r3
10003bde:	181a      	adds	r2, r3, r0
10003be0:	78d3      	ldrb	r3, [r2, #3]
10003be2:	2104      	movs	r1, #4
10003be4:	438b      	bics	r3, r1
10003be6:	70d3      	strb	r3, [r2, #3]
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
10003be8:	2300      	movs	r3, #0
  }
}
10003bea:	0018      	movs	r0, r3
10003bec:	46bd      	mov	sp, r7
10003bee:	b005      	add	sp, #20
10003bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003bf2:	46c0      	nop			; (mov r8, r8)
10003bf4:	20000a64 	.word	0x20000a64
10003bf8:	0000050a 	.word	0x0000050a
10003bfc:	1000d240 	.word	0x1000d240
10003c00:	1000d0dc 	.word	0x1000d0dc

10003c04 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
10003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
10003c06:	b085      	sub	sp, #20
10003c08:	af00      	add	r7, sp, #0
10003c0a:	0002      	movs	r2, r0
10003c0c:	1dfb      	adds	r3, r7, #7
10003c0e:	701a      	strb	r2, [r3, #0]
10003c10:	1dbb      	adds	r3, r7, #6
10003c12:	1c0a      	adds	r2, r1, #0
10003c14:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
10003c16:	250f      	movs	r5, #15
10003c18:	197c      	adds	r4, r7, r5
10003c1a:	1dbb      	adds	r3, r7, #6
10003c1c:	781b      	ldrb	r3, [r3, #0]
10003c1e:	0018      	movs	r0, r3
10003c20:	f7fe fbc1 	bl	100023a6 <tu_edpt_number>
10003c24:	0003      	movs	r3, r0
10003c26:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
10003c28:	260e      	movs	r6, #14
10003c2a:	19bc      	adds	r4, r7, r6
10003c2c:	1dbb      	adds	r3, r7, #6
10003c2e:	781b      	ldrb	r3, [r3, #0]
10003c30:	0018      	movs	r0, r3
10003c32:	f7fe fbaa 	bl	1000238a <tu_edpt_dir>
10003c36:	0003      	movs	r3, r0
10003c38:	7023      	strb	r3, [r4, #0]

  return _usbd_dev.ep_status[epnum][dir].busy;
10003c3a:	197b      	adds	r3, r7, r5
10003c3c:	781a      	ldrb	r2, [r3, #0]
10003c3e:	19bb      	adds	r3, r7, r6
10003c40:	781b      	ldrb	r3, [r3, #0]
10003c42:	4907      	ldr	r1, [pc, #28]	; (10003c60 <usbd_edpt_busy+0x5c>)
10003c44:	2030      	movs	r0, #48	; 0x30
10003c46:	0052      	lsls	r2, r2, #1
10003c48:	188a      	adds	r2, r1, r2
10003c4a:	18d3      	adds	r3, r2, r3
10003c4c:	181b      	adds	r3, r3, r0
10003c4e:	78db      	ldrb	r3, [r3, #3]
10003c50:	07db      	lsls	r3, r3, #31
10003c52:	0fdb      	lsrs	r3, r3, #31
10003c54:	b2db      	uxtb	r3, r3
}
10003c56:	0018      	movs	r0, r3
10003c58:	46bd      	mov	sp, r7
10003c5a:	b005      	add	sp, #20
10003c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c5e:	46c0      	nop			; (mov r8, r8)
10003c60:	20000a64 	.word	0x20000a64

10003c64 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
10003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
10003c66:	b085      	sub	sp, #20
10003c68:	af00      	add	r7, sp, #0
10003c6a:	0002      	movs	r2, r0
10003c6c:	1dfb      	adds	r3, r7, #7
10003c6e:	701a      	strb	r2, [r3, #0]
10003c70:	1dbb      	adds	r3, r7, #6
10003c72:	1c0a      	adds	r2, r1, #0
10003c74:	701a      	strb	r2, [r3, #0]

  uint8_t const epnum = tu_edpt_number(ep_addr);
10003c76:	250f      	movs	r5, #15
10003c78:	197c      	adds	r4, r7, r5
10003c7a:	1dbb      	adds	r3, r7, #6
10003c7c:	781b      	ldrb	r3, [r3, #0]
10003c7e:	0018      	movs	r0, r3
10003c80:	f7fe fb91 	bl	100023a6 <tu_edpt_number>
10003c84:	0003      	movs	r3, r0
10003c86:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
10003c88:	260e      	movs	r6, #14
10003c8a:	19bc      	adds	r4, r7, r6
10003c8c:	1dbb      	adds	r3, r7, #6
10003c8e:	781b      	ldrb	r3, [r3, #0]
10003c90:	0018      	movs	r0, r3
10003c92:	f7fe fb7a 	bl	1000238a <tu_edpt_dir>
10003c96:	0003      	movs	r3, r0
10003c98:	7023      	strb	r3, [r4, #0]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
10003c9a:	002c      	movs	r4, r5
10003c9c:	193b      	adds	r3, r7, r4
10003c9e:	781a      	ldrb	r2, [r3, #0]
10003ca0:	0035      	movs	r5, r6
10003ca2:	197b      	adds	r3, r7, r5
10003ca4:	781b      	ldrb	r3, [r3, #0]
10003ca6:	491b      	ldr	r1, [pc, #108]	; (10003d14 <usbd_edpt_stall+0xb0>)
10003ca8:	2030      	movs	r0, #48	; 0x30
10003caa:	0052      	lsls	r2, r2, #1
10003cac:	188a      	adds	r2, r1, r2
10003cae:	18d3      	adds	r3, r2, r3
10003cb0:	181b      	adds	r3, r3, r0
10003cb2:	78db      	ldrb	r3, [r3, #3]
10003cb4:	079b      	lsls	r3, r3, #30
10003cb6:	0fdb      	lsrs	r3, r3, #31
10003cb8:	b2db      	uxtb	r3, r3
10003cba:	2201      	movs	r2, #1
10003cbc:	4053      	eors	r3, r2
10003cbe:	b2db      	uxtb	r3, r3
10003cc0:	2b00      	cmp	r3, #0
10003cc2:	d023      	beq.n	10003d0c <usbd_edpt_stall+0xa8>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
10003cc4:	1dbb      	adds	r3, r7, #6
10003cc6:	781a      	ldrb	r2, [r3, #0]
10003cc8:	1dfb      	adds	r3, r7, #7
10003cca:	781b      	ldrb	r3, [r3, #0]
10003ccc:	0011      	movs	r1, r2
10003cce:	0018      	movs	r0, r3
10003cd0:	f000 fee6 	bl	10004aa0 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
10003cd4:	193b      	adds	r3, r7, r4
10003cd6:	781a      	ldrb	r2, [r3, #0]
10003cd8:	197b      	adds	r3, r7, r5
10003cda:	781b      	ldrb	r3, [r3, #0]
10003cdc:	490d      	ldr	r1, [pc, #52]	; (10003d14 <usbd_edpt_stall+0xb0>)
10003cde:	2030      	movs	r0, #48	; 0x30
10003ce0:	0052      	lsls	r2, r2, #1
10003ce2:	188a      	adds	r2, r1, r2
10003ce4:	18d3      	adds	r3, r2, r3
10003ce6:	181a      	adds	r2, r3, r0
10003ce8:	78d3      	ldrb	r3, [r2, #3]
10003cea:	2102      	movs	r1, #2
10003cec:	430b      	orrs	r3, r1
10003cee:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
10003cf0:	193b      	adds	r3, r7, r4
10003cf2:	781a      	ldrb	r2, [r3, #0]
10003cf4:	197b      	adds	r3, r7, r5
10003cf6:	781b      	ldrb	r3, [r3, #0]
10003cf8:	4906      	ldr	r1, [pc, #24]	; (10003d14 <usbd_edpt_stall+0xb0>)
10003cfa:	2030      	movs	r0, #48	; 0x30
10003cfc:	0052      	lsls	r2, r2, #1
10003cfe:	188a      	adds	r2, r1, r2
10003d00:	18d3      	adds	r3, r2, r3
10003d02:	181a      	adds	r2, r3, r0
10003d04:	78d3      	ldrb	r3, [r2, #3]
10003d06:	2101      	movs	r1, #1
10003d08:	430b      	orrs	r3, r1
10003d0a:	70d3      	strb	r3, [r2, #3]
  }
}
10003d0c:	46c0      	nop			; (mov r8, r8)
10003d0e:	46bd      	mov	sp, r7
10003d10:	b005      	add	sp, #20
10003d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003d14:	20000a64 	.word	0x20000a64

10003d18 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
10003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d1a:	b085      	sub	sp, #20
10003d1c:	af00      	add	r7, sp, #0
10003d1e:	0002      	movs	r2, r0
10003d20:	1dfb      	adds	r3, r7, #7
10003d22:	701a      	strb	r2, [r3, #0]
10003d24:	1dbb      	adds	r3, r7, #6
10003d26:	1c0a      	adds	r2, r1, #0
10003d28:	701a      	strb	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
10003d2a:	250f      	movs	r5, #15
10003d2c:	197c      	adds	r4, r7, r5
10003d2e:	1dbb      	adds	r3, r7, #6
10003d30:	781b      	ldrb	r3, [r3, #0]
10003d32:	0018      	movs	r0, r3
10003d34:	f7fe fb37 	bl	100023a6 <tu_edpt_number>
10003d38:	0003      	movs	r3, r0
10003d3a:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
10003d3c:	260e      	movs	r6, #14
10003d3e:	19bc      	adds	r4, r7, r6
10003d40:	1dbb      	adds	r3, r7, #6
10003d42:	781b      	ldrb	r3, [r3, #0]
10003d44:	0018      	movs	r0, r3
10003d46:	f7fe fb20 	bl	1000238a <tu_edpt_dir>
10003d4a:	0003      	movs	r3, r0
10003d4c:	7023      	strb	r3, [r4, #0]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
10003d4e:	002c      	movs	r4, r5
10003d50:	193b      	adds	r3, r7, r4
10003d52:	781a      	ldrb	r2, [r3, #0]
10003d54:	0035      	movs	r5, r6
10003d56:	197b      	adds	r3, r7, r5
10003d58:	781b      	ldrb	r3, [r3, #0]
10003d5a:	491a      	ldr	r1, [pc, #104]	; (10003dc4 <usbd_edpt_clear_stall+0xac>)
10003d5c:	2030      	movs	r0, #48	; 0x30
10003d5e:	0052      	lsls	r2, r2, #1
10003d60:	188a      	adds	r2, r1, r2
10003d62:	18d3      	adds	r3, r2, r3
10003d64:	181b      	adds	r3, r3, r0
10003d66:	78db      	ldrb	r3, [r3, #3]
10003d68:	079b      	lsls	r3, r3, #30
10003d6a:	0fdb      	lsrs	r3, r3, #31
10003d6c:	b2db      	uxtb	r3, r3
10003d6e:	2b00      	cmp	r3, #0
10003d70:	d023      	beq.n	10003dba <usbd_edpt_clear_stall+0xa2>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
10003d72:	1dbb      	adds	r3, r7, #6
10003d74:	781a      	ldrb	r2, [r3, #0]
10003d76:	1dfb      	adds	r3, r7, #7
10003d78:	781b      	ldrb	r3, [r3, #0]
10003d7a:	0011      	movs	r1, r2
10003d7c:	0018      	movs	r0, r3
10003d7e:	f000 fec1 	bl	10004b04 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
10003d82:	193b      	adds	r3, r7, r4
10003d84:	781a      	ldrb	r2, [r3, #0]
10003d86:	197b      	adds	r3, r7, r5
10003d88:	781b      	ldrb	r3, [r3, #0]
10003d8a:	490e      	ldr	r1, [pc, #56]	; (10003dc4 <usbd_edpt_clear_stall+0xac>)
10003d8c:	2030      	movs	r0, #48	; 0x30
10003d8e:	0052      	lsls	r2, r2, #1
10003d90:	188a      	adds	r2, r1, r2
10003d92:	18d3      	adds	r3, r2, r3
10003d94:	181a      	adds	r2, r3, r0
10003d96:	78d3      	ldrb	r3, [r2, #3]
10003d98:	2102      	movs	r1, #2
10003d9a:	438b      	bics	r3, r1
10003d9c:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
10003d9e:	193b      	adds	r3, r7, r4
10003da0:	781a      	ldrb	r2, [r3, #0]
10003da2:	197b      	adds	r3, r7, r5
10003da4:	781b      	ldrb	r3, [r3, #0]
10003da6:	4907      	ldr	r1, [pc, #28]	; (10003dc4 <usbd_edpt_clear_stall+0xac>)
10003da8:	2030      	movs	r0, #48	; 0x30
10003daa:	0052      	lsls	r2, r2, #1
10003dac:	188a      	adds	r2, r1, r2
10003dae:	18d3      	adds	r3, r2, r3
10003db0:	181a      	adds	r2, r3, r0
10003db2:	78d3      	ldrb	r3, [r2, #3]
10003db4:	2101      	movs	r1, #1
10003db6:	438b      	bics	r3, r1
10003db8:	70d3      	strb	r3, [r2, #3]
  }
}
10003dba:	46c0      	nop			; (mov r8, r8)
10003dbc:	46bd      	mov	sp, r7
10003dbe:	b005      	add	sp, #20
10003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003dc2:	46c0      	nop			; (mov r8, r8)
10003dc4:	20000a64 	.word	0x20000a64

10003dc8 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
10003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003dca:	b085      	sub	sp, #20
10003dcc:	af00      	add	r7, sp, #0
10003dce:	0002      	movs	r2, r0
10003dd0:	1dfb      	adds	r3, r7, #7
10003dd2:	701a      	strb	r2, [r3, #0]
10003dd4:	1dbb      	adds	r3, r7, #6
10003dd6:	1c0a      	adds	r2, r1, #0
10003dd8:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
10003dda:	250f      	movs	r5, #15
10003ddc:	197c      	adds	r4, r7, r5
10003dde:	1dbb      	adds	r3, r7, #6
10003de0:	781b      	ldrb	r3, [r3, #0]
10003de2:	0018      	movs	r0, r3
10003de4:	f7fe fadf 	bl	100023a6 <tu_edpt_number>
10003de8:	0003      	movs	r3, r0
10003dea:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
10003dec:	260e      	movs	r6, #14
10003dee:	19bc      	adds	r4, r7, r6
10003df0:	1dbb      	adds	r3, r7, #6
10003df2:	781b      	ldrb	r3, [r3, #0]
10003df4:	0018      	movs	r0, r3
10003df6:	f7fe fac8 	bl	1000238a <tu_edpt_dir>
10003dfa:	0003      	movs	r3, r0
10003dfc:	7023      	strb	r3, [r4, #0]

  return _usbd_dev.ep_status[epnum][dir].stalled;
10003dfe:	197b      	adds	r3, r7, r5
10003e00:	781a      	ldrb	r2, [r3, #0]
10003e02:	19bb      	adds	r3, r7, r6
10003e04:	781b      	ldrb	r3, [r3, #0]
10003e06:	4907      	ldr	r1, [pc, #28]	; (10003e24 <usbd_edpt_stalled+0x5c>)
10003e08:	2030      	movs	r0, #48	; 0x30
10003e0a:	0052      	lsls	r2, r2, #1
10003e0c:	188a      	adds	r2, r1, r2
10003e0e:	18d3      	adds	r3, r2, r3
10003e10:	181b      	adds	r3, r3, r0
10003e12:	78db      	ldrb	r3, [r3, #3]
10003e14:	079b      	lsls	r3, r3, #30
10003e16:	0fdb      	lsrs	r3, r3, #31
10003e18:	b2db      	uxtb	r3, r3
}
10003e1a:	0018      	movs	r0, r3
10003e1c:	46bd      	mov	sp, r7
10003e1e:	b005      	add	sp, #20
10003e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e22:	46c0      	nop			; (mov r8, r8)
10003e24:	20000a64 	.word	0x20000a64

10003e28 <tu_edpt_dir>:
{
10003e28:	b580      	push	{r7, lr}
10003e2a:	b082      	sub	sp, #8
10003e2c:	af00      	add	r7, sp, #0
10003e2e:	0002      	movs	r2, r0
10003e30:	1dfb      	adds	r3, r7, #7
10003e32:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10003e34:	1dfb      	adds	r3, r7, #7
10003e36:	781b      	ldrb	r3, [r3, #0]
10003e38:	09db      	lsrs	r3, r3, #7
10003e3a:	b2db      	uxtb	r3, r3
}
10003e3c:	0018      	movs	r0, r3
10003e3e:	46bd      	mov	sp, r7
10003e40:	b002      	add	sp, #8
10003e42:	bd80      	pop	{r7, pc}

10003e44 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
10003e44:	b580      	push	{r7, lr}
10003e46:	b084      	sub	sp, #16
10003e48:	af00      	add	r7, sp, #0
10003e4a:	0002      	movs	r2, r0
10003e4c:	6039      	str	r1, [r7, #0]
10003e4e:	1dfb      	adds	r3, r7, #7
10003e50:	701a      	strb	r2, [r3, #0]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10003e52:	683b      	ldr	r3, [r7, #0]
10003e54:	781b      	ldrb	r3, [r3, #0]
10003e56:	227f      	movs	r2, #127	; 0x7f
10003e58:	4393      	bics	r3, r2
10003e5a:	b2db      	uxtb	r3, r3
10003e5c:	2b00      	cmp	r3, #0
10003e5e:	d001      	beq.n	10003e64 <_status_stage_xact+0x20>
10003e60:	2200      	movs	r2, #0
10003e62:	e000      	b.n	10003e66 <_status_stage_xact+0x22>
10003e64:	2280      	movs	r2, #128	; 0x80
10003e66:	210f      	movs	r1, #15
10003e68:	187b      	adds	r3, r7, r1
10003e6a:	701a      	strb	r2, [r3, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
10003e6c:	187b      	adds	r3, r7, r1
10003e6e:	7819      	ldrb	r1, [r3, #0]
10003e70:	1dfb      	adds	r3, r7, #7
10003e72:	7818      	ldrb	r0, [r3, #0]
10003e74:	2300      	movs	r3, #0
10003e76:	2200      	movs	r2, #0
10003e78:	f7ff fe40 	bl	10003afc <usbd_edpt_xfer>
10003e7c:	0003      	movs	r3, r0
}
10003e7e:	0018      	movs	r0, r3
10003e80:	46bd      	mov	sp, r7
10003e82:	b004      	add	sp, #16
10003e84:	bd80      	pop	{r7, pc}
	...

10003e88 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
10003e88:	b580      	push	{r7, lr}
10003e8a:	b082      	sub	sp, #8
10003e8c:	af00      	add	r7, sp, #0
10003e8e:	0002      	movs	r2, r0
10003e90:	6039      	str	r1, [r7, #0]
10003e92:	1dfb      	adds	r3, r7, #7
10003e94:	701a      	strb	r2, [r3, #0]
  _ctrl_xfer.request       = (*request);
10003e96:	4a0e      	ldr	r2, [pc, #56]	; (10003ed0 <tud_control_status+0x48>)
10003e98:	683b      	ldr	r3, [r7, #0]
10003e9a:	0010      	movs	r0, r2
10003e9c:	0019      	movs	r1, r3
10003e9e:	2308      	movs	r3, #8
10003ea0:	001a      	movs	r2, r3
10003ea2:	f009 f85f 	bl	1000cf64 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10003ea6:	4b0a      	ldr	r3, [pc, #40]	; (10003ed0 <tud_control_status+0x48>)
10003ea8:	2200      	movs	r2, #0
10003eaa:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
10003eac:	4b08      	ldr	r3, [pc, #32]	; (10003ed0 <tud_control_status+0x48>)
10003eae:	2200      	movs	r2, #0
10003eb0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
10003eb2:	4b07      	ldr	r3, [pc, #28]	; (10003ed0 <tud_control_status+0x48>)
10003eb4:	2200      	movs	r2, #0
10003eb6:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
10003eb8:	683a      	ldr	r2, [r7, #0]
10003eba:	1dfb      	adds	r3, r7, #7
10003ebc:	781b      	ldrb	r3, [r3, #0]
10003ebe:	0011      	movs	r1, r2
10003ec0:	0018      	movs	r0, r3
10003ec2:	f7ff ffbf 	bl	10003e44 <_status_stage_xact>
10003ec6:	0003      	movs	r3, r0
}
10003ec8:	0018      	movs	r0, r3
10003eca:	46bd      	mov	sp, r7
10003ecc:	b002      	add	sp, #8
10003ece:	bd80      	pop	{r7, pc}
10003ed0:	200009c8 	.word	0x200009c8

10003ed4 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
10003ed4:	b590      	push	{r4, r7, lr}
10003ed6:	b085      	sub	sp, #20
10003ed8:	af00      	add	r7, sp, #0
10003eda:	0002      	movs	r2, r0
10003edc:	1dfb      	adds	r3, r7, #7
10003ede:	701a      	strb	r2, [r3, #0]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
10003ee0:	4b26      	ldr	r3, [pc, #152]	; (10003f7c <_data_stage_xact+0xa8>)
10003ee2:	899a      	ldrh	r2, [r3, #12]
10003ee4:	4b25      	ldr	r3, [pc, #148]	; (10003f7c <_data_stage_xact+0xa8>)
10003ee6:	89db      	ldrh	r3, [r3, #14]
10003ee8:	1ad3      	subs	r3, r2, r3
10003eea:	b29a      	uxth	r2, r3
10003eec:	210a      	movs	r1, #10
10003eee:	187b      	adds	r3, r7, r1
10003ef0:	801a      	strh	r2, [r3, #0]
10003ef2:	2008      	movs	r0, #8
10003ef4:	183b      	adds	r3, r7, r0
10003ef6:	2240      	movs	r2, #64	; 0x40
10003ef8:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10003efa:	187b      	adds	r3, r7, r1
10003efc:	183a      	adds	r2, r7, r0
10003efe:	8810      	ldrh	r0, [r2, #0]
10003f00:	881b      	ldrh	r3, [r3, #0]
10003f02:	b299      	uxth	r1, r3
10003f04:	b282      	uxth	r2, r0
10003f06:	4291      	cmp	r1, r2
10003f08:	d900      	bls.n	10003f0c <_data_stage_xact+0x38>
10003f0a:	1c03      	adds	r3, r0, #0
10003f0c:	b29a      	uxth	r2, r3
10003f0e:	210c      	movs	r1, #12
10003f10:	187b      	adds	r3, r7, r1
10003f12:	801a      	strh	r2, [r3, #0]

  uint8_t ep_addr = EDPT_CTRL_OUT;
10003f14:	200f      	movs	r0, #15
10003f16:	183b      	adds	r3, r7, r0
10003f18:	2200      	movs	r2, #0
10003f1a:	701a      	strb	r2, [r3, #0]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10003f1c:	4b17      	ldr	r3, [pc, #92]	; (10003f7c <_data_stage_xact+0xa8>)
10003f1e:	781b      	ldrb	r3, [r3, #0]
10003f20:	227f      	movs	r2, #127	; 0x7f
10003f22:	4393      	bics	r3, r2
10003f24:	b2db      	uxtb	r3, r3
10003f26:	2b00      	cmp	r3, #0
10003f28:	d00f      	beq.n	10003f4a <_data_stage_xact+0x76>
  {
    ep_addr = EDPT_CTRL_IN;
10003f2a:	183b      	adds	r3, r7, r0
10003f2c:	2280      	movs	r2, #128	; 0x80
10003f2e:	701a      	strb	r2, [r3, #0]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10003f30:	000a      	movs	r2, r1
10003f32:	18bb      	adds	r3, r7, r2
10003f34:	881b      	ldrh	r3, [r3, #0]
10003f36:	2b00      	cmp	r3, #0
10003f38:	d007      	beq.n	10003f4a <_data_stage_xact+0x76>
10003f3a:	4b10      	ldr	r3, [pc, #64]	; (10003f7c <_data_stage_xact+0xa8>)
10003f3c:	6899      	ldr	r1, [r3, #8]
10003f3e:	18bb      	adds	r3, r7, r2
10003f40:	881a      	ldrh	r2, [r3, #0]
10003f42:	4b0f      	ldr	r3, [pc, #60]	; (10003f80 <_data_stage_xact+0xac>)
10003f44:	0018      	movs	r0, r3
10003f46:	f009 f80d 	bl	1000cf64 <__wrap___aeabi_memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10003f4a:	230c      	movs	r3, #12
10003f4c:	18fb      	adds	r3, r7, r3
10003f4e:	881b      	ldrh	r3, [r3, #0]
10003f50:	2b00      	cmp	r3, #0
10003f52:	d001      	beq.n	10003f58 <_data_stage_xact+0x84>
10003f54:	4a0a      	ldr	r2, [pc, #40]	; (10003f80 <_data_stage_xact+0xac>)
10003f56:	e000      	b.n	10003f5a <_data_stage_xact+0x86>
10003f58:	2200      	movs	r2, #0
10003f5a:	230c      	movs	r3, #12
10003f5c:	18fb      	adds	r3, r7, r3
10003f5e:	881c      	ldrh	r4, [r3, #0]
10003f60:	230f      	movs	r3, #15
10003f62:	18fb      	adds	r3, r7, r3
10003f64:	7819      	ldrb	r1, [r3, #0]
10003f66:	1dfb      	adds	r3, r7, #7
10003f68:	7818      	ldrb	r0, [r3, #0]
10003f6a:	0023      	movs	r3, r4
10003f6c:	f7ff fdc6 	bl	10003afc <usbd_edpt_xfer>
10003f70:	0003      	movs	r3, r0
}
10003f72:	0018      	movs	r0, r3
10003f74:	46bd      	mov	sp, r7
10003f76:	b005      	add	sp, #20
10003f78:	bd90      	pop	{r4, r7, pc}
10003f7a:	46c0      	nop			; (mov r8, r8)
10003f7c:	200009c8 	.word	0x200009c8
10003f80:	20000a24 	.word	0x20000a24

10003f84 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
10003f84:	b590      	push	{r4, r7, lr}
10003f86:	b087      	sub	sp, #28
10003f88:	af00      	add	r7, sp, #0
10003f8a:	60b9      	str	r1, [r7, #8]
10003f8c:	607a      	str	r2, [r7, #4]
10003f8e:	0019      	movs	r1, r3
10003f90:	230f      	movs	r3, #15
10003f92:	18fb      	adds	r3, r7, r3
10003f94:	1c02      	adds	r2, r0, #0
10003f96:	701a      	strb	r2, [r3, #0]
10003f98:	240c      	movs	r4, #12
10003f9a:	193b      	adds	r3, r7, r4
10003f9c:	1c0a      	adds	r2, r1, #0
10003f9e:	801a      	strh	r2, [r3, #0]
  _ctrl_xfer.request       = (*request);
10003fa0:	4a38      	ldr	r2, [pc, #224]	; (10004084 <tud_control_xfer+0x100>)
10003fa2:	68bb      	ldr	r3, [r7, #8]
10003fa4:	0010      	movs	r0, r2
10003fa6:	0019      	movs	r1, r3
10003fa8:	2308      	movs	r3, #8
10003faa:	001a      	movs	r2, r3
10003fac:	f008 ffda 	bl	1000cf64 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
10003fb0:	4b34      	ldr	r3, [pc, #208]	; (10004084 <tud_control_xfer+0x100>)
10003fb2:	687a      	ldr	r2, [r7, #4]
10003fb4:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0U;
10003fb6:	4b33      	ldr	r3, [pc, #204]	; (10004084 <tud_control_xfer+0x100>)
10003fb8:	2200      	movs	r2, #0
10003fba:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
10003fbc:	68bb      	ldr	r3, [r7, #8]
10003fbe:	799a      	ldrb	r2, [r3, #6]
10003fc0:	79db      	ldrb	r3, [r3, #7]
10003fc2:	021b      	lsls	r3, r3, #8
10003fc4:	4313      	orrs	r3, r2
10003fc6:	b299      	uxth	r1, r3
10003fc8:	2016      	movs	r0, #22
10003fca:	183b      	adds	r3, r7, r0
10003fcc:	193a      	adds	r2, r7, r4
10003fce:	8812      	ldrh	r2, [r2, #0]
10003fd0:	801a      	strh	r2, [r3, #0]
10003fd2:	2414      	movs	r4, #20
10003fd4:	193b      	adds	r3, r7, r4
10003fd6:	1c0a      	adds	r2, r1, #0
10003fd8:	801a      	strh	r2, [r3, #0]
10003fda:	183b      	adds	r3, r7, r0
10003fdc:	193a      	adds	r2, r7, r4
10003fde:	8810      	ldrh	r0, [r2, #0]
10003fe0:	881b      	ldrh	r3, [r3, #0]
10003fe2:	b299      	uxth	r1, r3
10003fe4:	b282      	uxth	r2, r0
10003fe6:	4291      	cmp	r1, r2
10003fe8:	d900      	bls.n	10003fec <tud_control_xfer+0x68>
10003fea:	1c03      	adds	r3, r0, #0
10003fec:	b29a      	uxth	r2, r3
10003fee:	4b25      	ldr	r3, [pc, #148]	; (10004084 <tud_control_xfer+0x100>)
10003ff0:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
10003ff2:	68bb      	ldr	r3, [r7, #8]
10003ff4:	799a      	ldrb	r2, [r3, #6]
10003ff6:	79db      	ldrb	r3, [r3, #7]
10003ff8:	021b      	lsls	r3, r3, #8
10003ffa:	4313      	orrs	r3, r2
10003ffc:	b29b      	uxth	r3, r3
10003ffe:	2b00      	cmp	r3, #0
10004000:	d023      	beq.n	1000404a <tud_control_xfer+0xc6>
  {
    if(_ctrl_xfer.data_len > 0U)
10004002:	4b20      	ldr	r3, [pc, #128]	; (10004084 <tud_control_xfer+0x100>)
10004004:	899b      	ldrh	r3, [r3, #12]
10004006:	2b00      	cmp	r3, #0
10004008:	d00a      	beq.n	10004020 <tud_control_xfer+0x9c>
    {
      TU_ASSERT(buffer);
1000400a:	687b      	ldr	r3, [r7, #4]
1000400c:	2b00      	cmp	r3, #0
1000400e:	d107      	bne.n	10004020 <tud_control_xfer+0x9c>
10004010:	491d      	ldr	r1, [pc, #116]	; (10004088 <tud_control_xfer+0x104>)
10004012:	4b1e      	ldr	r3, [pc, #120]	; (1000408c <tud_control_xfer+0x108>)
10004014:	2273      	movs	r2, #115	; 0x73
10004016:	0018      	movs	r0, r3
10004018:	f007 f8e2 	bl	1000b1e0 <__wrap_printf>
1000401c:	2300      	movs	r3, #0
1000401e:	e02c      	b.n	1000407a <tud_control_xfer+0xf6>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
10004020:	230f      	movs	r3, #15
10004022:	18fb      	adds	r3, r7, r3
10004024:	781b      	ldrb	r3, [r3, #0]
10004026:	0018      	movs	r0, r3
10004028:	f7ff ff54 	bl	10003ed4 <_data_stage_xact>
1000402c:	0003      	movs	r3, r0
1000402e:	001a      	movs	r2, r3
10004030:	2301      	movs	r3, #1
10004032:	4053      	eors	r3, r2
10004034:	b2db      	uxtb	r3, r3
10004036:	2b00      	cmp	r3, #0
10004038:	d01e      	beq.n	10004078 <tud_control_xfer+0xf4>
1000403a:	4913      	ldr	r1, [pc, #76]	; (10004088 <tud_control_xfer+0x104>)
1000403c:	4b13      	ldr	r3, [pc, #76]	; (1000408c <tud_control_xfer+0x108>)
1000403e:	2279      	movs	r2, #121	; 0x79
10004040:	0018      	movs	r0, r3
10004042:	f007 f8cd 	bl	1000b1e0 <__wrap_printf>
10004046:	2300      	movs	r3, #0
10004048:	e017      	b.n	1000407a <tud_control_xfer+0xf6>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
1000404a:	68ba      	ldr	r2, [r7, #8]
1000404c:	230f      	movs	r3, #15
1000404e:	18fb      	adds	r3, r7, r3
10004050:	781b      	ldrb	r3, [r3, #0]
10004052:	0011      	movs	r1, r2
10004054:	0018      	movs	r0, r3
10004056:	f7ff fef5 	bl	10003e44 <_status_stage_xact>
1000405a:	0003      	movs	r3, r0
1000405c:	001a      	movs	r2, r3
1000405e:	2301      	movs	r3, #1
10004060:	4053      	eors	r3, r2
10004062:	b2db      	uxtb	r3, r3
10004064:	2b00      	cmp	r3, #0
10004066:	d007      	beq.n	10004078 <tud_control_xfer+0xf4>
10004068:	4907      	ldr	r1, [pc, #28]	; (10004088 <tud_control_xfer+0x104>)
1000406a:	4b08      	ldr	r3, [pc, #32]	; (1000408c <tud_control_xfer+0x108>)
1000406c:	227e      	movs	r2, #126	; 0x7e
1000406e:	0018      	movs	r0, r3
10004070:	f007 f8b6 	bl	1000b1e0 <__wrap_printf>
10004074:	2300      	movs	r3, #0
10004076:	e000      	b.n	1000407a <tud_control_xfer+0xf6>
  }

  return true;
10004078:	2301      	movs	r3, #1
}
1000407a:	0018      	movs	r0, r3
1000407c:	46bd      	mov	sp, r7
1000407e:	b007      	add	sp, #28
10004080:	bd90      	pop	{r4, r7, pc}
10004082:	46c0      	nop			; (mov r8, r8)
10004084:	200009c8 	.word	0x200009c8
10004088:	1000d268 	.word	0x1000d268
1000408c:	1000d250 	.word	0x1000d250

10004090 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
10004090:	b580      	push	{r7, lr}
10004092:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
10004094:	4b04      	ldr	r3, [pc, #16]	; (100040a8 <usbd_control_reset+0x18>)
10004096:	2214      	movs	r2, #20
10004098:	2100      	movs	r1, #0
1000409a:	0018      	movs	r0, r3
1000409c:	f008 ff5c 	bl	1000cf58 <__wrap_memset>
}
100040a0:	46c0      	nop			; (mov r8, r8)
100040a2:	46bd      	mov	sp, r7
100040a4:	bd80      	pop	{r7, pc}
100040a6:	46c0      	nop			; (mov r8, r8)
100040a8:	200009c8 	.word	0x200009c8

100040ac <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
100040ac:	b580      	push	{r7, lr}
100040ae:	b082      	sub	sp, #8
100040b0:	af00      	add	r7, sp, #0
100040b2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
100040b4:	4b03      	ldr	r3, [pc, #12]	; (100040c4 <usbd_control_set_complete_callback+0x18>)
100040b6:	687a      	ldr	r2, [r7, #4]
100040b8:	611a      	str	r2, [r3, #16]
}
100040ba:	46c0      	nop			; (mov r8, r8)
100040bc:	46bd      	mov	sp, r7
100040be:	b002      	add	sp, #8
100040c0:	bd80      	pop	{r7, pc}
100040c2:	46c0      	nop			; (mov r8, r8)
100040c4:	200009c8 	.word	0x200009c8

100040c8 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
100040c8:	b580      	push	{r7, lr}
100040ca:	b082      	sub	sp, #8
100040cc:	af00      	add	r7, sp, #0
100040ce:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
100040d0:	4a0a      	ldr	r2, [pc, #40]	; (100040fc <usbd_control_set_request+0x34>)
100040d2:	687b      	ldr	r3, [r7, #4]
100040d4:	0010      	movs	r0, r2
100040d6:	0019      	movs	r1, r3
100040d8:	2308      	movs	r3, #8
100040da:	001a      	movs	r2, r3
100040dc:	f008 ff42 	bl	1000cf64 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
100040e0:	4b06      	ldr	r3, [pc, #24]	; (100040fc <usbd_control_set_request+0x34>)
100040e2:	2200      	movs	r2, #0
100040e4:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
100040e6:	4b05      	ldr	r3, [pc, #20]	; (100040fc <usbd_control_set_request+0x34>)
100040e8:	2200      	movs	r2, #0
100040ea:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
100040ec:	4b03      	ldr	r3, [pc, #12]	; (100040fc <usbd_control_set_request+0x34>)
100040ee:	2200      	movs	r2, #0
100040f0:	819a      	strh	r2, [r3, #12]
}
100040f2:	46c0      	nop			; (mov r8, r8)
100040f4:	46bd      	mov	sp, r7
100040f6:	b002      	add	sp, #8
100040f8:	bd80      	pop	{r7, pc}
100040fa:	46c0      	nop			; (mov r8, r8)
100040fc:	200009c8 	.word	0x200009c8

10004100 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10004100:	b590      	push	{r4, r7, lr}
10004102:	b085      	sub	sp, #20
10004104:	af00      	add	r7, sp, #0
10004106:	0004      	movs	r4, r0
10004108:	0008      	movs	r0, r1
1000410a:	0011      	movs	r1, r2
1000410c:	603b      	str	r3, [r7, #0]
1000410e:	1dfb      	adds	r3, r7, #7
10004110:	1c22      	adds	r2, r4, #0
10004112:	701a      	strb	r2, [r3, #0]
10004114:	1dbb      	adds	r3, r7, #6
10004116:	1c02      	adds	r2, r0, #0
10004118:	701a      	strb	r2, [r3, #0]
1000411a:	1d7b      	adds	r3, r7, #5
1000411c:	1c0a      	adds	r2, r1, #0
1000411e:	701a      	strb	r2, [r3, #0]
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10004120:	1dbb      	adds	r3, r7, #6
10004122:	781b      	ldrb	r3, [r3, #0]
10004124:	0018      	movs	r0, r3
10004126:	f7ff fe7f 	bl	10003e28 <tu_edpt_dir>
1000412a:	0003      	movs	r3, r0
1000412c:	001a      	movs	r2, r3
1000412e:	4b55      	ldr	r3, [pc, #340]	; (10004284 <usbd_control_xfer_cb+0x184>)
10004130:	781b      	ldrb	r3, [r3, #0]
10004132:	061b      	lsls	r3, r3, #24
10004134:	0fdb      	lsrs	r3, r3, #31
10004136:	b2db      	uxtb	r3, r3
10004138:	429a      	cmp	r2, r3
1000413a:	d022      	beq.n	10004182 <usbd_control_xfer_cb+0x82>
  {
    TU_ASSERT(0 == xferred_bytes);
1000413c:	683b      	ldr	r3, [r7, #0]
1000413e:	2b00      	cmp	r3, #0
10004140:	d007      	beq.n	10004152 <usbd_control_xfer_cb+0x52>
10004142:	4951      	ldr	r1, [pc, #324]	; (10004288 <usbd_control_xfer_cb+0x188>)
10004144:	4b51      	ldr	r3, [pc, #324]	; (1000428c <usbd_control_xfer_cb+0x18c>)
10004146:	22ab      	movs	r2, #171	; 0xab
10004148:	0018      	movs	r0, r3
1000414a:	f007 f849 	bl	1000b1e0 <__wrap_printf>
1000414e:	2300      	movs	r3, #0
10004150:	e093      	b.n	1000427a <usbd_control_xfer_cb+0x17a>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10004152:	4b4f      	ldr	r3, [pc, #316]	; (10004290 <usbd_control_xfer_cb+0x190>)
10004154:	2b00      	cmp	r3, #0
10004156:	d006      	beq.n	10004166 <usbd_control_xfer_cb+0x66>
10004158:	4a4a      	ldr	r2, [pc, #296]	; (10004284 <usbd_control_xfer_cb+0x184>)
1000415a:	1dfb      	adds	r3, r7, #7
1000415c:	781b      	ldrb	r3, [r3, #0]
1000415e:	0011      	movs	r1, r2
10004160:	0018      	movs	r0, r3
10004162:	f000 fc0b 	bl	1000497c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb)
10004166:	4b47      	ldr	r3, [pc, #284]	; (10004284 <usbd_control_xfer_cb+0x184>)
10004168:	691b      	ldr	r3, [r3, #16]
1000416a:	2b00      	cmp	r3, #0
1000416c:	d007      	beq.n	1000417e <usbd_control_xfer_cb+0x7e>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
1000416e:	4b45      	ldr	r3, [pc, #276]	; (10004284 <usbd_control_xfer_cb+0x184>)
10004170:	691b      	ldr	r3, [r3, #16]
10004172:	4944      	ldr	r1, [pc, #272]	; (10004284 <usbd_control_xfer_cb+0x184>)
10004174:	1dfa      	adds	r2, r7, #7
10004176:	7810      	ldrb	r0, [r2, #0]
10004178:	000a      	movs	r2, r1
1000417a:	2102      	movs	r1, #2
1000417c:	4798      	blx	r3
    }

    return true;
1000417e:	2301      	movs	r3, #1
10004180:	e07b      	b.n	1000427a <usbd_control_xfer_cb+0x17a>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
10004182:	4b40      	ldr	r3, [pc, #256]	; (10004284 <usbd_control_xfer_cb+0x184>)
10004184:	781b      	ldrb	r3, [r3, #0]
10004186:	227f      	movs	r2, #127	; 0x7f
10004188:	4393      	bics	r3, r2
1000418a:	b2db      	uxtb	r3, r3
1000418c:	2b00      	cmp	r3, #0
1000418e:	d10c      	bne.n	100041aa <usbd_control_xfer_cb+0xaa>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
10004190:	4b3c      	ldr	r3, [pc, #240]	; (10004284 <usbd_control_xfer_cb+0x184>)
10004192:	689b      	ldr	r3, [r3, #8]
10004194:	2b00      	cmp	r3, #0
10004196:	d101      	bne.n	1000419c <usbd_control_xfer_cb+0x9c>
10004198:	2300      	movs	r3, #0
1000419a:	e06e      	b.n	1000427a <usbd_control_xfer_cb+0x17a>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
1000419c:	4b39      	ldr	r3, [pc, #228]	; (10004284 <usbd_control_xfer_cb+0x184>)
1000419e:	689b      	ldr	r3, [r3, #8]
100041a0:	683a      	ldr	r2, [r7, #0]
100041a2:	493c      	ldr	r1, [pc, #240]	; (10004294 <usbd_control_xfer_cb+0x194>)
100041a4:	0018      	movs	r0, r3
100041a6:	f008 fedd 	bl	1000cf64 <__wrap___aeabi_memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += xferred_bytes;
100041aa:	4b36      	ldr	r3, [pc, #216]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041ac:	89da      	ldrh	r2, [r3, #14]
100041ae:	683b      	ldr	r3, [r7, #0]
100041b0:	b29b      	uxth	r3, r3
100041b2:	18d3      	adds	r3, r2, r3
100041b4:	b29a      	uxth	r2, r3
100041b6:	4b33      	ldr	r3, [pc, #204]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041b8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
100041ba:	4b32      	ldr	r3, [pc, #200]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041bc:	689a      	ldr	r2, [r3, #8]
100041be:	683b      	ldr	r3, [r7, #0]
100041c0:	18d2      	adds	r2, r2, r3
100041c2:	4b30      	ldr	r3, [pc, #192]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041c4:	609a      	str	r2, [r3, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
100041c6:	4b2f      	ldr	r3, [pc, #188]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041c8:	88da      	ldrh	r2, [r3, #6]
100041ca:	4b2e      	ldr	r3, [pc, #184]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041cc:	89db      	ldrh	r3, [r3, #14]
100041ce:	429a      	cmp	r2, r3
100041d0:	d002      	beq.n	100041d8 <usbd_control_xfer_cb+0xd8>
100041d2:	683b      	ldr	r3, [r7, #0]
100041d4:	2b3f      	cmp	r3, #63	; 0x3f
100041d6:	d83a      	bhi.n	1000424e <usbd_control_xfer_cb+0x14e>
  {
    // DATA stage is complete
    bool is_ok = true;
100041d8:	210f      	movs	r1, #15
100041da:	187b      	adds	r3, r7, r1
100041dc:	2201      	movs	r2, #1
100041de:	701a      	strb	r2, [r3, #0]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
100041e0:	4b28      	ldr	r3, [pc, #160]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041e2:	691b      	ldr	r3, [r3, #16]
100041e4:	2b00      	cmp	r3, #0
100041e6:	d00a      	beq.n	100041fe <usbd_control_xfer_cb+0xfe>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
100041e8:	4b26      	ldr	r3, [pc, #152]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041ea:	691b      	ldr	r3, [r3, #16]
100041ec:	187c      	adds	r4, r7, r1
100041ee:	4925      	ldr	r1, [pc, #148]	; (10004284 <usbd_control_xfer_cb+0x184>)
100041f0:	1dfa      	adds	r2, r7, #7
100041f2:	7810      	ldrb	r0, [r2, #0]
100041f4:	000a      	movs	r2, r1
100041f6:	2101      	movs	r1, #1
100041f8:	4798      	blx	r3
100041fa:	0003      	movs	r3, r0
100041fc:	7023      	strb	r3, [r4, #0]
    }

    if ( is_ok )
100041fe:	230f      	movs	r3, #15
10004200:	18fb      	adds	r3, r7, r3
10004202:	781b      	ldrb	r3, [r3, #0]
10004204:	2b00      	cmp	r3, #0
10004206:	d015      	beq.n	10004234 <usbd_control_xfer_cb+0x134>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
10004208:	4a1e      	ldr	r2, [pc, #120]	; (10004284 <usbd_control_xfer_cb+0x184>)
1000420a:	1dfb      	adds	r3, r7, #7
1000420c:	781b      	ldrb	r3, [r3, #0]
1000420e:	0011      	movs	r1, r2
10004210:	0018      	movs	r0, r3
10004212:	f7ff fe17 	bl	10003e44 <_status_stage_xact>
10004216:	0003      	movs	r3, r0
10004218:	001a      	movs	r2, r3
1000421a:	2301      	movs	r3, #1
1000421c:	4053      	eors	r3, r2
1000421e:	b2db      	uxtb	r3, r3
10004220:	2b00      	cmp	r3, #0
10004222:	d028      	beq.n	10004276 <usbd_control_xfer_cb+0x176>
10004224:	4918      	ldr	r1, [pc, #96]	; (10004288 <usbd_control_xfer_cb+0x188>)
10004226:	4b19      	ldr	r3, [pc, #100]	; (1000428c <usbd_control_xfer_cb+0x18c>)
10004228:	22d8      	movs	r2, #216	; 0xd8
1000422a:	0018      	movs	r0, r3
1000422c:	f006 ffd8 	bl	1000b1e0 <__wrap_printf>
10004230:	2300      	movs	r3, #0
10004232:	e022      	b.n	1000427a <usbd_control_xfer_cb+0x17a>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
10004234:	1dfb      	adds	r3, r7, #7
10004236:	781b      	ldrb	r3, [r3, #0]
10004238:	2100      	movs	r1, #0
1000423a:	0018      	movs	r0, r3
1000423c:	f000 fc30 	bl	10004aa0 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
10004240:	1dfb      	adds	r3, r7, #7
10004242:	781b      	ldrb	r3, [r3, #0]
10004244:	2180      	movs	r1, #128	; 0x80
10004246:	0018      	movs	r0, r3
10004248:	f000 fc2a 	bl	10004aa0 <dcd_edpt_stall>
  {
1000424c:	e013      	b.n	10004276 <usbd_control_xfer_cb+0x176>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
1000424e:	1dfb      	adds	r3, r7, #7
10004250:	781b      	ldrb	r3, [r3, #0]
10004252:	0018      	movs	r0, r3
10004254:	f7ff fe3e 	bl	10003ed4 <_data_stage_xact>
10004258:	0003      	movs	r3, r0
1000425a:	001a      	movs	r2, r3
1000425c:	2301      	movs	r3, #1
1000425e:	4053      	eors	r3, r2
10004260:	b2db      	uxtb	r3, r3
10004262:	2b00      	cmp	r3, #0
10004264:	d008      	beq.n	10004278 <usbd_control_xfer_cb+0x178>
10004266:	4908      	ldr	r1, [pc, #32]	; (10004288 <usbd_control_xfer_cb+0x188>)
10004268:	4b08      	ldr	r3, [pc, #32]	; (1000428c <usbd_control_xfer_cb+0x18c>)
1000426a:	22e3      	movs	r2, #227	; 0xe3
1000426c:	0018      	movs	r0, r3
1000426e:	f006 ffb7 	bl	1000b1e0 <__wrap_printf>
10004272:	2300      	movs	r3, #0
10004274:	e001      	b.n	1000427a <usbd_control_xfer_cb+0x17a>
  {
10004276:	46c0      	nop			; (mov r8, r8)
  }

  return true;
10004278:	2301      	movs	r3, #1
}
1000427a:	0018      	movs	r0, r3
1000427c:	46bd      	mov	sp, r7
1000427e:	b005      	add	sp, #20
10004280:	bd90      	pop	{r4, r7, pc}
10004282:	46c0      	nop			; (mov r8, r8)
10004284:	200009c8 	.word	0x200009c8
10004288:	1000d27c 	.word	0x1000d27c
1000428c:	1000d250 	.word	0x1000d250
10004290:	1000497d 	.word	0x1000497d
10004294:	20000a24 	.word	0x20000a24

10004298 <tu_edpt_dir>:
{
10004298:	b580      	push	{r7, lr}
1000429a:	b082      	sub	sp, #8
1000429c:	af00      	add	r7, sp, #0
1000429e:	0002      	movs	r2, r0
100042a0:	1dfb      	adds	r3, r7, #7
100042a2:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
100042a4:	1dfb      	adds	r3, r7, #7
100042a6:	781b      	ldrb	r3, [r3, #0]
100042a8:	09db      	lsrs	r3, r3, #7
100042aa:	b2db      	uxtb	r3, r3
}
100042ac:	0018      	movs	r0, r3
100042ae:	46bd      	mov	sp, r7
100042b0:	b002      	add	sp, #8
100042b2:	bd80      	pop	{r7, pc}

100042b4 <tu_edpt_number>:
{
100042b4:	b580      	push	{r7, lr}
100042b6:	b082      	sub	sp, #8
100042b8:	af00      	add	r7, sp, #0
100042ba:	0002      	movs	r2, r0
100042bc:	1dfb      	adds	r3, r7, #7
100042be:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
100042c0:	1dfb      	adds	r3, r7, #7
100042c2:	781b      	ldrb	r3, [r3, #0]
100042c4:	227f      	movs	r2, #127	; 0x7f
100042c6:	4013      	ands	r3, r2
100042c8:	b2db      	uxtb	r3, r3
}
100042ca:	0018      	movs	r0, r3
100042cc:	46bd      	mov	sp, r7
100042ce:	b002      	add	sp, #8
100042d0:	bd80      	pop	{r7, pc}

100042d2 <_hw_endpoint_buffer_control_set_value32>:

void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask);
static inline uint32_t _hw_endpoint_buffer_control_get_value32(struct hw_endpoint *ep) {
    return *ep->buffer_control;
}
static inline void _hw_endpoint_buffer_control_set_value32(struct hw_endpoint *ep, uint32_t value) {
100042d2:	b580      	push	{r7, lr}
100042d4:	b082      	sub	sp, #8
100042d6:	af00      	add	r7, sp, #0
100042d8:	6078      	str	r0, [r7, #4]
100042da:	6039      	str	r1, [r7, #0]
    return _hw_endpoint_buffer_control_update32(ep, 0, value);
100042dc:	683a      	ldr	r2, [r7, #0]
100042de:	687b      	ldr	r3, [r7, #4]
100042e0:	2100      	movs	r1, #0
100042e2:	0018      	movs	r0, r3
100042e4:	f000 fcde 	bl	10004ca4 <_hw_endpoint_buffer_control_update32>
}
100042e8:	46bd      	mov	sp, r7
100042ea:	b002      	add	sp, #8
100042ec:	bd80      	pop	{r7, pc}

100042ee <_hw_endpoint_buffer_control_clear_mask32>:
static inline void _hw_endpoint_buffer_control_set_mask32(struct hw_endpoint *ep, uint32_t value) {
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
}
static inline void _hw_endpoint_buffer_control_clear_mask32(struct hw_endpoint *ep, uint32_t value) {
100042ee:	b580      	push	{r7, lr}
100042f0:	b082      	sub	sp, #8
100042f2:	af00      	add	r7, sp, #0
100042f4:	6078      	str	r0, [r7, #4]
100042f6:	6039      	str	r1, [r7, #0]
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
100042f8:	683b      	ldr	r3, [r7, #0]
100042fa:	43d9      	mvns	r1, r3
100042fc:	687b      	ldr	r3, [r7, #4]
100042fe:	2200      	movs	r2, #0
10004300:	0018      	movs	r0, r3
10004302:	f000 fccf 	bl	10004ca4 <_hw_endpoint_buffer_control_update32>
}
10004306:	46bd      	mov	sp, r7
10004308:	b002      	add	sp, #8
1000430a:	bd80      	pop	{r7, pc}

1000430c <hw_data_offset>:

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
1000430c:	b580      	push	{r7, lr}
1000430e:	b082      	sub	sp, #8
10004310:	af00      	add	r7, sp, #0
10004312:	6078      	str	r0, [r7, #4]
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
10004314:	687b      	ldr	r3, [r7, #4]
10004316:	4a03      	ldr	r2, [pc, #12]	; (10004324 <hw_data_offset+0x18>)
10004318:	4053      	eors	r3, r2
}
1000431a:	0018      	movs	r0, r3
1000431c:	46bd      	mov	sp, r7
1000431e:	b002      	add	sp, #8
10004320:	bd80      	pop	{r7, pc}
10004322:	46c0      	nop			; (mov r8, r8)
10004324:	50100000 	.word	0x50100000

10004328 <hw_endpoint_get_by_num>:

// USB_MAX_ENDPOINTS Endpoints, direction TUSB_DIR_OUT for out and TUSB_DIR_IN for in.
static struct hw_endpoint hw_endpoints[USB_MAX_ENDPOINTS][2];

static inline struct hw_endpoint *hw_endpoint_get_by_num(uint8_t num, tusb_dir_t dir)
{
10004328:	b580      	push	{r7, lr}
1000432a:	b082      	sub	sp, #8
1000432c:	af00      	add	r7, sp, #0
1000432e:	0002      	movs	r2, r0
10004330:	1dfb      	adds	r3, r7, #7
10004332:	701a      	strb	r2, [r3, #0]
10004334:	1dbb      	adds	r3, r7, #6
10004336:	1c0a      	adds	r2, r1, #0
10004338:	701a      	strb	r2, [r3, #0]
  return &hw_endpoints[num][dir];
1000433a:	1dfb      	adds	r3, r7, #7
1000433c:	781a      	ldrb	r2, [r3, #0]
1000433e:	1dbb      	adds	r3, r7, #6
10004340:	781b      	ldrb	r3, [r3, #0]
10004342:	0052      	lsls	r2, r2, #1
10004344:	18d3      	adds	r3, r2, r3
10004346:	015a      	lsls	r2, r3, #5
10004348:	4b02      	ldr	r3, [pc, #8]	; (10004354 <hw_endpoint_get_by_num+0x2c>)
1000434a:	18d3      	adds	r3, r2, r3
}
1000434c:	0018      	movs	r0, r3
1000434e:	46bd      	mov	sp, r7
10004350:	b002      	add	sp, #8
10004352:	bd80      	pop	{r7, pc}
10004354:	20004dd8 	.word	0x20004dd8

10004358 <hw_endpoint_get_by_addr>:

static struct hw_endpoint *hw_endpoint_get_by_addr(uint8_t ep_addr)
{
10004358:	b5f0      	push	{r4, r5, r6, r7, lr}
1000435a:	b085      	sub	sp, #20
1000435c:	af00      	add	r7, sp, #0
1000435e:	0002      	movs	r2, r0
10004360:	1dfb      	adds	r3, r7, #7
10004362:	701a      	strb	r2, [r3, #0]
  uint8_t num = tu_edpt_number(ep_addr);
10004364:	250f      	movs	r5, #15
10004366:	197c      	adds	r4, r7, r5
10004368:	1dfb      	adds	r3, r7, #7
1000436a:	781b      	ldrb	r3, [r3, #0]
1000436c:	0018      	movs	r0, r3
1000436e:	f7ff ffa1 	bl	100042b4 <tu_edpt_number>
10004372:	0003      	movs	r3, r0
10004374:	7023      	strb	r3, [r4, #0]
  tusb_dir_t dir = tu_edpt_dir(ep_addr);
10004376:	260e      	movs	r6, #14
10004378:	19bc      	adds	r4, r7, r6
1000437a:	1dfb      	adds	r3, r7, #7
1000437c:	781b      	ldrb	r3, [r3, #0]
1000437e:	0018      	movs	r0, r3
10004380:	f7ff ff8a 	bl	10004298 <tu_edpt_dir>
10004384:	0003      	movs	r3, r0
10004386:	7023      	strb	r3, [r4, #0]
  return hw_endpoint_get_by_num(num, dir);
10004388:	19bb      	adds	r3, r7, r6
1000438a:	781a      	ldrb	r2, [r3, #0]
1000438c:	197b      	adds	r3, r7, r5
1000438e:	781b      	ldrb	r3, [r3, #0]
10004390:	0011      	movs	r1, r2
10004392:	0018      	movs	r0, r3
10004394:	f7ff ffc8 	bl	10004328 <hw_endpoint_get_by_num>
10004398:	0003      	movs	r3, r0
}
1000439a:	0018      	movs	r0, r3
1000439c:	46bd      	mov	sp, r7
1000439e:	b005      	add	sp, #20
100043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100043a4 <_hw_endpoint_alloc>:

static void _hw_endpoint_alloc(struct hw_endpoint *ep, uint8_t transfer_type)
{
100043a4:	b580      	push	{r7, lr}
100043a6:	b088      	sub	sp, #32
100043a8:	af00      	add	r7, sp, #0
100043aa:	6078      	str	r0, [r7, #4]
100043ac:	000a      	movs	r2, r1
100043ae:	1cfb      	adds	r3, r7, #3
100043b0:	701a      	strb	r2, [r3, #0]
  // size must be multiple of 64
  uint size = tu_div_ceil(ep->wMaxPacketSize, 64) * 64u;
100043b2:	687b      	ldr	r3, [r7, #4]
100043b4:	8b9b      	ldrh	r3, [r3, #28]
100043b6:	613b      	str	r3, [r7, #16]
100043b8:	2340      	movs	r3, #64	; 0x40
100043ba:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
100043bc:	693a      	ldr	r2, [r7, #16]
100043be:	68fb      	ldr	r3, [r7, #12]
100043c0:	18d3      	adds	r3, r2, r3
100043c2:	3b01      	subs	r3, #1
100043c4:	68f9      	ldr	r1, [r7, #12]
100043c6:	0018      	movs	r0, r3
100043c8:	f008 fa7a 	bl	1000c8c0 <__wrap___aeabi_uidiv>
100043cc:	0003      	movs	r3, r0
100043ce:	019b      	lsls	r3, r3, #6
100043d0:	61fb      	str	r3, [r7, #28]

  // double buffered Bulk endpoint
  if ( transfer_type == TUSB_XFER_BULK )
100043d2:	1cfb      	adds	r3, r7, #3
100043d4:	781b      	ldrb	r3, [r3, #0]
100043d6:	2b02      	cmp	r3, #2
100043d8:	d102      	bne.n	100043e0 <_hw_endpoint_alloc+0x3c>
  {
    size *= 2u;
100043da:	69fb      	ldr	r3, [r7, #28]
100043dc:	005b      	lsls	r3, r3, #1
100043de:	61fb      	str	r3, [r7, #28]
  }

  ep->hw_data_buf = next_buffer_ptr;
100043e0:	4b1e      	ldr	r3, [pc, #120]	; (1000445c <_hw_endpoint_alloc+0xb8>)
100043e2:	681a      	ldr	r2, [r3, #0]
100043e4:	687b      	ldr	r3, [r7, #4]
100043e6:	60da      	str	r2, [r3, #12]
  next_buffer_ptr += size;
100043e8:	4b1c      	ldr	r3, [pc, #112]	; (1000445c <_hw_endpoint_alloc+0xb8>)
100043ea:	681a      	ldr	r2, [r3, #0]
100043ec:	69fb      	ldr	r3, [r7, #28]
100043ee:	18d2      	adds	r2, r2, r3
100043f0:	4b1a      	ldr	r3, [pc, #104]	; (1000445c <_hw_endpoint_alloc+0xb8>)
100043f2:	601a      	str	r2, [r3, #0]

  assert(((uintptr_t )next_buffer_ptr & 0b111111u) == 0);
100043f4:	4b19      	ldr	r3, [pc, #100]	; (1000445c <_hw_endpoint_alloc+0xb8>)
100043f6:	681b      	ldr	r3, [r3, #0]
100043f8:	001a      	movs	r2, r3
100043fa:	233f      	movs	r3, #63	; 0x3f
100043fc:	4013      	ands	r3, r2
100043fe:	d005      	beq.n	1000440c <_hw_endpoint_alloc+0x68>
10004400:	4b17      	ldr	r3, [pc, #92]	; (10004460 <_hw_endpoint_alloc+0xbc>)
10004402:	4a18      	ldr	r2, [pc, #96]	; (10004464 <_hw_endpoint_alloc+0xc0>)
10004404:	4818      	ldr	r0, [pc, #96]	; (10004468 <_hw_endpoint_alloc+0xc4>)
10004406:	2154      	movs	r1, #84	; 0x54
10004408:	f006 fc90 	bl	1000ad2c <__assert_func>
  uint dpram_offset = hw_data_offset(ep->hw_data_buf);
1000440c:	687b      	ldr	r3, [r7, #4]
1000440e:	68db      	ldr	r3, [r3, #12]
10004410:	0018      	movs	r0, r3
10004412:	f7ff ff7b 	bl	1000430c <hw_data_offset>
10004416:	0003      	movs	r3, r0
10004418:	61bb      	str	r3, [r7, #24]
  assert(hw_data_offset(next_buffer_ptr) <= USB_DPRAM_MAX);
1000441a:	4b10      	ldr	r3, [pc, #64]	; (1000445c <_hw_endpoint_alloc+0xb8>)
1000441c:	681b      	ldr	r3, [r3, #0]
1000441e:	0018      	movs	r0, r3
10004420:	f7ff ff74 	bl	1000430c <hw_data_offset>
10004424:	0002      	movs	r2, r0
10004426:	2380      	movs	r3, #128	; 0x80
10004428:	015b      	lsls	r3, r3, #5
1000442a:	429a      	cmp	r2, r3
1000442c:	d905      	bls.n	1000443a <_hw_endpoint_alloc+0x96>
1000442e:	4b0f      	ldr	r3, [pc, #60]	; (1000446c <_hw_endpoint_alloc+0xc8>)
10004430:	4a0c      	ldr	r2, [pc, #48]	; (10004464 <_hw_endpoint_alloc+0xc0>)
10004432:	480d      	ldr	r0, [pc, #52]	; (10004468 <_hw_endpoint_alloc+0xc4>)
10004434:	2156      	movs	r1, #86	; 0x56
10004436:	f006 fc79 	bl	1000ad2c <__assert_func>

  pico_info("  Alloced %d bytes at offset 0x%x (0x%p)\r\n", size, dpram_offset, ep->hw_data_buf);

  // Fill in endpoint control register with buffer offset
  uint32_t const reg = EP_CTRL_ENABLE_BITS | ((uint)transfer_type << EP_CTRL_BUFFER_TYPE_LSB) | dpram_offset;
1000443a:	1cfb      	adds	r3, r7, #3
1000443c:	781b      	ldrb	r3, [r3, #0]
1000443e:	069a      	lsls	r2, r3, #26
10004440:	69bb      	ldr	r3, [r7, #24]
10004442:	4313      	orrs	r3, r2
10004444:	2280      	movs	r2, #128	; 0x80
10004446:	0612      	lsls	r2, r2, #24
10004448:	4313      	orrs	r3, r2
1000444a:	617b      	str	r3, [r7, #20]

  *ep->endpoint_control = reg;
1000444c:	687b      	ldr	r3, [r7, #4]
1000444e:	685b      	ldr	r3, [r3, #4]
10004450:	697a      	ldr	r2, [r7, #20]
10004452:	601a      	str	r2, [r3, #0]
}
10004454:	46c0      	nop			; (mov r8, r8)
10004456:	46bd      	mov	sp, r7
10004458:	b008      	add	sp, #32
1000445a:	bd80      	pop	{r7, pc}
1000445c:	200051dc 	.word	0x200051dc
10004460:	1000d294 	.word	0x1000d294
10004464:	1000d384 	.word	0x1000d384
10004468:	1000d2c4 	.word	0x1000d2c4
1000446c:	1000d330 	.word	0x1000d330

10004470 <hw_endpoint_init>:
    _hw_endpoint_close(ep);
}
#endif

static void hw_endpoint_init(uint8_t ep_addr, uint16_t wMaxPacketSize, uint8_t transfer_type)
{
10004470:	b5f0      	push	{r4, r5, r6, r7, lr}
10004472:	b085      	sub	sp, #20
10004474:	af00      	add	r7, sp, #0
10004476:	0004      	movs	r4, r0
10004478:	0008      	movs	r0, r1
1000447a:	0011      	movs	r1, r2
1000447c:	1dfb      	adds	r3, r7, #7
1000447e:	1c22      	adds	r2, r4, #0
10004480:	701a      	strb	r2, [r3, #0]
10004482:	1d3b      	adds	r3, r7, #4
10004484:	1c02      	adds	r2, r0, #0
10004486:	801a      	strh	r2, [r3, #0]
10004488:	1dbb      	adds	r3, r7, #6
1000448a:	1c0a      	adds	r2, r1, #0
1000448c:	701a      	strb	r2, [r3, #0]
  struct hw_endpoint *ep = hw_endpoint_get_by_addr(ep_addr);
1000448e:	1dfb      	adds	r3, r7, #7
10004490:	781b      	ldrb	r3, [r3, #0]
10004492:	0018      	movs	r0, r3
10004494:	f7ff ff60 	bl	10004358 <hw_endpoint_get_by_addr>
10004498:	0003      	movs	r3, r0
1000449a:	60fb      	str	r3, [r7, #12]

  const uint8_t num = tu_edpt_number(ep_addr);
1000449c:	260b      	movs	r6, #11
1000449e:	19bc      	adds	r4, r7, r6
100044a0:	1dfb      	adds	r3, r7, #7
100044a2:	781b      	ldrb	r3, [r3, #0]
100044a4:	0018      	movs	r0, r3
100044a6:	f7ff ff05 	bl	100042b4 <tu_edpt_number>
100044aa:	0003      	movs	r3, r0
100044ac:	7023      	strb	r3, [r4, #0]
  const tusb_dir_t dir = tu_edpt_dir(ep_addr);
100044ae:	250a      	movs	r5, #10
100044b0:	197c      	adds	r4, r7, r5
100044b2:	1dfb      	adds	r3, r7, #7
100044b4:	781b      	ldrb	r3, [r3, #0]
100044b6:	0018      	movs	r0, r3
100044b8:	f7ff feee 	bl	10004298 <tu_edpt_dir>
100044bc:	0003      	movs	r3, r0
100044be:	7023      	strb	r3, [r4, #0]

  ep->ep_addr = ep_addr;
100044c0:	68fb      	ldr	r3, [r7, #12]
100044c2:	1dfa      	adds	r2, r7, #7
100044c4:	7812      	ldrb	r2, [r2, #0]
100044c6:	709a      	strb	r2, [r3, #2]

  // For device, IN is a tx transfer and OUT is an rx transfer
  ep->rx = (dir == TUSB_DIR_OUT);
100044c8:	0029      	movs	r1, r5
100044ca:	187b      	adds	r3, r7, r1
100044cc:	781b      	ldrb	r3, [r3, #0]
100044ce:	425a      	negs	r2, r3
100044d0:	4153      	adcs	r3, r2
100044d2:	b2da      	uxtb	r2, r3
100044d4:	68fb      	ldr	r3, [r7, #12]
100044d6:	705a      	strb	r2, [r3, #1]

  ep->next_pid = 0u;
100044d8:	68fb      	ldr	r3, [r7, #12]
100044da:	2200      	movs	r2, #0
100044dc:	70da      	strb	r2, [r3, #3]
  ep->wMaxPacketSize = wMaxPacketSize;
100044de:	68fb      	ldr	r3, [r7, #12]
100044e0:	1d3a      	adds	r2, r7, #4
100044e2:	8812      	ldrh	r2, [r2, #0]
100044e4:	839a      	strh	r2, [r3, #28]
  ep->transfer_type = transfer_type;
100044e6:	68fb      	ldr	r3, [r7, #12]
100044e8:	1dba      	adds	r2, r7, #6
100044ea:	7812      	ldrb	r2, [r2, #0]
100044ec:	779a      	strb	r2, [r3, #30]

  // Every endpoint has a buffer control register in dpram
  if ( dir == TUSB_DIR_IN )
100044ee:	187b      	adds	r3, r7, r1
100044f0:	781b      	ldrb	r3, [r3, #0]
100044f2:	2b01      	cmp	r3, #1
100044f4:	d107      	bne.n	10004506 <hw_endpoint_init+0x96>
  {
    ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100044f6:	19bb      	adds	r3, r7, r6
100044f8:	781b      	ldrb	r3, [r3, #0]
100044fa:	00db      	lsls	r3, r3, #3
100044fc:	4a20      	ldr	r2, [pc, #128]	; (10004580 <hw_endpoint_init+0x110>)
100044fe:	189a      	adds	r2, r3, r2
10004500:	68fb      	ldr	r3, [r7, #12]
10004502:	609a      	str	r2, [r3, #8]
10004504:	e008      	b.n	10004518 <hw_endpoint_init+0xa8>
  }
  else
  {
    ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10004506:	230b      	movs	r3, #11
10004508:	18fb      	adds	r3, r7, r3
1000450a:	781b      	ldrb	r3, [r3, #0]
1000450c:	00db      	lsls	r3, r3, #3
1000450e:	3304      	adds	r3, #4
10004510:	4a1b      	ldr	r2, [pc, #108]	; (10004580 <hw_endpoint_init+0x110>)
10004512:	189a      	adds	r2, r3, r2
10004514:	68fb      	ldr	r3, [r7, #12]
10004516:	609a      	str	r2, [r3, #8]
  }

  // Clear existing buffer control state
  *ep->buffer_control = 0;
10004518:	68fb      	ldr	r3, [r7, #12]
1000451a:	689b      	ldr	r3, [r3, #8]
1000451c:	2200      	movs	r2, #0
1000451e:	601a      	str	r2, [r3, #0]

  if ( num == 0 )
10004520:	230b      	movs	r3, #11
10004522:	18fb      	adds	r3, r7, r3
10004524:	781b      	ldrb	r3, [r3, #0]
10004526:	2b00      	cmp	r3, #0
10004528:	d106      	bne.n	10004538 <hw_endpoint_init+0xc8>
  {
    // EP0 has no endpoint control register because the buffer offsets are fixed
    ep->endpoint_control = NULL;
1000452a:	68fb      	ldr	r3, [r7, #12]
1000452c:	2200      	movs	r2, #0
1000452e:	605a      	str	r2, [r3, #4]

    // Buffer offset is fixed (also double buffered)
    ep->hw_data_buf = (uint8_t*) &usb_dpram->ep0_buf_a[0];
10004530:	68fb      	ldr	r3, [r7, #12]
10004532:	4a14      	ldr	r2, [pc, #80]	; (10004584 <hw_endpoint_init+0x114>)
10004534:	60da      	str	r2, [r3, #12]
    }

    // alloc a buffer and fill in endpoint control register
    _hw_endpoint_alloc(ep, transfer_type);
  }
}
10004536:	e01f      	b.n	10004578 <hw_endpoint_init+0x108>
    if ( dir == TUSB_DIR_IN )
10004538:	230a      	movs	r3, #10
1000453a:	18fb      	adds	r3, r7, r3
1000453c:	781b      	ldrb	r3, [r3, #0]
1000453e:	2b01      	cmp	r3, #1
10004540:	d109      	bne.n	10004556 <hw_endpoint_init+0xe6>
      ep->endpoint_control = &usb_dpram->ep_ctrl[num - 1].in;
10004542:	230b      	movs	r3, #11
10004544:	18fb      	adds	r3, r7, r3
10004546:	781b      	ldrb	r3, [r3, #0]
10004548:	3b01      	subs	r3, #1
1000454a:	00db      	lsls	r3, r3, #3
1000454c:	4a0e      	ldr	r2, [pc, #56]	; (10004588 <hw_endpoint_init+0x118>)
1000454e:	189a      	adds	r2, r3, r2
10004550:	68fb      	ldr	r3, [r7, #12]
10004552:	605a      	str	r2, [r3, #4]
10004554:	e009      	b.n	1000456a <hw_endpoint_init+0xfa>
      ep->endpoint_control = &usb_dpram->ep_ctrl[num - 1].out;
10004556:	230b      	movs	r3, #11
10004558:	18fb      	adds	r3, r7, r3
1000455a:	781b      	ldrb	r3, [r3, #0]
1000455c:	3b01      	subs	r3, #1
1000455e:	00db      	lsls	r3, r3, #3
10004560:	3304      	adds	r3, #4
10004562:	4a09      	ldr	r2, [pc, #36]	; (10004588 <hw_endpoint_init+0x118>)
10004564:	189a      	adds	r2, r3, r2
10004566:	68fb      	ldr	r3, [r7, #12]
10004568:	605a      	str	r2, [r3, #4]
    _hw_endpoint_alloc(ep, transfer_type);
1000456a:	1dbb      	adds	r3, r7, #6
1000456c:	781a      	ldrb	r2, [r3, #0]
1000456e:	68fb      	ldr	r3, [r7, #12]
10004570:	0011      	movs	r1, r2
10004572:	0018      	movs	r0, r3
10004574:	f7ff ff16 	bl	100043a4 <_hw_endpoint_alloc>
}
10004578:	46c0      	nop			; (mov r8, r8)
1000457a:	46bd      	mov	sp, r7
1000457c:	b005      	add	sp, #20
1000457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004580:	50100080 	.word	0x50100080
10004584:	50100100 	.word	0x50100100
10004588:	50100008 	.word	0x50100008

1000458c <hw_endpoint_xfer>:

static void hw_endpoint_xfer(uint8_t ep_addr, uint8_t *buffer, uint16_t total_bytes)
{
1000458c:	b580      	push	{r7, lr}
1000458e:	b084      	sub	sp, #16
10004590:	af00      	add	r7, sp, #0
10004592:	6039      	str	r1, [r7, #0]
10004594:	0011      	movs	r1, r2
10004596:	1dfb      	adds	r3, r7, #7
10004598:	1c02      	adds	r2, r0, #0
1000459a:	701a      	strb	r2, [r3, #0]
1000459c:	1d3b      	adds	r3, r7, #4
1000459e:	1c0a      	adds	r2, r1, #0
100045a0:	801a      	strh	r2, [r3, #0]
    struct hw_endpoint *ep = hw_endpoint_get_by_addr(ep_addr);
100045a2:	1dfb      	adds	r3, r7, #7
100045a4:	781b      	ldrb	r3, [r3, #0]
100045a6:	0018      	movs	r0, r3
100045a8:	f7ff fed6 	bl	10004358 <hw_endpoint_get_by_addr>
100045ac:	0003      	movs	r3, r0
100045ae:	60fb      	str	r3, [r7, #12]
    hw_endpoint_xfer_start(ep, buffer, total_bytes);
100045b0:	1d3b      	adds	r3, r7, #4
100045b2:	881a      	ldrh	r2, [r3, #0]
100045b4:	6839      	ldr	r1, [r7, #0]
100045b6:	68fb      	ldr	r3, [r7, #12]
100045b8:	0018      	movs	r0, r3
100045ba:	f000 fca1 	bl	10004f00 <hw_endpoint_xfer_start>
}
100045be:	46c0      	nop			; (mov r8, r8)
100045c0:	46bd      	mov	sp, r7
100045c2:	b004      	add	sp, #16
100045c4:	bd80      	pop	{r7, pc}
	...

100045c8 <hw_handle_buff_status>:

static void hw_handle_buff_status(void)
{
100045c8:	b590      	push	{r4, r7, lr}
100045ca:	b089      	sub	sp, #36	; 0x24
100045cc:	af02      	add	r7, sp, #8
    uint32_t remaining_buffers = usb_hw->buf_status;
100045ce:	4b2b      	ldr	r3, [pc, #172]	; (1000467c <hw_handle_buff_status+0xb4>)
100045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
100045d2:	617b      	str	r3, [r7, #20]
    pico_trace("buf_status = 0x%08x\n", remaining_buffers);
    uint bit = 1u;
100045d4:	2301      	movs	r3, #1
100045d6:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100045d8:	230f      	movs	r3, #15
100045da:	18fb      	adds	r3, r7, r3
100045dc:	2200      	movs	r2, #0
100045de:	701a      	strb	r2, [r3, #0]
100045e0:	e040      	b.n	10004664 <hw_handle_buff_status+0x9c>
    {
        if (remaining_buffers & bit)
100045e2:	697b      	ldr	r3, [r7, #20]
100045e4:	693a      	ldr	r2, [r7, #16]
100045e6:	4013      	ands	r3, r2
100045e8:	d033      	beq.n	10004652 <hw_handle_buff_status+0x8a>
        {
            // clear this in advance
            usb_hw_clear->buf_status = bit;
100045ea:	4b25      	ldr	r3, [pc, #148]	; (10004680 <hw_handle_buff_status+0xb8>)
100045ec:	693a      	ldr	r2, [r7, #16]
100045ee:	659a      	str	r2, [r3, #88]	; 0x58

            // IN transfer for even i, OUT transfer for odd i
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
100045f0:	210f      	movs	r1, #15
100045f2:	187b      	adds	r3, r7, r1
100045f4:	781b      	ldrb	r3, [r3, #0]
100045f6:	085b      	lsrs	r3, r3, #1
100045f8:	b2da      	uxtb	r2, r3
100045fa:	187b      	adds	r3, r7, r1
100045fc:	781b      	ldrb	r3, [r3, #0]
100045fe:	2101      	movs	r1, #1
10004600:	400b      	ands	r3, r1
10004602:	4259      	negs	r1, r3
10004604:	414b      	adcs	r3, r1
10004606:	b2db      	uxtb	r3, r3
10004608:	0019      	movs	r1, r3
1000460a:	0010      	movs	r0, r2
1000460c:	f7ff fe8c 	bl	10004328 <hw_endpoint_get_by_num>
10004610:	0003      	movs	r3, r0
10004612:	60bb      	str	r3, [r7, #8]

            // Continue xfer
            bool done = hw_endpoint_xfer_continue(ep);
10004614:	1dfc      	adds	r4, r7, #7
10004616:	68bb      	ldr	r3, [r7, #8]
10004618:	0018      	movs	r0, r3
1000461a:	f000 fd5f 	bl	100050dc <hw_endpoint_xfer_continue>
1000461e:	0003      	movs	r3, r0
10004620:	7023      	strb	r3, [r4, #0]
            if (done)
10004622:	1dfb      	adds	r3, r7, #7
10004624:	781b      	ldrb	r3, [r3, #0]
10004626:	2b00      	cmp	r3, #0
10004628:	d00e      	beq.n	10004648 <hw_handle_buff_status+0x80>
            {
                // Notify
                dcd_event_xfer_complete(0, ep->ep_addr, ep->xferred_len, XFER_RESULT_SUCCESS, true);
1000462a:	68bb      	ldr	r3, [r7, #8]
1000462c:	7899      	ldrb	r1, [r3, #2]
1000462e:	68bb      	ldr	r3, [r7, #8]
10004630:	8a9b      	ldrh	r3, [r3, #20]
10004632:	001a      	movs	r2, r3
10004634:	2301      	movs	r3, #1
10004636:	9300      	str	r3, [sp, #0]
10004638:	2300      	movs	r3, #0
1000463a:	2000      	movs	r0, #0
1000463c:	f7ff f860 	bl	10003700 <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10004640:	68bb      	ldr	r3, [r7, #8]
10004642:	0018      	movs	r0, r3
10004644:	f000 fb1a 	bl	10004c7c <hw_endpoint_reset_transfer>
            }
            remaining_buffers &= ~bit;
10004648:	693b      	ldr	r3, [r7, #16]
1000464a:	43da      	mvns	r2, r3
1000464c:	697b      	ldr	r3, [r7, #20]
1000464e:	4013      	ands	r3, r2
10004650:	617b      	str	r3, [r7, #20]
        }
        bit <<= 1u;
10004652:	693b      	ldr	r3, [r7, #16]
10004654:	005b      	lsls	r3, r3, #1
10004656:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004658:	210f      	movs	r1, #15
1000465a:	187b      	adds	r3, r7, r1
1000465c:	781a      	ldrb	r2, [r3, #0]
1000465e:	187b      	adds	r3, r7, r1
10004660:	3201      	adds	r2, #1
10004662:	701a      	strb	r2, [r3, #0]
10004664:	697b      	ldr	r3, [r7, #20]
10004666:	2b00      	cmp	r3, #0
10004668:	d004      	beq.n	10004674 <hw_handle_buff_status+0xac>
1000466a:	230f      	movs	r3, #15
1000466c:	18fb      	adds	r3, r7, r3
1000466e:	781b      	ldrb	r3, [r3, #0]
10004670:	2b1f      	cmp	r3, #31
10004672:	d9b6      	bls.n	100045e2 <hw_handle_buff_status+0x1a>
    }
}
10004674:	46c0      	nop			; (mov r8, r8)
10004676:	46bd      	mov	sp, r7
10004678:	b007      	add	sp, #28
1000467a:	bd90      	pop	{r4, r7, pc}
1000467c:	50110000 	.word	0x50110000
10004680:	50113000 	.word	0x50113000

10004684 <reset_ep0_pid>:

static void reset_ep0_pid(void)
{
10004684:	b580      	push	{r7, lr}
10004686:	b084      	sub	sp, #16
10004688:	af00      	add	r7, sp, #0
    // If we have finished this transfer on EP0 set pid back to 1 for next
    // setup transfer. Also clear a stall in case
    uint8_t addrs[] = {0x0, 0x80};
1000468a:	1d3b      	adds	r3, r7, #4
1000468c:	4a0d      	ldr	r2, [pc, #52]	; (100046c4 <reset_ep0_pid+0x40>)
1000468e:	801a      	strh	r2, [r3, #0]
    for (uint i = 0 ; i < TU_ARRAY_SIZE(addrs); i++)
10004690:	2300      	movs	r3, #0
10004692:	60fb      	str	r3, [r7, #12]
10004694:	e00e      	b.n	100046b4 <reset_ep0_pid+0x30>
    {
        struct hw_endpoint *ep = hw_endpoint_get_by_addr(addrs[i]);
10004696:	1d3a      	adds	r2, r7, #4
10004698:	68fb      	ldr	r3, [r7, #12]
1000469a:	18d3      	adds	r3, r2, r3
1000469c:	781b      	ldrb	r3, [r3, #0]
1000469e:	0018      	movs	r0, r3
100046a0:	f7ff fe5a 	bl	10004358 <hw_endpoint_get_by_addr>
100046a4:	0003      	movs	r3, r0
100046a6:	60bb      	str	r3, [r7, #8]
        ep->next_pid = 1u;
100046a8:	68bb      	ldr	r3, [r7, #8]
100046aa:	2201      	movs	r2, #1
100046ac:	70da      	strb	r2, [r3, #3]
    for (uint i = 0 ; i < TU_ARRAY_SIZE(addrs); i++)
100046ae:	68fb      	ldr	r3, [r7, #12]
100046b0:	3301      	adds	r3, #1
100046b2:	60fb      	str	r3, [r7, #12]
100046b4:	68fb      	ldr	r3, [r7, #12]
100046b6:	2b01      	cmp	r3, #1
100046b8:	d9ed      	bls.n	10004696 <reset_ep0_pid+0x12>
    }
}
100046ba:	46c0      	nop			; (mov r8, r8)
100046bc:	46c0      	nop			; (mov r8, r8)
100046be:	46bd      	mov	sp, r7
100046c0:	b004      	add	sp, #16
100046c2:	bd80      	pop	{r7, pc}
100046c4:	ffff8000 	.word	0xffff8000

100046c8 <reset_non_control_endpoints>:

static void reset_non_control_endpoints(void)
{
100046c8:	b580      	push	{r7, lr}
100046ca:	b082      	sub	sp, #8
100046cc:	af00      	add	r7, sp, #0
  // Disable all non-control
  for ( uint8_t i = 0; i < USB_MAX_ENDPOINTS-1; i++ )
100046ce:	1dfb      	adds	r3, r7, #7
100046d0:	2200      	movs	r2, #0
100046d2:	701a      	strb	r2, [r3, #0]
100046d4:	e014      	b.n	10004700 <reset_non_control_endpoints+0x38>
  {
    usb_dpram->ep_ctrl[i].in = 0;
100046d6:	4a13      	ldr	r2, [pc, #76]	; (10004724 <reset_non_control_endpoints+0x5c>)
100046d8:	1dfb      	adds	r3, r7, #7
100046da:	781b      	ldrb	r3, [r3, #0]
100046dc:	3301      	adds	r3, #1
100046de:	00db      	lsls	r3, r3, #3
100046e0:	2100      	movs	r1, #0
100046e2:	5099      	str	r1, [r3, r2]
    usb_dpram->ep_ctrl[i].out = 0;
100046e4:	4a0f      	ldr	r2, [pc, #60]	; (10004724 <reset_non_control_endpoints+0x5c>)
100046e6:	1dfb      	adds	r3, r7, #7
100046e8:	781b      	ldrb	r3, [r3, #0]
100046ea:	3301      	adds	r3, #1
100046ec:	00db      	lsls	r3, r3, #3
100046ee:	18d3      	adds	r3, r2, r3
100046f0:	3304      	adds	r3, #4
100046f2:	2200      	movs	r2, #0
100046f4:	601a      	str	r2, [r3, #0]
  for ( uint8_t i = 0; i < USB_MAX_ENDPOINTS-1; i++ )
100046f6:	1dfb      	adds	r3, r7, #7
100046f8:	781a      	ldrb	r2, [r3, #0]
100046fa:	1dfb      	adds	r3, r7, #7
100046fc:	3201      	adds	r2, #1
100046fe:	701a      	strb	r2, [r3, #0]
10004700:	1dfb      	adds	r3, r7, #7
10004702:	781b      	ldrb	r3, [r3, #0]
10004704:	2b0e      	cmp	r3, #14
10004706:	d9e6      	bls.n	100046d6 <reset_non_control_endpoints+0xe>
  }

  // clear non-control hw endpoints
  tu_memclr(hw_endpoints[1], sizeof(hw_endpoints) - 2*sizeof(hw_endpoint_t));
10004708:	23f0      	movs	r3, #240	; 0xf0
1000470a:	009a      	lsls	r2, r3, #2
1000470c:	4b06      	ldr	r3, [pc, #24]	; (10004728 <reset_non_control_endpoints+0x60>)
1000470e:	2100      	movs	r1, #0
10004710:	0018      	movs	r0, r3
10004712:	f008 fc21 	bl	1000cf58 <__wrap_memset>
  next_buffer_ptr = &usb_dpram->epx_data[0];
10004716:	4b05      	ldr	r3, [pc, #20]	; (1000472c <reset_non_control_endpoints+0x64>)
10004718:	4a05      	ldr	r2, [pc, #20]	; (10004730 <reset_non_control_endpoints+0x68>)
1000471a:	601a      	str	r2, [r3, #0]
}
1000471c:	46c0      	nop			; (mov r8, r8)
1000471e:	46bd      	mov	sp, r7
10004720:	b002      	add	sp, #8
10004722:	bd80      	pop	{r7, pc}
10004724:	50100000 	.word	0x50100000
10004728:	20004e18 	.word	0x20004e18
1000472c:	200051dc 	.word	0x200051dc
10004730:	50100180 	.word	0x50100180

10004734 <dcd_rp2040_irq>:

static void dcd_rp2040_irq(void)
{
10004734:	b580      	push	{r7, lr}
10004736:	b084      	sub	sp, #16
10004738:	af00      	add	r7, sp, #0
    uint32_t const status = usb_hw->ints;
1000473a:	4a3a      	ldr	r2, [pc, #232]	; (10004824 <dcd_rp2040_irq+0xf0>)
1000473c:	2398      	movs	r3, #152	; 0x98
1000473e:	58d3      	ldr	r3, [r2, r3]
10004740:	60bb      	str	r3, [r7, #8]
    uint32_t handled = 0;
10004742:	2300      	movs	r3, #0
10004744:	60fb      	str	r3, [r7, #12]

    if (status & USB_INTS_SETUP_REQ_BITS)
10004746:	68ba      	ldr	r2, [r7, #8]
10004748:	2380      	movs	r3, #128	; 0x80
1000474a:	025b      	lsls	r3, r3, #9
1000474c:	4013      	ands	r3, r2
1000474e:	d012      	beq.n	10004776 <dcd_rp2040_irq+0x42>
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
10004750:	68fb      	ldr	r3, [r7, #12]
10004752:	2280      	movs	r2, #128	; 0x80
10004754:	0252      	lsls	r2, r2, #9
10004756:	4313      	orrs	r3, r2
10004758:	60fb      	str	r3, [r7, #12]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
1000475a:	4b33      	ldr	r3, [pc, #204]	; (10004828 <dcd_rp2040_irq+0xf4>)
1000475c:	607b      	str	r3, [r7, #4]

        // reset pid to both 1 (data and ack)
        reset_ep0_pid();
1000475e:	f7ff ff91 	bl	10004684 <reset_ep0_pid>

        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
10004762:	687b      	ldr	r3, [r7, #4]
10004764:	2201      	movs	r2, #1
10004766:	0019      	movs	r1, r3
10004768:	2000      	movs	r0, #0
1000476a:	f7fe ff9c 	bl	100036a6 <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
1000476e:	4b2f      	ldr	r3, [pc, #188]	; (1000482c <dcd_rp2040_irq+0xf8>)
10004770:	2280      	movs	r2, #128	; 0x80
10004772:	0292      	lsls	r2, r2, #10
10004774:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
10004776:	68bb      	ldr	r3, [r7, #8]
10004778:	2210      	movs	r2, #16
1000477a:	4013      	ands	r3, r2
1000477c:	d005      	beq.n	1000478a <dcd_rp2040_irq+0x56>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
1000477e:	68fb      	ldr	r3, [r7, #12]
10004780:	2210      	movs	r2, #16
10004782:	4313      	orrs	r3, r2
10004784:	60fb      	str	r3, [r7, #12]
        hw_handle_buff_status();
10004786:	f7ff ff1f 	bl	100045c8 <hw_handle_buff_status>
        usb_hw_clear->sie_status = USB_SIE_STATUS_CONNECTED_BITS;
    }
#endif

    // SE0 for 2.5 us or more (will last at least 10ms)
    if (status & USB_INTS_BUS_RESET_BITS)
1000478a:	68ba      	ldr	r2, [r7, #8]
1000478c:	2380      	movs	r3, #128	; 0x80
1000478e:	015b      	lsls	r3, r3, #5
10004790:	4013      	ands	r3, r2
10004792:	d012      	beq.n	100047ba <dcd_rp2040_irq+0x86>
    {
        pico_trace("BUS RESET\n");

        handled |= USB_INTS_BUS_RESET_BITS;
10004794:	68fb      	ldr	r3, [r7, #12]
10004796:	2280      	movs	r2, #128	; 0x80
10004798:	0152      	lsls	r2, r2, #5
1000479a:	4313      	orrs	r3, r2
1000479c:	60fb      	str	r3, [r7, #12]

        usb_hw->dev_addr_ctrl = 0;
1000479e:	4b21      	ldr	r3, [pc, #132]	; (10004824 <dcd_rp2040_irq+0xf0>)
100047a0:	2200      	movs	r2, #0
100047a2:	601a      	str	r2, [r3, #0]
        reset_non_control_endpoints();
100047a4:	f7ff ff90 	bl	100046c8 <reset_non_control_endpoints>
        dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
100047a8:	2201      	movs	r2, #1
100047aa:	2100      	movs	r1, #0
100047ac:	2000      	movs	r0, #0
100047ae:	f7fe ff4c 	bl	1000364a <dcd_event_bus_reset>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
100047b2:	4b1e      	ldr	r3, [pc, #120]	; (1000482c <dcd_rp2040_irq+0xf8>)
100047b4:	2280      	movs	r2, #128	; 0x80
100047b6:	0312      	lsls	r2, r2, #12
100047b8:	651a      	str	r2, [r3, #80]	; 0x50
     * the host begins sending start of frame packets. You will also see a suspend interrupt
     * when the device is disconnected if you do not have a VBUS detect circuit connected. This is
     * because without VBUS detection, it is impossible to tell the difference between
     * being disconnected and suspended.
     */
    if (status & USB_INTS_DEV_SUSPEND_BITS)
100047ba:	68ba      	ldr	r2, [r7, #8]
100047bc:	2380      	movs	r3, #128	; 0x80
100047be:	01db      	lsls	r3, r3, #7
100047c0:	4013      	ands	r3, r2
100047c2:	d00c      	beq.n	100047de <dcd_rp2040_irq+0xaa>
    {
        handled |= USB_INTS_DEV_SUSPEND_BITS;
100047c4:	68fb      	ldr	r3, [r7, #12]
100047c6:	2280      	movs	r2, #128	; 0x80
100047c8:	01d2      	lsls	r2, r2, #7
100047ca:	4313      	orrs	r3, r2
100047cc:	60fb      	str	r3, [r7, #12]
        dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
100047ce:	2201      	movs	r2, #1
100047d0:	2104      	movs	r1, #4
100047d2:	2000      	movs	r0, #0
100047d4:	f7fe ff0e 	bl	100035f4 <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SUSPENDED_BITS;
100047d8:	4b14      	ldr	r3, [pc, #80]	; (1000482c <dcd_rp2040_irq+0xf8>)
100047da:	2210      	movs	r2, #16
100047dc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (status & USB_INTS_DEV_RESUME_FROM_HOST_BITS)
100047de:	68ba      	ldr	r2, [r7, #8]
100047e0:	2380      	movs	r3, #128	; 0x80
100047e2:	021b      	lsls	r3, r3, #8
100047e4:	4013      	ands	r3, r2
100047e6:	d00d      	beq.n	10004804 <dcd_rp2040_irq+0xd0>
    {
        handled |= USB_INTS_DEV_RESUME_FROM_HOST_BITS;
100047e8:	68fb      	ldr	r3, [r7, #12]
100047ea:	2280      	movs	r2, #128	; 0x80
100047ec:	0212      	lsls	r2, r2, #8
100047ee:	4313      	orrs	r3, r2
100047f0:	60fb      	str	r3, [r7, #12]
        dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
100047f2:	2201      	movs	r2, #1
100047f4:	2105      	movs	r1, #5
100047f6:	2000      	movs	r0, #0
100047f8:	f7fe fefc 	bl	100035f4 <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_RESUME_BITS;
100047fc:	4b0b      	ldr	r3, [pc, #44]	; (1000482c <dcd_rp2040_irq+0xf8>)
100047fe:	2280      	movs	r2, #128	; 0x80
10004800:	0112      	lsls	r2, r2, #4
10004802:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (status ^ handled)
10004804:	68ba      	ldr	r2, [r7, #8]
10004806:	68fb      	ldr	r3, [r7, #12]
10004808:	429a      	cmp	r2, r3
1000480a:	d007      	beq.n	1000481c <dcd_rp2040_irq+0xe8>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
1000480c:	68ba      	ldr	r2, [r7, #8]
1000480e:	68fb      	ldr	r3, [r7, #12]
10004810:	405a      	eors	r2, r3
10004812:	4b07      	ldr	r3, [pc, #28]	; (10004830 <dcd_rp2040_irq+0xfc>)
10004814:	0011      	movs	r1, r2
10004816:	0018      	movs	r0, r3
10004818:	f006 faae 	bl	1000ad78 <panic>
    }
}
1000481c:	46c0      	nop			; (mov r8, r8)
1000481e:	46bd      	mov	sp, r7
10004820:	b004      	add	sp, #16
10004822:	bd80      	pop	{r7, pc}
10004824:	50110000 	.word	0x50110000
10004828:	50100000 	.word	0x50100000
1000482c:	50113000 	.word	0x50113000
10004830:	1000d364 	.word	0x1000d364

10004834 <dcd_init>:
/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/

void dcd_init (uint8_t rhport)
{
10004834:	b580      	push	{r7, lr}
10004836:	b082      	sub	sp, #8
10004838:	af00      	add	r7, sp, #0
1000483a:	0002      	movs	r2, r0
1000483c:	1dfb      	adds	r3, r7, #7
1000483e:	701a      	strb	r2, [r3, #0]
  assert(rhport == 0);
10004840:	1dfb      	adds	r3, r7, #7
10004842:	781b      	ldrb	r3, [r3, #0]
10004844:	2b00      	cmp	r3, #0
10004846:	d006      	beq.n	10004856 <dcd_init+0x22>
10004848:	4b1b      	ldr	r3, [pc, #108]	; (100048b8 <dcd_init+0x84>)
1000484a:	4a1c      	ldr	r2, [pc, #112]	; (100048bc <dcd_init+0x88>)
1000484c:	214e      	movs	r1, #78	; 0x4e
1000484e:	31ff      	adds	r1, #255	; 0xff
10004850:	481b      	ldr	r0, [pc, #108]	; (100048c0 <dcd_init+0x8c>)
10004852:	f006 fa6b 	bl	1000ad2c <__assert_func>

  // Reset hardware to default state
  rp2040_usb_init();
10004856:	f000 f9ed 	bl	10004c34 <rp2040_usb_init>

#if FORCE_VBUS_DETECT
  // Force VBUS detect so the device thinks it is plugged into a host
  usb_hw->pwr = USB_USB_PWR_VBUS_DETECT_BITS | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
1000485a:	4b1a      	ldr	r3, [pc, #104]	; (100048c4 <dcd_init+0x90>)
1000485c:	220c      	movs	r2, #12
1000485e:	679a      	str	r2, [r3, #120]	; 0x78
#endif

  irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
10004860:	4b19      	ldr	r3, [pc, #100]	; (100048c8 <dcd_init+0x94>)
10004862:	0019      	movs	r1, r3
10004864:	2005      	movs	r0, #5
10004866:	f002 fe93 	bl	10007590 <irq_set_exclusive_handler>

  // Init control endpoints
  tu_memclr(hw_endpoints[0], 2*sizeof(hw_endpoint_t));
1000486a:	4b18      	ldr	r3, [pc, #96]	; (100048cc <dcd_init+0x98>)
1000486c:	2240      	movs	r2, #64	; 0x40
1000486e:	2100      	movs	r1, #0
10004870:	0018      	movs	r0, r3
10004872:	f008 fb71 	bl	1000cf58 <__wrap_memset>
  hw_endpoint_init(0x0, 64, TUSB_XFER_CONTROL);
10004876:	2200      	movs	r2, #0
10004878:	2140      	movs	r1, #64	; 0x40
1000487a:	2000      	movs	r0, #0
1000487c:	f7ff fdf8 	bl	10004470 <hw_endpoint_init>
  hw_endpoint_init(0x80, 64, TUSB_XFER_CONTROL);
10004880:	2200      	movs	r2, #0
10004882:	2140      	movs	r1, #64	; 0x40
10004884:	2080      	movs	r0, #128	; 0x80
10004886:	f7ff fdf3 	bl	10004470 <hw_endpoint_init>

  // Init non-control endpoints
  reset_non_control_endpoints();
1000488a:	f7ff ff1d 	bl	100046c8 <reset_non_control_endpoints>

  // Initializes the USB peripheral for device mode and enables it.
  // Don't need to enable the pull up here. Force VBUS
  usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
1000488e:	4b0d      	ldr	r3, [pc, #52]	; (100048c4 <dcd_init+0x90>)
10004890:	2201      	movs	r2, #1
10004892:	641a      	str	r2, [r3, #64]	; 0x40

  // Enable individual controller IRQS here. Processor interrupt enable will be used
  // for the global interrupt enable...
  // Note: Force VBUS detect cause disconnection not detectable
  usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS;
10004894:	4b0b      	ldr	r3, [pc, #44]	; (100048c4 <dcd_init+0x90>)
10004896:	2280      	movs	r2, #128	; 0x80
10004898:	0592      	lsls	r2, r2, #22
1000489a:	64da      	str	r2, [r3, #76]	; 0x4c
  usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS |
1000489c:	4a09      	ldr	r2, [pc, #36]	; (100048c4 <dcd_init+0x90>)
1000489e:	2390      	movs	r3, #144	; 0x90
100048a0:	490b      	ldr	r1, [pc, #44]	; (100048d0 <dcd_init+0x9c>)
100048a2:	50d1      	str	r1, [r2, r3]
                     USB_INTS_DEV_SUSPEND_BITS | USB_INTS_DEV_RESUME_FROM_HOST_BITS |
                     (FORCE_VBUS_DETECT ? 0 : USB_INTS_DEV_CONN_DIS_BITS);

  dcd_connect(rhport);
100048a4:	1dfb      	adds	r3, r7, #7
100048a6:	781b      	ldrb	r3, [r3, #0]
100048a8:	0018      	movs	r0, r3
100048aa:	f000 f857 	bl	1000495c <dcd_connect>
}
100048ae:	46c0      	nop			; (mov r8, r8)
100048b0:	46bd      	mov	sp, r7
100048b2:	b002      	add	sp, #8
100048b4:	bd80      	pop	{r7, pc}
100048b6:	46c0      	nop			; (mov r8, r8)
100048b8:	1000d378 	.word	0x1000d378
100048bc:	1000d398 	.word	0x1000d398
100048c0:	1000d2c4 	.word	0x1000d2c4
100048c4:	50110000 	.word	0x50110000
100048c8:	10004735 	.word	0x10004735
100048cc:	20004dd8 	.word	0x20004dd8
100048d0:	0001d010 	.word	0x0001d010

100048d4 <dcd_int_enable>:

void dcd_int_enable(__unused uint8_t rhport)
{
100048d4:	b580      	push	{r7, lr}
100048d6:	b082      	sub	sp, #8
100048d8:	af00      	add	r7, sp, #0
100048da:	0002      	movs	r2, r0
100048dc:	1dfb      	adds	r3, r7, #7
100048de:	701a      	strb	r2, [r3, #0]
    assert(rhport == 0);
100048e0:	1dfb      	adds	r3, r7, #7
100048e2:	781b      	ldrb	r3, [r3, #0]
100048e4:	2b00      	cmp	r3, #0
100048e6:	d006      	beq.n	100048f6 <dcd_int_enable+0x22>
100048e8:	4b07      	ldr	r3, [pc, #28]	; (10004908 <dcd_int_enable+0x34>)
100048ea:	4a08      	ldr	r2, [pc, #32]	; (1000490c <dcd_int_enable+0x38>)
100048ec:	21b9      	movs	r1, #185	; 0xb9
100048ee:	0049      	lsls	r1, r1, #1
100048f0:	4807      	ldr	r0, [pc, #28]	; (10004910 <dcd_int_enable+0x3c>)
100048f2:	f006 fa1b 	bl	1000ad2c <__assert_func>
    irq_set_enabled(USBCTRL_IRQ, true);
100048f6:	2101      	movs	r1, #1
100048f8:	2005      	movs	r0, #5
100048fa:	f002 fdd3 	bl	100074a4 <irq_set_enabled>
}
100048fe:	46c0      	nop			; (mov r8, r8)
10004900:	46bd      	mov	sp, r7
10004902:	b002      	add	sp, #8
10004904:	bd80      	pop	{r7, pc}
10004906:	46c0      	nop			; (mov r8, r8)
10004908:	1000d378 	.word	0x1000d378
1000490c:	1000d3a4 	.word	0x1000d3a4
10004910:	1000d2c4 	.word	0x1000d2c4

10004914 <dcd_set_address>:
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, false);
}

void dcd_set_address (__unused uint8_t rhport, __unused uint8_t dev_addr)
{
10004914:	b580      	push	{r7, lr}
10004916:	b082      	sub	sp, #8
10004918:	af00      	add	r7, sp, #0
1000491a:	0002      	movs	r2, r0
1000491c:	1dfb      	adds	r3, r7, #7
1000491e:	701a      	strb	r2, [r3, #0]
10004920:	1dbb      	adds	r3, r7, #6
10004922:	1c0a      	adds	r2, r1, #0
10004924:	701a      	strb	r2, [r3, #0]
  assert(rhport == 0);
10004926:	1dfb      	adds	r3, r7, #7
10004928:	781b      	ldrb	r3, [r3, #0]
1000492a:	2b00      	cmp	r3, #0
1000492c:	d006      	beq.n	1000493c <dcd_set_address+0x28>
1000492e:	4b08      	ldr	r3, [pc, #32]	; (10004950 <dcd_set_address+0x3c>)
10004930:	4a08      	ldr	r2, [pc, #32]	; (10004954 <dcd_set_address+0x40>)
10004932:	21bf      	movs	r1, #191	; 0xbf
10004934:	0049      	lsls	r1, r1, #1
10004936:	4808      	ldr	r0, [pc, #32]	; (10004958 <dcd_set_address+0x44>)
10004938:	f006 f9f8 	bl	1000ad2c <__assert_func>

  // Can't set device address in hardware until status xfer has complete
  // Send 0len complete response on EP0 IN
  hw_endpoint_xfer(0x80, NULL, 0);
1000493c:	2200      	movs	r2, #0
1000493e:	2100      	movs	r1, #0
10004940:	2080      	movs	r0, #128	; 0x80
10004942:	f7ff fe23 	bl	1000458c <hw_endpoint_xfer>
}
10004946:	46c0      	nop			; (mov r8, r8)
10004948:	46bd      	mov	sp, r7
1000494a:	b002      	add	sp, #8
1000494c:	bd80      	pop	{r7, pc}
1000494e:	46c0      	nop			; (mov r8, r8)
10004950:	1000d378 	.word	0x1000d378
10004954:	1000d3b4 	.word	0x1000d3b4
10004958:	1000d2c4 	.word	0x1000d2c4

1000495c <dcd_connect>:
  usb_hw_clear->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
}

// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(__unused uint8_t rhport)
{
1000495c:	b580      	push	{r7, lr}
1000495e:	b082      	sub	sp, #8
10004960:	af00      	add	r7, sp, #0
10004962:	0002      	movs	r2, r0
10004964:	1dfb      	adds	r3, r7, #7
10004966:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
10004968:	4b03      	ldr	r3, [pc, #12]	; (10004978 <dcd_connect+0x1c>)
1000496a:	2280      	movs	r2, #128	; 0x80
1000496c:	0252      	lsls	r2, r2, #9
1000496e:	64da      	str	r2, [r3, #76]	; 0x4c
}
10004970:	46c0      	nop			; (mov r8, r8)
10004972:	46bd      	mov	sp, r7
10004974:	b002      	add	sp, #8
10004976:	bd80      	pop	{r7, pc}
10004978:	50112000 	.word	0x50112000

1000497c <dcd_edpt0_status_complete>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
1000497c:	b580      	push	{r7, lr}
1000497e:	b082      	sub	sp, #8
10004980:	af00      	add	r7, sp, #0
10004982:	0002      	movs	r2, r0
10004984:	6039      	str	r1, [r7, #0]
10004986:	1dfb      	adds	r3, r7, #7
10004988:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  if ( request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
1000498a:	683b      	ldr	r3, [r7, #0]
1000498c:	781b      	ldrb	r3, [r3, #0]
1000498e:	221f      	movs	r2, #31
10004990:	4013      	ands	r3, r2
10004992:	b2db      	uxtb	r3, r3
10004994:	2b00      	cmp	r3, #0
10004996:	d113      	bne.n	100049c0 <dcd_edpt0_status_complete+0x44>
       request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
10004998:	683b      	ldr	r3, [r7, #0]
1000499a:	781b      	ldrb	r3, [r3, #0]
1000499c:	2260      	movs	r2, #96	; 0x60
1000499e:	4013      	ands	r3, r2
100049a0:	b2db      	uxtb	r3, r3
  if ( request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
100049a2:	2b00      	cmp	r3, #0
100049a4:	d10c      	bne.n	100049c0 <dcd_edpt0_status_complete+0x44>
       request->bRequest == TUSB_REQ_SET_ADDRESS )
100049a6:	683b      	ldr	r3, [r7, #0]
100049a8:	785b      	ldrb	r3, [r3, #1]
       request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
100049aa:	2b05      	cmp	r3, #5
100049ac:	d108      	bne.n	100049c0 <dcd_edpt0_status_complete+0x44>
  {
    usb_hw->dev_addr_ctrl = (uint8_t) request->wValue;
100049ae:	683b      	ldr	r3, [r7, #0]
100049b0:	789a      	ldrb	r2, [r3, #2]
100049b2:	78db      	ldrb	r3, [r3, #3]
100049b4:	021b      	lsls	r3, r3, #8
100049b6:	4313      	orrs	r3, r2
100049b8:	b29b      	uxth	r3, r3
100049ba:	b2da      	uxtb	r2, r3
100049bc:	4b02      	ldr	r3, [pc, #8]	; (100049c8 <dcd_edpt0_status_complete+0x4c>)
100049be:	601a      	str	r2, [r3, #0]
  }
}
100049c0:	46c0      	nop			; (mov r8, r8)
100049c2:	46bd      	mov	sp, r7
100049c4:	b002      	add	sp, #8
100049c6:	bd80      	pop	{r7, pc}
100049c8:	50110000 	.word	0x50110000

100049cc <dcd_edpt_open>:

bool dcd_edpt_open (__unused uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
100049cc:	b580      	push	{r7, lr}
100049ce:	b082      	sub	sp, #8
100049d0:	af00      	add	r7, sp, #0
100049d2:	0002      	movs	r2, r0
100049d4:	6039      	str	r1, [r7, #0]
100049d6:	1dfb      	adds	r3, r7, #7
100049d8:	701a      	strb	r2, [r3, #0]
    assert(rhport == 0);
100049da:	1dfb      	adds	r3, r7, #7
100049dc:	781b      	ldrb	r3, [r3, #0]
100049de:	2b00      	cmp	r3, #0
100049e0:	d006      	beq.n	100049f0 <dcd_edpt_open+0x24>
100049e2:	4b0f      	ldr	r3, [pc, #60]	; (10004a20 <dcd_edpt_open+0x54>)
100049e4:	4a0f      	ldr	r2, [pc, #60]	; (10004a24 <dcd_edpt_open+0x58>)
100049e6:	21d6      	movs	r1, #214	; 0xd6
100049e8:	0049      	lsls	r1, r1, #1
100049ea:	480f      	ldr	r0, [pc, #60]	; (10004a28 <dcd_edpt_open+0x5c>)
100049ec:	f006 f99e 	bl	1000ad2c <__assert_func>
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
100049f0:	683b      	ldr	r3, [r7, #0]
100049f2:	7898      	ldrb	r0, [r3, #2]
100049f4:	683b      	ldr	r3, [r7, #0]
100049f6:	791a      	ldrb	r2, [r3, #4]
100049f8:	795b      	ldrb	r3, [r3, #5]
100049fa:	2107      	movs	r1, #7
100049fc:	400b      	ands	r3, r1
100049fe:	021b      	lsls	r3, r3, #8
10004a00:	4313      	orrs	r3, r2
10004a02:	b29b      	uxth	r3, r3
10004a04:	0019      	movs	r1, r3
10004a06:	683b      	ldr	r3, [r7, #0]
10004a08:	78db      	ldrb	r3, [r3, #3]
10004a0a:	079b      	lsls	r3, r3, #30
10004a0c:	0f9b      	lsrs	r3, r3, #30
10004a0e:	b2db      	uxtb	r3, r3
10004a10:	001a      	movs	r2, r3
10004a12:	f7ff fd2d 	bl	10004470 <hw_endpoint_init>
    return true;
10004a16:	2301      	movs	r3, #1
}
10004a18:	0018      	movs	r0, r3
10004a1a:	46bd      	mov	sp, r7
10004a1c:	b002      	add	sp, #8
10004a1e:	bd80      	pop	{r7, pc}
10004a20:	1000d378 	.word	0x1000d378
10004a24:	1000d3c4 	.word	0x1000d3c4
10004a28:	1000d2c4 	.word	0x1000d2c4

10004a2c <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
10004a2c:	b580      	push	{r7, lr}
10004a2e:	b082      	sub	sp, #8
10004a30:	af00      	add	r7, sp, #0
10004a32:	0002      	movs	r2, r0
10004a34:	1dfb      	adds	r3, r7, #7
10004a36:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // may need to use EP Abort
  reset_non_control_endpoints();
10004a38:	f7ff fe46 	bl	100046c8 <reset_non_control_endpoints>
}
10004a3c:	46c0      	nop			; (mov r8, r8)
10004a3e:	46bd      	mov	sp, r7
10004a40:	b002      	add	sp, #8
10004a42:	bd80      	pop	{r7, pc}

10004a44 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(__unused uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
10004a44:	b590      	push	{r4, r7, lr}
10004a46:	b083      	sub	sp, #12
10004a48:	af00      	add	r7, sp, #0
10004a4a:	0004      	movs	r4, r0
10004a4c:	0008      	movs	r0, r1
10004a4e:	603a      	str	r2, [r7, #0]
10004a50:	0019      	movs	r1, r3
10004a52:	1dfb      	adds	r3, r7, #7
10004a54:	1c22      	adds	r2, r4, #0
10004a56:	701a      	strb	r2, [r3, #0]
10004a58:	1dbb      	adds	r3, r7, #6
10004a5a:	1c02      	adds	r2, r0, #0
10004a5c:	701a      	strb	r2, [r3, #0]
10004a5e:	1d3b      	adds	r3, r7, #4
10004a60:	1c0a      	adds	r2, r1, #0
10004a62:	801a      	strh	r2, [r3, #0]
    assert(rhport == 0);
10004a64:	1dfb      	adds	r3, r7, #7
10004a66:	781b      	ldrb	r3, [r3, #0]
10004a68:	2b00      	cmp	r3, #0
10004a6a:	d006      	beq.n	10004a7a <dcd_edpt_xfer+0x36>
10004a6c:	4b09      	ldr	r3, [pc, #36]	; (10004a94 <dcd_edpt_xfer+0x50>)
10004a6e:	4a0a      	ldr	r2, [pc, #40]	; (10004a98 <dcd_edpt_xfer+0x54>)
10004a70:	21bc      	movs	r1, #188	; 0xbc
10004a72:	31ff      	adds	r1, #255	; 0xff
10004a74:	4809      	ldr	r0, [pc, #36]	; (10004a9c <dcd_edpt_xfer+0x58>)
10004a76:	f006 f959 	bl	1000ad2c <__assert_func>
    hw_endpoint_xfer(ep_addr, buffer, total_bytes);
10004a7a:	1d3b      	adds	r3, r7, #4
10004a7c:	881a      	ldrh	r2, [r3, #0]
10004a7e:	6839      	ldr	r1, [r7, #0]
10004a80:	1dbb      	adds	r3, r7, #6
10004a82:	781b      	ldrb	r3, [r3, #0]
10004a84:	0018      	movs	r0, r3
10004a86:	f7ff fd81 	bl	1000458c <hw_endpoint_xfer>
    return true;
10004a8a:	2301      	movs	r3, #1
}
10004a8c:	0018      	movs	r0, r3
10004a8e:	46bd      	mov	sp, r7
10004a90:	b003      	add	sp, #12
10004a92:	bd90      	pop	{r4, r7, pc}
10004a94:	1000d378 	.word	0x1000d378
10004a98:	1000d3d4 	.word	0x1000d3d4
10004a9c:	1000d2c4 	.word	0x1000d2c4

10004aa0 <dcd_edpt_stall>:

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
10004aa0:	b580      	push	{r7, lr}
10004aa2:	b084      	sub	sp, #16
10004aa4:	af00      	add	r7, sp, #0
10004aa6:	0002      	movs	r2, r0
10004aa8:	1dfb      	adds	r3, r7, #7
10004aaa:	701a      	strb	r2, [r3, #0]
10004aac:	1dbb      	adds	r3, r7, #6
10004aae:	1c0a      	adds	r2, r1, #0
10004ab0:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  if ( tu_edpt_number(ep_addr) == 0 )
10004ab2:	1dbb      	adds	r3, r7, #6
10004ab4:	781b      	ldrb	r3, [r3, #0]
10004ab6:	0018      	movs	r0, r3
10004ab8:	f7ff fbfc 	bl	100042b4 <tu_edpt_number>
10004abc:	1e03      	subs	r3, r0, #0
10004abe:	d10c      	bne.n	10004ada <dcd_edpt_stall+0x3a>
  {
    // A stall on EP0 has to be armed so it can be cleared on the next setup packet
    usb_hw_set->ep_stall_arm = (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10004ac0:	1dbb      	adds	r3, r7, #6
10004ac2:	781b      	ldrb	r3, [r3, #0]
10004ac4:	0018      	movs	r0, r3
10004ac6:	f7ff fbe7 	bl	10004298 <tu_edpt_dir>
10004aca:	0003      	movs	r3, r0
10004acc:	2b01      	cmp	r3, #1
10004ace:	d101      	bne.n	10004ad4 <dcd_edpt_stall+0x34>
10004ad0:	2201      	movs	r2, #1
10004ad2:	e000      	b.n	10004ad6 <dcd_edpt_stall+0x36>
10004ad4:	2202      	movs	r2, #2
10004ad6:	4b0a      	ldr	r3, [pc, #40]	; (10004b00 <dcd_edpt_stall+0x60>)
10004ad8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  struct hw_endpoint *ep = hw_endpoint_get_by_addr(ep_addr);
10004ada:	1dbb      	adds	r3, r7, #6
10004adc:	781b      	ldrb	r3, [r3, #0]
10004ade:	0018      	movs	r0, r3
10004ae0:	f7ff fc3a 	bl	10004358 <hw_endpoint_get_by_addr>
10004ae4:	0003      	movs	r3, r0
10004ae6:	60fb      	str	r3, [r7, #12]

  // stall and clear current pending buffer
  // may need to use EP_ABORT
  _hw_endpoint_buffer_control_set_value32(ep, USB_BUF_CTRL_STALL);
10004ae8:	2380      	movs	r3, #128	; 0x80
10004aea:	011a      	lsls	r2, r3, #4
10004aec:	68fb      	ldr	r3, [r7, #12]
10004aee:	0011      	movs	r1, r2
10004af0:	0018      	movs	r0, r3
10004af2:	f7ff fbee 	bl	100042d2 <_hw_endpoint_buffer_control_set_value32>
}
10004af6:	46c0      	nop			; (mov r8, r8)
10004af8:	46bd      	mov	sp, r7
10004afa:	b004      	add	sp, #16
10004afc:	bd80      	pop	{r7, pc}
10004afe:	46c0      	nop			; (mov r8, r8)
10004b00:	50112000 	.word	0x50112000

10004b04 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
10004b04:	b580      	push	{r7, lr}
10004b06:	b084      	sub	sp, #16
10004b08:	af00      	add	r7, sp, #0
10004b0a:	0002      	movs	r2, r0
10004b0c:	1dfb      	adds	r3, r7, #7
10004b0e:	701a      	strb	r2, [r3, #0]
10004b10:	1dbb      	adds	r3, r7, #6
10004b12:	1c0a      	adds	r2, r1, #0
10004b14:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  if (tu_edpt_number(ep_addr))
10004b16:	1dbb      	adds	r3, r7, #6
10004b18:	781b      	ldrb	r3, [r3, #0]
10004b1a:	0018      	movs	r0, r3
10004b1c:	f7ff fbca 	bl	100042b4 <tu_edpt_number>
10004b20:	1e03      	subs	r3, r0, #0
10004b22:	d010      	beq.n	10004b46 <dcd_edpt_clear_stall+0x42>
  {
    struct hw_endpoint *ep = hw_endpoint_get_by_addr(ep_addr);
10004b24:	1dbb      	adds	r3, r7, #6
10004b26:	781b      	ldrb	r3, [r3, #0]
10004b28:	0018      	movs	r0, r3
10004b2a:	f7ff fc15 	bl	10004358 <hw_endpoint_get_by_addr>
10004b2e:	0003      	movs	r3, r0
10004b30:	60fb      	str	r3, [r7, #12]

    // clear stall also reset toggle to DATA0, ready for next transfer
    ep->next_pid = 0;
10004b32:	68fb      	ldr	r3, [r7, #12]
10004b34:	2200      	movs	r2, #0
10004b36:	70da      	strb	r2, [r3, #3]
    _hw_endpoint_buffer_control_clear_mask32(ep, USB_BUF_CTRL_STALL);
10004b38:	2380      	movs	r3, #128	; 0x80
10004b3a:	011a      	lsls	r2, r3, #4
10004b3c:	68fb      	ldr	r3, [r7, #12]
10004b3e:	0011      	movs	r1, r2
10004b40:	0018      	movs	r0, r3
10004b42:	f7ff fbd4 	bl	100042ee <_hw_endpoint_buffer_control_clear_mask32>
  }
}
10004b46:	46c0      	nop			; (mov r8, r8)
10004b48:	46bd      	mov	sp, r7
10004b4a:	b004      	add	sp, #16
10004b4c:	bd80      	pop	{r7, pc}

10004b4e <tu_edpt_dir>:
{
10004b4e:	b580      	push	{r7, lr}
10004b50:	b082      	sub	sp, #8
10004b52:	af00      	add	r7, sp, #0
10004b54:	0002      	movs	r2, r0
10004b56:	1dfb      	adds	r3, r7, #7
10004b58:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10004b5a:	1dfb      	adds	r3, r7, #7
10004b5c:	781b      	ldrb	r3, [r3, #0]
10004b5e:	09db      	lsrs	r3, r3, #7
10004b60:	b2db      	uxtb	r3, r3
}
10004b62:	0018      	movs	r0, r3
10004b64:	46bd      	mov	sp, r7
10004b66:	b002      	add	sp, #8
10004b68:	bd80      	pop	{r7, pc}

10004b6a <tu_edpt_number>:
{
10004b6a:	b580      	push	{r7, lr}
10004b6c:	b082      	sub	sp, #8
10004b6e:	af00      	add	r7, sp, #0
10004b70:	0002      	movs	r2, r0
10004b72:	1dfb      	adds	r3, r7, #7
10004b74:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10004b76:	1dfb      	adds	r3, r7, #7
10004b78:	781b      	ldrb	r3, [r3, #0]
10004b7a:	227f      	movs	r2, #127	; 0x7f
10004b7c:	4013      	ands	r3, r2
10004b7e:	b2db      	uxtb	r3, r3
}
10004b80:	0018      	movs	r0, r3
10004b82:	46bd      	mov	sp, r7
10004b84:	b002      	add	sp, #8
10004b86:	bd80      	pop	{r7, pc}

10004b88 <reset_block>:
/*! \brief Reset the specified HW blocks
 *  \ingroup hardware_resets
 *
 * \param bits Bit pattern indicating blocks to reset. See \ref reset_bitmask
 */
static inline void reset_block(uint32_t bits) {
10004b88:	b580      	push	{r7, lr}
10004b8a:	b084      	sub	sp, #16
10004b8c:	af00      	add	r7, sp, #0
10004b8e:	6078      	str	r0, [r7, #4]
10004b90:	4b07      	ldr	r3, [pc, #28]	; (10004bb0 <reset_block+0x28>)
10004b92:	60fb      	str	r3, [r7, #12]
10004b94:	687b      	ldr	r3, [r7, #4]
10004b96:	60bb      	str	r3, [r7, #8]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004b98:	68fb      	ldr	r3, [r7, #12]
10004b9a:	2280      	movs	r2, #128	; 0x80
10004b9c:	0192      	lsls	r2, r2, #6
10004b9e:	4313      	orrs	r3, r2
10004ba0:	68ba      	ldr	r2, [r7, #8]
10004ba2:	601a      	str	r2, [r3, #0]
}
10004ba4:	46c0      	nop			; (mov r8, r8)
    hw_set_bits(&resets_hw->reset, bits);
}
10004ba6:	46c0      	nop			; (mov r8, r8)
10004ba8:	46bd      	mov	sp, r7
10004baa:	b004      	add	sp, #16
10004bac:	bd80      	pop	{r7, pc}
10004bae:	46c0      	nop			; (mov r8, r8)
10004bb0:	4000c000 	.word	0x4000c000

10004bb4 <unreset_block_wait>:
/*! \brief Bring specified HW blocks out of reset and wait for completion
 *  \ingroup hardware_resets
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
10004bb4:	b580      	push	{r7, lr}
10004bb6:	b084      	sub	sp, #16
10004bb8:	af00      	add	r7, sp, #0
10004bba:	6078      	str	r0, [r7, #4]
10004bbc:	4b0b      	ldr	r3, [pc, #44]	; (10004bec <unreset_block_wait+0x38>)
10004bbe:	60fb      	str	r3, [r7, #12]
10004bc0:	687b      	ldr	r3, [r7, #4]
10004bc2:	60bb      	str	r3, [r7, #8]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004bc4:	68fb      	ldr	r3, [r7, #12]
10004bc6:	22c0      	movs	r2, #192	; 0xc0
10004bc8:	0192      	lsls	r2, r2, #6
10004bca:	4313      	orrs	r3, r2
10004bcc:	68ba      	ldr	r2, [r7, #8]
10004bce:	601a      	str	r2, [r3, #0]
}
10004bd0:	46c0      	nop			; (mov r8, r8)
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10004bd2:	e000      	b.n	10004bd6 <unreset_block_wait+0x22>
 *
 * No-op function intended to be called by any tight hardware polling loop. Using this ubiquitously
 * makes it much easier to find tight loops, but also in the future \#ifdef-ed support for lockup
 * debugging might be added
 */
static __force_inline void tight_loop_contents(void) {}
10004bd4:	46c0      	nop			; (mov r8, r8)
10004bd6:	4b05      	ldr	r3, [pc, #20]	; (10004bec <unreset_block_wait+0x38>)
10004bd8:	689b      	ldr	r3, [r3, #8]
10004bda:	43db      	mvns	r3, r3
10004bdc:	687a      	ldr	r2, [r7, #4]
10004bde:	4013      	ands	r3, r2
10004be0:	d1f8      	bne.n	10004bd4 <unreset_block_wait+0x20>
        tight_loop_contents();
}
10004be2:	46c0      	nop			; (mov r8, r8)
10004be4:	46c0      	nop			; (mov r8, r8)
10004be6:	46bd      	mov	sp, r7
10004be8:	b004      	add	sp, #16
10004bea:	bd80      	pop	{r7, pc}
10004bec:	4000c000 	.word	0x4000c000

10004bf0 <_hw_endpoint_buffer_control_get_value32>:
static inline uint32_t _hw_endpoint_buffer_control_get_value32(struct hw_endpoint *ep) {
10004bf0:	b580      	push	{r7, lr}
10004bf2:	b082      	sub	sp, #8
10004bf4:	af00      	add	r7, sp, #0
10004bf6:	6078      	str	r0, [r7, #4]
    return *ep->buffer_control;
10004bf8:	687b      	ldr	r3, [r7, #4]
10004bfa:	689b      	ldr	r3, [r3, #8]
10004bfc:	681b      	ldr	r3, [r3, #0]
}
10004bfe:	0018      	movs	r0, r3
10004c00:	46bd      	mov	sp, r7
10004c02:	b002      	add	sp, #8
10004c04:	bd80      	pop	{r7, pc}

10004c06 <_hw_endpoint_buffer_control_set_value32>:
static inline void _hw_endpoint_buffer_control_set_value32(struct hw_endpoint *ep, uint32_t value) {
10004c06:	b580      	push	{r7, lr}
10004c08:	b082      	sub	sp, #8
10004c0a:	af00      	add	r7, sp, #0
10004c0c:	6078      	str	r0, [r7, #4]
10004c0e:	6039      	str	r1, [r7, #0]
    return _hw_endpoint_buffer_control_update32(ep, 0, value);
10004c10:	683a      	ldr	r2, [r7, #0]
10004c12:	687b      	ldr	r3, [r7, #4]
10004c14:	2100      	movs	r1, #0
10004c16:	0018      	movs	r0, r3
10004c18:	f000 f844 	bl	10004ca4 <_hw_endpoint_buffer_control_update32>
}
10004c1c:	46bd      	mov	sp, r7
10004c1e:	b002      	add	sp, #8
10004c20:	bd80      	pop	{r7, pc}

10004c22 <_hw_endpoint_lock_update>:
const char *ep_dir_string[] = {
        "out",
        "in",
};

static inline void _hw_endpoint_lock_update(__unused struct hw_endpoint * ep, __unused int delta) {
10004c22:	b580      	push	{r7, lr}
10004c24:	b082      	sub	sp, #8
10004c26:	af00      	add	r7, sp, #0
10004c28:	6078      	str	r0, [r7, #4]
10004c2a:	6039      	str	r1, [r7, #0]
    // todo add critsec as necessary to prevent issues between worker and IRQ...
    //  note that this is perhaps as simple as disabling IRQs because it would make
    //  sense to have worker and IRQ on same core, however I think using critsec is about equivalent.
}
10004c2c:	46c0      	nop			; (mov r8, r8)
10004c2e:	46bd      	mov	sp, r7
10004c30:	b002      	add	sp, #8
10004c32:	bd80      	pop	{r7, pc}

10004c34 <rp2040_usb_init>:
//--------------------------------------------------------------------+
//
//--------------------------------------------------------------------+

void rp2040_usb_init(void)
{
10004c34:	b580      	push	{r7, lr}
10004c36:	af00      	add	r7, sp, #0
  // Reset usb controller
  reset_block(RESETS_RESET_USBCTRL_BITS);
10004c38:	2380      	movs	r3, #128	; 0x80
10004c3a:	045b      	lsls	r3, r3, #17
10004c3c:	0018      	movs	r0, r3
10004c3e:	f7ff ffa3 	bl	10004b88 <reset_block>
  unreset_block_wait(RESETS_RESET_USBCTRL_BITS);
10004c42:	2380      	movs	r3, #128	; 0x80
10004c44:	045b      	lsls	r3, r3, #17
10004c46:	0018      	movs	r0, r3
10004c48:	f7ff ffb4 	bl	10004bb4 <unreset_block_wait>

  // Clear any previous state just in case
  memset(usb_hw, 0, sizeof(*usb_hw));
10004c4c:	4b09      	ldr	r3, [pc, #36]	; (10004c74 <rp2040_usb_init+0x40>)
10004c4e:	229c      	movs	r2, #156	; 0x9c
10004c50:	2100      	movs	r1, #0
10004c52:	0018      	movs	r0, r3
10004c54:	f008 f980 	bl	1000cf58 <__wrap_memset>
  memset(usb_dpram, 0, sizeof(*usb_dpram));
10004c58:	2380      	movs	r3, #128	; 0x80
10004c5a:	015b      	lsls	r3, r3, #5
10004c5c:	4806      	ldr	r0, [pc, #24]	; (10004c78 <rp2040_usb_init+0x44>)
10004c5e:	001a      	movs	r2, r3
10004c60:	2100      	movs	r1, #0
10004c62:	f008 f979 	bl	1000cf58 <__wrap_memset>

  // Mux the controller to the onboard usb phy
  usb_hw->muxing = USB_USB_MUXING_TO_PHY_BITS | USB_USB_MUXING_SOFTCON_BITS;
10004c66:	4b03      	ldr	r3, [pc, #12]	; (10004c74 <rp2040_usb_init+0x40>)
10004c68:	2209      	movs	r2, #9
10004c6a:	675a      	str	r2, [r3, #116]	; 0x74
}
10004c6c:	46c0      	nop			; (mov r8, r8)
10004c6e:	46bd      	mov	sp, r7
10004c70:	bd80      	pop	{r7, pc}
10004c72:	46c0      	nop			; (mov r8, r8)
10004c74:	50110000 	.word	0x50110000
10004c78:	50100000 	.word	0x50100000

10004c7c <hw_endpoint_reset_transfer>:

void hw_endpoint_reset_transfer(struct hw_endpoint *ep)
{
10004c7c:	b580      	push	{r7, lr}
10004c7e:	b082      	sub	sp, #8
10004c80:	af00      	add	r7, sp, #0
10004c82:	6078      	str	r0, [r7, #4]
  ep->active = false;
10004c84:	687b      	ldr	r3, [r7, #4]
10004c86:	2200      	movs	r2, #0
10004c88:	741a      	strb	r2, [r3, #16]
  ep->remaining_len = 0;
10004c8a:	687b      	ldr	r3, [r7, #4]
10004c8c:	2200      	movs	r2, #0
10004c8e:	825a      	strh	r2, [r3, #18]
  ep->xferred_len = 0;
10004c90:	687b      	ldr	r3, [r7, #4]
10004c92:	2200      	movs	r2, #0
10004c94:	829a      	strh	r2, [r3, #20]
  ep->user_buf = 0;
10004c96:	687b      	ldr	r3, [r7, #4]
10004c98:	2200      	movs	r2, #0
10004c9a:	619a      	str	r2, [r3, #24]
}
10004c9c:	46c0      	nop			; (mov r8, r8)
10004c9e:	46bd      	mov	sp, r7
10004ca0:	b002      	add	sp, #8
10004ca2:	bd80      	pop	{r7, pc}

10004ca4 <_hw_endpoint_buffer_control_update32>:

void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10004ca4:	b590      	push	{r4, r7, lr}
10004ca6:	b087      	sub	sp, #28
10004ca8:	af00      	add	r7, sp, #0
10004caa:	60f8      	str	r0, [r7, #12]
10004cac:	60b9      	str	r1, [r7, #8]
10004cae:	607a      	str	r2, [r7, #4]
    uint32_t value = 0;
10004cb0:	2300      	movs	r3, #0
10004cb2:	617b      	str	r3, [r7, #20]
    if (and_mask) {
10004cb4:	68bb      	ldr	r3, [r7, #8]
10004cb6:	2b00      	cmp	r3, #0
10004cb8:	d005      	beq.n	10004cc6 <_hw_endpoint_buffer_control_update32+0x22>
        value = *ep->buffer_control & and_mask;
10004cba:	68fb      	ldr	r3, [r7, #12]
10004cbc:	689b      	ldr	r3, [r3, #8]
10004cbe:	681a      	ldr	r2, [r3, #0]
10004cc0:	68bb      	ldr	r3, [r7, #8]
10004cc2:	4013      	ands	r3, r2
10004cc4:	617b      	str	r3, [r7, #20]
    }
    if (or_mask) {
10004cc6:	687b      	ldr	r3, [r7, #4]
10004cc8:	2b00      	cmp	r3, #0
10004cca:	d031      	beq.n	10004d30 <_hw_endpoint_buffer_control_update32+0x8c>
        value |= or_mask;
10004ccc:	697a      	ldr	r2, [r7, #20]
10004cce:	687b      	ldr	r3, [r7, #4]
10004cd0:	4313      	orrs	r3, r2
10004cd2:	617b      	str	r3, [r7, #20]
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10004cd4:	687a      	ldr	r2, [r7, #4]
10004cd6:	2380      	movs	r3, #128	; 0x80
10004cd8:	00db      	lsls	r3, r3, #3
10004cda:	4013      	ands	r3, r2
10004cdc:	d028      	beq.n	10004d30 <_hw_endpoint_buffer_control_update32+0x8c>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10004cde:	68fb      	ldr	r3, [r7, #12]
10004ce0:	689b      	ldr	r3, [r3, #8]
10004ce2:	681a      	ldr	r2, [r3, #0]
10004ce4:	2380      	movs	r3, #128	; 0x80
10004ce6:	00db      	lsls	r3, r3, #3
10004ce8:	4013      	ands	r3, r2
10004cea:	d015      	beq.n	10004d18 <_hw_endpoint_buffer_control_update32+0x74>
                panic("ep %d %s was already available", tu_edpt_number(ep->ep_addr), ep_dir_string[tu_edpt_dir(ep->ep_addr)]);
10004cec:	68fb      	ldr	r3, [r7, #12]
10004cee:	789b      	ldrb	r3, [r3, #2]
10004cf0:	0018      	movs	r0, r3
10004cf2:	f7ff ff3a 	bl	10004b6a <tu_edpt_number>
10004cf6:	0003      	movs	r3, r0
10004cf8:	001c      	movs	r4, r3
10004cfa:	68fb      	ldr	r3, [r7, #12]
10004cfc:	789b      	ldrb	r3, [r3, #2]
10004cfe:	0018      	movs	r0, r3
10004d00:	f7ff ff25 	bl	10004b4e <tu_edpt_dir>
10004d04:	0003      	movs	r3, r0
10004d06:	001a      	movs	r2, r3
10004d08:	4b0d      	ldr	r3, [pc, #52]	; (10004d40 <_hw_endpoint_buffer_control_update32+0x9c>)
10004d0a:	0092      	lsls	r2, r2, #2
10004d0c:	58d2      	ldr	r2, [r2, r3]
10004d0e:	4b0d      	ldr	r3, [pc, #52]	; (10004d44 <_hw_endpoint_buffer_control_update32+0xa0>)
10004d10:	0021      	movs	r1, r4
10004d12:	0018      	movs	r0, r3
10004d14:	f006 f830 	bl	1000ad78 <panic>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10004d18:	68fb      	ldr	r3, [r7, #12]
10004d1a:	689b      	ldr	r3, [r3, #8]
10004d1c:	697a      	ldr	r2, [r7, #20]
10004d1e:	490a      	ldr	r1, [pc, #40]	; (10004d48 <_hw_endpoint_buffer_control_update32+0xa4>)
10004d20:	400a      	ands	r2, r1
10004d22:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#if !TUSB_OPT_HOST_ENABLED
            __asm volatile (
10004d24:	e7ff      	b.n	10004d26 <_hw_endpoint_buffer_control_update32+0x82>
10004d26:	e7ff      	b.n	10004d28 <_hw_endpoint_buffer_control_update32+0x84>
10004d28:	e7ff      	b.n	10004d2a <_hw_endpoint_buffer_control_update32+0x86>
10004d2a:	e7ff      	b.n	10004d2c <_hw_endpoint_buffer_control_update32+0x88>
10004d2c:	e7ff      	b.n	10004d2e <_hw_endpoint_buffer_control_update32+0x8a>
10004d2e:	e7ff      	b.n	10004d30 <_hw_endpoint_buffer_control_update32+0x8c>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
10004d30:	68fb      	ldr	r3, [r7, #12]
10004d32:	689b      	ldr	r3, [r3, #8]
10004d34:	697a      	ldr	r2, [r7, #20]
10004d36:	601a      	str	r2, [r3, #0]
}
10004d38:	46c0      	nop			; (mov r8, r8)
10004d3a:	46bd      	mov	sp, r7
10004d3c:	b007      	add	sp, #28
10004d3e:	bd90      	pop	{r4, r7, pc}
10004d40:	2000066c 	.word	0x2000066c
10004d44:	1000d3ec 	.word	0x1000d3ec
10004d48:	fffffbff 	.word	0xfffffbff

10004d4c <prepare_ep_buffer>:

// prepare buffer, return buffer control
static uint32_t prepare_ep_buffer(struct hw_endpoint *ep, uint8_t buf_id)
{
10004d4c:	b590      	push	{r4, r7, lr}
10004d4e:	b087      	sub	sp, #28
10004d50:	af00      	add	r7, sp, #0
10004d52:	6078      	str	r0, [r7, #4]
10004d54:	000a      	movs	r2, r1
10004d56:	1cfb      	adds	r3, r7, #3
10004d58:	701a      	strb	r2, [r3, #0]
  uint16_t const buflen = tu_min16(ep->remaining_len, ep->wMaxPacketSize);
10004d5a:	687b      	ldr	r3, [r7, #4]
10004d5c:	8a59      	ldrh	r1, [r3, #18]
10004d5e:	687b      	ldr	r3, [r7, #4]
10004d60:	8b9a      	ldrh	r2, [r3, #28]
10004d62:	2010      	movs	r0, #16
10004d64:	183b      	adds	r3, r7, r0
10004d66:	8019      	strh	r1, [r3, #0]
10004d68:	210e      	movs	r1, #14
10004d6a:	187b      	adds	r3, r7, r1
10004d6c:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10004d6e:	183b      	adds	r3, r7, r0
10004d70:	187a      	adds	r2, r7, r1
10004d72:	8810      	ldrh	r0, [r2, #0]
10004d74:	881b      	ldrh	r3, [r3, #0]
10004d76:	b299      	uxth	r1, r3
10004d78:	b282      	uxth	r2, r0
10004d7a:	4291      	cmp	r1, r2
10004d7c:	d900      	bls.n	10004d80 <prepare_ep_buffer+0x34>
10004d7e:	1c03      	adds	r3, r0, #0
10004d80:	b29a      	uxth	r2, r3
10004d82:	2112      	movs	r1, #18
10004d84:	187b      	adds	r3, r7, r1
10004d86:	801a      	strh	r2, [r3, #0]
  ep->remaining_len = (uint16_t)(ep->remaining_len - buflen);
10004d88:	687b      	ldr	r3, [r7, #4]
10004d8a:	8a5a      	ldrh	r2, [r3, #18]
10004d8c:	187b      	adds	r3, r7, r1
10004d8e:	881b      	ldrh	r3, [r3, #0]
10004d90:	1ad3      	subs	r3, r2, r3
10004d92:	b29a      	uxth	r2, r3
10004d94:	687b      	ldr	r3, [r7, #4]
10004d96:	825a      	strh	r2, [r3, #18]

  uint32_t buf_ctrl = buflen | USB_BUF_CTRL_AVAIL;
10004d98:	187b      	adds	r3, r7, r1
10004d9a:	881b      	ldrh	r3, [r3, #0]
10004d9c:	2280      	movs	r2, #128	; 0x80
10004d9e:	00d2      	lsls	r2, r2, #3
10004da0:	4313      	orrs	r3, r2
10004da2:	b29b      	uxth	r3, r3
10004da4:	617b      	str	r3, [r7, #20]

  // PID
  buf_ctrl |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10004da6:	687b      	ldr	r3, [r7, #4]
10004da8:	78db      	ldrb	r3, [r3, #3]
10004daa:	2b00      	cmp	r3, #0
10004dac:	d002      	beq.n	10004db4 <prepare_ep_buffer+0x68>
10004dae:	2380      	movs	r3, #128	; 0x80
10004db0:	019b      	lsls	r3, r3, #6
10004db2:	e000      	b.n	10004db6 <prepare_ep_buffer+0x6a>
10004db4:	2300      	movs	r3, #0
10004db6:	697a      	ldr	r2, [r7, #20]
10004db8:	4313      	orrs	r3, r2
10004dba:	617b      	str	r3, [r7, #20]
  ep->next_pid ^= 1u;
10004dbc:	687b      	ldr	r3, [r7, #4]
10004dbe:	78db      	ldrb	r3, [r3, #3]
10004dc0:	2201      	movs	r2, #1
10004dc2:	4053      	eors	r3, r2
10004dc4:	b2da      	uxtb	r2, r3
10004dc6:	687b      	ldr	r3, [r7, #4]
10004dc8:	70da      	strb	r2, [r3, #3]

  if ( !ep->rx )
10004dca:	687b      	ldr	r3, [r7, #4]
10004dcc:	785b      	ldrb	r3, [r3, #1]
10004dce:	2201      	movs	r2, #1
10004dd0:	4053      	eors	r3, r2
10004dd2:	b2db      	uxtb	r3, r3
10004dd4:	2b00      	cmp	r3, #0
10004dd6:	d019      	beq.n	10004e0c <prepare_ep_buffer+0xc0>
  {
    // Copy data from user buffer to hw buffer
    memcpy(ep->hw_data_buf + buf_id*64, ep->user_buf, buflen);
10004dd8:	687b      	ldr	r3, [r7, #4]
10004dda:	68db      	ldr	r3, [r3, #12]
10004ddc:	1cfa      	adds	r2, r7, #3
10004dde:	7812      	ldrb	r2, [r2, #0]
10004de0:	0192      	lsls	r2, r2, #6
10004de2:	1898      	adds	r0, r3, r2
10004de4:	687b      	ldr	r3, [r7, #4]
10004de6:	6999      	ldr	r1, [r3, #24]
10004de8:	2412      	movs	r4, #18
10004dea:	193b      	adds	r3, r7, r4
10004dec:	881b      	ldrh	r3, [r3, #0]
10004dee:	001a      	movs	r2, r3
10004df0:	f008 f8b8 	bl	1000cf64 <__wrap___aeabi_memcpy>
    ep->user_buf += buflen;
10004df4:	687b      	ldr	r3, [r7, #4]
10004df6:	699a      	ldr	r2, [r3, #24]
10004df8:	193b      	adds	r3, r7, r4
10004dfa:	881b      	ldrh	r3, [r3, #0]
10004dfc:	18d2      	adds	r2, r2, r3
10004dfe:	687b      	ldr	r3, [r7, #4]
10004e00:	619a      	str	r2, [r3, #24]

    // Mark as full
    buf_ctrl |= USB_BUF_CTRL_FULL;
10004e02:	697b      	ldr	r3, [r7, #20]
10004e04:	2280      	movs	r2, #128	; 0x80
10004e06:	0212      	lsls	r2, r2, #8
10004e08:	4313      	orrs	r3, r2
10004e0a:	617b      	str	r3, [r7, #20]
  }

  // Is this the last buffer? Only really matters for host mode. Will trigger
  // the trans complete irq but also stop it polling. We only really care about
  // trans complete for setup packets being sent
  if (ep->remaining_len == 0)
10004e0c:	687b      	ldr	r3, [r7, #4]
10004e0e:	8a5b      	ldrh	r3, [r3, #18]
10004e10:	2b00      	cmp	r3, #0
10004e12:	d104      	bne.n	10004e1e <prepare_ep_buffer+0xd2>
  {
    buf_ctrl |= USB_BUF_CTRL_LAST;
10004e14:	697b      	ldr	r3, [r7, #20]
10004e16:	2280      	movs	r2, #128	; 0x80
10004e18:	01d2      	lsls	r2, r2, #7
10004e1a:	4313      	orrs	r3, r2
10004e1c:	617b      	str	r3, [r7, #20]
  }

  if (buf_id) buf_ctrl = buf_ctrl << 16;
10004e1e:	1cfb      	adds	r3, r7, #3
10004e20:	781b      	ldrb	r3, [r3, #0]
10004e22:	2b00      	cmp	r3, #0
10004e24:	d002      	beq.n	10004e2c <prepare_ep_buffer+0xe0>
10004e26:	697b      	ldr	r3, [r7, #20]
10004e28:	041b      	lsls	r3, r3, #16
10004e2a:	617b      	str	r3, [r7, #20]

  return buf_ctrl;
10004e2c:	697b      	ldr	r3, [r7, #20]
}
10004e2e:	0018      	movs	r0, r3
10004e30:	46bd      	mov	sp, r7
10004e32:	b007      	add	sp, #28
10004e34:	bd90      	pop	{r4, r7, pc}
	...

10004e38 <_hw_endpoint_start_next_buffer>:

// Prepare buffer control register value
static void _hw_endpoint_start_next_buffer(struct hw_endpoint *ep)
{
10004e38:	b580      	push	{r7, lr}
10004e3a:	b086      	sub	sp, #24
10004e3c:	af00      	add	r7, sp, #0
10004e3e:	6078      	str	r0, [r7, #4]
  uint32_t ep_ctrl = *ep->endpoint_control;
10004e40:	687b      	ldr	r3, [r7, #4]
10004e42:	685b      	ldr	r3, [r3, #4]
10004e44:	681b      	ldr	r3, [r3, #0]
10004e46:	617b      	str	r3, [r7, #20]

  // always compute and start with buffer 0
  uint32_t buf_ctrl = prepare_ep_buffer(ep, 0) | USB_BUF_CTRL_SEL;
10004e48:	687b      	ldr	r3, [r7, #4]
10004e4a:	2100      	movs	r1, #0
10004e4c:	0018      	movs	r0, r3
10004e4e:	f7ff ff7d 	bl	10004d4c <prepare_ep_buffer>
10004e52:	0002      	movs	r2, r0
10004e54:	2380      	movs	r3, #128	; 0x80
10004e56:	015b      	lsls	r3, r3, #5
10004e58:	4313      	orrs	r3, r2
10004e5a:	613b      	str	r3, [r7, #16]

  // For now: skip double buffered for Device mode, OUT endpoint since
  // host could send < 64 bytes and cause short packet on buffer0
  // NOTE this could happen to Host mode IN endpoint
  bool const force_single = !(usb_hw->main_ctrl & USB_MAIN_CTRL_HOST_NDEVICE_BITS) && !tu_edpt_dir(ep->ep_addr);
10004e5c:	4b25      	ldr	r3, [pc, #148]	; (10004ef4 <_hw_endpoint_start_next_buffer+0xbc>)
10004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004e60:	2202      	movs	r2, #2
10004e62:	4013      	ands	r3, r2
10004e64:	d108      	bne.n	10004e78 <_hw_endpoint_start_next_buffer+0x40>
10004e66:	687b      	ldr	r3, [r7, #4]
10004e68:	789b      	ldrb	r3, [r3, #2]
10004e6a:	0018      	movs	r0, r3
10004e6c:	f7ff fe6f 	bl	10004b4e <tu_edpt_dir>
10004e70:	1e03      	subs	r3, r0, #0
10004e72:	d101      	bne.n	10004e78 <_hw_endpoint_start_next_buffer+0x40>
10004e74:	2201      	movs	r2, #1
10004e76:	e000      	b.n	10004e7a <_hw_endpoint_start_next_buffer+0x42>
10004e78:	2200      	movs	r2, #0
10004e7a:	200f      	movs	r0, #15
10004e7c:	183b      	adds	r3, r7, r0
10004e7e:	701a      	strb	r2, [r3, #0]
10004e80:	781a      	ldrb	r2, [r3, #0]
10004e82:	2101      	movs	r1, #1
10004e84:	400a      	ands	r2, r1
10004e86:	701a      	strb	r2, [r3, #0]

  if(ep->remaining_len && !force_single)
10004e88:	687b      	ldr	r3, [r7, #4]
10004e8a:	8a5b      	ldrh	r3, [r3, #18]
10004e8c:	2b00      	cmp	r3, #0
10004e8e:	d019      	beq.n	10004ec4 <_hw_endpoint_start_next_buffer+0x8c>
10004e90:	183b      	adds	r3, r7, r0
10004e92:	781b      	ldrb	r3, [r3, #0]
10004e94:	2201      	movs	r2, #1
10004e96:	4053      	eors	r3, r2
10004e98:	b2db      	uxtb	r3, r3
10004e9a:	2b00      	cmp	r3, #0
10004e9c:	d012      	beq.n	10004ec4 <_hw_endpoint_start_next_buffer+0x8c>
  {
    // Use buffer 1 (double buffered) if there is still data
    // TODO: Isochronous for buffer1 bit-field is different than CBI (control bulk, interrupt)

    buf_ctrl |= prepare_ep_buffer(ep, 1);
10004e9e:	687b      	ldr	r3, [r7, #4]
10004ea0:	2101      	movs	r1, #1
10004ea2:	0018      	movs	r0, r3
10004ea4:	f7ff ff52 	bl	10004d4c <prepare_ep_buffer>
10004ea8:	0002      	movs	r2, r0
10004eaa:	693b      	ldr	r3, [r7, #16]
10004eac:	4313      	orrs	r3, r2
10004eae:	613b      	str	r3, [r7, #16]

    // Set endpoint control double buffered bit if needed
    ep_ctrl &= ~EP_CTRL_INTERRUPT_PER_BUFFER;
10004eb0:	697b      	ldr	r3, [r7, #20]
10004eb2:	4a11      	ldr	r2, [pc, #68]	; (10004ef8 <_hw_endpoint_start_next_buffer+0xc0>)
10004eb4:	4013      	ands	r3, r2
10004eb6:	617b      	str	r3, [r7, #20]
    ep_ctrl |= EP_CTRL_DOUBLE_BUFFERED_BITS | EP_CTRL_INTERRUPT_PER_DOUBLE_BUFFER;
10004eb8:	697b      	ldr	r3, [r7, #20]
10004eba:	22a0      	movs	r2, #160	; 0xa0
10004ebc:	05d2      	lsls	r2, r2, #23
10004ebe:	4313      	orrs	r3, r2
10004ec0:	617b      	str	r3, [r7, #20]
10004ec2:	e008      	b.n	10004ed6 <_hw_endpoint_start_next_buffer+0x9e>
  }else
  {
    // Single buffered since 1 is enough
    ep_ctrl &= ~(EP_CTRL_DOUBLE_BUFFERED_BITS | EP_CTRL_INTERRUPT_PER_DOUBLE_BUFFER);
10004ec4:	697b      	ldr	r3, [r7, #20]
10004ec6:	4a0d      	ldr	r2, [pc, #52]	; (10004efc <_hw_endpoint_start_next_buffer+0xc4>)
10004ec8:	4013      	ands	r3, r2
10004eca:	617b      	str	r3, [r7, #20]
    ep_ctrl |= EP_CTRL_INTERRUPT_PER_BUFFER;
10004ecc:	697b      	ldr	r3, [r7, #20]
10004ece:	2280      	movs	r2, #128	; 0x80
10004ed0:	0592      	lsls	r2, r2, #22
10004ed2:	4313      	orrs	r3, r2
10004ed4:	617b      	str	r3, [r7, #20]
  }

  *ep->endpoint_control = ep_ctrl;
10004ed6:	687b      	ldr	r3, [r7, #4]
10004ed8:	685b      	ldr	r3, [r3, #4]
10004eda:	697a      	ldr	r2, [r7, #20]
10004edc:	601a      	str	r2, [r3, #0]

  TU_LOG(3, "  Prepare BufCtrl: [0] = 0x%04u  [1] = 0x%04x\r\n", tu_u32_low16(buf_ctrl), tu_u32_high16(buf_ctrl));

  // Finally, write to buffer_control which will trigger the transfer
  // the next time the controller polls this dpram address
  _hw_endpoint_buffer_control_set_value32(ep, buf_ctrl);
10004ede:	693a      	ldr	r2, [r7, #16]
10004ee0:	687b      	ldr	r3, [r7, #4]
10004ee2:	0011      	movs	r1, r2
10004ee4:	0018      	movs	r0, r3
10004ee6:	f7ff fe8e 	bl	10004c06 <_hw_endpoint_buffer_control_set_value32>
}
10004eea:	46c0      	nop			; (mov r8, r8)
10004eec:	46bd      	mov	sp, r7
10004eee:	b006      	add	sp, #24
10004ef0:	bd80      	pop	{r7, pc}
10004ef2:	46c0      	nop			; (mov r8, r8)
10004ef4:	50110000 	.word	0x50110000
10004ef8:	dfffffff 	.word	0xdfffffff
10004efc:	afffffff 	.word	0xafffffff

10004f00 <hw_endpoint_xfer_start>:

void hw_endpoint_xfer_start(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len)
{
10004f00:	b590      	push	{r4, r7, lr}
10004f02:	b085      	sub	sp, #20
10004f04:	af00      	add	r7, sp, #0
10004f06:	60f8      	str	r0, [r7, #12]
10004f08:	60b9      	str	r1, [r7, #8]
10004f0a:	1dbb      	adds	r3, r7, #6
10004f0c:	801a      	strh	r2, [r3, #0]
  _hw_endpoint_lock_update(ep, 1);
10004f0e:	68fb      	ldr	r3, [r7, #12]
10004f10:	2101      	movs	r1, #1
10004f12:	0018      	movs	r0, r3
10004f14:	f7ff fe85 	bl	10004c22 <_hw_endpoint_lock_update>

  if ( ep->active )
10004f18:	68fb      	ldr	r3, [r7, #12]
10004f1a:	7c1b      	ldrb	r3, [r3, #16]
10004f1c:	2b00      	cmp	r3, #0
10004f1e:	d019      	beq.n	10004f54 <hw_endpoint_xfer_start+0x54>
  {
    // TODO: Is this acceptable for interrupt packets?
    TU_LOG(1, "WARN: starting new transfer on already active ep %d %s\n", tu_edpt_number(ep->ep_addr),
10004f20:	68fb      	ldr	r3, [r7, #12]
10004f22:	789b      	ldrb	r3, [r3, #2]
10004f24:	0018      	movs	r0, r3
10004f26:	f7ff fe20 	bl	10004b6a <tu_edpt_number>
10004f2a:	0003      	movs	r3, r0
10004f2c:	001c      	movs	r4, r3
10004f2e:	68fb      	ldr	r3, [r7, #12]
10004f30:	789b      	ldrb	r3, [r3, #2]
10004f32:	0018      	movs	r0, r3
10004f34:	f7ff fe0b 	bl	10004b4e <tu_edpt_dir>
10004f38:	0003      	movs	r3, r0
10004f3a:	001a      	movs	r2, r3
10004f3c:	4b13      	ldr	r3, [pc, #76]	; (10004f8c <hw_endpoint_xfer_start+0x8c>)
10004f3e:	0092      	lsls	r2, r2, #2
10004f40:	58d2      	ldr	r2, [r2, r3]
10004f42:	4b13      	ldr	r3, [pc, #76]	; (10004f90 <hw_endpoint_xfer_start+0x90>)
10004f44:	0021      	movs	r1, r4
10004f46:	0018      	movs	r0, r3
10004f48:	f006 f94a 	bl	1000b1e0 <__wrap_printf>
              ep_dir_string[tu_edpt_dir(ep->ep_addr)]);

    hw_endpoint_reset_transfer(ep);
10004f4c:	68fb      	ldr	r3, [r7, #12]
10004f4e:	0018      	movs	r0, r3
10004f50:	f7ff fe94 	bl	10004c7c <hw_endpoint_reset_transfer>
  }

  // Fill in info now that we're kicking off the hw
  ep->remaining_len = total_len;
10004f54:	68fb      	ldr	r3, [r7, #12]
10004f56:	1dba      	adds	r2, r7, #6
10004f58:	8812      	ldrh	r2, [r2, #0]
10004f5a:	825a      	strh	r2, [r3, #18]
  ep->xferred_len   = 0;
10004f5c:	68fb      	ldr	r3, [r7, #12]
10004f5e:	2200      	movs	r2, #0
10004f60:	829a      	strh	r2, [r3, #20]
  ep->active        = true;
10004f62:	68fb      	ldr	r3, [r7, #12]
10004f64:	2201      	movs	r2, #1
10004f66:	741a      	strb	r2, [r3, #16]
  ep->user_buf      = buffer;
10004f68:	68fb      	ldr	r3, [r7, #12]
10004f6a:	68ba      	ldr	r2, [r7, #8]
10004f6c:	619a      	str	r2, [r3, #24]

  _hw_endpoint_start_next_buffer(ep);
10004f6e:	68fb      	ldr	r3, [r7, #12]
10004f70:	0018      	movs	r0, r3
10004f72:	f7ff ff61 	bl	10004e38 <_hw_endpoint_start_next_buffer>
  _hw_endpoint_lock_update(ep, -1);
10004f76:	2301      	movs	r3, #1
10004f78:	425a      	negs	r2, r3
10004f7a:	68fb      	ldr	r3, [r7, #12]
10004f7c:	0011      	movs	r1, r2
10004f7e:	0018      	movs	r0, r3
10004f80:	f7ff fe4f 	bl	10004c22 <_hw_endpoint_lock_update>
}
10004f84:	46c0      	nop			; (mov r8, r8)
10004f86:	46bd      	mov	sp, r7
10004f88:	b005      	add	sp, #20
10004f8a:	bd90      	pop	{r4, r7, pc}
10004f8c:	2000066c 	.word	0x2000066c
10004f90:	1000d40c 	.word	0x1000d40c

10004f94 <sync_ep_buffer>:

// sync endpoint buffer and return transferred bytes
static uint16_t sync_ep_buffer(struct hw_endpoint *ep, uint8_t buf_id)
{
10004f94:	b590      	push	{r4, r7, lr}
10004f96:	b085      	sub	sp, #20
10004f98:	af00      	add	r7, sp, #0
10004f9a:	6078      	str	r0, [r7, #4]
10004f9c:	000a      	movs	r2, r1
10004f9e:	1cfb      	adds	r3, r7, #3
10004fa0:	701a      	strb	r2, [r3, #0]
  uint32_t buf_ctrl = _hw_endpoint_buffer_control_get_value32(ep);
10004fa2:	687b      	ldr	r3, [r7, #4]
10004fa4:	0018      	movs	r0, r3
10004fa6:	f7ff fe23 	bl	10004bf0 <_hw_endpoint_buffer_control_get_value32>
10004faa:	0003      	movs	r3, r0
10004fac:	60fb      	str	r3, [r7, #12]
  if (buf_id)  buf_ctrl = buf_ctrl >> 16;
10004fae:	1cfb      	adds	r3, r7, #3
10004fb0:	781b      	ldrb	r3, [r3, #0]
10004fb2:	2b00      	cmp	r3, #0
10004fb4:	d002      	beq.n	10004fbc <sync_ep_buffer+0x28>
10004fb6:	68fb      	ldr	r3, [r7, #12]
10004fb8:	0c1b      	lsrs	r3, r3, #16
10004fba:	60fb      	str	r3, [r7, #12]

  uint16_t xferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
10004fbc:	68fb      	ldr	r3, [r7, #12]
10004fbe:	b29a      	uxth	r2, r3
10004fc0:	230a      	movs	r3, #10
10004fc2:	18fb      	adds	r3, r7, r3
10004fc4:	0592      	lsls	r2, r2, #22
10004fc6:	0d92      	lsrs	r2, r2, #22
10004fc8:	801a      	strh	r2, [r3, #0]

  if ( !ep->rx )
10004fca:	687b      	ldr	r3, [r7, #4]
10004fcc:	785b      	ldrb	r3, [r3, #1]
10004fce:	2201      	movs	r2, #1
10004fd0:	4053      	eors	r3, r2
10004fd2:	b2db      	uxtb	r3, r3
10004fd4:	2b00      	cmp	r3, #0
10004fd6:	d014      	beq.n	10005002 <sync_ep_buffer+0x6e>
  {
    // We are continuing a transfer here. If we are TX, we have successfully
    // sent some data can increase the length we have sent
    assert(!(buf_ctrl & USB_BUF_CTRL_FULL));
10004fd8:	68fa      	ldr	r2, [r7, #12]
10004fda:	2380      	movs	r3, #128	; 0x80
10004fdc:	021b      	lsls	r3, r3, #8
10004fde:	4013      	ands	r3, r2
10004fe0:	d005      	beq.n	10004fee <sync_ep_buffer+0x5a>
10004fe2:	4b25      	ldr	r3, [pc, #148]	; (10005078 <sync_ep_buffer+0xe4>)
10004fe4:	4a25      	ldr	r2, [pc, #148]	; (1000507c <sync_ep_buffer+0xe8>)
10004fe6:	4826      	ldr	r0, [pc, #152]	; (10005080 <sync_ep_buffer+0xec>)
10004fe8:	21d7      	movs	r1, #215	; 0xd7
10004fea:	f005 fe9f 	bl	1000ad2c <__assert_func>

    ep->xferred_len = (uint16_t)(ep->xferred_len + xferred_bytes);
10004fee:	687b      	ldr	r3, [r7, #4]
10004ff0:	8a9a      	ldrh	r2, [r3, #20]
10004ff2:	230a      	movs	r3, #10
10004ff4:	18fb      	adds	r3, r7, r3
10004ff6:	881b      	ldrh	r3, [r3, #0]
10004ff8:	18d3      	adds	r3, r2, r3
10004ffa:	b29a      	uxth	r2, r3
10004ffc:	687b      	ldr	r3, [r7, #4]
10004ffe:	829a      	strh	r2, [r3, #20]
10005000:	e028      	b.n	10005054 <sync_ep_buffer+0xc0>
  }else
  {
    // If we have received some data, so can increase the length
    // we have received AFTER we have copied it to the user buffer at the appropriate offset
    assert(buf_ctrl & USB_BUF_CTRL_FULL);
10005002:	68fa      	ldr	r2, [r7, #12]
10005004:	2380      	movs	r3, #128	; 0x80
10005006:	021b      	lsls	r3, r3, #8
10005008:	4013      	ands	r3, r2
1000500a:	d105      	bne.n	10005018 <sync_ep_buffer+0x84>
1000500c:	4b1d      	ldr	r3, [pc, #116]	; (10005084 <sync_ep_buffer+0xf0>)
1000500e:	4a1b      	ldr	r2, [pc, #108]	; (1000507c <sync_ep_buffer+0xe8>)
10005010:	481b      	ldr	r0, [pc, #108]	; (10005080 <sync_ep_buffer+0xec>)
10005012:	21de      	movs	r1, #222	; 0xde
10005014:	f005 fe8a 	bl	1000ad2c <__assert_func>

    memcpy(ep->user_buf, ep->hw_data_buf + buf_id*64, xferred_bytes);
10005018:	687b      	ldr	r3, [r7, #4]
1000501a:	6998      	ldr	r0, [r3, #24]
1000501c:	687b      	ldr	r3, [r7, #4]
1000501e:	68db      	ldr	r3, [r3, #12]
10005020:	1cfa      	adds	r2, r7, #3
10005022:	7812      	ldrb	r2, [r2, #0]
10005024:	0192      	lsls	r2, r2, #6
10005026:	1899      	adds	r1, r3, r2
10005028:	240a      	movs	r4, #10
1000502a:	193b      	adds	r3, r7, r4
1000502c:	881b      	ldrh	r3, [r3, #0]
1000502e:	001a      	movs	r2, r3
10005030:	f007 ff98 	bl	1000cf64 <__wrap___aeabi_memcpy>
    ep->xferred_len = (uint16_t)(ep->xferred_len + xferred_bytes);
10005034:	687b      	ldr	r3, [r7, #4]
10005036:	8a9a      	ldrh	r2, [r3, #20]
10005038:	0021      	movs	r1, r4
1000503a:	187b      	adds	r3, r7, r1
1000503c:	881b      	ldrh	r3, [r3, #0]
1000503e:	18d3      	adds	r3, r2, r3
10005040:	b29a      	uxth	r2, r3
10005042:	687b      	ldr	r3, [r7, #4]
10005044:	829a      	strh	r2, [r3, #20]
    ep->user_buf += xferred_bytes;
10005046:	687b      	ldr	r3, [r7, #4]
10005048:	699a      	ldr	r2, [r3, #24]
1000504a:	187b      	adds	r3, r7, r1
1000504c:	881b      	ldrh	r3, [r3, #0]
1000504e:	18d2      	adds	r2, r2, r3
10005050:	687b      	ldr	r3, [r7, #4]
10005052:	619a      	str	r2, [r3, #24]
  }

  // Short packet
  if (xferred_bytes < ep->wMaxPacketSize)
10005054:	687b      	ldr	r3, [r7, #4]
10005056:	8b9b      	ldrh	r3, [r3, #28]
10005058:	220a      	movs	r2, #10
1000505a:	18ba      	adds	r2, r7, r2
1000505c:	8812      	ldrh	r2, [r2, #0]
1000505e:	429a      	cmp	r2, r3
10005060:	d202      	bcs.n	10005068 <sync_ep_buffer+0xd4>
  {
    pico_trace("  Short packet on buffer %d with %u bytes\n", buf_id, xferred_bytes);
    // Reduce total length as this is last packet
    ep->remaining_len = 0;
10005062:	687b      	ldr	r3, [r7, #4]
10005064:	2200      	movs	r2, #0
10005066:	825a      	strh	r2, [r3, #18]
  }

  return xferred_bytes;
10005068:	230a      	movs	r3, #10
1000506a:	18fb      	adds	r3, r7, r3
1000506c:	881b      	ldrh	r3, [r3, #0]
}
1000506e:	0018      	movs	r0, r3
10005070:	46bd      	mov	sp, r7
10005072:	b005      	add	sp, #20
10005074:	bd90      	pop	{r4, r7, pc}
10005076:	46c0      	nop			; (mov r8, r8)
10005078:	1000d444 	.word	0x1000d444
1000507c:	1000d51c 	.word	0x1000d51c
10005080:	1000d464 	.word	0x1000d464
10005084:	1000d4d0 	.word	0x1000d4d0

10005088 <_hw_endpoint_xfer_sync>:

static void _hw_endpoint_xfer_sync (struct hw_endpoint *ep)
{
10005088:	b5b0      	push	{r4, r5, r7, lr}
1000508a:	b084      	sub	sp, #16
1000508c:	af00      	add	r7, sp, #0
1000508e:	6078      	str	r0, [r7, #4]
  // Update hw endpoint struct with info from hardware
  // after a buff status interrupt

  uint32_t __unused buf_ctrl = _hw_endpoint_buffer_control_get_value32(ep);
10005090:	687b      	ldr	r3, [r7, #4]
10005092:	0018      	movs	r0, r3
10005094:	f7ff fdac 	bl	10004bf0 <_hw_endpoint_buffer_control_get_value32>
10005098:	0003      	movs	r3, r0
1000509a:	60fb      	str	r3, [r7, #12]
  TU_LOG(3, "  Sync BufCtrl: [0] = 0x%04u  [1] = 0x%04x\r\n", tu_u32_low16(buf_ctrl), tu_u32_high16(buf_ctrl));

  // always sync buffer 0
  uint16_t buf0_bytes = sync_ep_buffer(ep, 0);
1000509c:	250a      	movs	r5, #10
1000509e:	197c      	adds	r4, r7, r5
100050a0:	687b      	ldr	r3, [r7, #4]
100050a2:	2100      	movs	r1, #0
100050a4:	0018      	movs	r0, r3
100050a6:	f7ff ff75 	bl	10004f94 <sync_ep_buffer>
100050aa:	0003      	movs	r3, r0
100050ac:	8023      	strh	r3, [r4, #0]

  // sync buffer 1 if double buffered
  if ( (*ep->endpoint_control) & EP_CTRL_DOUBLE_BUFFERED_BITS )
100050ae:	687b      	ldr	r3, [r7, #4]
100050b0:	685b      	ldr	r3, [r3, #4]
100050b2:	681a      	ldr	r2, [r3, #0]
100050b4:	2380      	movs	r3, #128	; 0x80
100050b6:	05db      	lsls	r3, r3, #23
100050b8:	4013      	ands	r3, r2
100050ba:	d00a      	beq.n	100050d2 <_hw_endpoint_xfer_sync+0x4a>
  {
    if (buf0_bytes == ep->wMaxPacketSize)
100050bc:	687b      	ldr	r3, [r7, #4]
100050be:	8b9b      	ldrh	r3, [r3, #28]
100050c0:	197a      	adds	r2, r7, r5
100050c2:	8812      	ldrh	r2, [r2, #0]
100050c4:	429a      	cmp	r2, r3
100050c6:	d104      	bne.n	100050d2 <_hw_endpoint_xfer_sync+0x4a>
    {
      // sync buffer 1 if not short packet
      sync_ep_buffer(ep, 1);
100050c8:	687b      	ldr	r3, [r7, #4]
100050ca:	2101      	movs	r1, #1
100050cc:	0018      	movs	r0, r3
100050ce:	f7ff ff61 	bl	10004f94 <sync_ep_buffer>
      TU_LOG(3, "----SHORT PACKET buffer0 on EP %02X:\r\n", ep->ep_addr);
      TU_LOG(3, "  BufCtrl: [0] = 0x%04u  [1] = 0x%04x\r\n", tu_u32_low16(buf_ctrl), tu_u32_high16(buf_ctrl));
#endif
    }
  }
}
100050d2:	46c0      	nop			; (mov r8, r8)
100050d4:	46bd      	mov	sp, r7
100050d6:	b004      	add	sp, #16
100050d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100050dc <hw_endpoint_xfer_continue>:

// Returns true if transfer is complete
bool hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
100050dc:	b580      	push	{r7, lr}
100050de:	b082      	sub	sp, #8
100050e0:	af00      	add	r7, sp, #0
100050e2:	6078      	str	r0, [r7, #4]
  _hw_endpoint_lock_update(ep, 1);
100050e4:	687b      	ldr	r3, [r7, #4]
100050e6:	2101      	movs	r1, #1
100050e8:	0018      	movs	r0, r3
100050ea:	f7ff fd9a 	bl	10004c22 <_hw_endpoint_lock_update>
  // Part way through a transfer
  if (!ep->active)
100050ee:	687b      	ldr	r3, [r7, #4]
100050f0:	7c1b      	ldrb	r3, [r3, #16]
100050f2:	2201      	movs	r2, #1
100050f4:	4053      	eors	r3, r2
100050f6:	b2db      	uxtb	r3, r3
100050f8:	2b00      	cmp	r3, #0
100050fa:	d00b      	beq.n	10005114 <hw_endpoint_xfer_continue+0x38>
  {
    panic("Can't continue xfer on inactive ep %d %s", tu_edpt_number(ep->ep_addr), ep_dir_string);
100050fc:	687b      	ldr	r3, [r7, #4]
100050fe:	789b      	ldrb	r3, [r3, #2]
10005100:	0018      	movs	r0, r3
10005102:	f7ff fd32 	bl	10004b6a <tu_edpt_number>
10005106:	0003      	movs	r3, r0
10005108:	0019      	movs	r1, r3
1000510a:	4a13      	ldr	r2, [pc, #76]	; (10005158 <hw_endpoint_xfer_continue+0x7c>)
1000510c:	4b13      	ldr	r3, [pc, #76]	; (1000515c <hw_endpoint_xfer_continue+0x80>)
1000510e:	0018      	movs	r0, r3
10005110:	f005 fe32 	bl	1000ad78 <panic>
  }

  // Update EP struct from hardware state
  _hw_endpoint_xfer_sync(ep);
10005114:	687b      	ldr	r3, [r7, #4]
10005116:	0018      	movs	r0, r3
10005118:	f7ff ffb6 	bl	10005088 <_hw_endpoint_xfer_sync>

  // Now we have synced our state with the hardware. Is there more data to transfer?
  // If we are done then notify tinyusb
  if (ep->remaining_len == 0)
1000511c:	687b      	ldr	r3, [r7, #4]
1000511e:	8a5b      	ldrh	r3, [r3, #18]
10005120:	2b00      	cmp	r3, #0
10005122:	d108      	bne.n	10005136 <hw_endpoint_xfer_continue+0x5a>
  {
    pico_trace("Completed transfer of %d bytes on ep %d %s\n",
               ep->xferred_len, tu_edpt_number(ep->ep_addr), ep_dir_string[tu_edpt_dir(ep->ep_addr)]);
    // Notify caller we are done so it can notify the tinyusb stack
    _hw_endpoint_lock_update(ep, -1);
10005124:	2301      	movs	r3, #1
10005126:	425a      	negs	r2, r3
10005128:	687b      	ldr	r3, [r7, #4]
1000512a:	0011      	movs	r1, r2
1000512c:	0018      	movs	r0, r3
1000512e:	f7ff fd78 	bl	10004c22 <_hw_endpoint_lock_update>
    return true;
10005132:	2301      	movs	r3, #1
10005134:	e00b      	b.n	1000514e <hw_endpoint_xfer_continue+0x72>
  }
  else
  {
    _hw_endpoint_start_next_buffer(ep);
10005136:	687b      	ldr	r3, [r7, #4]
10005138:	0018      	movs	r0, r3
1000513a:	f7ff fe7d 	bl	10004e38 <_hw_endpoint_start_next_buffer>
  }

  _hw_endpoint_lock_update(ep, -1);
1000513e:	2301      	movs	r3, #1
10005140:	425a      	negs	r2, r3
10005142:	687b      	ldr	r3, [r7, #4]
10005144:	0011      	movs	r1, r2
10005146:	0018      	movs	r0, r3
10005148:	f7ff fd6b 	bl	10004c22 <_hw_endpoint_lock_update>
  // More work to do
  return false;
1000514c:	2300      	movs	r3, #0
}
1000514e:	0018      	movs	r0, r3
10005150:	46bd      	mov	sp, r7
10005152:	b002      	add	sp, #8
10005154:	bd80      	pop	{r7, pc}
10005156:	46c0      	nop			; (mov r8, r8)
10005158:	2000066c 	.word	0x2000066c
1000515c:	1000d4f0 	.word	0x1000d4f0

10005160 <tu_edpt_dir>:
// Endpoint helper
//--------------------------------------------------------------------+

// Get direction from Endpoint address
static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
10005160:	b580      	push	{r7, lr}
10005162:	b082      	sub	sp, #8
10005164:	af00      	add	r7, sp, #0
10005166:	0002      	movs	r2, r0
10005168:	1dfb      	adds	r3, r7, #7
1000516a:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000516c:	1dfb      	adds	r3, r7, #7
1000516e:	781b      	ldrb	r3, [r3, #0]
10005170:	09db      	lsrs	r3, r3, #7
10005172:	b2db      	uxtb	r3, r3
}
10005174:	0018      	movs	r0, r3
10005176:	46bd      	mov	sp, r7
10005178:	b002      	add	sp, #8
1000517a:	bd80      	pop	{r7, pc}

1000517c <tu_edpt_number>:

// Get Endpoint number from address
static inline uint8_t tu_edpt_number(uint8_t addr)
{
1000517c:	b580      	push	{r7, lr}
1000517e:	b082      	sub	sp, #8
10005180:	af00      	add	r7, sp, #0
10005182:	0002      	movs	r2, r0
10005184:	1dfb      	adds	r3, r7, #7
10005186:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005188:	1dfb      	adds	r3, r7, #7
1000518a:	781b      	ldrb	r3, [r3, #0]
1000518c:	227f      	movs	r2, #127	; 0x7f
1000518e:	4013      	ands	r3, r2
10005190:	b2db      	uxtb	r3, r3
}
10005192:	0018      	movs	r0, r3
10005194:	46bd      	mov	sp, r7
10005196:	b002      	add	sp, #8
10005198:	bd80      	pop	{r7, pc}

1000519a <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
1000519a:	b580      	push	{r7, lr}
1000519c:	b084      	sub	sp, #16
1000519e:	af00      	add	r7, sp, #0
100051a0:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
100051a2:	687b      	ldr	r3, [r7, #4]
100051a4:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
100051a6:	68fb      	ldr	r3, [r7, #12]
100051a8:	781b      	ldrb	r3, [r3, #0]
100051aa:	001a      	movs	r2, r3
100051ac:	68fb      	ldr	r3, [r7, #12]
100051ae:	189b      	adds	r3, r3, r2
}
100051b0:	0018      	movs	r0, r3
100051b2:	46bd      	mov	sp, r7
100051b4:	b004      	add	sp, #16
100051b6:	bd80      	pop	{r7, pc}

100051b8 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
100051b8:	b580      	push	{r7, lr}
100051ba:	b082      	sub	sp, #8
100051bc:	af00      	add	r7, sp, #0
100051be:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
100051c0:	687b      	ldr	r3, [r7, #4]
100051c2:	3301      	adds	r3, #1
100051c4:	781b      	ldrb	r3, [r3, #0]
}
100051c6:	0018      	movs	r0, r3
100051c8:	46bd      	mov	sp, r7
100051ca:	b002      	add	sp, #8
100051cc:	bd80      	pop	{r7, pc}

100051ce <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
100051ce:	b580      	push	{r7, lr}
100051d0:	b082      	sub	sp, #8
100051d2:	af00      	add	r7, sp, #0
100051d4:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
100051d6:	687b      	ldr	r3, [r7, #4]
100051d8:	781b      	ldrb	r3, [r3, #0]
}
100051da:	0018      	movs	r0, r3
100051dc:	46bd      	mov	sp, r7
100051de:	b002      	add	sp, #8
100051e0:	bd80      	pop	{r7, pc}
	...

100051e4 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
100051e4:	b580      	push	{r7, lr}
100051e6:	af00      	add	r7, sp, #0
#if TUSB_OPT_DEVICE_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
100051e8:	2000      	movs	r0, #0
100051ea:	f7fd fa51 	bl	10002690 <tud_init>
100051ee:	0003      	movs	r3, r0
100051f0:	001a      	movs	r2, r3
100051f2:	2301      	movs	r3, #1
100051f4:	4053      	eors	r3, r2
100051f6:	b2db      	uxtb	r3, r3
100051f8:	2b00      	cmp	r3, #0
100051fa:	d007      	beq.n	1000520c <tusb_init+0x28>
100051fc:	4905      	ldr	r1, [pc, #20]	; (10005214 <tusb_init+0x30>)
100051fe:	4b06      	ldr	r3, [pc, #24]	; (10005218 <tusb_init+0x34>)
10005200:	2229      	movs	r2, #41	; 0x29
10005202:	0018      	movs	r0, r3
10005204:	f005 ffec 	bl	1000b1e0 <__wrap_printf>
10005208:	2300      	movs	r3, #0
1000520a:	e000      	b.n	1000520e <tusb_init+0x2a>

#if TUSB_OPT_HOST_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
1000520c:	2301      	movs	r3, #1
}
1000520e:	0018      	movs	r0, r3
10005210:	46bd      	mov	sp, r7
10005212:	bd80      	pop	{r7, pc}
10005214:	1000d698 	.word	0x1000d698
10005218:	1000d52c 	.word	0x1000d52c

1000521c <tusb_inited>:

bool tusb_inited(void)
{
1000521c:	b580      	push	{r7, lr}
1000521e:	b082      	sub	sp, #8
10005220:	af00      	add	r7, sp, #0
  bool ret = false;
10005222:	1dfb      	adds	r3, r7, #7
10005224:	2200      	movs	r2, #0
10005226:	701a      	strb	r2, [r3, #0]

#if TUSB_OPT_DEVICE_ENABLED
  ret = ret || tud_inited();
10005228:	1dfb      	adds	r3, r7, #7
1000522a:	781b      	ldrb	r3, [r3, #0]
1000522c:	2b00      	cmp	r3, #0
1000522e:	d103      	bne.n	10005238 <tusb_inited+0x1c>
10005230:	f7fd fa24 	bl	1000267c <tud_inited>
10005234:	1e03      	subs	r3, r0, #0
10005236:	d001      	beq.n	1000523c <tusb_inited+0x20>
10005238:	2201      	movs	r2, #1
1000523a:	e000      	b.n	1000523e <tusb_inited+0x22>
1000523c:	2200      	movs	r2, #0
1000523e:	1dfb      	adds	r3, r7, #7
10005240:	701a      	strb	r2, [r3, #0]
10005242:	781a      	ldrb	r2, [r3, #0]
10005244:	2101      	movs	r1, #1
10005246:	400a      	ands	r2, r1
10005248:	701a      	strb	r2, [r3, #0]

#if TUSB_OPT_HOST_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
1000524a:	1dfb      	adds	r3, r7, #7
1000524c:	781b      	ldrb	r3, [r3, #0]
}
1000524e:	0018      	movs	r0, r3
10005250:	46bd      	mov	sp, r7
10005252:	b002      	add	sp, #8
10005254:	bd80      	pop	{r7, pc}
	...

10005258 <tu_edpt_validate>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
10005258:	b580      	push	{r7, lr}
1000525a:	b084      	sub	sp, #16
1000525c:	af00      	add	r7, sp, #0
1000525e:	6078      	str	r0, [r7, #4]
10005260:	000a      	movs	r2, r1
10005262:	1cfb      	adds	r3, r7, #3
10005264:	701a      	strb	r2, [r3, #0]
  uint16_t const max_packet_size = tu_le16toh(desc_ep->wMaxPacketSize.size);
10005266:	687b      	ldr	r3, [r7, #4]
10005268:	791a      	ldrb	r2, [r3, #4]
1000526a:	795b      	ldrb	r3, [r3, #5]
1000526c:	2107      	movs	r1, #7
1000526e:	400b      	ands	r3, r1
10005270:	021b      	lsls	r3, r3, #8
10005272:	4313      	orrs	r3, r2
10005274:	b29a      	uxth	r2, r3
10005276:	230e      	movs	r3, #14
10005278:	18fb      	adds	r3, r7, r3
1000527a:	801a      	strh	r2, [r3, #0]
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
1000527c:	687b      	ldr	r3, [r7, #4]
1000527e:	78db      	ldrb	r3, [r3, #3]
10005280:	079b      	lsls	r3, r3, #30
10005282:	0f9b      	lsrs	r3, r3, #30
10005284:	b2db      	uxtb	r3, r3
10005286:	2b03      	cmp	r3, #3
10005288:	d03f      	beq.n	1000530a <tu_edpt_validate+0xb2>
1000528a:	dc58      	bgt.n	1000533e <tu_edpt_validate+0xe6>
1000528c:	2b01      	cmp	r3, #1
1000528e:	d002      	beq.n	10005296 <tu_edpt_validate+0x3e>
10005290:	2b02      	cmp	r3, #2
10005292:	d01a      	beq.n	100052ca <tu_edpt_validate+0x72>
10005294:	e053      	b.n	1000533e <tu_edpt_validate+0xe6>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
10005296:	1cfb      	adds	r3, r7, #3
10005298:	781b      	ldrb	r3, [r3, #0]
1000529a:	2b02      	cmp	r3, #2
1000529c:	d102      	bne.n	100052a4 <tu_edpt_validate+0x4c>
1000529e:	2380      	movs	r3, #128	; 0x80
100052a0:	00da      	lsls	r2, r3, #3
100052a2:	e000      	b.n	100052a6 <tu_edpt_validate+0x4e>
100052a4:	4a2c      	ldr	r2, [pc, #176]	; (10005358 <tu_edpt_validate+0x100>)
100052a6:	210a      	movs	r1, #10
100052a8:	187b      	adds	r3, r7, r1
100052aa:	801a      	strh	r2, [r3, #0]
      TU_ASSERT(max_packet_size <= spec_size);
100052ac:	230e      	movs	r3, #14
100052ae:	18fa      	adds	r2, r7, r3
100052b0:	187b      	adds	r3, r7, r1
100052b2:	8812      	ldrh	r2, [r2, #0]
100052b4:	881b      	ldrh	r3, [r3, #0]
100052b6:	429a      	cmp	r2, r3
100052b8:	d943      	bls.n	10005342 <tu_edpt_validate+0xea>
100052ba:	4928      	ldr	r1, [pc, #160]	; (1000535c <tu_edpt_validate+0x104>)
100052bc:	4b28      	ldr	r3, [pc, #160]	; (10005360 <tu_edpt_validate+0x108>)
100052be:	2250      	movs	r2, #80	; 0x50
100052c0:	0018      	movs	r0, r3
100052c2:	f005 ff8d 	bl	1000b1e0 <__wrap_printf>
100052c6:	2300      	movs	r3, #0
100052c8:	e041      	b.n	1000534e <tu_edpt_validate+0xf6>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
100052ca:	1cfb      	adds	r3, r7, #3
100052cc:	781b      	ldrb	r3, [r3, #0]
100052ce:	2b02      	cmp	r3, #2
100052d0:	d10e      	bne.n	100052f0 <tu_edpt_validate+0x98>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
100052d2:	230e      	movs	r3, #14
100052d4:	18fb      	adds	r3, r7, r3
100052d6:	881a      	ldrh	r2, [r3, #0]
100052d8:	2380      	movs	r3, #128	; 0x80
100052da:	009b      	lsls	r3, r3, #2
100052dc:	429a      	cmp	r2, r3
100052de:	d032      	beq.n	10005346 <tu_edpt_validate+0xee>
100052e0:	491e      	ldr	r1, [pc, #120]	; (1000535c <tu_edpt_validate+0x104>)
100052e2:	4b1f      	ldr	r3, [pc, #124]	; (10005360 <tu_edpt_validate+0x108>)
100052e4:	2258      	movs	r2, #88	; 0x58
100052e6:	0018      	movs	r0, r3
100052e8:	f005 ff7a 	bl	1000b1e0 <__wrap_printf>
100052ec:	2300      	movs	r3, #0
100052ee:	e02e      	b.n	1000534e <tu_edpt_validate+0xf6>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
100052f0:	230e      	movs	r3, #14
100052f2:	18fb      	adds	r3, r7, r3
100052f4:	881b      	ldrh	r3, [r3, #0]
100052f6:	2b40      	cmp	r3, #64	; 0x40
100052f8:	d925      	bls.n	10005346 <tu_edpt_validate+0xee>
100052fa:	4918      	ldr	r1, [pc, #96]	; (1000535c <tu_edpt_validate+0x104>)
100052fc:	4b18      	ldr	r3, [pc, #96]	; (10005360 <tu_edpt_validate+0x108>)
100052fe:	225c      	movs	r2, #92	; 0x5c
10005300:	0018      	movs	r0, r3
10005302:	f005 ff6d 	bl	1000b1e0 <__wrap_printf>
10005306:	2300      	movs	r3, #0
10005308:	e021      	b.n	1000534e <tu_edpt_validate+0xf6>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
1000530a:	1cfb      	adds	r3, r7, #3
1000530c:	781b      	ldrb	r3, [r3, #0]
1000530e:	2b02      	cmp	r3, #2
10005310:	d102      	bne.n	10005318 <tu_edpt_validate+0xc0>
10005312:	2380      	movs	r3, #128	; 0x80
10005314:	00da      	lsls	r2, r3, #3
10005316:	e000      	b.n	1000531a <tu_edpt_validate+0xc2>
10005318:	2240      	movs	r2, #64	; 0x40
1000531a:	210c      	movs	r1, #12
1000531c:	187b      	adds	r3, r7, r1
1000531e:	801a      	strh	r2, [r3, #0]
      TU_ASSERT(max_packet_size <= spec_size);
10005320:	230e      	movs	r3, #14
10005322:	18fa      	adds	r2, r7, r3
10005324:	187b      	adds	r3, r7, r1
10005326:	8812      	ldrh	r2, [r2, #0]
10005328:	881b      	ldrh	r3, [r3, #0]
1000532a:	429a      	cmp	r2, r3
1000532c:	d90d      	bls.n	1000534a <tu_edpt_validate+0xf2>
1000532e:	490b      	ldr	r1, [pc, #44]	; (1000535c <tu_edpt_validate+0x104>)
10005330:	4b0b      	ldr	r3, [pc, #44]	; (10005360 <tu_edpt_validate+0x108>)
10005332:	2263      	movs	r2, #99	; 0x63
10005334:	0018      	movs	r0, r3
10005336:	f005 ff53 	bl	1000b1e0 <__wrap_printf>
1000533a:	2300      	movs	r3, #0
1000533c:	e007      	b.n	1000534e <tu_edpt_validate+0xf6>
    }
    break;

    default: return false;
1000533e:	2300      	movs	r3, #0
10005340:	e005      	b.n	1000534e <tu_edpt_validate+0xf6>
    break;
10005342:	46c0      	nop			; (mov r8, r8)
10005344:	e002      	b.n	1000534c <tu_edpt_validate+0xf4>
    break;
10005346:	46c0      	nop			; (mov r8, r8)
10005348:	e000      	b.n	1000534c <tu_edpt_validate+0xf4>
    break;
1000534a:	46c0      	nop			; (mov r8, r8)
  }

  return true;
1000534c:	2301      	movs	r3, #1
}
1000534e:	0018      	movs	r0, r3
10005350:	46bd      	mov	sp, r7
10005352:	b004      	add	sp, #16
10005354:	bd80      	pop	{r7, pc}
10005356:	46c0      	nop			; (mov r8, r8)
10005358:	000003ff 	.word	0x000003ff
1000535c:	1000d6a4 	.word	0x1000d6a4
10005360:	1000d52c 	.word	0x1000d52c

10005364 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
10005364:	b5b0      	push	{r4, r5, r7, lr}
10005366:	b086      	sub	sp, #24
10005368:	af00      	add	r7, sp, #0
1000536a:	60f8      	str	r0, [r7, #12]
1000536c:	60b9      	str	r1, [r7, #8]
1000536e:	0019      	movs	r1, r3
10005370:	1dbb      	adds	r3, r7, #6
10005372:	801a      	strh	r2, [r3, #0]
10005374:	1d7b      	adds	r3, r7, #5
10005376:	1c0a      	adds	r2, r1, #0
10005378:	701a      	strb	r2, [r3, #0]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
1000537a:	68bb      	ldr	r3, [r7, #8]
1000537c:	617b      	str	r3, [r7, #20]
  uint16_t len = 0;
1000537e:	2312      	movs	r3, #18
10005380:	18fb      	adds	r3, r7, r3
10005382:	2200      	movs	r2, #0
10005384:	801a      	strh	r2, [r3, #0]

  while( len < desc_len )
10005386:	e030      	b.n	100053ea <tu_edpt_bind_driver+0x86>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10005388:	697b      	ldr	r3, [r7, #20]
1000538a:	0018      	movs	r0, r3
1000538c:	f7ff ff14 	bl	100051b8 <tu_desc_type>
10005390:	0003      	movs	r3, r0
10005392:	2b05      	cmp	r3, #5
10005394:	d117      	bne.n	100053c6 <tu_edpt_bind_driver+0x62>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10005396:	2511      	movs	r5, #17
10005398:	197b      	adds	r3, r7, r5
1000539a:	697a      	ldr	r2, [r7, #20]
1000539c:	7892      	ldrb	r2, [r2, #2]
1000539e:	701a      	strb	r2, [r3, #0]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
100053a0:	197b      	adds	r3, r7, r5
100053a2:	781b      	ldrb	r3, [r3, #0]
100053a4:	0018      	movs	r0, r3
100053a6:	f7ff fee9 	bl	1000517c <tu_edpt_number>
100053aa:	0003      	movs	r3, r0
100053ac:	005b      	lsls	r3, r3, #1
100053ae:	68fa      	ldr	r2, [r7, #12]
100053b0:	18d4      	adds	r4, r2, r3
100053b2:	197b      	adds	r3, r7, r5
100053b4:	781b      	ldrb	r3, [r3, #0]
100053b6:	0018      	movs	r0, r3
100053b8:	f7ff fed2 	bl	10005160 <tu_edpt_dir>
100053bc:	0003      	movs	r3, r0
100053be:	001a      	movs	r2, r3
100053c0:	1d7b      	adds	r3, r7, #5
100053c2:	781b      	ldrb	r3, [r3, #0]
100053c4:	54a3      	strb	r3, [r4, r2]
    }

    len   += (uint16_t) tu_desc_len(p_desc);
100053c6:	697b      	ldr	r3, [r7, #20]
100053c8:	0018      	movs	r0, r3
100053ca:	f7ff ff00 	bl	100051ce <tu_desc_len>
100053ce:	0003      	movs	r3, r0
100053d0:	b299      	uxth	r1, r3
100053d2:	2212      	movs	r2, #18
100053d4:	18bb      	adds	r3, r7, r2
100053d6:	18ba      	adds	r2, r7, r2
100053d8:	8812      	ldrh	r2, [r2, #0]
100053da:	188a      	adds	r2, r1, r2
100053dc:	801a      	strh	r2, [r3, #0]
    p_desc = tu_desc_next(p_desc);
100053de:	697b      	ldr	r3, [r7, #20]
100053e0:	0018      	movs	r0, r3
100053e2:	f7ff feda 	bl	1000519a <tu_desc_next>
100053e6:	0003      	movs	r3, r0
100053e8:	617b      	str	r3, [r7, #20]
  while( len < desc_len )
100053ea:	2312      	movs	r3, #18
100053ec:	18fa      	adds	r2, r7, r3
100053ee:	1dbb      	adds	r3, r7, #6
100053f0:	8812      	ldrh	r2, [r2, #0]
100053f2:	881b      	ldrh	r3, [r3, #0]
100053f4:	429a      	cmp	r2, r3
100053f6:	d3c7      	bcc.n	10005388 <tu_edpt_bind_driver+0x24>
  }
}
100053f8:	46c0      	nop			; (mov r8, r8)
100053fa:	46c0      	nop			; (mov r8, r8)
100053fc:	46bd      	mov	sp, r7
100053fe:	b006      	add	sp, #24
10005400:	bdb0      	pop	{r4, r5, r7, pc}

10005402 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *crit_sec) {
10005402:	b580      	push	{r7, lr}
10005404:	b082      	sub	sp, #8
10005406:	af00      	add	r7, sp, #0
10005408:	6078      	str	r0, [r7, #4]
    critical_section_init_with_lock_num(crit_sec, (uint)spin_lock_claim_unused(true));
1000540a:	2001      	movs	r0, #1
1000540c:	f003 f96a 	bl	100086e4 <spin_lock_claim_unused>
10005410:	0003      	movs	r3, r0
10005412:	001a      	movs	r2, r3
10005414:	687b      	ldr	r3, [r7, #4]
10005416:	0011      	movs	r1, r2
10005418:	0018      	movs	r0, r3
1000541a:	f000 f805 	bl	10005428 <critical_section_init_with_lock_num>
}
1000541e:	46c0      	nop			; (mov r8, r8)
10005420:	46bd      	mov	sp, r7
10005422:	b002      	add	sp, #8
10005424:	bd80      	pop	{r7, pc}
	...

10005428 <critical_section_init_with_lock_num>:

void critical_section_init_with_lock_num(critical_section_t *crit_sec, uint lock_num) {
10005428:	b580      	push	{r7, lr}
1000542a:	b084      	sub	sp, #16
1000542c:	af00      	add	r7, sp, #0
1000542e:	6078      	str	r0, [r7, #4]
10005430:	6039      	str	r1, [r7, #0]
10005432:	683b      	ldr	r3, [r7, #0]
10005434:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10005436:	68fb      	ldr	r3, [r7, #12]
10005438:	4a07      	ldr	r2, [pc, #28]	; (10005458 <critical_section_init_with_lock_num+0x30>)
1000543a:	4694      	mov	ip, r2
1000543c:	4463      	add	r3, ip
1000543e:	009b      	lsls	r3, r3, #2
10005440:	001a      	movs	r2, r3
    crit_sec->spin_lock = spin_lock_instance(lock_num);
10005442:	687b      	ldr	r3, [r7, #4]
10005444:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb" : : : "memory");
10005446:	f3bf 8f5f 	dmb	sy
}
1000544a:	46c0      	nop			; (mov r8, r8)
}
1000544c:	46c0      	nop			; (mov r8, r8)
    __mem_fence_release();
}
1000544e:	46c0      	nop			; (mov r8, r8)
10005450:	46bd      	mov	sp, r7
10005452:	b004      	add	sp, #16
10005454:	bd80      	pop	{r7, pc}
10005456:	46c0      	nop			; (mov r8, r8)
10005458:	34000040 	.word	0x34000040

1000545c <lock_init>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
1000545c:	b580      	push	{r7, lr}
1000545e:	b084      	sub	sp, #16
10005460:	af00      	add	r7, sp, #0
10005462:	6078      	str	r0, [r7, #4]
10005464:	6039      	str	r1, [r7, #0]
10005466:	683b      	ldr	r3, [r7, #0]
10005468:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000546a:	68fb      	ldr	r3, [r7, #12]
1000546c:	4a05      	ldr	r2, [pc, #20]	; (10005484 <lock_init+0x28>)
1000546e:	4694      	mov	ip, r2
10005470:	4463      	add	r3, ip
10005472:	009b      	lsls	r3, r3, #2
10005474:	001a      	movs	r2, r3
    valid_params_if(LOCK_CORE, lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10005476:	687b      	ldr	r3, [r7, #4]
10005478:	601a      	str	r2, [r3, #0]
}
1000547a:	46c0      	nop			; (mov r8, r8)
1000547c:	46bd      	mov	sp, r7
1000547e:	b004      	add	sp, #16
10005480:	bd80      	pop	{r7, pc}
10005482:	46c0      	nop			; (mov r8, r8)
10005484:	34000040 	.word	0x34000040

10005488 <to_us_since_boot>:
 * \brief convert an absolute_time_t into a number of microseconds since boot.
 * \param t the absolute time to convert
 * \return a number of microseconds since boot, equivalent to t
 * \ingroup timestamp
 */
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10005488:	b580      	push	{r7, lr}
1000548a:	b082      	sub	sp, #8
1000548c:	af00      	add	r7, sp, #0
1000548e:	6038      	str	r0, [r7, #0]
10005490:	6079      	str	r1, [r7, #4]
#ifdef NDEBUG
    return t;
#else
    return t._private_us_since_boot;
10005492:	683a      	ldr	r2, [r7, #0]
10005494:	687b      	ldr	r3, [r7, #4]
#endif
}
10005496:	0010      	movs	r0, r2
10005498:	0019      	movs	r1, r3
1000549a:	46bd      	mov	sp, r7
1000549c:	b002      	add	sp, #8
1000549e:	bd80      	pop	{r7, pc}

100054a0 <update_us_since_boot>:
 * \param t the absolute time value to update
 * \param us_since_boot the number of microseconds since boot to represent. Note this should be representable
 *                      as a signed 64 bit integer
 * \ingroup timestamp
 */
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
100054a0:	b580      	push	{r7, lr}
100054a2:	b084      	sub	sp, #16
100054a4:	af00      	add	r7, sp, #0
100054a6:	60f8      	str	r0, [r7, #12]
100054a8:	603a      	str	r2, [r7, #0]
100054aa:	607b      	str	r3, [r7, #4]
#ifdef NDEBUG
    *t = us_since_boot;
#else
    assert(us_since_boot <= INT64_MAX);
100054ac:	683a      	ldr	r2, [r7, #0]
100054ae:	687b      	ldr	r3, [r7, #4]
100054b0:	2b00      	cmp	r3, #0
100054b2:	da05      	bge.n	100054c0 <update_us_since_boot+0x20>
100054b4:	4b07      	ldr	r3, [pc, #28]	; (100054d4 <update_us_since_boot+0x34>)
100054b6:	4a08      	ldr	r2, [pc, #32]	; (100054d8 <update_us_since_boot+0x38>)
100054b8:	4808      	ldr	r0, [pc, #32]	; (100054dc <update_us_since_boot+0x3c>)
100054ba:	213f      	movs	r1, #63	; 0x3f
100054bc:	f005 fc36 	bl	1000ad2c <__assert_func>
    t->_private_us_since_boot = us_since_boot;
100054c0:	68f9      	ldr	r1, [r7, #12]
100054c2:	683a      	ldr	r2, [r7, #0]
100054c4:	687b      	ldr	r3, [r7, #4]
100054c6:	600a      	str	r2, [r1, #0]
100054c8:	604b      	str	r3, [r1, #4]
#endif
}
100054ca:	46c0      	nop			; (mov r8, r8)
100054cc:	46bd      	mov	sp, r7
100054ce:	b004      	add	sp, #16
100054d0:	bd80      	pop	{r7, pc}
100054d2:	46c0      	nop			; (mov r8, r8)
100054d4:	1000d6b8 	.word	0x1000d6b8
100054d8:	1000d7c8 	.word	0x1000d7c8
100054dc:	1000d6d4 	.word	0x1000d6d4

100054e0 <get_absolute_time>:
 *
 * \sa absolute_time_t
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time(void) {
100054e0:	b580      	push	{r7, lr}
100054e2:	b084      	sub	sp, #16
100054e4:	af00      	add	r7, sp, #0
100054e6:	6078      	str	r0, [r7, #4]
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
100054e8:	f003 f950 	bl	1000878c <time_us_64>
100054ec:	0002      	movs	r2, r0
100054ee:	000b      	movs	r3, r1
100054f0:	2108      	movs	r1, #8
100054f2:	1879      	adds	r1, r7, r1
100054f4:	0008      	movs	r0, r1
100054f6:	f7ff ffd3 	bl	100054a0 <update_us_since_boot>
    return t;
100054fa:	6879      	ldr	r1, [r7, #4]
100054fc:	68ba      	ldr	r2, [r7, #8]
100054fe:	68fb      	ldr	r3, [r7, #12]
10005500:	600a      	str	r2, [r1, #0]
10005502:	604b      	str	r3, [r1, #4]
}
10005504:	6878      	ldr	r0, [r7, #4]
10005506:	46bd      	mov	sp, r7
10005508:	b004      	add	sp, #16
1000550a:	bd80      	pop	{r7, pc}

1000550c <delayed_by_ms>:
 *
 * \param t the base timestamp
 * \param ms the number of milliseconds to add
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_ms(const absolute_time_t t, uint32_t ms) {
1000550c:	b5b0      	push	{r4, r5, r7, lr}
1000550e:	b08a      	sub	sp, #40	; 0x28
10005510:	af00      	add	r7, sp, #0
10005512:	60f8      	str	r0, [r7, #12]
10005514:	603a      	str	r2, [r7, #0]
10005516:	607b      	str	r3, [r7, #4]
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
10005518:	683a      	ldr	r2, [r7, #0]
1000551a:	687b      	ldr	r3, [r7, #4]
1000551c:	0010      	movs	r0, r2
1000551e:	0019      	movs	r1, r3
10005520:	f7ff ffb2 	bl	10005488 <to_us_since_boot>
10005524:	0002      	movs	r2, r0
10005526:	000b      	movs	r3, r1
10005528:	61ba      	str	r2, [r7, #24]
1000552a:	61fb      	str	r3, [r7, #28]
    uint64_t delayed = base + ms * 1000ull;
1000552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000552e:	001c      	movs	r4, r3
10005530:	2300      	movs	r3, #0
10005532:	001d      	movs	r5, r3
10005534:	22fa      	movs	r2, #250	; 0xfa
10005536:	0092      	lsls	r2, r2, #2
10005538:	2300      	movs	r3, #0
1000553a:	0020      	movs	r0, r4
1000553c:	0029      	movs	r1, r5
1000553e:	f007 fce9 	bl	1000cf14 <__wrap___aeabi_lmul>
10005542:	0002      	movs	r2, r0
10005544:	000b      	movs	r3, r1
10005546:	0010      	movs	r0, r2
10005548:	0019      	movs	r1, r3
1000554a:	69ba      	ldr	r2, [r7, #24]
1000554c:	69fb      	ldr	r3, [r7, #28]
1000554e:	1812      	adds	r2, r2, r0
10005550:	414b      	adcs	r3, r1
10005552:	623a      	str	r2, [r7, #32]
10005554:	627b      	str	r3, [r7, #36]	; 0x24
    if (delayed < base) {
10005556:	69fa      	ldr	r2, [r7, #28]
10005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000555a:	429a      	cmp	r2, r3
1000555c:	d807      	bhi.n	1000556e <delayed_by_ms+0x62>
1000555e:	69fa      	ldr	r2, [r7, #28]
10005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005562:	429a      	cmp	r2, r3
10005564:	d108      	bne.n	10005578 <delayed_by_ms+0x6c>
10005566:	69ba      	ldr	r2, [r7, #24]
10005568:	6a3b      	ldr	r3, [r7, #32]
1000556a:	429a      	cmp	r2, r3
1000556c:	d904      	bls.n	10005578 <delayed_by_ms+0x6c>
        delayed = (uint64_t)-1;
1000556e:	2201      	movs	r2, #1
10005570:	4252      	negs	r2, r2
10005572:	17d3      	asrs	r3, r2, #31
10005574:	623a      	str	r2, [r7, #32]
10005576:	627b      	str	r3, [r7, #36]	; 0x24
    }
    update_us_since_boot(&t2, delayed);
10005578:	6a3a      	ldr	r2, [r7, #32]
1000557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000557c:	2110      	movs	r1, #16
1000557e:	1879      	adds	r1, r7, r1
10005580:	0008      	movs	r0, r1
10005582:	f7ff ff8d 	bl	100054a0 <update_us_since_boot>
    return t2;
10005586:	68f9      	ldr	r1, [r7, #12]
10005588:	693a      	ldr	r2, [r7, #16]
1000558a:	697b      	ldr	r3, [r7, #20]
1000558c:	600a      	str	r2, [r1, #0]
1000558e:	604b      	str	r3, [r1, #4]
}
10005590:	68f8      	ldr	r0, [r7, #12]
10005592:	46bd      	mov	sp, r7
10005594:	b00a      	add	sp, #40	; 0x28
10005596:	bdb0      	pop	{r4, r5, r7, pc}

10005598 <make_timeout_time_ms>:
 * \ingroup timestamp
 *
 * \param ms the number of milliseconds to add to the current timestamp
 * \return the future timestamp
 */
static inline absolute_time_t make_timeout_time_ms(uint32_t ms) {
10005598:	b580      	push	{r7, lr}
1000559a:	b086      	sub	sp, #24
1000559c:	af02      	add	r7, sp, #8
1000559e:	6078      	str	r0, [r7, #4]
100055a0:	6039      	str	r1, [r7, #0]
    return delayed_by_ms(get_absolute_time(), ms);
100055a2:	2308      	movs	r3, #8
100055a4:	18fb      	adds	r3, r7, r3
100055a6:	0018      	movs	r0, r3
100055a8:	f7ff ff9a 	bl	100054e0 <get_absolute_time>
100055ac:	6878      	ldr	r0, [r7, #4]
100055ae:	68ba      	ldr	r2, [r7, #8]
100055b0:	68fb      	ldr	r3, [r7, #12]
100055b2:	6839      	ldr	r1, [r7, #0]
100055b4:	9100      	str	r1, [sp, #0]
100055b6:	f7ff ffa9 	bl	1000550c <delayed_by_ms>
}
100055ba:	6878      	ldr	r0, [r7, #4]
100055bc:	46bd      	mov	sp, r7
100055be:	b004      	add	sp, #16
100055c0:	bd80      	pop	{r7, pc}

100055c2 <mutex_init>:
 */

#include "pico/mutex.h"
#include "pico/time.h"

void mutex_init(mutex_t *mtx) {
100055c2:	b590      	push	{r4, r7, lr}
100055c4:	b083      	sub	sp, #12
100055c6:	af00      	add	r7, sp, #0
100055c8:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
100055ca:	687c      	ldr	r4, [r7, #4]
100055cc:	f003 f872 	bl	100086b4 <next_striped_spin_lock_num>
100055d0:	0003      	movs	r3, r0
100055d2:	0019      	movs	r1, r3
100055d4:	0020      	movs	r0, r4
100055d6:	f7ff ff41 	bl	1000545c <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
100055da:	687b      	ldr	r3, [r7, #4]
100055dc:	22ff      	movs	r2, #255	; 0xff
100055de:	711a      	strb	r2, [r3, #4]
    __asm volatile ("dmb" : : : "memory");
100055e0:	f3bf 8f5f 	dmb	sy
}
100055e4:	46c0      	nop			; (mov r8, r8)
}
100055e6:	46c0      	nop			; (mov r8, r8)
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = false;
#endif
    __mem_fence_release();
}
100055e8:	46c0      	nop			; (mov r8, r8)
100055ea:	46bd      	mov	sp, r7
100055ec:	b003      	add	sp, #12
100055ee:	bd90      	pop	{r4, r7, pc}

100055f0 <recursive_mutex_init>:

void recursive_mutex_init(recursive_mutex_t *mtx) {
100055f0:	b590      	push	{r4, r7, lr}
100055f2:	b083      	sub	sp, #12
100055f4:	af00      	add	r7, sp, #0
100055f6:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
100055f8:	687c      	ldr	r4, [r7, #4]
100055fa:	f003 f85b 	bl	100086b4 <next_striped_spin_lock_num>
100055fe:	0003      	movs	r3, r0
10005600:	0019      	movs	r1, r3
10005602:	0020      	movs	r0, r4
10005604:	f7ff ff2a 	bl	1000545c <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
10005608:	687b      	ldr	r3, [r7, #4]
1000560a:	22ff      	movs	r2, #255	; 0xff
1000560c:	711a      	strb	r2, [r3, #4]
    mtx->enter_count = 0;
1000560e:	687b      	ldr	r3, [r7, #4]
10005610:	2200      	movs	r2, #0
10005612:	715a      	strb	r2, [r3, #5]
    __asm volatile ("dmb" : : : "memory");
10005614:	f3bf 8f5f 	dmb	sy
}
10005618:	46c0      	nop			; (mov r8, r8)
}
1000561a:	46c0      	nop			; (mov r8, r8)
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = true;
#endif
    __mem_fence_release();
}
1000561c:	46c0      	nop			; (mov r8, r8)
1000561e:	46bd      	mov	sp, r7
10005620:	b003      	add	sp, #12
10005622:	bd90      	pop	{r4, r7, pc}

10005624 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10005624:	b580      	push	{r7, lr}
10005626:	b082      	sub	sp, #8
10005628:	af00      	add	r7, sp, #0
1000562a:	6038      	str	r0, [r7, #0]
1000562c:	6079      	str	r1, [r7, #4]
    return t._private_us_since_boot;
1000562e:	683a      	ldr	r2, [r7, #0]
10005630:	687b      	ldr	r3, [r7, #4]
}
10005632:	0010      	movs	r0, r2
10005634:	0019      	movs	r1, r3
10005636:	46bd      	mov	sp, r7
10005638:	b002      	add	sp, #8
1000563a:	bd80      	pop	{r7, pc}

1000563c <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
1000563c:	b580      	push	{r7, lr}
1000563e:	b084      	sub	sp, #16
10005640:	af00      	add	r7, sp, #0
10005642:	60f8      	str	r0, [r7, #12]
10005644:	603a      	str	r2, [r7, #0]
10005646:	607b      	str	r3, [r7, #4]
    assert(us_since_boot <= INT64_MAX);
10005648:	683a      	ldr	r2, [r7, #0]
1000564a:	687b      	ldr	r3, [r7, #4]
1000564c:	2b00      	cmp	r3, #0
1000564e:	da05      	bge.n	1000565c <update_us_since_boot+0x20>
10005650:	4b07      	ldr	r3, [pc, #28]	; (10005670 <update_us_since_boot+0x34>)
10005652:	4a08      	ldr	r2, [pc, #32]	; (10005674 <update_us_since_boot+0x38>)
10005654:	4808      	ldr	r0, [pc, #32]	; (10005678 <update_us_since_boot+0x3c>)
10005656:	213f      	movs	r1, #63	; 0x3f
10005658:	f005 fb68 	bl	1000ad2c <__assert_func>
    t->_private_us_since_boot = us_since_boot;
1000565c:	68f9      	ldr	r1, [r7, #12]
1000565e:	683a      	ldr	r2, [r7, #0]
10005660:	687b      	ldr	r3, [r7, #4]
10005662:	600a      	str	r2, [r1, #0]
10005664:	604b      	str	r3, [r1, #4]
}
10005666:	46c0      	nop			; (mov r8, r8)
10005668:	46bd      	mov	sp, r7
1000566a:	b004      	add	sp, #16
1000566c:	bd80      	pop	{r7, pc}
1000566e:	46c0      	nop			; (mov r8, r8)
10005670:	1000d804 	.word	0x1000d804
10005674:	1000dba8 	.word	0x1000dba8
10005678:	1000d820 	.word	0x1000d820

1000567c <time_reached>:
 *  \ingroup hardware_timer
 *
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
1000567c:	b5b0      	push	{r4, r5, r7, lr}
1000567e:	b086      	sub	sp, #24
10005680:	af00      	add	r7, sp, #0
10005682:	6038      	str	r0, [r7, #0]
10005684:	6079      	str	r1, [r7, #4]
    uint64_t target = to_us_since_boot(t);
10005686:	683a      	ldr	r2, [r7, #0]
10005688:	687b      	ldr	r3, [r7, #4]
1000568a:	0010      	movs	r0, r2
1000568c:	0019      	movs	r1, r3
1000568e:	f7ff ffc9 	bl	10005624 <to_us_since_boot>
10005692:	0002      	movs	r2, r0
10005694:	000b      	movs	r3, r1
10005696:	613a      	str	r2, [r7, #16]
10005698:	617b      	str	r3, [r7, #20]
    uint32_t hi_target = (uint32_t)(target >> 32u);
1000569a:	697b      	ldr	r3, [r7, #20]
1000569c:	001c      	movs	r4, r3
1000569e:	2300      	movs	r3, #0
100056a0:	001d      	movs	r5, r3
100056a2:	0023      	movs	r3, r4
100056a4:	60fb      	str	r3, [r7, #12]
    uint32_t hi = timer_hw->timerawh;
100056a6:	4b0d      	ldr	r3, [pc, #52]	; (100056dc <time_reached+0x60>)
100056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056aa:	60bb      	str	r3, [r7, #8]
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100056ac:	68ba      	ldr	r2, [r7, #8]
100056ae:	68fb      	ldr	r3, [r7, #12]
100056b0:	429a      	cmp	r2, r3
100056b2:	d30a      	bcc.n	100056ca <time_reached+0x4e>
100056b4:	4b09      	ldr	r3, [pc, #36]	; (100056dc <time_reached+0x60>)
100056b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
100056b8:	693b      	ldr	r3, [r7, #16]
100056ba:	429a      	cmp	r2, r3
100056bc:	d203      	bcs.n	100056c6 <time_reached+0x4a>
100056be:	68ba      	ldr	r2, [r7, #8]
100056c0:	68fb      	ldr	r3, [r7, #12]
100056c2:	429a      	cmp	r2, r3
100056c4:	d001      	beq.n	100056ca <time_reached+0x4e>
100056c6:	2301      	movs	r3, #1
100056c8:	e000      	b.n	100056cc <time_reached+0x50>
100056ca:	2300      	movs	r3, #0
100056cc:	1c1a      	adds	r2, r3, #0
100056ce:	2301      	movs	r3, #1
100056d0:	4013      	ands	r3, r2
100056d2:	b2db      	uxtb	r3, r3
}
100056d4:	0018      	movs	r0, r3
100056d6:	46bd      	mov	sp, r7
100056d8:	b006      	add	sp, #24
100056da:	bdb0      	pop	{r4, r5, r7, pc}
100056dc:	40054000 	.word	0x40054000

100056e0 <get_absolute_time>:
static inline absolute_time_t get_absolute_time(void) {
100056e0:	b580      	push	{r7, lr}
100056e2:	b084      	sub	sp, #16
100056e4:	af00      	add	r7, sp, #0
100056e6:	6078      	str	r0, [r7, #4]
    update_us_since_boot(&t, time_us_64());
100056e8:	f003 f850 	bl	1000878c <time_us_64>
100056ec:	0002      	movs	r2, r0
100056ee:	000b      	movs	r3, r1
100056f0:	2108      	movs	r1, #8
100056f2:	1879      	adds	r1, r7, r1
100056f4:	0008      	movs	r0, r1
100056f6:	f7ff ffa1 	bl	1000563c <update_us_since_boot>
    return t;
100056fa:	6879      	ldr	r1, [r7, #4]
100056fc:	68ba      	ldr	r2, [r7, #8]
100056fe:	68fb      	ldr	r3, [r7, #12]
10005700:	600a      	str	r2, [r1, #0]
10005702:	604b      	str	r3, [r1, #4]
}
10005704:	6878      	ldr	r0, [r7, #4]
10005706:	46bd      	mov	sp, r7
10005708:	b004      	add	sp, #16
1000570a:	bd80      	pop	{r7, pc}

1000570c <delayed_by_us>:
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
1000570c:	b580      	push	{r7, lr}
1000570e:	b08a      	sub	sp, #40	; 0x28
10005710:	af00      	add	r7, sp, #0
10005712:	60f8      	str	r0, [r7, #12]
10005714:	603a      	str	r2, [r7, #0]
10005716:	607b      	str	r3, [r7, #4]
    uint64_t base = to_us_since_boot(t);
10005718:	683a      	ldr	r2, [r7, #0]
1000571a:	687b      	ldr	r3, [r7, #4]
1000571c:	0010      	movs	r0, r2
1000571e:	0019      	movs	r1, r3
10005720:	f7ff ff80 	bl	10005624 <to_us_since_boot>
10005724:	0002      	movs	r2, r0
10005726:	000b      	movs	r3, r1
10005728:	61ba      	str	r2, [r7, #24]
1000572a:	61fb      	str	r3, [r7, #28]
    uint64_t delayed = base + us;
1000572c:	69b8      	ldr	r0, [r7, #24]
1000572e:	69f9      	ldr	r1, [r7, #28]
10005730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005734:	1812      	adds	r2, r2, r0
10005736:	414b      	adcs	r3, r1
10005738:	623a      	str	r2, [r7, #32]
1000573a:	627b      	str	r3, [r7, #36]	; 0x24
    if (delayed < base) {
1000573c:	69fa      	ldr	r2, [r7, #28]
1000573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005740:	429a      	cmp	r2, r3
10005742:	d807      	bhi.n	10005754 <delayed_by_us+0x48>
10005744:	69fa      	ldr	r2, [r7, #28]
10005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005748:	429a      	cmp	r2, r3
1000574a:	d108      	bne.n	1000575e <delayed_by_us+0x52>
1000574c:	69ba      	ldr	r2, [r7, #24]
1000574e:	6a3b      	ldr	r3, [r7, #32]
10005750:	429a      	cmp	r2, r3
10005752:	d904      	bls.n	1000575e <delayed_by_us+0x52>
        delayed = (uint64_t)-1;
10005754:	2201      	movs	r2, #1
10005756:	4252      	negs	r2, r2
10005758:	17d3      	asrs	r3, r2, #31
1000575a:	623a      	str	r2, [r7, #32]
1000575c:	627b      	str	r3, [r7, #36]	; 0x24
    update_us_since_boot(&t2, delayed);
1000575e:	6a3a      	ldr	r2, [r7, #32]
10005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005762:	2110      	movs	r1, #16
10005764:	1879      	adds	r1, r7, r1
10005766:	0008      	movs	r0, r1
10005768:	f7ff ff68 	bl	1000563c <update_us_since_boot>
    return t2;
1000576c:	68f9      	ldr	r1, [r7, #12]
1000576e:	693a      	ldr	r2, [r7, #16]
10005770:	697b      	ldr	r3, [r7, #20]
10005772:	600a      	str	r2, [r1, #0]
10005774:	604b      	str	r3, [r1, #4]
}
10005776:	68f8      	ldr	r0, [r7, #12]
10005778:	46bd      	mov	sp, r7
1000577a:	b00a      	add	sp, #40	; 0x28
1000577c:	bd80      	pop	{r7, pc}

1000577e <absolute_time_diff_us>:
 * \param from the first timestamp
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
1000577e:	b5b0      	push	{r4, r5, r7, lr}
10005780:	b084      	sub	sp, #16
10005782:	af00      	add	r7, sp, #0
10005784:	60b8      	str	r0, [r7, #8]
10005786:	60f9      	str	r1, [r7, #12]
10005788:	603a      	str	r2, [r7, #0]
1000578a:	607b      	str	r3, [r7, #4]
    return (int64_t)(to_us_since_boot(to) - to_us_since_boot(from));
1000578c:	683a      	ldr	r2, [r7, #0]
1000578e:	687b      	ldr	r3, [r7, #4]
10005790:	0010      	movs	r0, r2
10005792:	0019      	movs	r1, r3
10005794:	f7ff ff46 	bl	10005624 <to_us_since_boot>
10005798:	0004      	movs	r4, r0
1000579a:	000d      	movs	r5, r1
1000579c:	68ba      	ldr	r2, [r7, #8]
1000579e:	68fb      	ldr	r3, [r7, #12]
100057a0:	0010      	movs	r0, r2
100057a2:	0019      	movs	r1, r3
100057a4:	f7ff ff3e 	bl	10005624 <to_us_since_boot>
100057a8:	0002      	movs	r2, r0
100057aa:	000b      	movs	r3, r1
100057ac:	1aa4      	subs	r4, r4, r2
100057ae:	419d      	sbcs	r5, r3
100057b0:	0022      	movs	r2, r4
100057b2:	002b      	movs	r3, r5
}
100057b4:	0010      	movs	r0, r2
100057b6:	0019      	movs	r1, r3
100057b8:	46bd      	mov	sp, r7
100057ba:	b004      	add	sp, #16
100057bc:	bdb0      	pop	{r4, r5, r7, pc}

100057be <add_alarm_at>:
 * @return 0 if the alarm time passed before or during the call AND there is no active alarm to return the id of.
 *           The latter can either happen because fire_if_past was false (i.e. no timer was ever created),
 *           or if the callback <i>was</i> called during this method but the callback cancelled itself by returning 0
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_at(absolute_time_t time, alarm_callback_t callback, void *user_data, bool fire_if_past) {
100057be:	b580      	push	{r7, lr}
100057c0:	b088      	sub	sp, #32
100057c2:	af04      	add	r7, sp, #16
100057c4:	60b8      	str	r0, [r7, #8]
100057c6:	60f9      	str	r1, [r7, #12]
100057c8:	607a      	str	r2, [r7, #4]
100057ca:	603b      	str	r3, [r7, #0]
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
100057cc:	f000 fa9c 	bl	10005d08 <alarm_pool_get_default>
100057d0:	68ba      	ldr	r2, [r7, #8]
100057d2:	68fb      	ldr	r3, [r7, #12]
100057d4:	2118      	movs	r1, #24
100057d6:	1879      	adds	r1, r7, r1
100057d8:	7809      	ldrb	r1, [r1, #0]
100057da:	9102      	str	r1, [sp, #8]
100057dc:	6839      	ldr	r1, [r7, #0]
100057de:	9101      	str	r1, [sp, #4]
100057e0:	6879      	ldr	r1, [r7, #4]
100057e2:	9100      	str	r1, [sp, #0]
100057e4:	f000 fd78 	bl	100062d8 <alarm_pool_add_alarm_at>
100057e8:	0003      	movs	r3, r0
}
100057ea:	0018      	movs	r0, r3
100057ec:	46bd      	mov	sp, r7
100057ee:	b004      	add	sp, #16
100057f0:	bd80      	pop	{r7, pc}

100057f2 <cancel_alarm>:
 * \ingroup alarm
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
100057f2:	b580      	push	{r7, lr}
100057f4:	b082      	sub	sp, #8
100057f6:	af00      	add	r7, sp, #0
100057f8:	6078      	str	r0, [r7, #4]
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
100057fa:	f000 fa85 	bl	10005d08 <alarm_pool_get_default>
100057fe:	0002      	movs	r2, r0
10005800:	687b      	ldr	r3, [r7, #4]
10005802:	0019      	movs	r1, r3
10005804:	0010      	movs	r0, r2
10005806:	f000 fe31 	bl	1000646c <alarm_pool_cancel_alarm>
1000580a:	0003      	movs	r3, r0
}
1000580c:	0018      	movs	r0, r3
1000580e:	46bd      	mov	sp, r7
10005810:	b002      	add	sp, #8
10005812:	bd80      	pop	{r7, pc}

10005814 <ph_get_node>:
 * \param heap the heap
 */
void ph_destroy(pheap_t *heap);

// internal method
static inline pheap_node_t *ph_get_node(pheap_t *heap, pheap_node_id_t id) {
10005814:	b580      	push	{r7, lr}
10005816:	b082      	sub	sp, #8
10005818:	af00      	add	r7, sp, #0
1000581a:	6078      	str	r0, [r7, #4]
1000581c:	000a      	movs	r2, r1
1000581e:	1cfb      	adds	r3, r7, #3
10005820:	701a      	strb	r2, [r3, #0]
    assert(id && id <= heap->max_nodes);
10005822:	1cfb      	adds	r3, r7, #3
10005824:	781b      	ldrb	r3, [r3, #0]
10005826:	2b00      	cmp	r3, #0
10005828:	d005      	beq.n	10005836 <ph_get_node+0x22>
1000582a:	687b      	ldr	r3, [r7, #4]
1000582c:	7b1b      	ldrb	r3, [r3, #12]
1000582e:	1cfa      	adds	r2, r7, #3
10005830:	7812      	ldrb	r2, [r2, #0]
10005832:	429a      	cmp	r2, r3
10005834:	d905      	bls.n	10005842 <ph_get_node+0x2e>
10005836:	4b09      	ldr	r3, [pc, #36]	; (1000585c <ph_get_node+0x48>)
10005838:	4a09      	ldr	r2, [pc, #36]	; (10005860 <ph_get_node+0x4c>)
1000583a:	480a      	ldr	r0, [pc, #40]	; (10005864 <ph_get_node+0x50>)
1000583c:	2168      	movs	r1, #104	; 0x68
1000583e:	f005 fa75 	bl	1000ad2c <__assert_func>
    return heap->nodes + id - 1;
10005842:	687b      	ldr	r3, [r7, #4]
10005844:	6819      	ldr	r1, [r3, #0]
10005846:	1cfb      	adds	r3, r7, #3
10005848:	781a      	ldrb	r2, [r3, #0]
1000584a:	0013      	movs	r3, r2
1000584c:	005b      	lsls	r3, r3, #1
1000584e:	189b      	adds	r3, r3, r2
10005850:	3b03      	subs	r3, #3
10005852:	18cb      	adds	r3, r1, r3
}
10005854:	0018      	movs	r0, r3
10005856:	46bd      	mov	sp, r7
10005858:	b002      	add	sp, #8
1000585a:	bd80      	pop	{r7, pc}
1000585c:	1000d870 	.word	0x1000d870
10005860:	1000db34 	.word	0x1000db34
10005864:	1000d88c 	.word	0x1000d88c

10005868 <ph_add_child_node>:

// internal method
static void ph_add_child_node(pheap_t *heap, pheap_node_id_t parent_id, pheap_node_id_t child_id) {
10005868:	b580      	push	{r7, lr}
1000586a:	b084      	sub	sp, #16
1000586c:	af00      	add	r7, sp, #0
1000586e:	6078      	str	r0, [r7, #4]
10005870:	0008      	movs	r0, r1
10005872:	0011      	movs	r1, r2
10005874:	1cfb      	adds	r3, r7, #3
10005876:	1c02      	adds	r2, r0, #0
10005878:	701a      	strb	r2, [r3, #0]
1000587a:	1cbb      	adds	r3, r7, #2
1000587c:	1c0a      	adds	r2, r1, #0
1000587e:	701a      	strb	r2, [r3, #0]
    pheap_node_t *n = ph_get_node(heap, parent_id);
10005880:	1cfb      	adds	r3, r7, #3
10005882:	781a      	ldrb	r2, [r3, #0]
10005884:	687b      	ldr	r3, [r7, #4]
10005886:	0011      	movs	r1, r2
10005888:	0018      	movs	r0, r3
1000588a:	f7ff ffc3 	bl	10005814 <ph_get_node>
1000588e:	0003      	movs	r3, r0
10005890:	60fb      	str	r3, [r7, #12]
    assert(parent_id);
10005892:	1cfb      	adds	r3, r7, #3
10005894:	781b      	ldrb	r3, [r3, #0]
10005896:	2b00      	cmp	r3, #0
10005898:	d105      	bne.n	100058a6 <ph_add_child_node+0x3e>
1000589a:	4b1f      	ldr	r3, [pc, #124]	; (10005918 <ph_add_child_node+0xb0>)
1000589c:	4a1f      	ldr	r2, [pc, #124]	; (1000591c <ph_add_child_node+0xb4>)
1000589e:	4820      	ldr	r0, [pc, #128]	; (10005920 <ph_add_child_node+0xb8>)
100058a0:	216f      	movs	r1, #111	; 0x6f
100058a2:	f005 fa43 	bl	1000ad2c <__assert_func>
    assert(child_id);
100058a6:	1cbb      	adds	r3, r7, #2
100058a8:	781b      	ldrb	r3, [r3, #0]
100058aa:	2b00      	cmp	r3, #0
100058ac:	d105      	bne.n	100058ba <ph_add_child_node+0x52>
100058ae:	4b1d      	ldr	r3, [pc, #116]	; (10005924 <ph_add_child_node+0xbc>)
100058b0:	4a1a      	ldr	r2, [pc, #104]	; (1000591c <ph_add_child_node+0xb4>)
100058b2:	481b      	ldr	r0, [pc, #108]	; (10005920 <ph_add_child_node+0xb8>)
100058b4:	2170      	movs	r1, #112	; 0x70
100058b6:	f005 fa39 	bl	1000ad2c <__assert_func>
    assert(parent_id != child_id);
100058ba:	1cfa      	adds	r2, r7, #3
100058bc:	1cbb      	adds	r3, r7, #2
100058be:	7812      	ldrb	r2, [r2, #0]
100058c0:	781b      	ldrb	r3, [r3, #0]
100058c2:	429a      	cmp	r2, r3
100058c4:	d105      	bne.n	100058d2 <ph_add_child_node+0x6a>
100058c6:	4b18      	ldr	r3, [pc, #96]	; (10005928 <ph_add_child_node+0xc0>)
100058c8:	4a14      	ldr	r2, [pc, #80]	; (1000591c <ph_add_child_node+0xb4>)
100058ca:	4815      	ldr	r0, [pc, #84]	; (10005920 <ph_add_child_node+0xb8>)
100058cc:	2171      	movs	r1, #113	; 0x71
100058ce:	f005 fa2d 	bl	1000ad2c <__assert_func>
    pheap_node_t *c = ph_get_node(heap, child_id);
100058d2:	1cbb      	adds	r3, r7, #2
100058d4:	781a      	ldrb	r2, [r3, #0]
100058d6:	687b      	ldr	r3, [r7, #4]
100058d8:	0011      	movs	r1, r2
100058da:	0018      	movs	r0, r3
100058dc:	f7ff ff9a 	bl	10005814 <ph_get_node>
100058e0:	0003      	movs	r3, r0
100058e2:	60bb      	str	r3, [r7, #8]
    c->parent = parent_id;
100058e4:	68bb      	ldr	r3, [r7, #8]
100058e6:	1cfa      	adds	r2, r7, #3
100058e8:	7812      	ldrb	r2, [r2, #0]
100058ea:	709a      	strb	r2, [r3, #2]
    if (!n->child) {
100058ec:	68fb      	ldr	r3, [r7, #12]
100058ee:	781b      	ldrb	r3, [r3, #0]
100058f0:	2b00      	cmp	r3, #0
100058f2:	d104      	bne.n	100058fe <ph_add_child_node+0x96>
        n->child = child_id;
100058f4:	68fb      	ldr	r3, [r7, #12]
100058f6:	1cba      	adds	r2, r7, #2
100058f8:	7812      	ldrb	r2, [r2, #0]
100058fa:	701a      	strb	r2, [r3, #0]
    } else {
        c->sibling = n->child;
        n->child = child_id;
    }
}
100058fc:	e007      	b.n	1000590e <ph_add_child_node+0xa6>
        c->sibling = n->child;
100058fe:	68fb      	ldr	r3, [r7, #12]
10005900:	781a      	ldrb	r2, [r3, #0]
10005902:	68bb      	ldr	r3, [r7, #8]
10005904:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10005906:	68fb      	ldr	r3, [r7, #12]
10005908:	1cba      	adds	r2, r7, #2
1000590a:	7812      	ldrb	r2, [r2, #0]
1000590c:	701a      	strb	r2, [r3, #0]
}
1000590e:	46c0      	nop			; (mov r8, r8)
10005910:	46bd      	mov	sp, r7
10005912:	b004      	add	sp, #16
10005914:	bd80      	pop	{r7, pc}
10005916:	46c0      	nop			; (mov r8, r8)
10005918:	1000d8e0 	.word	0x1000d8e0
1000591c:	1000db20 	.word	0x1000db20
10005920:	1000d88c 	.word	0x1000d88c
10005924:	1000d8ec 	.word	0x1000d8ec
10005928:	1000d8f8 	.word	0x1000d8f8

1000592c <ph_merge_nodes>:

// internal method
static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
1000592c:	b590      	push	{r4, r7, lr}
1000592e:	b083      	sub	sp, #12
10005930:	af00      	add	r7, sp, #0
10005932:	6078      	str	r0, [r7, #4]
10005934:	0008      	movs	r0, r1
10005936:	0011      	movs	r1, r2
10005938:	1cfb      	adds	r3, r7, #3
1000593a:	1c02      	adds	r2, r0, #0
1000593c:	701a      	strb	r2, [r3, #0]
1000593e:	1cbb      	adds	r3, r7, #2
10005940:	1c0a      	adds	r2, r1, #0
10005942:	701a      	strb	r2, [r3, #0]
    if (!a) return b;
10005944:	1cfb      	adds	r3, r7, #3
10005946:	781b      	ldrb	r3, [r3, #0]
10005948:	2b00      	cmp	r3, #0
1000594a:	d102      	bne.n	10005952 <ph_merge_nodes+0x26>
1000594c:	1cbb      	adds	r3, r7, #2
1000594e:	781b      	ldrb	r3, [r3, #0]
10005950:	e027      	b.n	100059a2 <ph_merge_nodes+0x76>
    if (!b) return a;
10005952:	1cbb      	adds	r3, r7, #2
10005954:	781b      	ldrb	r3, [r3, #0]
10005956:	2b00      	cmp	r3, #0
10005958:	d102      	bne.n	10005960 <ph_merge_nodes+0x34>
1000595a:	1cfb      	adds	r3, r7, #3
1000595c:	781b      	ldrb	r3, [r3, #0]
1000595e:	e020      	b.n	100059a2 <ph_merge_nodes+0x76>
    if (heap->comparator(heap->user_data, a, b)) {
10005960:	687b      	ldr	r3, [r7, #4]
10005962:	685c      	ldr	r4, [r3, #4]
10005964:	687b      	ldr	r3, [r7, #4]
10005966:	6898      	ldr	r0, [r3, #8]
10005968:	1cbb      	adds	r3, r7, #2
1000596a:	781a      	ldrb	r2, [r3, #0]
1000596c:	1cfb      	adds	r3, r7, #3
1000596e:	781b      	ldrb	r3, [r3, #0]
10005970:	0019      	movs	r1, r3
10005972:	47a0      	blx	r4
10005974:	1e03      	subs	r3, r0, #0
10005976:	d00a      	beq.n	1000598e <ph_merge_nodes+0x62>
        ph_add_child_node(heap, a, b);
10005978:	1cbb      	adds	r3, r7, #2
1000597a:	781a      	ldrb	r2, [r3, #0]
1000597c:	1cfb      	adds	r3, r7, #3
1000597e:	7819      	ldrb	r1, [r3, #0]
10005980:	687b      	ldr	r3, [r7, #4]
10005982:	0018      	movs	r0, r3
10005984:	f7ff ff70 	bl	10005868 <ph_add_child_node>
        return a;
10005988:	1cfb      	adds	r3, r7, #3
1000598a:	781b      	ldrb	r3, [r3, #0]
1000598c:	e009      	b.n	100059a2 <ph_merge_nodes+0x76>
    } else {
        ph_add_child_node(heap, b, a);
1000598e:	1cfb      	adds	r3, r7, #3
10005990:	781a      	ldrb	r2, [r3, #0]
10005992:	1cbb      	adds	r3, r7, #2
10005994:	7819      	ldrb	r1, [r3, #0]
10005996:	687b      	ldr	r3, [r7, #4]
10005998:	0018      	movs	r0, r3
1000599a:	f7ff ff65 	bl	10005868 <ph_add_child_node>
        return b;
1000599e:	1cbb      	adds	r3, r7, #2
100059a0:	781b      	ldrb	r3, [r3, #0]
    }
}
100059a2:	0018      	movs	r0, r3
100059a4:	46bd      	mov	sp, r7
100059a6:	b003      	add	sp, #12
100059a8:	bd90      	pop	{r4, r7, pc}

100059aa <ph_new_node>:
 * Allocate a new node from the unused space in the heap
 *
 * \param heap the heap
 * \return an identifier for the node, or 0 if the heap is full
 */
static inline pheap_node_id_t ph_new_node(pheap_t *heap) {
100059aa:	b580      	push	{r7, lr}
100059ac:	b084      	sub	sp, #16
100059ae:	af00      	add	r7, sp, #0
100059b0:	6078      	str	r0, [r7, #4]
    if (!heap->free_head_id) return 0;
100059b2:	687b      	ldr	r3, [r7, #4]
100059b4:	7b9b      	ldrb	r3, [r3, #14]
100059b6:	2b00      	cmp	r3, #0
100059b8:	d101      	bne.n	100059be <ph_new_node+0x14>
100059ba:	2300      	movs	r3, #0
100059bc:	e026      	b.n	10005a0c <ph_new_node+0x62>
    pheap_node_id_t id = heap->free_head_id;
100059be:	210f      	movs	r1, #15
100059c0:	187b      	adds	r3, r7, r1
100059c2:	687a      	ldr	r2, [r7, #4]
100059c4:	7b92      	ldrb	r2, [r2, #14]
100059c6:	701a      	strb	r2, [r3, #0]
    pheap_node_t *hn = ph_get_node(heap, id);
100059c8:	187b      	adds	r3, r7, r1
100059ca:	781a      	ldrb	r2, [r3, #0]
100059cc:	687b      	ldr	r3, [r7, #4]
100059ce:	0011      	movs	r1, r2
100059d0:	0018      	movs	r0, r3
100059d2:	f7ff ff1f 	bl	10005814 <ph_get_node>
100059d6:	0003      	movs	r3, r0
100059d8:	60bb      	str	r3, [r7, #8]
    heap->free_head_id = hn->sibling;
100059da:	68bb      	ldr	r3, [r7, #8]
100059dc:	785a      	ldrb	r2, [r3, #1]
100059de:	687b      	ldr	r3, [r7, #4]
100059e0:	739a      	strb	r2, [r3, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100059e2:	687b      	ldr	r3, [r7, #4]
100059e4:	7b9b      	ldrb	r3, [r3, #14]
100059e6:	2b00      	cmp	r3, #0
100059e8:	d102      	bne.n	100059f0 <ph_new_node+0x46>
100059ea:	687b      	ldr	r3, [r7, #4]
100059ec:	2200      	movs	r2, #0
100059ee:	73da      	strb	r2, [r3, #15]
    hn->child = hn->sibling = hn->parent = 0;
100059f0:	68bb      	ldr	r3, [r7, #8]
100059f2:	2200      	movs	r2, #0
100059f4:	709a      	strb	r2, [r3, #2]
100059f6:	68bb      	ldr	r3, [r7, #8]
100059f8:	789a      	ldrb	r2, [r3, #2]
100059fa:	68bb      	ldr	r3, [r7, #8]
100059fc:	705a      	strb	r2, [r3, #1]
100059fe:	68bb      	ldr	r3, [r7, #8]
10005a00:	785a      	ldrb	r2, [r3, #1]
10005a02:	68bb      	ldr	r3, [r7, #8]
10005a04:	701a      	strb	r2, [r3, #0]
    return id;
10005a06:	230f      	movs	r3, #15
10005a08:	18fb      	adds	r3, r7, r3
10005a0a:	781b      	ldrb	r3, [r3, #0]
}
10005a0c:	0018      	movs	r0, r3
10005a0e:	46bd      	mov	sp, r7
10005a10:	b004      	add	sp, #16
10005a12:	bd80      	pop	{r7, pc}

10005a14 <ph_insert_node>:
 *
 * \param heap the heap
 * \param id the id of the node to insert
 * \return the id of the new head of the pairing heap (i.e. node that compares first)
 */
static inline pheap_node_id_t ph_insert_node(pheap_t *heap, pheap_node_id_t id) {
10005a14:	b580      	push	{r7, lr}
10005a16:	b084      	sub	sp, #16
10005a18:	af00      	add	r7, sp, #0
10005a1a:	6078      	str	r0, [r7, #4]
10005a1c:	000a      	movs	r2, r1
10005a1e:	1cfb      	adds	r3, r7, #3
10005a20:	701a      	strb	r2, [r3, #0]
    assert(id);
10005a22:	1cfb      	adds	r3, r7, #3
10005a24:	781b      	ldrb	r3, [r3, #0]
10005a26:	2b00      	cmp	r3, #0
10005a28:	d105      	bne.n	10005a36 <ph_insert_node+0x22>
10005a2a:	4b16      	ldr	r3, [pc, #88]	; (10005a84 <ph_insert_node+0x70>)
10005a2c:	4a16      	ldr	r2, [pc, #88]	; (10005a88 <ph_insert_node+0x74>)
10005a2e:	4817      	ldr	r0, [pc, #92]	; (10005a8c <ph_insert_node+0x78>)
10005a30:	21a5      	movs	r1, #165	; 0xa5
10005a32:	f005 f97b 	bl	1000ad2c <__assert_func>
    pheap_node_t *hn = ph_get_node(heap, id);
10005a36:	1cfb      	adds	r3, r7, #3
10005a38:	781a      	ldrb	r2, [r3, #0]
10005a3a:	687b      	ldr	r3, [r7, #4]
10005a3c:	0011      	movs	r1, r2
10005a3e:	0018      	movs	r0, r3
10005a40:	f7ff fee8 	bl	10005814 <ph_get_node>
10005a44:	0003      	movs	r3, r0
10005a46:	60fb      	str	r3, [r7, #12]
    hn->child = hn->sibling = hn->parent = 0;
10005a48:	68fb      	ldr	r3, [r7, #12]
10005a4a:	2200      	movs	r2, #0
10005a4c:	709a      	strb	r2, [r3, #2]
10005a4e:	68fb      	ldr	r3, [r7, #12]
10005a50:	789a      	ldrb	r2, [r3, #2]
10005a52:	68fb      	ldr	r3, [r7, #12]
10005a54:	705a      	strb	r2, [r3, #1]
10005a56:	68fb      	ldr	r3, [r7, #12]
10005a58:	785a      	ldrb	r2, [r3, #1]
10005a5a:	68fb      	ldr	r3, [r7, #12]
10005a5c:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10005a5e:	687b      	ldr	r3, [r7, #4]
10005a60:	7b59      	ldrb	r1, [r3, #13]
10005a62:	1cfb      	adds	r3, r7, #3
10005a64:	781a      	ldrb	r2, [r3, #0]
10005a66:	687b      	ldr	r3, [r7, #4]
10005a68:	0018      	movs	r0, r3
10005a6a:	f7ff ff5f 	bl	1000592c <ph_merge_nodes>
10005a6e:	0003      	movs	r3, r0
10005a70:	001a      	movs	r2, r3
10005a72:	687b      	ldr	r3, [r7, #4]
10005a74:	735a      	strb	r2, [r3, #13]
    return heap->root_id;
10005a76:	687b      	ldr	r3, [r7, #4]
10005a78:	7b5b      	ldrb	r3, [r3, #13]
}
10005a7a:	0018      	movs	r0, r3
10005a7c:	46bd      	mov	sp, r7
10005a7e:	b004      	add	sp, #16
10005a80:	bd80      	pop	{r7, pc}
10005a82:	46c0      	nop			; (mov r8, r8)
10005a84:	1000d910 	.word	0x1000d910
10005a88:	1000db7c 	.word	0x1000db7c
10005a8c:	1000d88c 	.word	0x1000d88c

10005a90 <ph_peek_head>:
 * which compares first, but without removing it from the heap.
 *
 * \param heap the heap
 * \return the current head node id
 */
static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
10005a90:	b580      	push	{r7, lr}
10005a92:	b082      	sub	sp, #8
10005a94:	af00      	add	r7, sp, #0
10005a96:	6078      	str	r0, [r7, #4]
    return heap->root_id;
10005a98:	687b      	ldr	r3, [r7, #4]
10005a9a:	7b5b      	ldrb	r3, [r3, #13]
}
10005a9c:	0018      	movs	r0, r3
10005a9e:	46bd      	mov	sp, r7
10005aa0:	b002      	add	sp, #8
10005aa2:	bd80      	pop	{r7, pc}

10005aa4 <ph_contains_node>:
 *
 * @param heap the heap
 * @param id the id of the node
 * @return true if the heap contains a node with the given id, false otherwise.
 */
static inline bool ph_contains_node(pheap_t *heap, pheap_node_id_t id) {
10005aa4:	b580      	push	{r7, lr}
10005aa6:	b082      	sub	sp, #8
10005aa8:	af00      	add	r7, sp, #0
10005aaa:	6078      	str	r0, [r7, #4]
10005aac:	000a      	movs	r2, r1
10005aae:	1cfb      	adds	r3, r7, #3
10005ab0:	701a      	strb	r2, [r3, #0]
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10005ab2:	687b      	ldr	r3, [r7, #4]
10005ab4:	7b5b      	ldrb	r3, [r3, #13]
10005ab6:	1cfa      	adds	r2, r7, #3
10005ab8:	7812      	ldrb	r2, [r2, #0]
10005aba:	429a      	cmp	r2, r3
10005abc:	d00a      	beq.n	10005ad4 <ph_contains_node+0x30>
10005abe:	1cfb      	adds	r3, r7, #3
10005ac0:	781a      	ldrb	r2, [r3, #0]
10005ac2:	687b      	ldr	r3, [r7, #4]
10005ac4:	0011      	movs	r1, r2
10005ac6:	0018      	movs	r0, r3
10005ac8:	f7ff fea4 	bl	10005814 <ph_get_node>
10005acc:	0003      	movs	r3, r0
10005ace:	789b      	ldrb	r3, [r3, #2]
10005ad0:	2b00      	cmp	r3, #0
10005ad2:	d001      	beq.n	10005ad8 <ph_contains_node+0x34>
10005ad4:	2301      	movs	r3, #1
10005ad6:	e000      	b.n	10005ada <ph_contains_node+0x36>
10005ad8:	2300      	movs	r3, #0
10005ada:	1c1a      	adds	r2, r3, #0
10005adc:	2301      	movs	r3, #1
10005ade:	4013      	ands	r3, r2
10005ae0:	b2db      	uxtb	r3, r3
}
10005ae2:	0018      	movs	r0, r3
10005ae4:	46bd      	mov	sp, r7
10005ae6:	b002      	add	sp, #8
10005ae8:	bd80      	pop	{r7, pc}
	...

10005aec <ph_free_node>:
 * Free a node that is not currently in the heap, but has been allocated
 *
 * @param heap the heap
 * @param id the id of the node
 */
static inline void ph_free_node(pheap_t *heap, pheap_node_id_t id) {
10005aec:	b580      	push	{r7, lr}
10005aee:	b082      	sub	sp, #8
10005af0:	af00      	add	r7, sp, #0
10005af2:	6078      	str	r0, [r7, #4]
10005af4:	000a      	movs	r2, r1
10005af6:	1cfb      	adds	r3, r7, #3
10005af8:	701a      	strb	r2, [r3, #0]
    assert(id && !ph_contains_node(heap, id));
10005afa:	1cfb      	adds	r3, r7, #3
10005afc:	781b      	ldrb	r3, [r3, #0]
10005afe:	2b00      	cmp	r3, #0
10005b00:	d008      	beq.n	10005b14 <ph_free_node+0x28>
10005b02:	1cfb      	adds	r3, r7, #3
10005b04:	781a      	ldrb	r2, [r3, #0]
10005b06:	687b      	ldr	r3, [r7, #4]
10005b08:	0011      	movs	r1, r2
10005b0a:	0018      	movs	r0, r3
10005b0c:	f7ff ffca 	bl	10005aa4 <ph_contains_node>
10005b10:	1e03      	subs	r3, r0, #0
10005b12:	d005      	beq.n	10005b20 <ph_free_node+0x34>
10005b14:	4b0e      	ldr	r3, [pc, #56]	; (10005b50 <ph_free_node+0x64>)
10005b16:	4a0f      	ldr	r2, [pc, #60]	; (10005b54 <ph_free_node+0x68>)
10005b18:	480f      	ldr	r0, [pc, #60]	; (10005b58 <ph_free_node+0x6c>)
10005b1a:	21f6      	movs	r1, #246	; 0xf6
10005b1c:	f005 f906 	bl	1000ad2c <__assert_func>
    if (heap->free_tail_id) {
10005b20:	687b      	ldr	r3, [r7, #4]
10005b22:	7bdb      	ldrb	r3, [r3, #15]
10005b24:	2b00      	cmp	r3, #0
10005b26:	d00a      	beq.n	10005b3e <ph_free_node+0x52>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10005b28:	687b      	ldr	r3, [r7, #4]
10005b2a:	7bda      	ldrb	r2, [r3, #15]
10005b2c:	687b      	ldr	r3, [r7, #4]
10005b2e:	0011      	movs	r1, r2
10005b30:	0018      	movs	r0, r3
10005b32:	f7ff fe6f 	bl	10005814 <ph_get_node>
10005b36:	0002      	movs	r2, r0
10005b38:	1cfb      	adds	r3, r7, #3
10005b3a:	781b      	ldrb	r3, [r3, #0]
10005b3c:	7053      	strb	r3, [r2, #1]
    }
    heap->free_tail_id = id;
10005b3e:	687b      	ldr	r3, [r7, #4]
10005b40:	1cfa      	adds	r2, r7, #3
10005b42:	7812      	ldrb	r2, [r2, #0]
10005b44:	73da      	strb	r2, [r3, #15]
}
10005b46:	46c0      	nop			; (mov r8, r8)
10005b48:	46bd      	mov	sp, r7
10005b4a:	b002      	add	sp, #8
10005b4c:	bd80      	pop	{r7, pc}
10005b4e:	46c0      	nop			; (mov r8, r8)
10005b50:	1000d914 	.word	0x1000d914
10005b54:	1000dbc0 	.word	0x1000dbc0
10005b58:	1000d88c 	.word	0x1000d88c

10005b5c <default_alarm_pool_initialized>:
        .heap = &default_alarm_pool_heap,
        .entries = default_alarm_pool_entries,
        .entry_ids_high = default_alarm_pool_entry_ids_high,
};

static inline bool default_alarm_pool_initialized(void) {
10005b5c:	b580      	push	{r7, lr}
10005b5e:	af00      	add	r7, sp, #0
    return default_alarm_pool.lock != NULL;
10005b60:	4b03      	ldr	r3, [pc, #12]	; (10005b70 <default_alarm_pool_initialized+0x14>)
10005b62:	685b      	ldr	r3, [r3, #4]
10005b64:	1e5a      	subs	r2, r3, #1
10005b66:	4193      	sbcs	r3, r2
10005b68:	b2db      	uxtb	r3, r3
}
10005b6a:	0018      	movs	r0, r3
10005b6c:	46bd      	mov	sp, r7
10005b6e:	bd80      	pop	{r7, pc}
10005b70:	20000684 	.word	0x20000684

10005b74 <get_entry>:

static alarm_pool_t *pools[NUM_TIMERS];
static void alarm_pool_post_alloc_init(alarm_pool_t *pool, uint hardware_alarm_num);


static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
10005b74:	b580      	push	{r7, lr}
10005b76:	b082      	sub	sp, #8
10005b78:	af00      	add	r7, sp, #0
10005b7a:	6078      	str	r0, [r7, #4]
10005b7c:	000a      	movs	r2, r1
10005b7e:	1cfb      	adds	r3, r7, #3
10005b80:	701a      	strb	r2, [r3, #0]
    assert(id && id <= pool->heap->max_nodes);
10005b82:	1cfb      	adds	r3, r7, #3
10005b84:	781b      	ldrb	r3, [r3, #0]
10005b86:	2b00      	cmp	r3, #0
10005b88:	d006      	beq.n	10005b98 <get_entry+0x24>
10005b8a:	687b      	ldr	r3, [r7, #4]
10005b8c:	681b      	ldr	r3, [r3, #0]
10005b8e:	7b1b      	ldrb	r3, [r3, #12]
10005b90:	1cfa      	adds	r2, r7, #3
10005b92:	7812      	ldrb	r2, [r2, #0]
10005b94:	429a      	cmp	r2, r3
10005b96:	d905      	bls.n	10005ba4 <get_entry+0x30>
10005b98:	4b09      	ldr	r3, [pc, #36]	; (10005bc0 <get_entry+0x4c>)
10005b9a:	4a0a      	ldr	r2, [pc, #40]	; (10005bc4 <get_entry+0x50>)
10005b9c:	480a      	ldr	r0, [pc, #40]	; (10005bc8 <get_entry+0x54>)
10005b9e:	213b      	movs	r1, #59	; 0x3b
10005ba0:	f005 f8c4 	bl	1000ad2c <__assert_func>
    return pool->entries + id - 1;
10005ba4:	687b      	ldr	r3, [r7, #4]
10005ba6:	689a      	ldr	r2, [r3, #8]
10005ba8:	1cfb      	adds	r3, r7, #3
10005baa:	781b      	ldrb	r3, [r3, #0]
10005bac:	4907      	ldr	r1, [pc, #28]	; (10005bcc <get_entry+0x58>)
10005bae:	468c      	mov	ip, r1
10005bb0:	4463      	add	r3, ip
10005bb2:	011b      	lsls	r3, r3, #4
10005bb4:	18d3      	adds	r3, r2, r3
}
10005bb6:	0018      	movs	r0, r3
10005bb8:	46bd      	mov	sp, r7
10005bba:	b002      	add	sp, #8
10005bbc:	bd80      	pop	{r7, pc}
10005bbe:	46c0      	nop			; (mov r8, r8)
10005bc0:	1000d938 	.word	0x1000d938
10005bc4:	1000db40 	.word	0x1000db40
10005bc8:	1000d95c 	.word	0x1000d95c
10005bcc:	0fffffff 	.word	0x0fffffff

10005bd0 <get_entry_id_high>:

static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
10005bd0:	b580      	push	{r7, lr}
10005bd2:	b082      	sub	sp, #8
10005bd4:	af00      	add	r7, sp, #0
10005bd6:	6078      	str	r0, [r7, #4]
10005bd8:	000a      	movs	r2, r1
10005bda:	1cfb      	adds	r3, r7, #3
10005bdc:	701a      	strb	r2, [r3, #0]
    assert(id && id <= pool->heap->max_nodes);
10005bde:	1cfb      	adds	r3, r7, #3
10005be0:	781b      	ldrb	r3, [r3, #0]
10005be2:	2b00      	cmp	r3, #0
10005be4:	d006      	beq.n	10005bf4 <get_entry_id_high+0x24>
10005be6:	687b      	ldr	r3, [r7, #4]
10005be8:	681b      	ldr	r3, [r3, #0]
10005bea:	7b1b      	ldrb	r3, [r3, #12]
10005bec:	1cfa      	adds	r2, r7, #3
10005bee:	7812      	ldrb	r2, [r2, #0]
10005bf0:	429a      	cmp	r2, r3
10005bf2:	d905      	bls.n	10005c00 <get_entry_id_high+0x30>
10005bf4:	4b07      	ldr	r3, [pc, #28]	; (10005c14 <get_entry_id_high+0x44>)
10005bf6:	4a08      	ldr	r2, [pc, #32]	; (10005c18 <get_entry_id_high+0x48>)
10005bf8:	4808      	ldr	r0, [pc, #32]	; (10005c1c <get_entry_id_high+0x4c>)
10005bfa:	2140      	movs	r1, #64	; 0x40
10005bfc:	f005 f896 	bl	1000ad2c <__assert_func>
    return pool->entry_ids_high + id - 1;
10005c00:	687b      	ldr	r3, [r7, #4]
10005c02:	68da      	ldr	r2, [r3, #12]
10005c04:	1cfb      	adds	r3, r7, #3
10005c06:	781b      	ldrb	r3, [r3, #0]
10005c08:	3b01      	subs	r3, #1
10005c0a:	18d3      	adds	r3, r2, r3
}
10005c0c:	0018      	movs	r0, r3
10005c0e:	46bd      	mov	sp, r7
10005c10:	b002      	add	sp, #8
10005c12:	bd80      	pop	{r7, pc}
10005c14:	1000d938 	.word	0x1000d938
10005c18:	1000dbd0 	.word	0x1000dbd0
10005c1c:	1000d95c 	.word	0x1000d95c

10005c20 <timer_pool_entry_comparator>:

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10005c20:	b5b0      	push	{r4, r5, r7, lr}
10005c22:	b084      	sub	sp, #16
10005c24:	af00      	add	r7, sp, #0
10005c26:	6078      	str	r0, [r7, #4]
10005c28:	0008      	movs	r0, r1
10005c2a:	0011      	movs	r1, r2
10005c2c:	1cfb      	adds	r3, r7, #3
10005c2e:	1c02      	adds	r2, r0, #0
10005c30:	701a      	strb	r2, [r3, #0]
10005c32:	1cbb      	adds	r3, r7, #2
10005c34:	1c0a      	adds	r2, r1, #0
10005c36:	701a      	strb	r2, [r3, #0]
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
10005c38:	687b      	ldr	r3, [r7, #4]
10005c3a:	60fb      	str	r3, [r7, #12]
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10005c3c:	1cfb      	adds	r3, r7, #3
10005c3e:	781a      	ldrb	r2, [r3, #0]
10005c40:	68fb      	ldr	r3, [r7, #12]
10005c42:	0011      	movs	r1, r2
10005c44:	0018      	movs	r0, r3
10005c46:	f7ff ff95 	bl	10005b74 <get_entry>
10005c4a:	0003      	movs	r3, r0
10005c4c:	681a      	ldr	r2, [r3, #0]
10005c4e:	685b      	ldr	r3, [r3, #4]
10005c50:	0010      	movs	r0, r2
10005c52:	0019      	movs	r1, r3
10005c54:	f7ff fce6 	bl	10005624 <to_us_since_boot>
10005c58:	0004      	movs	r4, r0
10005c5a:	000d      	movs	r5, r1
10005c5c:	1cbb      	adds	r3, r7, #2
10005c5e:	781a      	ldrb	r2, [r3, #0]
10005c60:	68fb      	ldr	r3, [r7, #12]
10005c62:	0011      	movs	r1, r2
10005c64:	0018      	movs	r0, r3
10005c66:	f7ff ff85 	bl	10005b74 <get_entry>
10005c6a:	0003      	movs	r3, r0
10005c6c:	681a      	ldr	r2, [r3, #0]
10005c6e:	685b      	ldr	r3, [r3, #4]
10005c70:	0010      	movs	r0, r2
10005c72:	0019      	movs	r1, r3
10005c74:	f7ff fcd6 	bl	10005624 <to_us_since_boot>
10005c78:	0002      	movs	r2, r0
10005c7a:	000b      	movs	r3, r1
10005c7c:	2101      	movs	r1, #1
10005c7e:	42ab      	cmp	r3, r5
10005c80:	d804      	bhi.n	10005c8c <timer_pool_entry_comparator+0x6c>
10005c82:	d101      	bne.n	10005c88 <timer_pool_entry_comparator+0x68>
10005c84:	42a2      	cmp	r2, r4
10005c86:	d801      	bhi.n	10005c8c <timer_pool_entry_comparator+0x6c>
10005c88:	2300      	movs	r3, #0
10005c8a:	1c19      	adds	r1, r3, #0
10005c8c:	b2cb      	uxtb	r3, r1
}
10005c8e:	0018      	movs	r0, r3
10005c90:	46bd      	mov	sp, r7
10005c92:	b004      	add	sp, #16
10005c94:	bdb0      	pop	{r4, r5, r7, pc}

10005c96 <make_public_id>:

static inline alarm_id_t make_public_id(uint8_t id_high, pheap_node_id_t id) {
10005c96:	b580      	push	{r7, lr}
10005c98:	b082      	sub	sp, #8
10005c9a:	af00      	add	r7, sp, #0
10005c9c:	0002      	movs	r2, r0
10005c9e:	1dfb      	adds	r3, r7, #7
10005ca0:	701a      	strb	r2, [r3, #0]
10005ca2:	1dbb      	adds	r3, r7, #6
10005ca4:	1c0a      	adds	r2, r1, #0
10005ca6:	701a      	strb	r2, [r3, #0]
    return (alarm_id_t)(((uint)id_high << 8u * sizeof(id)) | id);
10005ca8:	1dfb      	adds	r3, r7, #7
10005caa:	781b      	ldrb	r3, [r3, #0]
10005cac:	021a      	lsls	r2, r3, #8
10005cae:	1dbb      	adds	r3, r7, #6
10005cb0:	781b      	ldrb	r3, [r3, #0]
10005cb2:	4313      	orrs	r3, r2
}
10005cb4:	0018      	movs	r0, r3
10005cb6:	46bd      	mov	sp, r7
10005cb8:	b002      	add	sp, #8
10005cba:	bd80      	pop	{r7, pc}

10005cbc <alarm_pool_init_default>:

void alarm_pool_init_default() {
10005cbc:	b580      	push	{r7, lr}
10005cbe:	af00      	add	r7, sp, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    // allow multiple calls for ease of use from host tests
    if (!default_alarm_pool_initialized()) {
10005cc0:	f7ff ff4c 	bl	10005b5c <default_alarm_pool_initialized>
10005cc4:	0003      	movs	r3, r0
10005cc6:	001a      	movs	r2, r3
10005cc8:	2301      	movs	r3, #1
10005cca:	4053      	eors	r3, r2
10005ccc:	b2db      	uxtb	r3, r3
10005cce:	2b00      	cmp	r3, #0
10005cd0:	d00b      	beq.n	10005cea <alarm_pool_init_default+0x2e>
        ph_post_alloc_init(default_alarm_pool.heap, PICO_TIME_DEFAULT_ALARM_POOL_MAX_TIMERS,
10005cd2:	4b0a      	ldr	r3, [pc, #40]	; (10005cfc <alarm_pool_init_default+0x40>)
10005cd4:	6818      	ldr	r0, [r3, #0]
10005cd6:	4b09      	ldr	r3, [pc, #36]	; (10005cfc <alarm_pool_init_default+0x40>)
10005cd8:	4a09      	ldr	r2, [pc, #36]	; (10005d00 <alarm_pool_init_default+0x44>)
10005cda:	2110      	movs	r1, #16
10005cdc:	f000 fdab 	bl	10006836 <ph_post_alloc_init>
                           timer_pool_entry_comparator, &default_alarm_pool);
        alarm_pool_post_alloc_init(&default_alarm_pool,
10005ce0:	4b06      	ldr	r3, [pc, #24]	; (10005cfc <alarm_pool_init_default+0x40>)
10005ce2:	2103      	movs	r1, #3
10005ce4:	0018      	movs	r0, r3
10005ce6:	f000 fac5 	bl	10006274 <alarm_pool_post_alloc_init>
                                   PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM);
    }
    lock_init(&sleep_notifier, PICO_SPINLOCK_ID_TIMER);
10005cea:	4b06      	ldr	r3, [pc, #24]	; (10005d04 <alarm_pool_init_default+0x48>)
10005cec:	210a      	movs	r1, #10
10005cee:	0018      	movs	r0, r3
10005cf0:	f7ff fbb4 	bl	1000545c <lock_init>
#endif
}
10005cf4:	46c0      	nop			; (mov r8, r8)
10005cf6:	46bd      	mov	sp, r7
10005cf8:	bd80      	pop	{r7, pc}
10005cfa:	46c0      	nop			; (mov r8, r8)
10005cfc:	20000684 	.word	0x20000684
10005d00:	10005c21 	.word	0x10005c21
10005d04:	20009408 	.word	0x20009408

10005d08 <alarm_pool_get_default>:

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
alarm_pool_t *alarm_pool_get_default() {
10005d08:	b580      	push	{r7, lr}
10005d0a:	af00      	add	r7, sp, #0
    assert(default_alarm_pool_initialized());
10005d0c:	f7ff ff26 	bl	10005b5c <default_alarm_pool_initialized>
10005d10:	1e03      	subs	r3, r0, #0
10005d12:	d105      	bne.n	10005d20 <alarm_pool_get_default+0x18>
10005d14:	4b04      	ldr	r3, [pc, #16]	; (10005d28 <alarm_pool_get_default+0x20>)
10005d16:	4a05      	ldr	r2, [pc, #20]	; (10005d2c <alarm_pool_get_default+0x24>)
10005d18:	4805      	ldr	r0, [pc, #20]	; (10005d30 <alarm_pool_get_default+0x28>)
10005d1a:	215c      	movs	r1, #92	; 0x5c
10005d1c:	f005 f806 	bl	1000ad2c <__assert_func>
    return &default_alarm_pool;
10005d20:	4b04      	ldr	r3, [pc, #16]	; (10005d34 <alarm_pool_get_default+0x2c>)
}
10005d22:	0018      	movs	r0, r3
10005d24:	46bd      	mov	sp, r7
10005d26:	bd80      	pop	{r7, pc}
10005d28:	1000d9a8 	.word	0x1000d9a8
10005d2c:	1000db4c 	.word	0x1000db4c
10005d30:	1000d95c 	.word	0x1000d95c
10005d34:	20000684 	.word	0x20000684

10005d38 <add_alarm_under_lock>:
#endif

static pheap_node_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                       void *user_data, pheap_node_id_t reuse_id, bool create_if_past, bool *missed) {
10005d38:	b5f0      	push	{r4, r5, r6, r7, lr}
10005d3a:	b089      	sub	sp, #36	; 0x24
10005d3c:	af00      	add	r7, sp, #0
10005d3e:	60f8      	str	r0, [r7, #12]
10005d40:	603a      	str	r2, [r7, #0]
10005d42:	607b      	str	r3, [r7, #4]
    pheap_node_id_t id;
    if (reuse_id) {
10005d44:	2138      	movs	r1, #56	; 0x38
10005d46:	2008      	movs	r0, #8
10005d48:	180b      	adds	r3, r1, r0
10005d4a:	19db      	adds	r3, r3, r7
10005d4c:	781b      	ldrb	r3, [r3, #0]
10005d4e:	2b00      	cmp	r3, #0
10005d50:	d01e      	beq.n	10005d90 <add_alarm_under_lock+0x58>
        assert(!ph_contains_node(pool->heap, reuse_id));
10005d52:	68fb      	ldr	r3, [r7, #12]
10005d54:	681a      	ldr	r2, [r3, #0]
10005d56:	180b      	adds	r3, r1, r0
10005d58:	19db      	adds	r3, r3, r7
10005d5a:	781b      	ldrb	r3, [r3, #0]
10005d5c:	0019      	movs	r1, r3
10005d5e:	0010      	movs	r0, r2
10005d60:	f7ff fea0 	bl	10005aa4 <ph_contains_node>
10005d64:	0003      	movs	r3, r0
10005d66:	001a      	movs	r2, r3
10005d68:	2301      	movs	r3, #1
10005d6a:	4053      	eors	r3, r2
10005d6c:	b2db      	uxtb	r3, r3
10005d6e:	2b00      	cmp	r3, #0
10005d70:	d105      	bne.n	10005d7e <add_alarm_under_lock+0x46>
10005d72:	4b38      	ldr	r3, [pc, #224]	; (10005e54 <add_alarm_under_lock+0x11c>)
10005d74:	4a38      	ldr	r2, [pc, #224]	; (10005e58 <add_alarm_under_lock+0x120>)
10005d76:	4839      	ldr	r0, [pc, #228]	; (10005e5c <add_alarm_under_lock+0x124>)
10005d78:	2165      	movs	r1, #101	; 0x65
10005d7a:	f004 ffd7 	bl	1000ad2c <__assert_func>
        id = reuse_id;
10005d7e:	231f      	movs	r3, #31
10005d80:	18fb      	adds	r3, r7, r3
10005d82:	2238      	movs	r2, #56	; 0x38
10005d84:	2108      	movs	r1, #8
10005d86:	1852      	adds	r2, r2, r1
10005d88:	19d2      	adds	r2, r2, r7
10005d8a:	7812      	ldrb	r2, [r2, #0]
10005d8c:	701a      	strb	r2, [r3, #0]
10005d8e:	e008      	b.n	10005da2 <add_alarm_under_lock+0x6a>
    } else {
        id = ph_new_node(pool->heap);
10005d90:	68fb      	ldr	r3, [r7, #12]
10005d92:	681b      	ldr	r3, [r3, #0]
10005d94:	221f      	movs	r2, #31
10005d96:	18bc      	adds	r4, r7, r2
10005d98:	0018      	movs	r0, r3
10005d9a:	f7ff fe06 	bl	100059aa <ph_new_node>
10005d9e:	0003      	movs	r3, r0
10005da0:	7023      	strb	r3, [r4, #0]
    }
    if (id) {
10005da2:	251f      	movs	r5, #31
10005da4:	197b      	adds	r3, r7, r5
10005da6:	781b      	ldrb	r3, [r3, #0]
10005da8:	2b00      	cmp	r3, #0
10005daa:	d04b      	beq.n	10005e44 <add_alarm_under_lock+0x10c>
        alarm_pool_entry_t *entry = get_entry(pool, id);
10005dac:	197b      	adds	r3, r7, r5
10005dae:	781a      	ldrb	r2, [r3, #0]
10005db0:	68fb      	ldr	r3, [r7, #12]
10005db2:	0011      	movs	r1, r2
10005db4:	0018      	movs	r0, r3
10005db6:	f7ff fedd 	bl	10005b74 <get_entry>
10005dba:	0003      	movs	r3, r0
10005dbc:	61bb      	str	r3, [r7, #24]
        entry->target = time;
10005dbe:	69b9      	ldr	r1, [r7, #24]
10005dc0:	683a      	ldr	r2, [r7, #0]
10005dc2:	687b      	ldr	r3, [r7, #4]
10005dc4:	600a      	str	r2, [r1, #0]
10005dc6:	604b      	str	r3, [r1, #4]
        entry->callback = callback;
10005dc8:	69bb      	ldr	r3, [r7, #24]
10005dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
10005dcc:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10005dce:	69bb      	ldr	r3, [r7, #24]
10005dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10005dd2:	60da      	str	r2, [r3, #12]
        if (id == ph_insert_node(pool->heap, id)) {
10005dd4:	68fb      	ldr	r3, [r7, #12]
10005dd6:	681a      	ldr	r2, [r3, #0]
10005dd8:	197b      	adds	r3, r7, r5
10005dda:	781b      	ldrb	r3, [r3, #0]
10005ddc:	0019      	movs	r1, r3
10005dde:	0010      	movs	r0, r2
10005de0:	f7ff fe18 	bl	10005a14 <ph_insert_node>
10005de4:	0003      	movs	r3, r0
10005de6:	001a      	movs	r2, r3
10005de8:	197b      	adds	r3, r7, r5
10005dea:	781b      	ldrb	r3, [r3, #0]
10005dec:	4293      	cmp	r3, r2
10005dee:	d129      	bne.n	10005e44 <add_alarm_under_lock+0x10c>
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10005df0:	68fb      	ldr	r3, [r7, #12]
10005df2:	7d1b      	ldrb	r3, [r3, #20]
10005df4:	0019      	movs	r1, r3
10005df6:	2617      	movs	r6, #23
10005df8:	19bc      	adds	r4, r7, r6
10005dfa:	683a      	ldr	r2, [r7, #0]
10005dfc:	687b      	ldr	r3, [r7, #4]
10005dfe:	0008      	movs	r0, r1
10005e00:	f002 fe28 	bl	10008a54 <hardware_alarm_set_target>
10005e04:	0003      	movs	r3, r0
10005e06:	7023      	strb	r3, [r4, #0]
            if (is_missed && !create_if_past) {
10005e08:	19bb      	adds	r3, r7, r6
10005e0a:	781b      	ldrb	r3, [r3, #0]
10005e0c:	2b00      	cmp	r3, #0
10005e0e:	d011      	beq.n	10005e34 <add_alarm_under_lock+0xfc>
10005e10:	233c      	movs	r3, #60	; 0x3c
10005e12:	2208      	movs	r2, #8
10005e14:	189b      	adds	r3, r3, r2
10005e16:	19db      	adds	r3, r3, r7
10005e18:	781b      	ldrb	r3, [r3, #0]
10005e1a:	2201      	movs	r2, #1
10005e1c:	4053      	eors	r3, r2
10005e1e:	b2db      	uxtb	r3, r3
10005e20:	2b00      	cmp	r3, #0
10005e22:	d007      	beq.n	10005e34 <add_alarm_under_lock+0xfc>
                ph_remove_and_free_node(pool->heap, id);
10005e24:	68fb      	ldr	r3, [r7, #12]
10005e26:	681a      	ldr	r2, [r3, #0]
10005e28:	197b      	adds	r3, r7, r5
10005e2a:	781b      	ldrb	r3, [r3, #0]
10005e2c:	0019      	movs	r1, r3
10005e2e:	0010      	movs	r0, r2
10005e30:	f000 fe6c 	bl	10006b0c <ph_remove_and_free_node>
            }
            if (missed) *missed = is_missed;
10005e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10005e36:	2b00      	cmp	r3, #0
10005e38:	d004      	beq.n	10005e44 <add_alarm_under_lock+0x10c>
10005e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10005e3c:	2217      	movs	r2, #23
10005e3e:	18ba      	adds	r2, r7, r2
10005e40:	7812      	ldrb	r2, [r2, #0]
10005e42:	701a      	strb	r2, [r3, #0]
        }
    }
    return id;
10005e44:	231f      	movs	r3, #31
10005e46:	18fb      	adds	r3, r7, r3
10005e48:	781b      	ldrb	r3, [r3, #0]
}
10005e4a:	0018      	movs	r0, r3
10005e4c:	46bd      	mov	sp, r7
10005e4e:	b009      	add	sp, #36	; 0x24
10005e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005e52:	46c0      	nop			; (mov r8, r8)
10005e54:	1000d9cc 	.word	0x1000d9cc
10005e58:	1000db64 	.word	0x1000db64
10005e5c:	1000d95c 	.word	0x1000d95c

10005e60 <alarm_pool_alarm_callback>:

static void alarm_pool_alarm_callback(uint alarm_num) {
10005e60:	b5f0      	push	{r4, r5, r6, r7, lr}
10005e62:	b0af      	sub	sp, #188	; 0xbc
10005e64:	af06      	add	r7, sp, #24
10005e66:	6078      	str	r0, [r7, #4]
    // note this is called from timer IRQ handler
    alarm_pool_t *pool = pools[alarm_num];
10005e68:	4bd9      	ldr	r3, [pc, #868]	; (100061d0 <alarm_pool_alarm_callback+0x370>)
10005e6a:	687a      	ldr	r2, [r7, #4]
10005e6c:	0092      	lsls	r2, r2, #2
10005e6e:	58d3      	ldr	r3, [r2, r3]
10005e70:	228c      	movs	r2, #140	; 0x8c
10005e72:	18ba      	adds	r2, r7, r2
10005e74:	6013      	str	r3, [r2, #0]
    bool again;
    do {
        absolute_time_t now = get_absolute_time();
10005e76:	2310      	movs	r3, #16
10005e78:	18fb      	adds	r3, r7, r3
10005e7a:	0018      	movs	r0, r3
10005e7c:	f7ff fc30 	bl	100056e0 <get_absolute_time>
        alarm_callback_t callback = NULL;
10005e80:	2300      	movs	r3, #0
10005e82:	2298      	movs	r2, #152	; 0x98
10005e84:	18ba      	adds	r2, r7, r2
10005e86:	6013      	str	r3, [r2, #0]
        absolute_time_t target = nil_time;
10005e88:	2200      	movs	r2, #0
10005e8a:	2300      	movs	r3, #0
10005e8c:	60ba      	str	r2, [r7, #8]
10005e8e:	60fb      	str	r3, [r7, #12]
        void *user_data = NULL;
10005e90:	2300      	movs	r3, #0
10005e92:	2294      	movs	r2, #148	; 0x94
10005e94:	18ba      	adds	r2, r7, r2
10005e96:	6013      	str	r3, [r2, #0]
        uint8_t id_high;
        again = false;
10005e98:	239f      	movs	r3, #159	; 0x9f
10005e9a:	18fb      	adds	r3, r7, r3
10005e9c:	2200      	movs	r2, #0
10005e9e:	701a      	strb	r2, [r3, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10005ea0:	238c      	movs	r3, #140	; 0x8c
10005ea2:	18fb      	adds	r3, r7, r3
10005ea4:	681b      	ldr	r3, [r3, #0]
10005ea6:	685b      	ldr	r3, [r3, #4]
10005ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005eaa:	f3ef 8310 	mrs	r3, PRIMASK
10005eae:	66bb      	str	r3, [r7, #104]	; 0x68
    __asm volatile ("cpsid i");
10005eb0:	b672      	cpsid	i
    return status;
10005eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    uint32_t save = save_and_disable_interrupts();
10005eb4:	667b      	str	r3, [r7, #100]	; 0x64
10005eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10005eb8:	663b      	str	r3, [r7, #96]	; 0x60
    while (__builtin_expect(!*lock, 0));
10005eba:	46c0      	nop			; (mov r8, r8)
10005ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
10005ebe:	681b      	ldr	r3, [r3, #0]
10005ec0:	425a      	negs	r2, r3
10005ec2:	4153      	adcs	r3, r2
10005ec4:	b2db      	uxtb	r3, r3
10005ec6:	2b00      	cmp	r3, #0
10005ec8:	d1f8      	bne.n	10005ebc <alarm_pool_alarm_callback+0x5c>
    __asm volatile ("dmb" : : : "memory");
10005eca:	f3bf 8f5f 	dmb	sy
}
10005ece:	46c0      	nop			; (mov r8, r8)
}
10005ed0:	46c0      	nop			; (mov r8, r8)
}
10005ed2:	46c0      	nop			; (mov r8, r8)
    return save;
10005ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10005ed6:	2288      	movs	r2, #136	; 0x88
10005ed8:	18ba      	adds	r2, r7, r2
10005eda:	6013      	str	r3, [r2, #0]
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10005edc:	268c      	movs	r6, #140	; 0x8c
10005ede:	19bb      	adds	r3, r7, r6
10005ee0:	681b      	ldr	r3, [r3, #0]
10005ee2:	681b      	ldr	r3, [r3, #0]
10005ee4:	2587      	movs	r5, #135	; 0x87
10005ee6:	197c      	adds	r4, r7, r5
10005ee8:	0018      	movs	r0, r3
10005eea:	f7ff fdd1 	bl	10005a90 <ph_peek_head>
10005eee:	0003      	movs	r3, r0
10005ef0:	7023      	strb	r3, [r4, #0]
        if (next_id) {
10005ef2:	197b      	adds	r3, r7, r5
10005ef4:	781b      	ldrb	r3, [r3, #0]
10005ef6:	2b00      	cmp	r3, #0
10005ef8:	d100      	bne.n	10005efc <alarm_pool_alarm_callback+0x9c>
10005efa:	e07d      	b.n	10005ff8 <alarm_pool_alarm_callback+0x198>
            alarm_pool_entry_t *entry = get_entry(pool, next_id);
10005efc:	197b      	adds	r3, r7, r5
10005efe:	781a      	ldrb	r2, [r3, #0]
10005f00:	19bb      	adds	r3, r7, r6
10005f02:	681b      	ldr	r3, [r3, #0]
10005f04:	0011      	movs	r1, r2
10005f06:	0018      	movs	r0, r3
10005f08:	f7ff fe34 	bl	10005b74 <get_entry>
10005f0c:	0003      	movs	r3, r0
10005f0e:	2280      	movs	r2, #128	; 0x80
10005f10:	18b9      	adds	r1, r7, r2
10005f12:	600b      	str	r3, [r1, #0]
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10005f14:	18bb      	adds	r3, r7, r2
10005f16:	681b      	ldr	r3, [r3, #0]
10005f18:	681a      	ldr	r2, [r3, #0]
10005f1a:	685b      	ldr	r3, [r3, #4]
10005f1c:	6938      	ldr	r0, [r7, #16]
10005f1e:	6979      	ldr	r1, [r7, #20]
10005f20:	f7ff fc2d 	bl	1000577e <absolute_time_diff_us>
10005f24:	0002      	movs	r2, r0
10005f26:	000b      	movs	r3, r1
10005f28:	2b00      	cmp	r3, #0
10005f2a:	dc56      	bgt.n	10005fda <alarm_pool_alarm_callback+0x17a>
10005f2c:	d101      	bne.n	10005f32 <alarm_pool_alarm_callback+0xd2>
10005f2e:	2a00      	cmp	r2, #0
10005f30:	d153      	bne.n	10005fda <alarm_pool_alarm_callback+0x17a>
                // we don't free the id in case we need to re-add the timer
                pheap_node_id_t __unused removed_id = ph_remove_head(pool->heap, false);
10005f32:	238c      	movs	r3, #140	; 0x8c
10005f34:	18fb      	adds	r3, r7, r3
10005f36:	681b      	ldr	r3, [r3, #0]
10005f38:	681b      	ldr	r3, [r3, #0]
10005f3a:	257f      	movs	r5, #127	; 0x7f
10005f3c:	197c      	adds	r4, r7, r5
10005f3e:	2100      	movs	r1, #0
10005f40:	0018      	movs	r0, r3
10005f42:	f000 fdc1 	bl	10006ac8 <ph_remove_head>
10005f46:	0003      	movs	r3, r0
10005f48:	7023      	strb	r3, [r4, #0]
                assert(removed_id == next_id); // will be true under lock
10005f4a:	197a      	adds	r2, r7, r5
10005f4c:	2387      	movs	r3, #135	; 0x87
10005f4e:	18fb      	adds	r3, r7, r3
10005f50:	7812      	ldrb	r2, [r2, #0]
10005f52:	781b      	ldrb	r3, [r3, #0]
10005f54:	429a      	cmp	r2, r3
10005f56:	d005      	beq.n	10005f64 <alarm_pool_alarm_callback+0x104>
10005f58:	4b9e      	ldr	r3, [pc, #632]	; (100061d4 <alarm_pool_alarm_callback+0x374>)
10005f5a:	4a9f      	ldr	r2, [pc, #636]	; (100061d8 <alarm_pool_alarm_callback+0x378>)
10005f5c:	489f      	ldr	r0, [pc, #636]	; (100061dc <alarm_pool_alarm_callback+0x37c>)
10005f5e:	218c      	movs	r1, #140	; 0x8c
10005f60:	f004 fee4 	bl	1000ad2c <__assert_func>
                target = entry->target;
10005f64:	2180      	movs	r1, #128	; 0x80
10005f66:	187b      	adds	r3, r7, r1
10005f68:	681b      	ldr	r3, [r3, #0]
10005f6a:	681a      	ldr	r2, [r3, #0]
10005f6c:	685b      	ldr	r3, [r3, #4]
10005f6e:	60ba      	str	r2, [r7, #8]
10005f70:	60fb      	str	r3, [r7, #12]
                callback = entry->callback;
10005f72:	000a      	movs	r2, r1
10005f74:	18bb      	adds	r3, r7, r2
10005f76:	681b      	ldr	r3, [r3, #0]
10005f78:	689b      	ldr	r3, [r3, #8]
10005f7a:	2198      	movs	r1, #152	; 0x98
10005f7c:	1878      	adds	r0, r7, r1
10005f7e:	6003      	str	r3, [r0, #0]
                user_data = entry->user_data;
10005f80:	18bb      	adds	r3, r7, r2
10005f82:	681b      	ldr	r3, [r3, #0]
10005f84:	68db      	ldr	r3, [r3, #12]
10005f86:	2294      	movs	r2, #148	; 0x94
10005f88:	18ba      	adds	r2, r7, r2
10005f8a:	6013      	str	r3, [r2, #0]
                assert(callback);
10005f8c:	187b      	adds	r3, r7, r1
10005f8e:	681b      	ldr	r3, [r3, #0]
10005f90:	2b00      	cmp	r3, #0
10005f92:	d105      	bne.n	10005fa0 <alarm_pool_alarm_callback+0x140>
10005f94:	4b92      	ldr	r3, [pc, #584]	; (100061e0 <alarm_pool_alarm_callback+0x380>)
10005f96:	4a90      	ldr	r2, [pc, #576]	; (100061d8 <alarm_pool_alarm_callback+0x378>)
10005f98:	4890      	ldr	r0, [pc, #576]	; (100061dc <alarm_pool_alarm_callback+0x37c>)
10005f9a:	2190      	movs	r1, #144	; 0x90
10005f9c:	f004 fec6 	bl	1000ad2c <__assert_func>
                id_high = *get_entry_id_high(pool, next_id);
10005fa0:	2387      	movs	r3, #135	; 0x87
10005fa2:	18fb      	adds	r3, r7, r3
10005fa4:	781a      	ldrb	r2, [r3, #0]
10005fa6:	248c      	movs	r4, #140	; 0x8c
10005fa8:	193b      	adds	r3, r7, r4
10005faa:	681b      	ldr	r3, [r3, #0]
10005fac:	0011      	movs	r1, r2
10005fae:	0018      	movs	r0, r3
10005fb0:	f7ff fe0e 	bl	10005bd0 <get_entry_id_high>
10005fb4:	0002      	movs	r2, r0
10005fb6:	2193      	movs	r1, #147	; 0x93
10005fb8:	187b      	adds	r3, r7, r1
10005fba:	7812      	ldrb	r2, [r2, #0]
10005fbc:	701a      	strb	r2, [r3, #0]
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10005fbe:	237f      	movs	r3, #127	; 0x7f
10005fc0:	18fb      	adds	r3, r7, r3
10005fc2:	781a      	ldrb	r2, [r3, #0]
10005fc4:	187b      	adds	r3, r7, r1
10005fc6:	781b      	ldrb	r3, [r3, #0]
10005fc8:	0011      	movs	r1, r2
10005fca:	0018      	movs	r0, r3
10005fcc:	f7ff fe63 	bl	10005c96 <make_public_id>
10005fd0:	0002      	movs	r2, r0
10005fd2:	193b      	adds	r3, r7, r4
10005fd4:	681b      	ldr	r3, [r3, #0]
10005fd6:	611a      	str	r2, [r3, #16]
10005fd8:	e00e      	b.n	10005ff8 <alarm_pool_alarm_callback+0x198>
            } else {
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10005fda:	2380      	movs	r3, #128	; 0x80
10005fdc:	18fb      	adds	r3, r7, r3
10005fde:	681b      	ldr	r3, [r3, #0]
10005fe0:	681a      	ldr	r2, [r3, #0]
10005fe2:	685b      	ldr	r3, [r3, #4]
10005fe4:	6879      	ldr	r1, [r7, #4]
10005fe6:	0008      	movs	r0, r1
10005fe8:	f002 fd34 	bl	10008a54 <hardware_alarm_set_target>
10005fec:	1e03      	subs	r3, r0, #0
10005fee:	d003      	beq.n	10005ff8 <alarm_pool_alarm_callback+0x198>
                    again = true;
10005ff0:	239f      	movs	r3, #159	; 0x9f
10005ff2:	18fb      	adds	r3, r7, r3
10005ff4:	2201      	movs	r2, #1
10005ff6:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        spin_unlock(pool->lock, save);
10005ff8:	248c      	movs	r4, #140	; 0x8c
10005ffa:	193b      	adds	r3, r7, r4
10005ffc:	681b      	ldr	r3, [r3, #0]
10005ffe:	685b      	ldr	r3, [r3, #4]
10006000:	65fb      	str	r3, [r7, #92]	; 0x5c
10006002:	2388      	movs	r3, #136	; 0x88
10006004:	18fb      	adds	r3, r7, r3
10006006:	681b      	ldr	r3, [r3, #0]
10006008:	65bb      	str	r3, [r7, #88]	; 0x58
1000600a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
1000600c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm volatile ("dmb" : : : "memory");
1000600e:	f3bf 8f5f 	dmb	sy
}
10006012:	46c0      	nop			; (mov r8, r8)
}
10006014:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10006016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10006018:	2200      	movs	r2, #0
1000601a:	601a      	str	r2, [r3, #0]
}
1000601c:	46c0      	nop			; (mov r8, r8)
1000601e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10006020:	653b      	str	r3, [r7, #80]	; 0x50
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10006022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10006024:	f383 8810 	msr	PRIMASK, r3
}
10006028:	46c0      	nop			; (mov r8, r8)
}
1000602a:	46c0      	nop			; (mov r8, r8)
        if (callback) {
1000602c:	2598      	movs	r5, #152	; 0x98
1000602e:	197b      	adds	r3, r7, r5
10006030:	681b      	ldr	r3, [r3, #0]
10006032:	2b00      	cmp	r3, #0
10006034:	d100      	bne.n	10006038 <alarm_pool_alarm_callback+0x1d8>
10006036:	e111      	b.n	1000625c <alarm_pool_alarm_callback+0x3fc>
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10006038:	2387      	movs	r3, #135	; 0x87
1000603a:	18fb      	adds	r3, r7, r3
1000603c:	781a      	ldrb	r2, [r3, #0]
1000603e:	2393      	movs	r3, #147	; 0x93
10006040:	18fb      	adds	r3, r7, r3
10006042:	781b      	ldrb	r3, [r3, #0]
10006044:	0011      	movs	r1, r2
10006046:	0018      	movs	r0, r3
10006048:	f7ff fe25 	bl	10005c96 <make_public_id>
1000604c:	2394      	movs	r3, #148	; 0x94
1000604e:	18fb      	adds	r3, r7, r3
10006050:	681a      	ldr	r2, [r3, #0]
10006052:	197b      	adds	r3, r7, r5
10006054:	681b      	ldr	r3, [r3, #0]
10006056:	0011      	movs	r1, r2
10006058:	4798      	blx	r3
1000605a:	0002      	movs	r2, r0
1000605c:	000b      	movs	r3, r1
1000605e:	673a      	str	r2, [r7, #112]	; 0x70
10006060:	677b      	str	r3, [r7, #116]	; 0x74
            save = spin_lock_blocking(pool->lock);
10006062:	193b      	adds	r3, r7, r4
10006064:	681b      	ldr	r3, [r3, #0]
10006066:	685b      	ldr	r3, [r3, #4]
10006068:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000606a:	f3ef 8310 	mrs	r3, PRIMASK
1000606e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm volatile ("cpsid i");
10006070:	b672      	cpsid	i
    return status;
10006072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    uint32_t save = save_and_disable_interrupts();
10006074:	647b      	str	r3, [r7, #68]	; 0x44
10006076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10006078:	643b      	str	r3, [r7, #64]	; 0x40
    while (__builtin_expect(!*lock, 0));
1000607a:	46c0      	nop			; (mov r8, r8)
1000607c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000607e:	681b      	ldr	r3, [r3, #0]
10006080:	425a      	negs	r2, r3
10006082:	4153      	adcs	r3, r2
10006084:	b2db      	uxtb	r3, r3
10006086:	2b00      	cmp	r3, #0
10006088:	d1f8      	bne.n	1000607c <alarm_pool_alarm_callback+0x21c>
    __asm volatile ("dmb" : : : "memory");
1000608a:	f3bf 8f5f 	dmb	sy
}
1000608e:	46c0      	nop			; (mov r8, r8)
}
10006090:	46c0      	nop			; (mov r8, r8)
}
10006092:	46c0      	nop			; (mov r8, r8)
    return save;
10006094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10006096:	2288      	movs	r2, #136	; 0x88
10006098:	18ba      	adds	r2, r7, r2
1000609a:	6013      	str	r3, [r2, #0]
            // todo think more about whether we want to keep calling
            if (repeat < 0 && pool->alarm_in_progress) {
1000609c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000609e:	2b00      	cmp	r3, #0
100060a0:	da46      	bge.n	10006130 <alarm_pool_alarm_callback+0x2d0>
100060a2:	228c      	movs	r2, #140	; 0x8c
100060a4:	18bb      	adds	r3, r7, r2
100060a6:	681b      	ldr	r3, [r3, #0]
100060a8:	691b      	ldr	r3, [r3, #16]
100060aa:	2b00      	cmp	r3, #0
100060ac:	d040      	beq.n	10006130 <alarm_pool_alarm_callback+0x2d0>
                assert(pool->alarm_in_progress == make_public_id(id_high, next_id));
100060ae:	18bb      	adds	r3, r7, r2
100060b0:	681b      	ldr	r3, [r3, #0]
100060b2:	691c      	ldr	r4, [r3, #16]
100060b4:	2387      	movs	r3, #135	; 0x87
100060b6:	18fb      	adds	r3, r7, r3
100060b8:	781a      	ldrb	r2, [r3, #0]
100060ba:	2393      	movs	r3, #147	; 0x93
100060bc:	18fb      	adds	r3, r7, r3
100060be:	781b      	ldrb	r3, [r3, #0]
100060c0:	0011      	movs	r1, r2
100060c2:	0018      	movs	r0, r3
100060c4:	f7ff fde7 	bl	10005c96 <make_public_id>
100060c8:	0003      	movs	r3, r0
100060ca:	429c      	cmp	r4, r3
100060cc:	d005      	beq.n	100060da <alarm_pool_alarm_callback+0x27a>
100060ce:	4b45      	ldr	r3, [pc, #276]	; (100061e4 <alarm_pool_alarm_callback+0x384>)
100060d0:	4a41      	ldr	r2, [pc, #260]	; (100061d8 <alarm_pool_alarm_callback+0x378>)
100060d2:	4842      	ldr	r0, [pc, #264]	; (100061dc <alarm_pool_alarm_callback+0x37c>)
100060d4:	219f      	movs	r1, #159	; 0x9f
100060d6:	f004 fe29 	bl	1000ad2c <__assert_func>
                add_alarm_under_lock(pool, delayed_by_us(target, (uint64_t)-repeat), callback, user_data, next_id, true, NULL);
100060da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100060dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100060de:	2000      	movs	r0, #0
100060e0:	2100      	movs	r1, #0
100060e2:	1a80      	subs	r0, r0, r2
100060e4:	4199      	sbcs	r1, r3
100060e6:	0002      	movs	r2, r0
100060e8:	000b      	movs	r3, r1
100060ea:	0010      	movs	r0, r2
100060ec:	0019      	movs	r1, r3
100060ee:	2318      	movs	r3, #24
100060f0:	18fc      	adds	r4, r7, r3
100060f2:	68ba      	ldr	r2, [r7, #8]
100060f4:	68fb      	ldr	r3, [r7, #12]
100060f6:	9000      	str	r0, [sp, #0]
100060f8:	9101      	str	r1, [sp, #4]
100060fa:	0020      	movs	r0, r4
100060fc:	f7ff fb06 	bl	1000570c <delayed_by_us>
10006100:	69ba      	ldr	r2, [r7, #24]
10006102:	69fb      	ldr	r3, [r7, #28]
10006104:	218c      	movs	r1, #140	; 0x8c
10006106:	1879      	adds	r1, r7, r1
10006108:	6808      	ldr	r0, [r1, #0]
1000610a:	2100      	movs	r1, #0
1000610c:	9104      	str	r1, [sp, #16]
1000610e:	2101      	movs	r1, #1
10006110:	9103      	str	r1, [sp, #12]
10006112:	2187      	movs	r1, #135	; 0x87
10006114:	1879      	adds	r1, r7, r1
10006116:	7809      	ldrb	r1, [r1, #0]
10006118:	9102      	str	r1, [sp, #8]
1000611a:	2194      	movs	r1, #148	; 0x94
1000611c:	1879      	adds	r1, r7, r1
1000611e:	6809      	ldr	r1, [r1, #0]
10006120:	9101      	str	r1, [sp, #4]
10006122:	2198      	movs	r1, #152	; 0x98
10006124:	1879      	adds	r1, r7, r1
10006126:	6809      	ldr	r1, [r1, #0]
10006128:	9100      	str	r1, [sp, #0]
1000612a:	f7ff fe05 	bl	10005d38 <add_alarm_under_lock>
1000612e:	e073      	b.n	10006218 <alarm_pool_alarm_callback+0x3b8>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10006130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10006132:	2b00      	cmp	r3, #0
10006134:	dc05      	bgt.n	10006142 <alarm_pool_alarm_callback+0x2e2>
10006136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10006138:	2b00      	cmp	r3, #0
1000613a:	d155      	bne.n	100061e8 <alarm_pool_alarm_callback+0x388>
1000613c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
1000613e:	2b00      	cmp	r3, #0
10006140:	d052      	beq.n	100061e8 <alarm_pool_alarm_callback+0x388>
10006142:	228c      	movs	r2, #140	; 0x8c
10006144:	18bb      	adds	r3, r7, r2
10006146:	681b      	ldr	r3, [r3, #0]
10006148:	691b      	ldr	r3, [r3, #16]
1000614a:	2b00      	cmp	r3, #0
1000614c:	d04c      	beq.n	100061e8 <alarm_pool_alarm_callback+0x388>
                assert(pool->alarm_in_progress == make_public_id(id_high, next_id));
1000614e:	18bb      	adds	r3, r7, r2
10006150:	681b      	ldr	r3, [r3, #0]
10006152:	691c      	ldr	r4, [r3, #16]
10006154:	2387      	movs	r3, #135	; 0x87
10006156:	18fb      	adds	r3, r7, r3
10006158:	781a      	ldrb	r2, [r3, #0]
1000615a:	2393      	movs	r3, #147	; 0x93
1000615c:	18fb      	adds	r3, r7, r3
1000615e:	781b      	ldrb	r3, [r3, #0]
10006160:	0011      	movs	r1, r2
10006162:	0018      	movs	r0, r3
10006164:	f7ff fd97 	bl	10005c96 <make_public_id>
10006168:	0003      	movs	r3, r0
1000616a:	429c      	cmp	r4, r3
1000616c:	d005      	beq.n	1000617a <alarm_pool_alarm_callback+0x31a>
1000616e:	4b1d      	ldr	r3, [pc, #116]	; (100061e4 <alarm_pool_alarm_callback+0x384>)
10006170:	4a19      	ldr	r2, [pc, #100]	; (100061d8 <alarm_pool_alarm_callback+0x378>)
10006172:	481a      	ldr	r0, [pc, #104]	; (100061dc <alarm_pool_alarm_callback+0x37c>)
10006174:	21a2      	movs	r1, #162	; 0xa2
10006176:	f004 fdd9 	bl	1000ad2c <__assert_func>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), (uint64_t)repeat), callback, user_data, next_id,
1000617a:	2320      	movs	r3, #32
1000617c:	18fb      	adds	r3, r7, r3
1000617e:	0018      	movs	r0, r3
10006180:	f7ff faae 	bl	100056e0 <get_absolute_time>
10006184:	6f3a      	ldr	r2, [r7, #112]	; 0x70
10006186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10006188:	2128      	movs	r1, #40	; 0x28
1000618a:	187c      	adds	r4, r7, r1
1000618c:	6a38      	ldr	r0, [r7, #32]
1000618e:	6a79      	ldr	r1, [r7, #36]	; 0x24
10006190:	9200      	str	r2, [sp, #0]
10006192:	9301      	str	r3, [sp, #4]
10006194:	0002      	movs	r2, r0
10006196:	000b      	movs	r3, r1
10006198:	0020      	movs	r0, r4
1000619a:	f7ff fab7 	bl	1000570c <delayed_by_us>
1000619e:	6aba      	ldr	r2, [r7, #40]	; 0x28
100061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100061a2:	218c      	movs	r1, #140	; 0x8c
100061a4:	1879      	adds	r1, r7, r1
100061a6:	6808      	ldr	r0, [r1, #0]
100061a8:	2100      	movs	r1, #0
100061aa:	9104      	str	r1, [sp, #16]
100061ac:	2101      	movs	r1, #1
100061ae:	9103      	str	r1, [sp, #12]
100061b0:	2187      	movs	r1, #135	; 0x87
100061b2:	1879      	adds	r1, r7, r1
100061b4:	7809      	ldrb	r1, [r1, #0]
100061b6:	9102      	str	r1, [sp, #8]
100061b8:	2194      	movs	r1, #148	; 0x94
100061ba:	1879      	adds	r1, r7, r1
100061bc:	6809      	ldr	r1, [r1, #0]
100061be:	9101      	str	r1, [sp, #4]
100061c0:	2198      	movs	r1, #152	; 0x98
100061c2:	1879      	adds	r1, r7, r1
100061c4:	6809      	ldr	r1, [r1, #0]
100061c6:	9100      	str	r1, [sp, #0]
100061c8:	f7ff fdb6 	bl	10005d38 <add_alarm_under_lock>
100061cc:	e024      	b.n	10006218 <alarm_pool_alarm_callback+0x3b8>
100061ce:	46c0      	nop			; (mov r8, r8)
100061d0:	200051e0 	.word	0x200051e0
100061d4:	1000d9f4 	.word	0x1000d9f4
100061d8:	1000db8c 	.word	0x1000db8c
100061dc:	1000d95c 	.word	0x1000d95c
100061e0:	1000da0c 	.word	0x1000da0c
100061e4:	1000da18 	.word	0x1000da18
                                     true, NULL);
            } else {
                // need to return the id to the heap
                ph_free_node(pool->heap, next_id);
100061e8:	248c      	movs	r4, #140	; 0x8c
100061ea:	193b      	adds	r3, r7, r4
100061ec:	681b      	ldr	r3, [r3, #0]
100061ee:	681a      	ldr	r2, [r3, #0]
100061f0:	2587      	movs	r5, #135	; 0x87
100061f2:	197b      	adds	r3, r7, r5
100061f4:	781b      	ldrb	r3, [r3, #0]
100061f6:	0019      	movs	r1, r3
100061f8:	0010      	movs	r0, r2
100061fa:	f7ff fc77 	bl	10005aec <ph_free_node>
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
100061fe:	197b      	adds	r3, r7, r5
10006200:	781a      	ldrb	r2, [r3, #0]
10006202:	193b      	adds	r3, r7, r4
10006204:	681b      	ldr	r3, [r3, #0]
10006206:	0011      	movs	r1, r2
10006208:	0018      	movs	r0, r3
1000620a:	f7ff fce1 	bl	10005bd0 <get_entry_id_high>
1000620e:	0003      	movs	r3, r0
10006210:	781a      	ldrb	r2, [r3, #0]
10006212:	3201      	adds	r2, #1
10006214:	b2d2      	uxtb	r2, r2
10006216:	701a      	strb	r2, [r3, #0]
            }
            pool->alarm_in_progress = 0;
10006218:	218c      	movs	r1, #140	; 0x8c
1000621a:	187b      	adds	r3, r7, r1
1000621c:	681b      	ldr	r3, [r3, #0]
1000621e:	2200      	movs	r2, #0
10006220:	611a      	str	r2, [r3, #16]
            spin_unlock(pool->lock, save);
10006222:	187b      	adds	r3, r7, r1
10006224:	681b      	ldr	r3, [r3, #0]
10006226:	685b      	ldr	r3, [r3, #4]
10006228:	63fb      	str	r3, [r7, #60]	; 0x3c
1000622a:	2388      	movs	r3, #136	; 0x88
1000622c:	18fb      	adds	r3, r7, r3
1000622e:	681b      	ldr	r3, [r3, #0]
10006230:	63bb      	str	r3, [r7, #56]	; 0x38
10006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10006234:	637b      	str	r3, [r7, #52]	; 0x34
    __asm volatile ("dmb" : : : "memory");
10006236:	f3bf 8f5f 	dmb	sy
}
1000623a:	46c0      	nop			; (mov r8, r8)
}
1000623c:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
1000623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10006240:	2200      	movs	r2, #0
10006242:	601a      	str	r2, [r3, #0]
}
10006244:	46c0      	nop			; (mov r8, r8)
10006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10006248:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000624c:	f383 8810 	msr	PRIMASK, r3
}
10006250:	46c0      	nop			; (mov r8, r8)
}
10006252:	46c0      	nop			; (mov r8, r8)
            again = true;
10006254:	239f      	movs	r3, #159	; 0x9f
10006256:	18fb      	adds	r3, r7, r3
10006258:	2201      	movs	r2, #1
1000625a:	701a      	strb	r2, [r3, #0]
        }
    } while (again);
1000625c:	239f      	movs	r3, #159	; 0x9f
1000625e:	18fb      	adds	r3, r7, r3
10006260:	781b      	ldrb	r3, [r3, #0]
10006262:	2b00      	cmp	r3, #0
10006264:	d000      	beq.n	10006268 <alarm_pool_alarm_callback+0x408>
10006266:	e606      	b.n	10005e76 <alarm_pool_alarm_callback+0x16>
}
10006268:	46c0      	nop			; (mov r8, r8)
1000626a:	46c0      	nop			; (mov r8, r8)
1000626c:	46bd      	mov	sp, r7
1000626e:	b029      	add	sp, #164	; 0xa4
10006270:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006272:	46c0      	nop			; (mov r8, r8)

10006274 <alarm_pool_post_alloc_init>:
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
    alarm_pool_post_alloc_init(pool, hardware_alarm_num);
    return pool;
}

void alarm_pool_post_alloc_init(alarm_pool_t *pool, uint hardware_alarm_num) {
10006274:	b580      	push	{r7, lr}
10006276:	b084      	sub	sp, #16
10006278:	af00      	add	r7, sp, #0
1000627a:	6078      	str	r0, [r7, #4]
1000627c:	6039      	str	r1, [r7, #0]
    hardware_alarm_claim(hardware_alarm_num);
1000627e:	683b      	ldr	r3, [r7, #0]
10006280:	0018      	movs	r0, r3
10006282:	f002 fa6d 	bl	10008760 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10006286:	683b      	ldr	r3, [r7, #0]
10006288:	0018      	movs	r0, r3
1000628a:	f002 fcc5 	bl	10008c18 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
1000628e:	4a0f      	ldr	r2, [pc, #60]	; (100062cc <alarm_pool_post_alloc_init+0x58>)
10006290:	683b      	ldr	r3, [r7, #0]
10006292:	0011      	movs	r1, r2
10006294:	0018      	movs	r0, r3
10006296:	f002 fb43 	bl	10008920 <hardware_alarm_set_callback>
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
1000629a:	f002 fa0b 	bl	100086b4 <next_striped_spin_lock_num>
1000629e:	0003      	movs	r3, r0
100062a0:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100062a2:	68fb      	ldr	r3, [r7, #12]
100062a4:	4a0a      	ldr	r2, [pc, #40]	; (100062d0 <alarm_pool_post_alloc_init+0x5c>)
100062a6:	4694      	mov	ip, r2
100062a8:	4463      	add	r3, ip
100062aa:	009b      	lsls	r3, r3, #2
100062ac:	001a      	movs	r2, r3
100062ae:	687b      	ldr	r3, [r7, #4]
100062b0:	605a      	str	r2, [r3, #4]
    pool->hardware_alarm_num = (uint8_t) hardware_alarm_num;
100062b2:	683b      	ldr	r3, [r7, #0]
100062b4:	b2da      	uxtb	r2, r3
100062b6:	687b      	ldr	r3, [r7, #4]
100062b8:	751a      	strb	r2, [r3, #20]
    pools[hardware_alarm_num] = pool;
100062ba:	4b06      	ldr	r3, [pc, #24]	; (100062d4 <alarm_pool_post_alloc_init+0x60>)
100062bc:	683a      	ldr	r2, [r7, #0]
100062be:	0092      	lsls	r2, r2, #2
100062c0:	6879      	ldr	r1, [r7, #4]
100062c2:	50d1      	str	r1, [r2, r3]
}
100062c4:	46c0      	nop			; (mov r8, r8)
100062c6:	46bd      	mov	sp, r7
100062c8:	b004      	add	sp, #16
100062ca:	bd80      	pop	{r7, pc}
100062cc:	10005e61 	.word	0x10005e61
100062d0:	34000040 	.word	0x34000040
100062d4:	200051e0 	.word	0x200051e0

100062d8 <alarm_pool_add_alarm_at>:
    free(pool->entries);
    free(pool);
}

alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                   void *user_data, bool fire_if_past) {
100062d8:	b5b0      	push	{r4, r5, r7, lr}
100062da:	b09e      	sub	sp, #120	; 0x78
100062dc:	af06      	add	r7, sp, #24
100062de:	6178      	str	r0, [r7, #20]
100062e0:	60ba      	str	r2, [r7, #8]
100062e2:	60fb      	str	r3, [r7, #12]
    bool missed = false;
100062e4:	231f      	movs	r3, #31
100062e6:	18fb      	adds	r3, r7, r3
100062e8:	2200      	movs	r2, #0
100062ea:	701a      	strb	r2, [r3, #0]

    alarm_id_t public_id;
    do {
        uint8_t id_high = 0;
100062ec:	235b      	movs	r3, #91	; 0x5b
100062ee:	18fb      	adds	r3, r7, r3
100062f0:	2200      	movs	r2, #0
100062f2:	701a      	strb	r2, [r3, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
100062f4:	697b      	ldr	r3, [r7, #20]
100062f6:	685b      	ldr	r3, [r3, #4]
100062f8:	647b      	str	r3, [r7, #68]	; 0x44
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100062fa:	f3ef 8310 	mrs	r3, PRIMASK
100062fe:	643b      	str	r3, [r7, #64]	; 0x40
    __asm volatile ("cpsid i");
10006300:	b672      	cpsid	i
    return status;
10006302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    uint32_t save = save_and_disable_interrupts();
10006304:	63fb      	str	r3, [r7, #60]	; 0x3c
10006306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10006308:	63bb      	str	r3, [r7, #56]	; 0x38
    while (__builtin_expect(!*lock, 0));
1000630a:	46c0      	nop			; (mov r8, r8)
1000630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000630e:	681b      	ldr	r3, [r3, #0]
10006310:	425a      	negs	r2, r3
10006312:	4153      	adcs	r3, r2
10006314:	b2db      	uxtb	r3, r3
10006316:	2b00      	cmp	r3, #0
10006318:	d1f8      	bne.n	1000630c <alarm_pool_add_alarm_at+0x34>
    __asm volatile ("dmb" : : : "memory");
1000631a:	f3bf 8f5f 	dmb	sy
}
1000631e:	46c0      	nop			; (mov r8, r8)
}
10006320:	46c0      	nop			; (mov r8, r8)
}
10006322:	46c0      	nop			; (mov r8, r8)
    return save;
10006324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10006326:	657b      	str	r3, [r7, #84]	; 0x54

        pheap_node_id_t id = add_alarm_under_lock(pool, time, callback, user_data, 0, false, &missed);
10006328:	2553      	movs	r5, #83	; 0x53
1000632a:	197c      	adds	r4, r7, r5
1000632c:	68ba      	ldr	r2, [r7, #8]
1000632e:	68fb      	ldr	r3, [r7, #12]
10006330:	6978      	ldr	r0, [r7, #20]
10006332:	211f      	movs	r1, #31
10006334:	1879      	adds	r1, r7, r1
10006336:	9104      	str	r1, [sp, #16]
10006338:	2100      	movs	r1, #0
1000633a:	9103      	str	r1, [sp, #12]
1000633c:	2100      	movs	r1, #0
1000633e:	9102      	str	r1, [sp, #8]
10006340:	6f79      	ldr	r1, [r7, #116]	; 0x74
10006342:	9101      	str	r1, [sp, #4]
10006344:	6f39      	ldr	r1, [r7, #112]	; 0x70
10006346:	9100      	str	r1, [sp, #0]
10006348:	f7ff fcf6 	bl	10005d38 <add_alarm_under_lock>
1000634c:	0003      	movs	r3, r0
1000634e:	7023      	strb	r3, [r4, #0]
        if (id) id_high = *get_entry_id_high(pool, id);
10006350:	197b      	adds	r3, r7, r5
10006352:	781b      	ldrb	r3, [r3, #0]
10006354:	2b00      	cmp	r3, #0
10006356:	d00b      	beq.n	10006370 <alarm_pool_add_alarm_at+0x98>
10006358:	197b      	adds	r3, r7, r5
1000635a:	781a      	ldrb	r2, [r3, #0]
1000635c:	697b      	ldr	r3, [r7, #20]
1000635e:	0011      	movs	r1, r2
10006360:	0018      	movs	r0, r3
10006362:	f7ff fc35 	bl	10005bd0 <get_entry_id_high>
10006366:	0002      	movs	r2, r0
10006368:	235b      	movs	r3, #91	; 0x5b
1000636a:	18fb      	adds	r3, r7, r3
1000636c:	7812      	ldrb	r2, [r2, #0]
1000636e:	701a      	strb	r2, [r3, #0]

        spin_unlock(pool->lock, save);
10006370:	697b      	ldr	r3, [r7, #20]
10006372:	685b      	ldr	r3, [r3, #4]
10006374:	637b      	str	r3, [r7, #52]	; 0x34
10006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10006378:	633b      	str	r3, [r7, #48]	; 0x30
1000637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000637c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("dmb" : : : "memory");
1000637e:	f3bf 8f5f 	dmb	sy
}
10006382:	46c0      	nop			; (mov r8, r8)
}
10006384:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006388:	2200      	movs	r2, #0
1000638a:	601a      	str	r2, [r3, #0]
}
1000638c:	46c0      	nop			; (mov r8, r8)
1000638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006390:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006394:	f383 8810 	msr	PRIMASK, r3
}
10006398:	46c0      	nop			; (mov r8, r8)
}
1000639a:	46c0      	nop			; (mov r8, r8)

        if (!id) {
1000639c:	2353      	movs	r3, #83	; 0x53
1000639e:	18fb      	adds	r3, r7, r3
100063a0:	781b      	ldrb	r3, [r3, #0]
100063a2:	2b00      	cmp	r3, #0
100063a4:	d102      	bne.n	100063ac <alarm_pool_add_alarm_at+0xd4>
            // no space in pheap to allocate an alarm
            return -1;
100063a6:	2301      	movs	r3, #1
100063a8:	425b      	negs	r3, r3
100063aa:	e05a      	b.n	10006462 <alarm_pool_add_alarm_at+0x18a>
        }

        // note that if missed was true, then the id was never added to the pheap (because we
        // passed false for create_if_past arg above)
        public_id = missed ? 0 : make_public_id(id_high, id);
100063ac:	231f      	movs	r3, #31
100063ae:	18fb      	adds	r3, r7, r3
100063b0:	781b      	ldrb	r3, [r3, #0]
100063b2:	2b00      	cmp	r3, #0
100063b4:	d10b      	bne.n	100063ce <alarm_pool_add_alarm_at+0xf6>
100063b6:	2353      	movs	r3, #83	; 0x53
100063b8:	18fb      	adds	r3, r7, r3
100063ba:	781a      	ldrb	r2, [r3, #0]
100063bc:	235b      	movs	r3, #91	; 0x5b
100063be:	18fb      	adds	r3, r7, r3
100063c0:	781b      	ldrb	r3, [r3, #0]
100063c2:	0011      	movs	r1, r2
100063c4:	0018      	movs	r0, r3
100063c6:	f7ff fc66 	bl	10005c96 <make_public_id>
100063ca:	0003      	movs	r3, r0
100063cc:	e000      	b.n	100063d0 <alarm_pool_add_alarm_at+0xf8>
100063ce:	2300      	movs	r3, #0
100063d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (missed && fire_if_past) {
100063d2:	231f      	movs	r3, #31
100063d4:	18fb      	adds	r3, r7, r3
100063d6:	781b      	ldrb	r3, [r3, #0]
100063d8:	2b00      	cmp	r3, #0
100063da:	d041      	beq.n	10006460 <alarm_pool_add_alarm_at+0x188>
100063dc:	2378      	movs	r3, #120	; 0x78
100063de:	18fb      	adds	r3, r7, r3
100063e0:	781b      	ldrb	r3, [r3, #0]
100063e2:	2b00      	cmp	r3, #0
100063e4:	d03c      	beq.n	10006460 <alarm_pool_add_alarm_at+0x188>
            // ... so if fire_if_past == true we call the callback
            int64_t repeat = callback(public_id, user_data);
100063e6:	6f79      	ldr	r1, [r7, #116]	; 0x74
100063e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
100063ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
100063ec:	0010      	movs	r0, r2
100063ee:	4798      	blx	r3
100063f0:	0002      	movs	r2, r0
100063f2:	000b      	movs	r3, r1
100063f4:	64ba      	str	r2, [r7, #72]	; 0x48
100063f6:	64fb      	str	r3, [r7, #76]	; 0x4c
            // if not repeated we have no id to return so set public_id to 0,
            // otherwise we need to repeat, but will assign a new id next time
            // todo arguably this does mean that the id passed to the first callback may differ from subsequent calls
            if (!repeat) {
100063f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100063fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
100063fc:	4313      	orrs	r3, r2
100063fe:	d102      	bne.n	10006406 <alarm_pool_add_alarm_at+0x12e>
                public_id = 0;
10006400:	2300      	movs	r3, #0
10006402:	65fb      	str	r3, [r7, #92]	; 0x5c
                break;
10006404:	e02c      	b.n	10006460 <alarm_pool_add_alarm_at+0x188>
            } else if (repeat < 0) {
10006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10006408:	2b00      	cmp	r3, #0
1000640a:	da13      	bge.n	10006434 <alarm_pool_add_alarm_at+0x15c>
                time = delayed_by_us(time, (uint64_t)-repeat);
1000640c:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000640e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10006410:	2000      	movs	r0, #0
10006412:	2100      	movs	r1, #0
10006414:	1a80      	subs	r0, r0, r2
10006416:	4199      	sbcs	r1, r3
10006418:	0002      	movs	r2, r0
1000641a:	000b      	movs	r3, r1
1000641c:	0010      	movs	r0, r2
1000641e:	0019      	movs	r1, r3
10006420:	2308      	movs	r3, #8
10006422:	18fc      	adds	r4, r7, r3
10006424:	68ba      	ldr	r2, [r7, #8]
10006426:	68fb      	ldr	r3, [r7, #12]
10006428:	9000      	str	r0, [sp, #0]
1000642a:	9101      	str	r1, [sp, #4]
1000642c:	0020      	movs	r0, r4
1000642e:	f7ff f96d 	bl	1000570c <delayed_by_us>
10006432:	e75b      	b.n	100062ec <alarm_pool_add_alarm_at+0x14>
            } else {
                time = delayed_by_us(get_absolute_time(), (uint64_t)repeat);
10006434:	2320      	movs	r3, #32
10006436:	18fb      	adds	r3, r7, r3
10006438:	0018      	movs	r0, r3
1000643a:	f7ff f951 	bl	100056e0 <get_absolute_time>
1000643e:	6cba      	ldr	r2, [r7, #72]	; 0x48
10006440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10006442:	003c      	movs	r4, r7
10006444:	6a38      	ldr	r0, [r7, #32]
10006446:	6a79      	ldr	r1, [r7, #36]	; 0x24
10006448:	9200      	str	r2, [sp, #0]
1000644a:	9301      	str	r3, [sp, #4]
1000644c:	0002      	movs	r2, r0
1000644e:	000b      	movs	r3, r1
10006450:	0020      	movs	r0, r4
10006452:	f7ff f95b 	bl	1000570c <delayed_by_us>
10006456:	683a      	ldr	r2, [r7, #0]
10006458:	687b      	ldr	r3, [r7, #4]
1000645a:	60ba      	str	r2, [r7, #8]
1000645c:	60fb      	str	r3, [r7, #12]
    do {
1000645e:	e745      	b.n	100062ec <alarm_pool_add_alarm_at+0x14>
            // b) missed == true && fire_if_past == false && public_id = 0
            // but we are done in either case
            break;
        }
    } while (true);
    return public_id;
10006460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
10006462:	0018      	movs	r0, r3
10006464:	46bd      	mov	sp, r7
10006466:	b018      	add	sp, #96	; 0x60
10006468:	bdb0      	pop	{r4, r5, r7, pc}
	...

1000646c <alarm_pool_cancel_alarm>:

bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
1000646c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000646e:	b08f      	sub	sp, #60	; 0x3c
10006470:	af00      	add	r7, sp, #0
10006472:	6078      	str	r0, [r7, #4]
10006474:	6039      	str	r1, [r7, #0]
    bool rc = false;
10006476:	2337      	movs	r3, #55	; 0x37
10006478:	18fb      	adds	r3, r7, r3
1000647a:	2200      	movs	r2, #0
1000647c:	701a      	strb	r2, [r3, #0]
    uint32_t save = spin_lock_blocking(pool->lock);
1000647e:	687b      	ldr	r3, [r7, #4]
10006480:	685b      	ldr	r3, [r3, #4]
10006482:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10006484:	f3ef 8310 	mrs	r3, PRIMASK
10006488:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("cpsid i");
1000648a:	b672      	cpsid	i
    return status;
1000648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    uint32_t save = save_and_disable_interrupts();
1000648e:	623b      	str	r3, [r7, #32]
10006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006492:	61fb      	str	r3, [r7, #28]
    while (__builtin_expect(!*lock, 0));
10006494:	46c0      	nop			; (mov r8, r8)
10006496:	69fb      	ldr	r3, [r7, #28]
10006498:	681b      	ldr	r3, [r3, #0]
1000649a:	425a      	negs	r2, r3
1000649c:	4153      	adcs	r3, r2
1000649e:	b2db      	uxtb	r3, r3
100064a0:	2b00      	cmp	r3, #0
100064a2:	d1f8      	bne.n	10006496 <alarm_pool_cancel_alarm+0x2a>
    __asm volatile ("dmb" : : : "memory");
100064a4:	f3bf 8f5f 	dmb	sy
}
100064a8:	46c0      	nop			; (mov r8, r8)
}
100064aa:	46c0      	nop			; (mov r8, r8)
}
100064ac:	46c0      	nop			; (mov r8, r8)
    return save;
100064ae:	6a3b      	ldr	r3, [r7, #32]
100064b0:	633b      	str	r3, [r7, #48]	; 0x30
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
100064b2:	212f      	movs	r1, #47	; 0x2f
100064b4:	187b      	adds	r3, r7, r1
100064b6:	683a      	ldr	r2, [r7, #0]
100064b8:	701a      	strb	r2, [r3, #0]
    if (ph_contains_node(pool->heap, id)) {
100064ba:	687b      	ldr	r3, [r7, #4]
100064bc:	681a      	ldr	r2, [r3, #0]
100064be:	187b      	adds	r3, r7, r1
100064c0:	781b      	ldrb	r3, [r3, #0]
100064c2:	0019      	movs	r1, r3
100064c4:	0010      	movs	r0, r2
100064c6:	f7ff faed 	bl	10005aa4 <ph_contains_node>
100064ca:	1e03      	subs	r3, r0, #0
100064cc:	d035      	beq.n	1000653a <alarm_pool_cancel_alarm+0xce>
        assert(alarm_id != pool->alarm_in_progress); // it shouldn't be in the heap if it is in progress
100064ce:	687b      	ldr	r3, [r7, #4]
100064d0:	691b      	ldr	r3, [r3, #16]
100064d2:	683a      	ldr	r2, [r7, #0]
100064d4:	429a      	cmp	r2, r3
100064d6:	d106      	bne.n	100064e6 <alarm_pool_cancel_alarm+0x7a>
100064d8:	4b2a      	ldr	r3, [pc, #168]	; (10006584 <alarm_pool_cancel_alarm+0x118>)
100064da:	4a2b      	ldr	r2, [pc, #172]	; (10006588 <alarm_pool_cancel_alarm+0x11c>)
100064dc:	2185      	movs	r1, #133	; 0x85
100064de:	0049      	lsls	r1, r1, #1
100064e0:	482a      	ldr	r0, [pc, #168]	; (1000658c <alarm_pool_cancel_alarm+0x120>)
100064e2:	f004 fc23 	bl	1000ad2c <__assert_func>
        // check we have the right high value
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
100064e6:	683b      	ldr	r3, [r7, #0]
100064e8:	0a1a      	lsrs	r2, r3, #8
100064ea:	242e      	movs	r4, #46	; 0x2e
100064ec:	193b      	adds	r3, r7, r4
100064ee:	701a      	strb	r2, [r3, #0]
        if (id_high == *get_entry_id_high(pool, id)) {
100064f0:	252f      	movs	r5, #47	; 0x2f
100064f2:	197b      	adds	r3, r7, r5
100064f4:	781a      	ldrb	r2, [r3, #0]
100064f6:	687b      	ldr	r3, [r7, #4]
100064f8:	0011      	movs	r1, r2
100064fa:	0018      	movs	r0, r3
100064fc:	f7ff fb68 	bl	10005bd0 <get_entry_id_high>
10006500:	0003      	movs	r3, r0
10006502:	781b      	ldrb	r3, [r3, #0]
10006504:	193a      	adds	r2, r7, r4
10006506:	7812      	ldrb	r2, [r2, #0]
10006508:	429a      	cmp	r2, r3
1000650a:	d11e      	bne.n	1000654a <alarm_pool_cancel_alarm+0xde>
            rc = ph_remove_and_free_node(pool->heap, id);
1000650c:	687b      	ldr	r3, [r7, #4]
1000650e:	681a      	ldr	r2, [r3, #0]
10006510:	2637      	movs	r6, #55	; 0x37
10006512:	19bc      	adds	r4, r7, r6
10006514:	197b      	adds	r3, r7, r5
10006516:	781b      	ldrb	r3, [r3, #0]
10006518:	0019      	movs	r1, r3
1000651a:	0010      	movs	r0, r2
1000651c:	f000 faf6 	bl	10006b0c <ph_remove_and_free_node>
10006520:	0003      	movs	r3, r0
10006522:	7023      	strb	r3, [r4, #0]
            // note we don't bother to remove the actual hardware alarm timeout...
            // it will either do callbacks or not depending on other alarms, and reset the next timeout itself
            assert(rc);
10006524:	19bb      	adds	r3, r7, r6
10006526:	781b      	ldrb	r3, [r3, #0]
10006528:	2b00      	cmp	r3, #0
1000652a:	d10e      	bne.n	1000654a <alarm_pool_cancel_alarm+0xde>
1000652c:	4b18      	ldr	r3, [pc, #96]	; (10006590 <alarm_pool_cancel_alarm+0x124>)
1000652e:	4a16      	ldr	r2, [pc, #88]	; (10006588 <alarm_pool_cancel_alarm+0x11c>)
10006530:	2112      	movs	r1, #18
10006532:	31ff      	adds	r1, #255	; 0xff
10006534:	4815      	ldr	r0, [pc, #84]	; (1000658c <alarm_pool_cancel_alarm+0x120>)
10006536:	f004 fbf9 	bl	1000ad2c <__assert_func>
        }
    } else {
        if (alarm_id == pool->alarm_in_progress) {
1000653a:	687b      	ldr	r3, [r7, #4]
1000653c:	691b      	ldr	r3, [r3, #16]
1000653e:	683a      	ldr	r2, [r7, #0]
10006540:	429a      	cmp	r2, r3
10006542:	d102      	bne.n	1000654a <alarm_pool_cancel_alarm+0xde>
            // make sure the alarm doesn't repeat
            pool->alarm_in_progress = 0;
10006544:	687b      	ldr	r3, [r7, #4]
10006546:	2200      	movs	r2, #0
10006548:	611a      	str	r2, [r3, #16]
        }
    }
    spin_unlock(pool->lock, save);
1000654a:	687b      	ldr	r3, [r7, #4]
1000654c:	685b      	ldr	r3, [r3, #4]
1000654e:	61bb      	str	r3, [r7, #24]
10006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006552:	617b      	str	r3, [r7, #20]
10006554:	69bb      	ldr	r3, [r7, #24]
10006556:	613b      	str	r3, [r7, #16]
    __asm volatile ("dmb" : : : "memory");
10006558:	f3bf 8f5f 	dmb	sy
}
1000655c:	46c0      	nop			; (mov r8, r8)
}
1000655e:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10006560:	693b      	ldr	r3, [r7, #16]
10006562:	2200      	movs	r2, #0
10006564:	601a      	str	r2, [r3, #0]
}
10006566:	46c0      	nop			; (mov r8, r8)
10006568:	697b      	ldr	r3, [r7, #20]
1000656a:	60fb      	str	r3, [r7, #12]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000656c:	68fb      	ldr	r3, [r7, #12]
1000656e:	f383 8810 	msr	PRIMASK, r3
}
10006572:	46c0      	nop			; (mov r8, r8)
}
10006574:	46c0      	nop			; (mov r8, r8)
    return rc;
10006576:	2337      	movs	r3, #55	; 0x37
10006578:	18fb      	adds	r3, r7, r3
1000657a:	781b      	ldrb	r3, [r3, #0]
}
1000657c:	0018      	movs	r0, r3
1000657e:	46bd      	mov	sp, r7
10006580:	b00f      	add	sp, #60	; 0x3c
10006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006584:	1000da84 	.word	0x1000da84
10006588:	1000dbe4 	.word	0x1000dbe4
1000658c:	1000d95c 	.word	0x1000d95c
10006590:	1000daa8 	.word	0x1000daa8

10006594 <sleep_until_callback>:
    ph_dump(pool->heap, alarm_pool_dump_key, pool);
    spin_unlock(pool->lock, save);
}

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sleep_until_callback(__unused alarm_id_t id, __unused void *user_data) {
10006594:	b580      	push	{r7, lr}
10006596:	b08c      	sub	sp, #48	; 0x30
10006598:	af00      	add	r7, sp, #0
1000659a:	6078      	str	r0, [r7, #4]
1000659c:	6039      	str	r1, [r7, #0]
    uint32_t save = spin_lock_blocking(sleep_notifier.spin_lock);
1000659e:	4b1c      	ldr	r3, [pc, #112]	; (10006610 <sleep_until_callback+0x7c>)
100065a0:	681b      	ldr	r3, [r3, #0]
100065a2:	61bb      	str	r3, [r7, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100065a4:	f3ef 8310 	mrs	r3, PRIMASK
100065a8:	617b      	str	r3, [r7, #20]
    __asm volatile ("cpsid i");
100065aa:	b672      	cpsid	i
    return status;
100065ac:	697b      	ldr	r3, [r7, #20]
    uint32_t save = save_and_disable_interrupts();
100065ae:	613b      	str	r3, [r7, #16]
100065b0:	69bb      	ldr	r3, [r7, #24]
100065b2:	60fb      	str	r3, [r7, #12]
    while (__builtin_expect(!*lock, 0));
100065b4:	46c0      	nop			; (mov r8, r8)
100065b6:	68fb      	ldr	r3, [r7, #12]
100065b8:	681b      	ldr	r3, [r3, #0]
100065ba:	425a      	negs	r2, r3
100065bc:	4153      	adcs	r3, r2
100065be:	b2db      	uxtb	r3, r3
100065c0:	2b00      	cmp	r3, #0
100065c2:	d1f8      	bne.n	100065b6 <sleep_until_callback+0x22>
    __asm volatile ("dmb" : : : "memory");
100065c4:	f3bf 8f5f 	dmb	sy
}
100065c8:	46c0      	nop			; (mov r8, r8)
}
100065ca:	46c0      	nop			; (mov r8, r8)
}
100065cc:	46c0      	nop			; (mov r8, r8)
    return save;
100065ce:	693b      	ldr	r3, [r7, #16]
100065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lock_internal_spin_unlock_with_notify(&sleep_notifier, save);
100065d2:	4b0f      	ldr	r3, [pc, #60]	; (10006610 <sleep_until_callback+0x7c>)
100065d4:	681b      	ldr	r3, [r3, #0]
100065d6:	62bb      	str	r3, [r7, #40]	; 0x28
100065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100065da:	627b      	str	r3, [r7, #36]	; 0x24
100065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100065de:	623b      	str	r3, [r7, #32]
    __asm volatile ("dmb" : : : "memory");
100065e0:	f3bf 8f5f 	dmb	sy
}
100065e4:	46c0      	nop			; (mov r8, r8)
}
100065e6:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
100065e8:	6a3b      	ldr	r3, [r7, #32]
100065ea:	2200      	movs	r2, #0
100065ec:	601a      	str	r2, [r3, #0]
}
100065ee:	46c0      	nop			; (mov r8, r8)
100065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100065f2:	61fb      	str	r3, [r7, #28]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100065f4:	69fb      	ldr	r3, [r7, #28]
100065f6:	f383 8810 	msr	PRIMASK, r3
}
100065fa:	46c0      	nop			; (mov r8, r8)
}
100065fc:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("sev");
100065fe:	bf40      	sev
}
10006600:	46c0      	nop			; (mov r8, r8)
    return 0;
10006602:	2200      	movs	r2, #0
10006604:	2300      	movs	r3, #0
}
10006606:	0010      	movs	r0, r2
10006608:	0019      	movs	r1, r3
1000660a:	46bd      	mov	sp, r7
1000660c:	b00c      	add	sp, #48	; 0x30
1000660e:	bd80      	pop	{r7, pc}
10006610:	20009408 	.word	0x20009408

10006614 <best_effort_wfe_or_timeout>:

void sleep_ms(uint32_t ms) {
    sleep_us(ms * 1000ull);
}

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10006614:	b580      	push	{r7, lr}
10006616:	b086      	sub	sp, #24
10006618:	af02      	add	r7, sp, #8
1000661a:	6038      	str	r0, [r7, #0]
1000661c:	6079      	str	r1, [r7, #4]
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sleep_until_callback, NULL, false);
1000661e:	4a13      	ldr	r2, [pc, #76]	; (1000666c <best_effort_wfe_or_timeout+0x58>)
10006620:	6838      	ldr	r0, [r7, #0]
10006622:	6879      	ldr	r1, [r7, #4]
10006624:	2300      	movs	r3, #0
10006626:	9300      	str	r3, [sp, #0]
10006628:	2300      	movs	r3, #0
1000662a:	f7ff f8c8 	bl	100057be <add_alarm_at>
1000662e:	0003      	movs	r3, r0
10006630:	60fb      	str	r3, [r7, #12]
    if (id <= 0) {
10006632:	68fb      	ldr	r3, [r7, #12]
10006634:	2b00      	cmp	r3, #0
10006636:	dc08      	bgt.n	1000664a <best_effort_wfe_or_timeout+0x36>
10006638:	46c0      	nop			; (mov r8, r8)
        tight_loop_contents();
        return time_reached(timeout_timestamp);
1000663a:	683a      	ldr	r2, [r7, #0]
1000663c:	687b      	ldr	r3, [r7, #4]
1000663e:	0010      	movs	r0, r2
10006640:	0019      	movs	r1, r3
10006642:	f7ff f81b 	bl	1000567c <time_reached>
10006646:	0003      	movs	r3, r0
10006648:	e00c      	b.n	10006664 <best_effort_wfe_or_timeout+0x50>
    __asm volatile ("wfe");
1000664a:	bf20      	wfe
}
1000664c:	46c0      	nop			; (mov r8, r8)
    } else {
        __wfe();
        // we need to clean up if it wasn't us that caused the wfe; if it was this will be a noop.
        cancel_alarm(id);
1000664e:	68fb      	ldr	r3, [r7, #12]
10006650:	0018      	movs	r0, r3
10006652:	f7ff f8ce 	bl	100057f2 <cancel_alarm>
        return time_reached(timeout_timestamp);
10006656:	683a      	ldr	r2, [r7, #0]
10006658:	687b      	ldr	r3, [r7, #4]
1000665a:	0010      	movs	r0, r2
1000665c:	0019      	movs	r1, r3
1000665e:	f7ff f80d 	bl	1000567c <time_reached>
10006662:	0003      	movs	r3, r0
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10006664:	0018      	movs	r0, r3
10006666:	46bd      	mov	sp, r7
10006668:	b004      	add	sp, #16
1000666a:	bd80      	pop	{r7, pc}
1000666c:	10006595 	.word	0x10006595

10006670 <ph_get_node>:
static inline pheap_node_t *ph_get_node(pheap_t *heap, pheap_node_id_t id) {
10006670:	b580      	push	{r7, lr}
10006672:	b082      	sub	sp, #8
10006674:	af00      	add	r7, sp, #0
10006676:	6078      	str	r0, [r7, #4]
10006678:	000a      	movs	r2, r1
1000667a:	1cfb      	adds	r3, r7, #3
1000667c:	701a      	strb	r2, [r3, #0]
    assert(id && id <= heap->max_nodes);
1000667e:	1cfb      	adds	r3, r7, #3
10006680:	781b      	ldrb	r3, [r3, #0]
10006682:	2b00      	cmp	r3, #0
10006684:	d005      	beq.n	10006692 <ph_get_node+0x22>
10006686:	687b      	ldr	r3, [r7, #4]
10006688:	7b1b      	ldrb	r3, [r3, #12]
1000668a:	1cfa      	adds	r2, r7, #3
1000668c:	7812      	ldrb	r2, [r2, #0]
1000668e:	429a      	cmp	r2, r3
10006690:	d905      	bls.n	1000669e <ph_get_node+0x2e>
10006692:	4b09      	ldr	r3, [pc, #36]	; (100066b8 <ph_get_node+0x48>)
10006694:	4a09      	ldr	r2, [pc, #36]	; (100066bc <ph_get_node+0x4c>)
10006696:	480a      	ldr	r0, [pc, #40]	; (100066c0 <ph_get_node+0x50>)
10006698:	2168      	movs	r1, #104	; 0x68
1000669a:	f004 fb47 	bl	1000ad2c <__assert_func>
    return heap->nodes + id - 1;
1000669e:	687b      	ldr	r3, [r7, #4]
100066a0:	6819      	ldr	r1, [r3, #0]
100066a2:	1cfb      	adds	r3, r7, #3
100066a4:	781a      	ldrb	r2, [r3, #0]
100066a6:	0013      	movs	r3, r2
100066a8:	005b      	lsls	r3, r3, #1
100066aa:	189b      	adds	r3, r3, r2
100066ac:	3b03      	subs	r3, #3
100066ae:	18cb      	adds	r3, r1, r3
}
100066b0:	0018      	movs	r0, r3
100066b2:	46bd      	mov	sp, r7
100066b4:	b002      	add	sp, #8
100066b6:	bd80      	pop	{r7, pc}
100066b8:	1000dbfc 	.word	0x1000dbfc
100066bc:	1000dda4 	.word	0x1000dda4
100066c0:	1000dc18 	.word	0x1000dc18

100066c4 <ph_add_child_node>:
static void ph_add_child_node(pheap_t *heap, pheap_node_id_t parent_id, pheap_node_id_t child_id) {
100066c4:	b580      	push	{r7, lr}
100066c6:	b084      	sub	sp, #16
100066c8:	af00      	add	r7, sp, #0
100066ca:	6078      	str	r0, [r7, #4]
100066cc:	0008      	movs	r0, r1
100066ce:	0011      	movs	r1, r2
100066d0:	1cfb      	adds	r3, r7, #3
100066d2:	1c02      	adds	r2, r0, #0
100066d4:	701a      	strb	r2, [r3, #0]
100066d6:	1cbb      	adds	r3, r7, #2
100066d8:	1c0a      	adds	r2, r1, #0
100066da:	701a      	strb	r2, [r3, #0]
    pheap_node_t *n = ph_get_node(heap, parent_id);
100066dc:	1cfb      	adds	r3, r7, #3
100066de:	781a      	ldrb	r2, [r3, #0]
100066e0:	687b      	ldr	r3, [r7, #4]
100066e2:	0011      	movs	r1, r2
100066e4:	0018      	movs	r0, r3
100066e6:	f7ff ffc3 	bl	10006670 <ph_get_node>
100066ea:	0003      	movs	r3, r0
100066ec:	60fb      	str	r3, [r7, #12]
    assert(parent_id);
100066ee:	1cfb      	adds	r3, r7, #3
100066f0:	781b      	ldrb	r3, [r3, #0]
100066f2:	2b00      	cmp	r3, #0
100066f4:	d105      	bne.n	10006702 <ph_add_child_node+0x3e>
100066f6:	4b1f      	ldr	r3, [pc, #124]	; (10006774 <ph_add_child_node+0xb0>)
100066f8:	4a1f      	ldr	r2, [pc, #124]	; (10006778 <ph_add_child_node+0xb4>)
100066fa:	4820      	ldr	r0, [pc, #128]	; (1000677c <ph_add_child_node+0xb8>)
100066fc:	216f      	movs	r1, #111	; 0x6f
100066fe:	f004 fb15 	bl	1000ad2c <__assert_func>
    assert(child_id);
10006702:	1cbb      	adds	r3, r7, #2
10006704:	781b      	ldrb	r3, [r3, #0]
10006706:	2b00      	cmp	r3, #0
10006708:	d105      	bne.n	10006716 <ph_add_child_node+0x52>
1000670a:	4b1d      	ldr	r3, [pc, #116]	; (10006780 <ph_add_child_node+0xbc>)
1000670c:	4a1a      	ldr	r2, [pc, #104]	; (10006778 <ph_add_child_node+0xb4>)
1000670e:	481b      	ldr	r0, [pc, #108]	; (1000677c <ph_add_child_node+0xb8>)
10006710:	2170      	movs	r1, #112	; 0x70
10006712:	f004 fb0b 	bl	1000ad2c <__assert_func>
    assert(parent_id != child_id);
10006716:	1cfa      	adds	r2, r7, #3
10006718:	1cbb      	adds	r3, r7, #2
1000671a:	7812      	ldrb	r2, [r2, #0]
1000671c:	781b      	ldrb	r3, [r3, #0]
1000671e:	429a      	cmp	r2, r3
10006720:	d105      	bne.n	1000672e <ph_add_child_node+0x6a>
10006722:	4b18      	ldr	r3, [pc, #96]	; (10006784 <ph_add_child_node+0xc0>)
10006724:	4a14      	ldr	r2, [pc, #80]	; (10006778 <ph_add_child_node+0xb4>)
10006726:	4815      	ldr	r0, [pc, #84]	; (1000677c <ph_add_child_node+0xb8>)
10006728:	2171      	movs	r1, #113	; 0x71
1000672a:	f004 faff 	bl	1000ad2c <__assert_func>
    pheap_node_t *c = ph_get_node(heap, child_id);
1000672e:	1cbb      	adds	r3, r7, #2
10006730:	781a      	ldrb	r2, [r3, #0]
10006732:	687b      	ldr	r3, [r7, #4]
10006734:	0011      	movs	r1, r2
10006736:	0018      	movs	r0, r3
10006738:	f7ff ff9a 	bl	10006670 <ph_get_node>
1000673c:	0003      	movs	r3, r0
1000673e:	60bb      	str	r3, [r7, #8]
    c->parent = parent_id;
10006740:	68bb      	ldr	r3, [r7, #8]
10006742:	1cfa      	adds	r2, r7, #3
10006744:	7812      	ldrb	r2, [r2, #0]
10006746:	709a      	strb	r2, [r3, #2]
    if (!n->child) {
10006748:	68fb      	ldr	r3, [r7, #12]
1000674a:	781b      	ldrb	r3, [r3, #0]
1000674c:	2b00      	cmp	r3, #0
1000674e:	d104      	bne.n	1000675a <ph_add_child_node+0x96>
        n->child = child_id;
10006750:	68fb      	ldr	r3, [r7, #12]
10006752:	1cba      	adds	r2, r7, #2
10006754:	7812      	ldrb	r2, [r2, #0]
10006756:	701a      	strb	r2, [r3, #0]
}
10006758:	e007      	b.n	1000676a <ph_add_child_node+0xa6>
        c->sibling = n->child;
1000675a:	68fb      	ldr	r3, [r7, #12]
1000675c:	781a      	ldrb	r2, [r3, #0]
1000675e:	68bb      	ldr	r3, [r7, #8]
10006760:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10006762:	68fb      	ldr	r3, [r7, #12]
10006764:	1cba      	adds	r2, r7, #2
10006766:	7812      	ldrb	r2, [r2, #0]
10006768:	701a      	strb	r2, [r3, #0]
}
1000676a:	46c0      	nop			; (mov r8, r8)
1000676c:	46bd      	mov	sp, r7
1000676e:	b004      	add	sp, #16
10006770:	bd80      	pop	{r7, pc}
10006772:	46c0      	nop			; (mov r8, r8)
10006774:	1000dc6c 	.word	0x1000dc6c
10006778:	1000dd90 	.word	0x1000dd90
1000677c:	1000dc18 	.word	0x1000dc18
10006780:	1000dc78 	.word	0x1000dc78
10006784:	1000dc84 	.word	0x1000dc84

10006788 <ph_merge_nodes>:
static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10006788:	b590      	push	{r4, r7, lr}
1000678a:	b083      	sub	sp, #12
1000678c:	af00      	add	r7, sp, #0
1000678e:	6078      	str	r0, [r7, #4]
10006790:	0008      	movs	r0, r1
10006792:	0011      	movs	r1, r2
10006794:	1cfb      	adds	r3, r7, #3
10006796:	1c02      	adds	r2, r0, #0
10006798:	701a      	strb	r2, [r3, #0]
1000679a:	1cbb      	adds	r3, r7, #2
1000679c:	1c0a      	adds	r2, r1, #0
1000679e:	701a      	strb	r2, [r3, #0]
    if (!a) return b;
100067a0:	1cfb      	adds	r3, r7, #3
100067a2:	781b      	ldrb	r3, [r3, #0]
100067a4:	2b00      	cmp	r3, #0
100067a6:	d102      	bne.n	100067ae <ph_merge_nodes+0x26>
100067a8:	1cbb      	adds	r3, r7, #2
100067aa:	781b      	ldrb	r3, [r3, #0]
100067ac:	e027      	b.n	100067fe <ph_merge_nodes+0x76>
    if (!b) return a;
100067ae:	1cbb      	adds	r3, r7, #2
100067b0:	781b      	ldrb	r3, [r3, #0]
100067b2:	2b00      	cmp	r3, #0
100067b4:	d102      	bne.n	100067bc <ph_merge_nodes+0x34>
100067b6:	1cfb      	adds	r3, r7, #3
100067b8:	781b      	ldrb	r3, [r3, #0]
100067ba:	e020      	b.n	100067fe <ph_merge_nodes+0x76>
    if (heap->comparator(heap->user_data, a, b)) {
100067bc:	687b      	ldr	r3, [r7, #4]
100067be:	685c      	ldr	r4, [r3, #4]
100067c0:	687b      	ldr	r3, [r7, #4]
100067c2:	6898      	ldr	r0, [r3, #8]
100067c4:	1cbb      	adds	r3, r7, #2
100067c6:	781a      	ldrb	r2, [r3, #0]
100067c8:	1cfb      	adds	r3, r7, #3
100067ca:	781b      	ldrb	r3, [r3, #0]
100067cc:	0019      	movs	r1, r3
100067ce:	47a0      	blx	r4
100067d0:	1e03      	subs	r3, r0, #0
100067d2:	d00a      	beq.n	100067ea <ph_merge_nodes+0x62>
        ph_add_child_node(heap, a, b);
100067d4:	1cbb      	adds	r3, r7, #2
100067d6:	781a      	ldrb	r2, [r3, #0]
100067d8:	1cfb      	adds	r3, r7, #3
100067da:	7819      	ldrb	r1, [r3, #0]
100067dc:	687b      	ldr	r3, [r7, #4]
100067de:	0018      	movs	r0, r3
100067e0:	f7ff ff70 	bl	100066c4 <ph_add_child_node>
        return a;
100067e4:	1cfb      	adds	r3, r7, #3
100067e6:	781b      	ldrb	r3, [r3, #0]
100067e8:	e009      	b.n	100067fe <ph_merge_nodes+0x76>
        ph_add_child_node(heap, b, a);
100067ea:	1cfb      	adds	r3, r7, #3
100067ec:	781a      	ldrb	r2, [r3, #0]
100067ee:	1cbb      	adds	r3, r7, #2
100067f0:	7819      	ldrb	r1, [r3, #0]
100067f2:	687b      	ldr	r3, [r7, #4]
100067f4:	0018      	movs	r0, r3
100067f6:	f7ff ff65 	bl	100066c4 <ph_add_child_node>
        return b;
100067fa:	1cbb      	adds	r3, r7, #2
100067fc:	781b      	ldrb	r3, [r3, #0]
}
100067fe:	0018      	movs	r0, r3
10006800:	46bd      	mov	sp, r7
10006802:	b003      	add	sp, #12
10006804:	bd90      	pop	{r4, r7, pc}

10006806 <ph_peek_head>:
static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
10006806:	b580      	push	{r7, lr}
10006808:	b082      	sub	sp, #8
1000680a:	af00      	add	r7, sp, #0
1000680c:	6078      	str	r0, [r7, #4]
    return heap->root_id;
1000680e:	687b      	ldr	r3, [r7, #4]
10006810:	7b5b      	ldrb	r3, [r3, #13]
}
10006812:	0018      	movs	r0, r3
10006814:	46bd      	mov	sp, r7
10006816:	b002      	add	sp, #8
10006818:	bd80      	pop	{r7, pc}

1000681a <ph_remove_and_free_head>:
static inline pheap_node_id_t ph_remove_and_free_head(pheap_t *heap) {
1000681a:	b580      	push	{r7, lr}
1000681c:	b082      	sub	sp, #8
1000681e:	af00      	add	r7, sp, #0
10006820:	6078      	str	r0, [r7, #4]
    return ph_remove_head(heap, true);
10006822:	687b      	ldr	r3, [r7, #4]
10006824:	2101      	movs	r1, #1
10006826:	0018      	movs	r0, r3
10006828:	f000 f94e 	bl	10006ac8 <ph_remove_head>
1000682c:	0003      	movs	r3, r0
}
1000682e:	0018      	movs	r0, r3
10006830:	46bd      	mov	sp, r7
10006832:	b002      	add	sp, #8
10006834:	bd80      	pop	{r7, pc}

10006836 <ph_post_alloc_init>:
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
    ph_post_alloc_init(heap, max_nodes, comparator, user_data);
    return heap;
}

void ph_post_alloc_init(pheap_t *heap, uint max_nodes, pheap_comparator comparator, void *user_data) {
10006836:	b580      	push	{r7, lr}
10006838:	b084      	sub	sp, #16
1000683a:	af00      	add	r7, sp, #0
1000683c:	60f8      	str	r0, [r7, #12]
1000683e:	60b9      	str	r1, [r7, #8]
10006840:	607a      	str	r2, [r7, #4]
10006842:	603b      	str	r3, [r7, #0]
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << (8 * sizeof(pheap_node_id_t))));
    heap->max_nodes = (pheap_node_id_t) max_nodes;
10006844:	68bb      	ldr	r3, [r7, #8]
10006846:	b2da      	uxtb	r2, r3
10006848:	68fb      	ldr	r3, [r7, #12]
1000684a:	731a      	strb	r2, [r3, #12]
    heap->comparator = comparator;
1000684c:	68fb      	ldr	r3, [r7, #12]
1000684e:	687a      	ldr	r2, [r7, #4]
10006850:	605a      	str	r2, [r3, #4]
    heap->user_data = user_data;
10006852:	68fb      	ldr	r3, [r7, #12]
10006854:	683a      	ldr	r2, [r7, #0]
10006856:	609a      	str	r2, [r3, #8]
    ph_clear(heap);
10006858:	68fb      	ldr	r3, [r7, #12]
1000685a:	0018      	movs	r0, r3
1000685c:	f000 f804 	bl	10006868 <ph_clear>
}
10006860:	46c0      	nop			; (mov r8, r8)
10006862:	46bd      	mov	sp, r7
10006864:	b004      	add	sp, #16
10006866:	bd80      	pop	{r7, pc}

10006868 <ph_clear>:

void ph_clear(pheap_t *heap) {
10006868:	b590      	push	{r4, r7, lr}
1000686a:	b085      	sub	sp, #20
1000686c:	af00      	add	r7, sp, #0
1000686e:	6078      	str	r0, [r7, #4]
    heap->root_id = 0;
10006870:	687b      	ldr	r3, [r7, #4]
10006872:	2200      	movs	r2, #0
10006874:	735a      	strb	r2, [r3, #13]
    heap->free_head_id = 1;
10006876:	687b      	ldr	r3, [r7, #4]
10006878:	2201      	movs	r2, #1
1000687a:	739a      	strb	r2, [r3, #14]
    heap->free_tail_id = heap->max_nodes;
1000687c:	687b      	ldr	r3, [r7, #4]
1000687e:	7b1a      	ldrb	r2, [r3, #12]
10006880:	687b      	ldr	r3, [r7, #4]
10006882:	73da      	strb	r2, [r3, #15]
    for(pheap_node_id_t i = 1; i < heap->max_nodes; i++) {
10006884:	230f      	movs	r3, #15
10006886:	18fb      	adds	r3, r7, r3
10006888:	2201      	movs	r2, #1
1000688a:	701a      	strb	r2, [r3, #0]
1000688c:	e013      	b.n	100068b6 <ph_clear+0x4e>
        ph_get_node(heap, i)->sibling = (pheap_node_id_t)(i + 1);
1000688e:	240f      	movs	r4, #15
10006890:	193b      	adds	r3, r7, r4
10006892:	781a      	ldrb	r2, [r3, #0]
10006894:	687b      	ldr	r3, [r7, #4]
10006896:	0011      	movs	r1, r2
10006898:	0018      	movs	r0, r3
1000689a:	f7ff fee9 	bl	10006670 <ph_get_node>
1000689e:	0002      	movs	r2, r0
100068a0:	0021      	movs	r1, r4
100068a2:	187b      	adds	r3, r7, r1
100068a4:	781b      	ldrb	r3, [r3, #0]
100068a6:	3301      	adds	r3, #1
100068a8:	b2db      	uxtb	r3, r3
100068aa:	7053      	strb	r3, [r2, #1]
    for(pheap_node_id_t i = 1; i < heap->max_nodes; i++) {
100068ac:	187b      	adds	r3, r7, r1
100068ae:	781a      	ldrb	r2, [r3, #0]
100068b0:	187b      	adds	r3, r7, r1
100068b2:	3201      	adds	r2, #1
100068b4:	701a      	strb	r2, [r3, #0]
100068b6:	687b      	ldr	r3, [r7, #4]
100068b8:	7b1b      	ldrb	r3, [r3, #12]
100068ba:	220f      	movs	r2, #15
100068bc:	18ba      	adds	r2, r7, r2
100068be:	7812      	ldrb	r2, [r2, #0]
100068c0:	429a      	cmp	r2, r3
100068c2:	d3e4      	bcc.n	1000688e <ph_clear+0x26>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
100068c4:	687b      	ldr	r3, [r7, #4]
100068c6:	7b1a      	ldrb	r2, [r3, #12]
100068c8:	687b      	ldr	r3, [r7, #4]
100068ca:	0011      	movs	r1, r2
100068cc:	0018      	movs	r0, r3
100068ce:	f7ff fecf 	bl	10006670 <ph_get_node>
100068d2:	0003      	movs	r3, r0
100068d4:	2200      	movs	r2, #0
100068d6:	705a      	strb	r2, [r3, #1]
}
100068d8:	46c0      	nop			; (mov r8, r8)
100068da:	46bd      	mov	sp, r7
100068dc:	b005      	add	sp, #20
100068de:	bd90      	pop	{r4, r7, pc}

100068e0 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
100068e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100068e2:	b085      	sub	sp, #20
100068e4:	af00      	add	r7, sp, #0
100068e6:	6078      	str	r0, [r7, #4]
100068e8:	000a      	movs	r2, r1
100068ea:	1cfb      	adds	r3, r7, #3
100068ec:	701a      	strb	r2, [r3, #0]
    if (!id || !ph_get_node(heap, id)->sibling) {
100068ee:	1cfb      	adds	r3, r7, #3
100068f0:	781b      	ldrb	r3, [r3, #0]
100068f2:	2b00      	cmp	r3, #0
100068f4:	d00a      	beq.n	1000690c <ph_merge_two_pass+0x2c>
100068f6:	1cfb      	adds	r3, r7, #3
100068f8:	781a      	ldrb	r2, [r3, #0]
100068fa:	687b      	ldr	r3, [r7, #4]
100068fc:	0011      	movs	r1, r2
100068fe:	0018      	movs	r0, r3
10006900:	f7ff feb6 	bl	10006670 <ph_get_node>
10006904:	0003      	movs	r3, r0
10006906:	785b      	ldrb	r3, [r3, #1]
10006908:	2b00      	cmp	r3, #0
1000690a:	d102      	bne.n	10006912 <ph_merge_two_pass+0x32>
        return id;
1000690c:	1cfb      	adds	r3, r7, #3
1000690e:	781b      	ldrb	r3, [r3, #0]
10006910:	e04a      	b.n	100069a8 <ph_merge_two_pass+0xc8>
    } else {
        pheap_node_id_t a, b, new_node;
        a = id;
10006912:	260f      	movs	r6, #15
10006914:	19bb      	adds	r3, r7, r6
10006916:	1cfa      	adds	r2, r7, #3
10006918:	7812      	ldrb	r2, [r2, #0]
1000691a:	701a      	strb	r2, [r3, #0]
        b = ph_get_node(heap, id)->sibling;
1000691c:	1cfb      	adds	r3, r7, #3
1000691e:	781a      	ldrb	r2, [r3, #0]
10006920:	687b      	ldr	r3, [r7, #4]
10006922:	0011      	movs	r1, r2
10006924:	0018      	movs	r0, r3
10006926:	f7ff fea3 	bl	10006670 <ph_get_node>
1000692a:	0002      	movs	r2, r0
1000692c:	250e      	movs	r5, #14
1000692e:	197b      	adds	r3, r7, r5
10006930:	7852      	ldrb	r2, [r2, #1]
10006932:	701a      	strb	r2, [r3, #0]
        new_node = ph_get_node(heap, b)->sibling;
10006934:	197b      	adds	r3, r7, r5
10006936:	781a      	ldrb	r2, [r3, #0]
10006938:	687b      	ldr	r3, [r7, #4]
1000693a:	0011      	movs	r1, r2
1000693c:	0018      	movs	r0, r3
1000693e:	f7ff fe97 	bl	10006670 <ph_get_node>
10006942:	0002      	movs	r2, r0
10006944:	230d      	movs	r3, #13
10006946:	18fb      	adds	r3, r7, r3
10006948:	7852      	ldrb	r2, [r2, #1]
1000694a:	701a      	strb	r2, [r3, #0]
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000694c:	197b      	adds	r3, r7, r5
1000694e:	781a      	ldrb	r2, [r3, #0]
10006950:	687b      	ldr	r3, [r7, #4]
10006952:	0011      	movs	r1, r2
10006954:	0018      	movs	r0, r3
10006956:	f7ff fe8b 	bl	10006670 <ph_get_node>
1000695a:	0004      	movs	r4, r0
1000695c:	2300      	movs	r3, #0
1000695e:	7063      	strb	r3, [r4, #1]
10006960:	19bb      	adds	r3, r7, r6
10006962:	781a      	ldrb	r2, [r3, #0]
10006964:	687b      	ldr	r3, [r7, #4]
10006966:	0011      	movs	r1, r2
10006968:	0018      	movs	r0, r3
1000696a:	f7ff fe81 	bl	10006670 <ph_get_node>
1000696e:	0003      	movs	r3, r0
10006970:	7862      	ldrb	r2, [r4, #1]
10006972:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10006974:	197b      	adds	r3, r7, r5
10006976:	781a      	ldrb	r2, [r3, #0]
10006978:	19bb      	adds	r3, r7, r6
1000697a:	7819      	ldrb	r1, [r3, #0]
1000697c:	687b      	ldr	r3, [r7, #4]
1000697e:	0018      	movs	r0, r3
10006980:	f7ff ff02 	bl	10006788 <ph_merge_nodes>
10006984:	0003      	movs	r3, r0
10006986:	001c      	movs	r4, r3
10006988:	230d      	movs	r3, #13
1000698a:	18fb      	adds	r3, r7, r3
1000698c:	781a      	ldrb	r2, [r3, #0]
1000698e:	687b      	ldr	r3, [r7, #4]
10006990:	0011      	movs	r1, r2
10006992:	0018      	movs	r0, r3
10006994:	f7ff ffa4 	bl	100068e0 <ph_merge_two_pass>
10006998:	0003      	movs	r3, r0
1000699a:	001a      	movs	r2, r3
1000699c:	687b      	ldr	r3, [r7, #4]
1000699e:	0021      	movs	r1, r4
100069a0:	0018      	movs	r0, r3
100069a2:	f7ff fef1 	bl	10006788 <ph_merge_nodes>
100069a6:	0003      	movs	r3, r0
    }
}
100069a8:	0018      	movs	r0, r3
100069aa:	46bd      	mov	sp, r7
100069ac:	b005      	add	sp, #20
100069ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

100069b0 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool free) {
100069b0:	b590      	push	{r4, r7, lr}
100069b2:	b085      	sub	sp, #20
100069b4:	af00      	add	r7, sp, #0
100069b6:	6078      	str	r0, [r7, #4]
100069b8:	0008      	movs	r0, r1
100069ba:	0011      	movs	r1, r2
100069bc:	1cfb      	adds	r3, r7, #3
100069be:	1c02      	adds	r2, r0, #0
100069c0:	701a      	strb	r2, [r3, #0]
100069c2:	1cbb      	adds	r3, r7, #2
100069c4:	1c0a      	adds	r2, r1, #0
100069c6:	701a      	strb	r2, [r3, #0]
    assert(root_id);
100069c8:	1cfb      	adds	r3, r7, #3
100069ca:	781b      	ldrb	r3, [r3, #0]
100069cc:	2b00      	cmp	r3, #0
100069ce:	d105      	bne.n	100069dc <ph_remove_any_head+0x2c>
100069d0:	4b38      	ldr	r3, [pc, #224]	; (10006ab4 <ph_remove_any_head+0x104>)
100069d2:	4a39      	ldr	r2, [pc, #228]	; (10006ab8 <ph_remove_any_head+0x108>)
100069d4:	4839      	ldr	r0, [pc, #228]	; (10006abc <ph_remove_any_head+0x10c>)
100069d6:	2138      	movs	r1, #56	; 0x38
100069d8:	f004 f9a8 	bl	1000ad2c <__assert_func>
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
100069dc:	1cfb      	adds	r3, r7, #3
100069de:	781a      	ldrb	r2, [r3, #0]
100069e0:	687b      	ldr	r3, [r7, #4]
100069e2:	0011      	movs	r1, r2
100069e4:	0018      	movs	r0, r3
100069e6:	f7ff fe43 	bl	10006670 <ph_get_node>
100069ea:	0003      	movs	r3, r0
100069ec:	785b      	ldrb	r3, [r3, #1]
100069ee:	2b00      	cmp	r3, #0
100069f0:	d005      	beq.n	100069fe <ph_remove_any_head+0x4e>
100069f2:	4b33      	ldr	r3, [pc, #204]	; (10006ac0 <ph_remove_any_head+0x110>)
100069f4:	4a30      	ldr	r2, [pc, #192]	; (10006ab8 <ph_remove_any_head+0x108>)
100069f6:	4831      	ldr	r0, [pc, #196]	; (10006abc <ph_remove_any_head+0x10c>)
100069f8:	213a      	movs	r1, #58	; 0x3a
100069fa:	f004 f997 	bl	1000ad2c <__assert_func>
    assert(!ph_get_node(heap, root_id)->parent);
100069fe:	1cfb      	adds	r3, r7, #3
10006a00:	781a      	ldrb	r2, [r3, #0]
10006a02:	687b      	ldr	r3, [r7, #4]
10006a04:	0011      	movs	r1, r2
10006a06:	0018      	movs	r0, r3
10006a08:	f7ff fe32 	bl	10006670 <ph_get_node>
10006a0c:	0003      	movs	r3, r0
10006a0e:	789b      	ldrb	r3, [r3, #2]
10006a10:	2b00      	cmp	r3, #0
10006a12:	d005      	beq.n	10006a20 <ph_remove_any_head+0x70>
10006a14:	4b2b      	ldr	r3, [pc, #172]	; (10006ac4 <ph_remove_any_head+0x114>)
10006a16:	4a28      	ldr	r2, [pc, #160]	; (10006ab8 <ph_remove_any_head+0x108>)
10006a18:	4828      	ldr	r0, [pc, #160]	; (10006abc <ph_remove_any_head+0x10c>)
10006a1a:	213b      	movs	r1, #59	; 0x3b
10006a1c:	f004 f986 	bl	1000ad2c <__assert_func>
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10006a20:	1cfb      	adds	r3, r7, #3
10006a22:	781a      	ldrb	r2, [r3, #0]
10006a24:	687b      	ldr	r3, [r7, #4]
10006a26:	0011      	movs	r1, r2
10006a28:	0018      	movs	r0, r3
10006a2a:	f7ff fe21 	bl	10006670 <ph_get_node>
10006a2e:	0003      	movs	r3, r0
10006a30:	781a      	ldrb	r2, [r3, #0]
10006a32:	230f      	movs	r3, #15
10006a34:	18fc      	adds	r4, r7, r3
10006a36:	687b      	ldr	r3, [r7, #4]
10006a38:	0011      	movs	r1, r2
10006a3a:	0018      	movs	r0, r3
10006a3c:	f7ff ff50 	bl	100068e0 <ph_merge_two_pass>
10006a40:	0003      	movs	r3, r0
10006a42:	7023      	strb	r3, [r4, #0]
    if (free) {
10006a44:	1cbb      	adds	r3, r7, #2
10006a46:	781b      	ldrb	r3, [r3, #0]
10006a48:	2b00      	cmp	r3, #0
10006a4a:	d012      	beq.n	10006a72 <ph_remove_any_head+0xc2>
        if (heap->free_tail_id) {
10006a4c:	687b      	ldr	r3, [r7, #4]
10006a4e:	7bdb      	ldrb	r3, [r3, #15]
10006a50:	2b00      	cmp	r3, #0
10006a52:	d00a      	beq.n	10006a6a <ph_remove_any_head+0xba>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10006a54:	687b      	ldr	r3, [r7, #4]
10006a56:	7bda      	ldrb	r2, [r3, #15]
10006a58:	687b      	ldr	r3, [r7, #4]
10006a5a:	0011      	movs	r1, r2
10006a5c:	0018      	movs	r0, r3
10006a5e:	f7ff fe07 	bl	10006670 <ph_get_node>
10006a62:	0002      	movs	r2, r0
10006a64:	1cfb      	adds	r3, r7, #3
10006a66:	781b      	ldrb	r3, [r3, #0]
10006a68:	7053      	strb	r3, [r2, #1]
        }
        heap->free_tail_id = root_id;
10006a6a:	687b      	ldr	r3, [r7, #4]
10006a6c:	1cfa      	adds	r2, r7, #3
10006a6e:	7812      	ldrb	r2, [r2, #0]
10006a70:	73da      	strb	r2, [r3, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10006a72:	220f      	movs	r2, #15
10006a74:	18bb      	adds	r3, r7, r2
10006a76:	781b      	ldrb	r3, [r3, #0]
10006a78:	2b00      	cmp	r3, #0
10006a7a:	d009      	beq.n	10006a90 <ph_remove_any_head+0xe0>
10006a7c:	18bb      	adds	r3, r7, r2
10006a7e:	781a      	ldrb	r2, [r3, #0]
10006a80:	687b      	ldr	r3, [r7, #4]
10006a82:	0011      	movs	r1, r2
10006a84:	0018      	movs	r0, r3
10006a86:	f7ff fdf3 	bl	10006670 <ph_get_node>
10006a8a:	0003      	movs	r3, r0
10006a8c:	2200      	movs	r2, #0
10006a8e:	709a      	strb	r2, [r3, #2]
    ph_get_node(heap, root_id)->sibling = 0;
10006a90:	1cfb      	adds	r3, r7, #3
10006a92:	781a      	ldrb	r2, [r3, #0]
10006a94:	687b      	ldr	r3, [r7, #4]
10006a96:	0011      	movs	r1, r2
10006a98:	0018      	movs	r0, r3
10006a9a:	f7ff fde9 	bl	10006670 <ph_get_node>
10006a9e:	0003      	movs	r3, r0
10006aa0:	2200      	movs	r2, #0
10006aa2:	705a      	strb	r2, [r3, #1]
    return new_root_id;
10006aa4:	230f      	movs	r3, #15
10006aa6:	18fb      	adds	r3, r7, r3
10006aa8:	781b      	ldrb	r3, [r3, #0]
}
10006aaa:	0018      	movs	r0, r3
10006aac:	46bd      	mov	sp, r7
10006aae:	b005      	add	sp, #20
10006ab0:	bd90      	pop	{r4, r7, pc}
10006ab2:	46c0      	nop			; (mov r8, r8)
10006ab4:	1000dc9c 	.word	0x1000dc9c
10006ab8:	1000ddb0 	.word	0x1000ddb0
10006abc:	1000dca4 	.word	0x1000dca4
10006ac0:	1000dcf4 	.word	0x1000dcf4
10006ac4:	1000dd1c 	.word	0x1000dd1c

10006ac8 <ph_remove_head>:

pheap_node_id_t ph_remove_head(pheap_t *heap, bool free) {
10006ac8:	b5b0      	push	{r4, r5, r7, lr}
10006aca:	b084      	sub	sp, #16
10006acc:	af00      	add	r7, sp, #0
10006ace:	6078      	str	r0, [r7, #4]
10006ad0:	000a      	movs	r2, r1
10006ad2:	1cfb      	adds	r3, r7, #3
10006ad4:	701a      	strb	r2, [r3, #0]
    pheap_node_id_t old_root_id = ph_peek_head(heap);
10006ad6:	250f      	movs	r5, #15
10006ad8:	197c      	adds	r4, r7, r5
10006ada:	687b      	ldr	r3, [r7, #4]
10006adc:	0018      	movs	r0, r3
10006ade:	f7ff fe92 	bl	10006806 <ph_peek_head>
10006ae2:	0003      	movs	r3, r0
10006ae4:	7023      	strb	r3, [r4, #0]
    heap->root_id = ph_remove_any_head(heap, old_root_id, free);
10006ae6:	1cfb      	adds	r3, r7, #3
10006ae8:	781a      	ldrb	r2, [r3, #0]
10006aea:	002c      	movs	r4, r5
10006aec:	193b      	adds	r3, r7, r4
10006aee:	7819      	ldrb	r1, [r3, #0]
10006af0:	687b      	ldr	r3, [r7, #4]
10006af2:	0018      	movs	r0, r3
10006af4:	f7ff ff5c 	bl	100069b0 <ph_remove_any_head>
10006af8:	0003      	movs	r3, r0
10006afa:	001a      	movs	r2, r3
10006afc:	687b      	ldr	r3, [r7, #4]
10006afe:	735a      	strb	r2, [r3, #13]
    return old_root_id;
10006b00:	193b      	adds	r3, r7, r4
10006b02:	781b      	ldrb	r3, [r3, #0]
}
10006b04:	0018      	movs	r0, r3
10006b06:	46bd      	mov	sp, r7
10006b08:	b004      	add	sp, #16
10006b0a:	bdb0      	pop	{r4, r5, r7, pc}

10006b0c <ph_remove_and_free_node>:

bool ph_remove_and_free_node(pheap_t *heap, pheap_node_id_t id) {
10006b0c:	b5b0      	push	{r4, r5, r7, lr}
10006b0e:	b088      	sub	sp, #32
10006b10:	af00      	add	r7, sp, #0
10006b12:	6078      	str	r0, [r7, #4]
10006b14:	000a      	movs	r2, r1
10006b16:	1cfb      	adds	r3, r7, #3
10006b18:	701a      	strb	r2, [r3, #0]
    // 1) trivial cases
    if (!id) return false;
10006b1a:	1cfb      	adds	r3, r7, #3
10006b1c:	781b      	ldrb	r3, [r3, #0]
10006b1e:	2b00      	cmp	r3, #0
10006b20:	d101      	bne.n	10006b26 <ph_remove_and_free_node+0x1a>
10006b22:	2300      	movs	r3, #0
10006b24:	e090      	b.n	10006c48 <ph_remove_and_free_node+0x13c>
    if (id == heap->root_id) {
10006b26:	687b      	ldr	r3, [r7, #4]
10006b28:	7b5b      	ldrb	r3, [r3, #13]
10006b2a:	1cfa      	adds	r2, r7, #3
10006b2c:	7812      	ldrb	r2, [r2, #0]
10006b2e:	429a      	cmp	r2, r3
10006b30:	d105      	bne.n	10006b3e <ph_remove_and_free_node+0x32>
        ph_remove_and_free_head(heap);
10006b32:	687b      	ldr	r3, [r7, #4]
10006b34:	0018      	movs	r0, r3
10006b36:	f7ff fe70 	bl	1000681a <ph_remove_and_free_head>
        return true;
10006b3a:	2301      	movs	r3, #1
10006b3c:	e084      	b.n	10006c48 <ph_remove_and_free_node+0x13c>
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
10006b3e:	1cfb      	adds	r3, r7, #3
10006b40:	781a      	ldrb	r2, [r3, #0]
10006b42:	687b      	ldr	r3, [r7, #4]
10006b44:	0011      	movs	r1, r2
10006b46:	0018      	movs	r0, r3
10006b48:	f7ff fd92 	bl	10006670 <ph_get_node>
10006b4c:	0003      	movs	r3, r0
10006b4e:	61bb      	str	r3, [r7, #24]
    if (!node->parent) return false; // not in tree
10006b50:	69bb      	ldr	r3, [r7, #24]
10006b52:	789b      	ldrb	r3, [r3, #2]
10006b54:	2b00      	cmp	r3, #0
10006b56:	d101      	bne.n	10006b5c <ph_remove_and_free_node+0x50>
10006b58:	2300      	movs	r3, #0
10006b5a:	e075      	b.n	10006c48 <ph_remove_and_free_node+0x13c>
    pheap_node_t *parent = ph_get_node(heap, node->parent);
10006b5c:	69bb      	ldr	r3, [r7, #24]
10006b5e:	789a      	ldrb	r2, [r3, #2]
10006b60:	687b      	ldr	r3, [r7, #4]
10006b62:	0011      	movs	r1, r2
10006b64:	0018      	movs	r0, r3
10006b66:	f7ff fd83 	bl	10006670 <ph_get_node>
10006b6a:	0003      	movs	r3, r0
10006b6c:	617b      	str	r3, [r7, #20]
    if (parent->child == id) {
10006b6e:	697b      	ldr	r3, [r7, #20]
10006b70:	781b      	ldrb	r3, [r3, #0]
10006b72:	1cfa      	adds	r2, r7, #3
10006b74:	7812      	ldrb	r2, [r2, #0]
10006b76:	429a      	cmp	r2, r3
10006b78:	d104      	bne.n	10006b84 <ph_remove_and_free_node+0x78>
        parent->child = node->sibling;
10006b7a:	69bb      	ldr	r3, [r7, #24]
10006b7c:	785a      	ldrb	r2, [r3, #1]
10006b7e:	697b      	ldr	r3, [r7, #20]
10006b80:	701a      	strb	r2, [r3, #0]
10006b82:	e035      	b.n	10006bf0 <ph_remove_and_free_node+0xe4>
    } else {
        pheap_node_id_t prev_sibling_id = parent->child;
10006b84:	231f      	movs	r3, #31
10006b86:	18fb      	adds	r3, r7, r3
10006b88:	697a      	ldr	r2, [r7, #20]
10006b8a:	7812      	ldrb	r2, [r2, #0]
10006b8c:	701a      	strb	r2, [r3, #0]
        bool __unused found = false;
10006b8e:	231e      	movs	r3, #30
10006b90:	18fb      	adds	r3, r7, r3
10006b92:	2200      	movs	r2, #0
10006b94:	701a      	strb	r2, [r3, #0]
        do {
            pheap_node_t *prev_sibling = ph_get_node(heap, prev_sibling_id);
10006b96:	231f      	movs	r3, #31
10006b98:	18fb      	adds	r3, r7, r3
10006b9a:	781a      	ldrb	r2, [r3, #0]
10006b9c:	687b      	ldr	r3, [r7, #4]
10006b9e:	0011      	movs	r1, r2
10006ba0:	0018      	movs	r0, r3
10006ba2:	f7ff fd65 	bl	10006670 <ph_get_node>
10006ba6:	0003      	movs	r3, r0
10006ba8:	613b      	str	r3, [r7, #16]
            if (prev_sibling->sibling == id) {
10006baa:	693b      	ldr	r3, [r7, #16]
10006bac:	785b      	ldrb	r3, [r3, #1]
10006bae:	1cfa      	adds	r2, r7, #3
10006bb0:	7812      	ldrb	r2, [r2, #0]
10006bb2:	429a      	cmp	r2, r3
10006bb4:	d108      	bne.n	10006bc8 <ph_remove_and_free_node+0xbc>
                prev_sibling->sibling = node->sibling;
10006bb6:	69bb      	ldr	r3, [r7, #24]
10006bb8:	785a      	ldrb	r2, [r3, #1]
10006bba:	693b      	ldr	r3, [r7, #16]
10006bbc:	705a      	strb	r2, [r3, #1]
                found = true;
10006bbe:	231e      	movs	r3, #30
10006bc0:	18fb      	adds	r3, r7, r3
10006bc2:	2201      	movs	r2, #1
10006bc4:	701a      	strb	r2, [r3, #0]
                break;
10006bc6:	e008      	b.n	10006bda <ph_remove_and_free_node+0xce>
            }
            prev_sibling_id = prev_sibling->sibling;
10006bc8:	211f      	movs	r1, #31
10006bca:	187b      	adds	r3, r7, r1
10006bcc:	693a      	ldr	r2, [r7, #16]
10006bce:	7852      	ldrb	r2, [r2, #1]
10006bd0:	701a      	strb	r2, [r3, #0]
        } while (prev_sibling_id);
10006bd2:	187b      	adds	r3, r7, r1
10006bd4:	781b      	ldrb	r3, [r3, #0]
10006bd6:	2b00      	cmp	r3, #0
10006bd8:	d1dd      	bne.n	10006b96 <ph_remove_and_free_node+0x8a>
        assert(found);
10006bda:	231e      	movs	r3, #30
10006bdc:	18fb      	adds	r3, r7, r3
10006bde:	781b      	ldrb	r3, [r3, #0]
10006be0:	2b00      	cmp	r3, #0
10006be2:	d105      	bne.n	10006bf0 <ph_remove_and_free_node+0xe4>
10006be4:	4b1a      	ldr	r3, [pc, #104]	; (10006c50 <ph_remove_and_free_node+0x144>)
10006be6:	4a1b      	ldr	r2, [pc, #108]	; (10006c54 <ph_remove_and_free_node+0x148>)
10006be8:	481b      	ldr	r0, [pc, #108]	; (10006c58 <ph_remove_and_free_node+0x14c>)
10006bea:	2167      	movs	r1, #103	; 0x67
10006bec:	f004 f89e 	bl	1000ad2c <__assert_func>
    }
    node->sibling = node->parent = 0;
10006bf0:	69bb      	ldr	r3, [r7, #24]
10006bf2:	2200      	movs	r2, #0
10006bf4:	709a      	strb	r2, [r3, #2]
10006bf6:	69bb      	ldr	r3, [r7, #24]
10006bf8:	789a      	ldrb	r2, [r3, #2]
10006bfa:	69bb      	ldr	r3, [r7, #24]
10006bfc:	705a      	strb	r2, [r3, #1]
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, true);
10006bfe:	250f      	movs	r5, #15
10006c00:	197c      	adds	r4, r7, r5
10006c02:	1cfb      	adds	r3, r7, #3
10006c04:	7819      	ldrb	r1, [r3, #0]
10006c06:	687b      	ldr	r3, [r7, #4]
10006c08:	2201      	movs	r2, #1
10006c0a:	0018      	movs	r0, r3
10006c0c:	f7ff fed0 	bl	100069b0 <ph_remove_any_head>
10006c10:	0003      	movs	r3, r0
10006c12:	7023      	strb	r3, [r4, #0]
    assert(new_sub_tree != heap->root_id);
10006c14:	687b      	ldr	r3, [r7, #4]
10006c16:	7b5b      	ldrb	r3, [r3, #13]
10006c18:	197a      	adds	r2, r7, r5
10006c1a:	7812      	ldrb	r2, [r2, #0]
10006c1c:	429a      	cmp	r2, r3
10006c1e:	d105      	bne.n	10006c2c <ph_remove_and_free_node+0x120>
10006c20:	4b0e      	ldr	r3, [pc, #56]	; (10006c5c <ph_remove_and_free_node+0x150>)
10006c22:	4a0c      	ldr	r2, [pc, #48]	; (10006c54 <ph_remove_and_free_node+0x148>)
10006c24:	480c      	ldr	r0, [pc, #48]	; (10006c58 <ph_remove_and_free_node+0x14c>)
10006c26:	216d      	movs	r1, #109	; 0x6d
10006c28:	f004 f880 	bl	1000ad2c <__assert_func>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10006c2c:	687b      	ldr	r3, [r7, #4]
10006c2e:	7b59      	ldrb	r1, [r3, #13]
10006c30:	230f      	movs	r3, #15
10006c32:	18fb      	adds	r3, r7, r3
10006c34:	781a      	ldrb	r2, [r3, #0]
10006c36:	687b      	ldr	r3, [r7, #4]
10006c38:	0018      	movs	r0, r3
10006c3a:	f7ff fda5 	bl	10006788 <ph_merge_nodes>
10006c3e:	0003      	movs	r3, r0
10006c40:	001a      	movs	r2, r3
10006c42:	687b      	ldr	r3, [r7, #4]
10006c44:	735a      	strb	r2, [r3, #13]
    return true;
10006c46:	2301      	movs	r3, #1
}
10006c48:	0018      	movs	r0, r3
10006c4a:	46bd      	mov	sp, r7
10006c4c:	b008      	add	sp, #32
10006c4e:	bdb0      	pop	{r4, r5, r7, pc}
10006c50:	1000dd40 	.word	0x1000dd40
10006c54:	1000ddc4 	.word	0x1000ddc4
10006c58:	1000dca4 	.word	0x1000dca4
10006c5c:	1000dd48 	.word	0x1000dd48

10006c60 <hw_claim_lock>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
10006c60:	b580      	push	{r7, lr}
10006c62:	b086      	sub	sp, #24
10006c64:	af00      	add	r7, sp, #0
10006c66:	230b      	movs	r3, #11
10006c68:	607b      	str	r3, [r7, #4]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10006c6a:	687b      	ldr	r3, [r7, #4]
10006c6c:	4a0f      	ldr	r2, [pc, #60]	; (10006cac <hw_claim_lock+0x4c>)
10006c6e:	4694      	mov	ip, r2
10006c70:	4463      	add	r3, ip
10006c72:	009b      	lsls	r3, r3, #2
10006c74:	617b      	str	r3, [r7, #20]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10006c76:	f3ef 8310 	mrs	r3, PRIMASK
10006c7a:	613b      	str	r3, [r7, #16]
    __asm volatile ("cpsid i");
10006c7c:	b672      	cpsid	i
    return status;
10006c7e:	693b      	ldr	r3, [r7, #16]
    uint32_t save = save_and_disable_interrupts();
10006c80:	60fb      	str	r3, [r7, #12]
10006c82:	697b      	ldr	r3, [r7, #20]
10006c84:	60bb      	str	r3, [r7, #8]
    while (__builtin_expect(!*lock, 0));
10006c86:	46c0      	nop			; (mov r8, r8)
10006c88:	68bb      	ldr	r3, [r7, #8]
10006c8a:	681b      	ldr	r3, [r3, #0]
10006c8c:	425a      	negs	r2, r3
10006c8e:	4153      	adcs	r3, r2
10006c90:	b2db      	uxtb	r3, r3
10006c92:	2b00      	cmp	r3, #0
10006c94:	d1f8      	bne.n	10006c88 <hw_claim_lock+0x28>
    __asm volatile ("dmb" : : : "memory");
10006c96:	f3bf 8f5f 	dmb	sy
}
10006c9a:	46c0      	nop			; (mov r8, r8)
}
10006c9c:	46c0      	nop			; (mov r8, r8)
}
10006c9e:	46c0      	nop			; (mov r8, r8)
    return save;
10006ca0:	68fb      	ldr	r3, [r7, #12]
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
10006ca2:	0018      	movs	r0, r3
10006ca4:	46bd      	mov	sp, r7
10006ca6:	b006      	add	sp, #24
10006ca8:	bd80      	pop	{r7, pc}
10006caa:	46c0      	nop			; (mov r8, r8)
10006cac:	34000040 	.word	0x34000040

10006cb0 <hw_claim_unlock>:

void hw_claim_unlock(uint32_t save) {
10006cb0:	b580      	push	{r7, lr}
10006cb2:	b088      	sub	sp, #32
10006cb4:	af00      	add	r7, sp, #0
10006cb6:	6078      	str	r0, [r7, #4]
10006cb8:	230b      	movs	r3, #11
10006cba:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10006cbc:	68fb      	ldr	r3, [r7, #12]
10006cbe:	4a0e      	ldr	r2, [pc, #56]	; (10006cf8 <hw_claim_unlock+0x48>)
10006cc0:	4694      	mov	ip, r2
10006cc2:	4463      	add	r3, ip
10006cc4:	009b      	lsls	r3, r3, #2
10006cc6:	61fb      	str	r3, [r7, #28]
10006cc8:	687b      	ldr	r3, [r7, #4]
10006cca:	61bb      	str	r3, [r7, #24]
10006ccc:	69fb      	ldr	r3, [r7, #28]
10006cce:	617b      	str	r3, [r7, #20]
    __asm volatile ("dmb" : : : "memory");
10006cd0:	f3bf 8f5f 	dmb	sy
}
10006cd4:	46c0      	nop			; (mov r8, r8)
}
10006cd6:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10006cd8:	697b      	ldr	r3, [r7, #20]
10006cda:	2200      	movs	r2, #0
10006cdc:	601a      	str	r2, [r3, #0]
}
10006cde:	46c0      	nop			; (mov r8, r8)
10006ce0:	69bb      	ldr	r3, [r7, #24]
10006ce2:	613b      	str	r3, [r7, #16]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10006ce4:	693b      	ldr	r3, [r7, #16]
10006ce6:	f383 8810 	msr	PRIMASK, r3
}
10006cea:	46c0      	nop			; (mov r8, r8)
}
10006cec:	46c0      	nop			; (mov r8, r8)
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10006cee:	46c0      	nop			; (mov r8, r8)
10006cf0:	46bd      	mov	sp, r7
10006cf2:	b008      	add	sp, #32
10006cf4:	bd80      	pop	{r7, pc}
10006cf6:	46c0      	nop			; (mov r8, r8)
10006cf8:	34000040 	.word	0x34000040

10006cfc <hw_is_claimed>:

inline bool hw_is_claimed(const uint8_t *bits, uint bit_index) {
10006cfc:	b580      	push	{r7, lr}
10006cfe:	b082      	sub	sp, #8
10006d00:	af00      	add	r7, sp, #0
10006d02:	6078      	str	r0, [r7, #4]
10006d04:	6039      	str	r1, [r7, #0]
    return (bits[bit_index >> 3u] & (1u << (bit_index & 7u)));
10006d06:	683b      	ldr	r3, [r7, #0]
10006d08:	08db      	lsrs	r3, r3, #3
10006d0a:	687a      	ldr	r2, [r7, #4]
10006d0c:	18d3      	adds	r3, r2, r3
10006d0e:	781b      	ldrb	r3, [r3, #0]
10006d10:	0019      	movs	r1, r3
10006d12:	683b      	ldr	r3, [r7, #0]
10006d14:	2207      	movs	r2, #7
10006d16:	4013      	ands	r3, r2
10006d18:	2201      	movs	r2, #1
10006d1a:	409a      	lsls	r2, r3
10006d1c:	0013      	movs	r3, r2
10006d1e:	400b      	ands	r3, r1
10006d20:	1e5a      	subs	r2, r3, #1
10006d22:	4193      	sbcs	r3, r2
10006d24:	b2db      	uxtb	r3, r3
}
10006d26:	0018      	movs	r0, r3
10006d28:	46bd      	mov	sp, r7
10006d2a:	b002      	add	sp, #8
10006d2c:	bd80      	pop	{r7, pc}

10006d2e <hw_claim_or_assert>:

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10006d2e:	b580      	push	{r7, lr}
10006d30:	b086      	sub	sp, #24
10006d32:	af00      	add	r7, sp, #0
10006d34:	60f8      	str	r0, [r7, #12]
10006d36:	60b9      	str	r1, [r7, #8]
10006d38:	607a      	str	r2, [r7, #4]
    uint32_t save = hw_claim_lock();
10006d3a:	f7ff ff91 	bl	10006c60 <hw_claim_lock>
10006d3e:	0003      	movs	r3, r0
10006d40:	617b      	str	r3, [r7, #20]
    if (hw_is_claimed(bits, bit_index)) {
10006d42:	68ba      	ldr	r2, [r7, #8]
10006d44:	68fb      	ldr	r3, [r7, #12]
10006d46:	0011      	movs	r1, r2
10006d48:	0018      	movs	r0, r3
10006d4a:	f7ff ffd7 	bl	10006cfc <hw_is_claimed>
10006d4e:	1e03      	subs	r3, r0, #0
10006d50:	d005      	beq.n	10006d5e <hw_claim_or_assert+0x30>
        panic(message, bit_index);
10006d52:	68ba      	ldr	r2, [r7, #8]
10006d54:	687b      	ldr	r3, [r7, #4]
10006d56:	0011      	movs	r1, r2
10006d58:	0018      	movs	r0, r3
10006d5a:	f004 f80d 	bl	1000ad78 <panic>
    } else {
        bits[bit_index >> 3u] |= (uint8_t)(1u << (bit_index & 7u));
10006d5e:	68bb      	ldr	r3, [r7, #8]
10006d60:	08db      	lsrs	r3, r3, #3
10006d62:	68fa      	ldr	r2, [r7, #12]
10006d64:	18d3      	adds	r3, r2, r3
10006d66:	7819      	ldrb	r1, [r3, #0]
10006d68:	68bb      	ldr	r3, [r7, #8]
10006d6a:	2207      	movs	r2, #7
10006d6c:	4013      	ands	r3, r2
10006d6e:	2201      	movs	r2, #1
10006d70:	409a      	lsls	r2, r3
10006d72:	0013      	movs	r3, r2
10006d74:	b2da      	uxtb	r2, r3
10006d76:	68bb      	ldr	r3, [r7, #8]
10006d78:	08db      	lsrs	r3, r3, #3
10006d7a:	68f8      	ldr	r0, [r7, #12]
10006d7c:	18c3      	adds	r3, r0, r3
10006d7e:	430a      	orrs	r2, r1
10006d80:	b2d2      	uxtb	r2, r2
10006d82:	701a      	strb	r2, [r3, #0]
    }
    hw_claim_unlock(save);
10006d84:	697b      	ldr	r3, [r7, #20]
10006d86:	0018      	movs	r0, r3
10006d88:	f7ff ff92 	bl	10006cb0 <hw_claim_unlock>
}
10006d8c:	46c0      	nop			; (mov r8, r8)
10006d8e:	46bd      	mov	sp, r7
10006d90:	b006      	add	sp, #24
10006d92:	bd80      	pop	{r7, pc}

10006d94 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
10006d94:	b580      	push	{r7, lr}
10006d96:	b088      	sub	sp, #32
10006d98:	af00      	add	r7, sp, #0
10006d9a:	60f8      	str	r0, [r7, #12]
10006d9c:	607a      	str	r2, [r7, #4]
10006d9e:	603b      	str	r3, [r7, #0]
10006da0:	230b      	movs	r3, #11
10006da2:	18fb      	adds	r3, r7, r3
10006da4:	1c0a      	adds	r2, r1, #0
10006da6:	701a      	strb	r2, [r3, #0]
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
10006da8:	f7ff ff5a 	bl	10006c60 <hw_claim_lock>
10006dac:	0003      	movs	r3, r0
10006dae:	617b      	str	r3, [r7, #20]
    int found_bit = -1;
10006db0:	2301      	movs	r3, #1
10006db2:	425b      	negs	r3, r3
10006db4:	61fb      	str	r3, [r7, #28]
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10006db6:	687b      	ldr	r3, [r7, #4]
10006db8:	61bb      	str	r3, [r7, #24]
10006dba:	e025      	b.n	10006e08 <hw_claim_unused_from_range+0x74>
        if (!hw_is_claimed(bits, bit)) {
10006dbc:	69ba      	ldr	r2, [r7, #24]
10006dbe:	68fb      	ldr	r3, [r7, #12]
10006dc0:	0011      	movs	r1, r2
10006dc2:	0018      	movs	r0, r3
10006dc4:	f7ff ff9a 	bl	10006cfc <hw_is_claimed>
10006dc8:	0003      	movs	r3, r0
10006dca:	001a      	movs	r2, r3
10006dcc:	2301      	movs	r3, #1
10006dce:	4053      	eors	r3, r2
10006dd0:	b2db      	uxtb	r3, r3
10006dd2:	2b00      	cmp	r3, #0
10006dd4:	d015      	beq.n	10006e02 <hw_claim_unused_from_range+0x6e>
            bits[bit >> 3u] |= (uint8_t)(1u << (bit & 7u));
10006dd6:	69bb      	ldr	r3, [r7, #24]
10006dd8:	08db      	lsrs	r3, r3, #3
10006dda:	68fa      	ldr	r2, [r7, #12]
10006ddc:	18d3      	adds	r3, r2, r3
10006dde:	7819      	ldrb	r1, [r3, #0]
10006de0:	69bb      	ldr	r3, [r7, #24]
10006de2:	2207      	movs	r2, #7
10006de4:	4013      	ands	r3, r2
10006de6:	2201      	movs	r2, #1
10006de8:	409a      	lsls	r2, r3
10006dea:	0013      	movs	r3, r2
10006dec:	b2da      	uxtb	r2, r3
10006dee:	69bb      	ldr	r3, [r7, #24]
10006df0:	08db      	lsrs	r3, r3, #3
10006df2:	68f8      	ldr	r0, [r7, #12]
10006df4:	18c3      	adds	r3, r0, r3
10006df6:	430a      	orrs	r2, r1
10006df8:	b2d2      	uxtb	r2, r2
10006dfa:	701a      	strb	r2, [r3, #0]
            found_bit = (int)bit;
10006dfc:	69bb      	ldr	r3, [r7, #24]
10006dfe:	61fb      	str	r3, [r7, #28]
            break;
10006e00:	e006      	b.n	10006e10 <hw_claim_unused_from_range+0x7c>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10006e02:	69bb      	ldr	r3, [r7, #24]
10006e04:	3301      	adds	r3, #1
10006e06:	61bb      	str	r3, [r7, #24]
10006e08:	69ba      	ldr	r2, [r7, #24]
10006e0a:	683b      	ldr	r3, [r7, #0]
10006e0c:	429a      	cmp	r2, r3
10006e0e:	d9d5      	bls.n	10006dbc <hw_claim_unused_from_range+0x28>
        }
    }
    hw_claim_unlock(save);
10006e10:	697b      	ldr	r3, [r7, #20]
10006e12:	0018      	movs	r0, r3
10006e14:	f7ff ff4c 	bl	10006cb0 <hw_claim_unlock>
    if (found_bit < 0 && required) {
10006e18:	69fb      	ldr	r3, [r7, #28]
10006e1a:	2b00      	cmp	r3, #0
10006e1c:	da08      	bge.n	10006e30 <hw_claim_unused_from_range+0x9c>
10006e1e:	230b      	movs	r3, #11
10006e20:	18fb      	adds	r3, r7, r3
10006e22:	781b      	ldrb	r3, [r3, #0]
10006e24:	2b00      	cmp	r3, #0
10006e26:	d003      	beq.n	10006e30 <hw_claim_unused_from_range+0x9c>
        panic(message);
10006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006e2a:	0018      	movs	r0, r3
10006e2c:	f003 ffa4 	bl	1000ad78 <panic>
    }
    return found_bit;
10006e30:	69fb      	ldr	r3, [r7, #28]
}
10006e32:	0018      	movs	r0, r3
10006e34:	46bd      	mov	sp, r7
10006e36:	b008      	add	sp, #32
10006e38:	bd80      	pop	{r7, pc}

10006e3a <has_glitchless_mux>:
// - A glitchless mux, which can be switched freely, but whose inputs must be
//   free-running
// - An auxiliary (glitchy) mux, whose output glitches when switched, but has
//   no constraints on its inputs
// Not all clocks have both types of mux.
static inline bool has_glitchless_mux(enum clock_index clk_index) {
10006e3a:	b580      	push	{r7, lr}
10006e3c:	b082      	sub	sp, #8
10006e3e:	af00      	add	r7, sp, #0
10006e40:	0002      	movs	r2, r0
10006e42:	1dfb      	adds	r3, r7, #7
10006e44:	701a      	strb	r2, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
10006e46:	1dfb      	adds	r3, r7, #7
10006e48:	781b      	ldrb	r3, [r3, #0]
10006e4a:	2b05      	cmp	r3, #5
10006e4c:	d003      	beq.n	10006e56 <has_glitchless_mux+0x1c>
10006e4e:	1dfb      	adds	r3, r7, #7
10006e50:	781b      	ldrb	r3, [r3, #0]
10006e52:	2b04      	cmp	r3, #4
10006e54:	d101      	bne.n	10006e5a <has_glitchless_mux+0x20>
10006e56:	2301      	movs	r3, #1
10006e58:	e000      	b.n	10006e5c <has_glitchless_mux+0x22>
10006e5a:	2300      	movs	r3, #0
10006e5c:	1c1a      	adds	r2, r3, #0
10006e5e:	2301      	movs	r3, #1
10006e60:	4013      	ands	r3, r2
10006e62:	b2db      	uxtb	r3, r3
}
10006e64:	0018      	movs	r0, r3
10006e66:	46bd      	mov	sp, r7
10006e68:	b002      	add	sp, #8
10006e6a:	bd80      	pop	{r7, pc}

10006e6c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10006e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10006e6e:	b0a3      	sub	sp, #140	; 0x8c
10006e70:	af00      	add	r7, sp, #0
10006e72:	6339      	str	r1, [r7, #48]	; 0x30
10006e74:	62fa      	str	r2, [r7, #44]	; 0x2c
10006e76:	62bb      	str	r3, [r7, #40]	; 0x28
10006e78:	230f      	movs	r3, #15
10006e7a:	2228      	movs	r2, #40	; 0x28
10006e7c:	189b      	adds	r3, r3, r2
10006e7e:	19da      	adds	r2, r3, r7
10006e80:	1c03      	adds	r3, r0, #0
10006e82:	7013      	strb	r3, [r2, #0]
    uint32_t div;

    assert(src_freq >= freq);
10006e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
10006e86:	2398      	movs	r3, #152	; 0x98
10006e88:	2108      	movs	r1, #8
10006e8a:	185b      	adds	r3, r3, r1
10006e8c:	19db      	adds	r3, r3, r7
10006e8e:	681b      	ldr	r3, [r3, #0]
10006e90:	429a      	cmp	r2, r3
10006e92:	d205      	bcs.n	10006ea0 <clock_configure+0x34>
10006e94:	4b8d      	ldr	r3, [pc, #564]	; (100070cc <clock_configure+0x260>)
10006e96:	4a8e      	ldr	r2, [pc, #568]	; (100070d0 <clock_configure+0x264>)
10006e98:	488e      	ldr	r0, [pc, #568]	; (100070d4 <clock_configure+0x268>)
10006e9a:	212d      	movs	r1, #45	; 0x2d
10006e9c:	f003 ff46 	bl	1000ad2c <__assert_func>

    if (freq > src_freq)
10006ea0:	2398      	movs	r3, #152	; 0x98
10006ea2:	2208      	movs	r2, #8
10006ea4:	189b      	adds	r3, r3, r2
10006ea6:	19db      	adds	r3, r3, r7
10006ea8:	681a      	ldr	r2, [r3, #0]
10006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006eac:	429a      	cmp	r2, r3
10006eae:	d901      	bls.n	10006eb4 <clock_configure+0x48>
        return false;
10006eb0:	2300      	movs	r3, #0
10006eb2:	e107      	b.n	100070c4 <clock_configure+0x258>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006eb6:	623b      	str	r3, [r7, #32]
10006eb8:	2300      	movs	r3, #0
10006eba:	627b      	str	r3, [r7, #36]	; 0x24
10006ebc:	6a3a      	ldr	r2, [r7, #32]
10006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006ec0:	0011      	movs	r1, r2
10006ec2:	0e09      	lsrs	r1, r1, #24
10006ec4:	61f9      	str	r1, [r7, #28]
10006ec6:	0013      	movs	r3, r2
10006ec8:	021b      	lsls	r3, r3, #8
10006eca:	61bb      	str	r3, [r7, #24]
10006ecc:	2398      	movs	r3, #152	; 0x98
10006ece:	2208      	movs	r2, #8
10006ed0:	189b      	adds	r3, r3, r2
10006ed2:	19db      	adds	r3, r3, r7
10006ed4:	681b      	ldr	r3, [r3, #0]
10006ed6:	613b      	str	r3, [r7, #16]
10006ed8:	2300      	movs	r3, #0
10006eda:	617b      	str	r3, [r7, #20]
10006edc:	693a      	ldr	r2, [r7, #16]
10006ede:	697b      	ldr	r3, [r7, #20]
10006ee0:	69b8      	ldr	r0, [r7, #24]
10006ee2:	69f9      	ldr	r1, [r7, #28]
10006ee4:	f005 fd2e 	bl	1000c944 <__wrap___aeabi_uldivmod>
10006ee8:	0002      	movs	r2, r0
10006eea:	000b      	movs	r3, r1
10006eec:	0013      	movs	r3, r2
10006eee:	2084      	movs	r0, #132	; 0x84
10006ef0:	183a      	adds	r2, r7, r0
10006ef2:	6013      	str	r3, [r2, #0]

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10006ef4:	230f      	movs	r3, #15
10006ef6:	2228      	movs	r2, #40	; 0x28
10006ef8:	189b      	adds	r3, r3, r2
10006efa:	19db      	adds	r3, r3, r7
10006efc:	781a      	ldrb	r2, [r3, #0]
10006efe:	0013      	movs	r3, r2
10006f00:	005b      	lsls	r3, r3, #1
10006f02:	189b      	adds	r3, r3, r2
10006f04:	009b      	lsls	r3, r3, #2
10006f06:	4a74      	ldr	r2, [pc, #464]	; (100070d8 <clock_configure+0x26c>)
10006f08:	4694      	mov	ip, r2
10006f0a:	4463      	add	r3, ip
10006f0c:	2180      	movs	r1, #128	; 0x80
10006f0e:	187a      	adds	r2, r7, r1
10006f10:	6013      	str	r3, [r2, #0]

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10006f12:	187b      	adds	r3, r7, r1
10006f14:	681b      	ldr	r3, [r3, #0]
10006f16:	685b      	ldr	r3, [r3, #4]
10006f18:	183a      	adds	r2, r7, r0
10006f1a:	6812      	ldr	r2, [r2, #0]
10006f1c:	429a      	cmp	r2, r3
10006f1e:	d904      	bls.n	10006f2a <clock_configure+0xbe>
        clock->div = div;
10006f20:	187b      	adds	r3, r7, r1
10006f22:	681b      	ldr	r3, [r3, #0]
10006f24:	183a      	adds	r2, r7, r0
10006f26:	6812      	ldr	r2, [r2, #0]
10006f28:	605a      	str	r2, [r3, #4]

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10006f2a:	230f      	movs	r3, #15
10006f2c:	2228      	movs	r2, #40	; 0x28
10006f2e:	189b      	adds	r3, r3, r2
10006f30:	19db      	adds	r3, r3, r7
10006f32:	781b      	ldrb	r3, [r3, #0]
10006f34:	0018      	movs	r0, r3
10006f36:	f7ff ff80 	bl	10006e3a <has_glitchless_mux>
10006f3a:	1e03      	subs	r3, r0, #0
10006f3c:	d019      	beq.n	10006f72 <clock_configure+0x106>
10006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006f40:	2b01      	cmp	r3, #1
10006f42:	d116      	bne.n	10006f72 <clock_configure+0x106>
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
10006f44:	2380      	movs	r3, #128	; 0x80
10006f46:	18fb      	adds	r3, r7, r3
10006f48:	681b      	ldr	r3, [r3, #0]
10006f4a:	67bb      	str	r3, [r7, #120]	; 0x78
10006f4c:	2303      	movs	r3, #3
10006f4e:	677b      	str	r3, [r7, #116]	; 0x74
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10006f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10006f52:	22c0      	movs	r2, #192	; 0xc0
10006f54:	0192      	lsls	r2, r2, #6
10006f56:	4313      	orrs	r3, r2
10006f58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10006f5a:	601a      	str	r2, [r3, #0]
}
10006f5c:	46c0      	nop			; (mov r8, r8)
        while (!(clock->selected & 1u))
10006f5e:	e000      	b.n	10006f62 <clock_configure+0xf6>
10006f60:	46c0      	nop			; (mov r8, r8)
10006f62:	2380      	movs	r3, #128	; 0x80
10006f64:	18fb      	adds	r3, r7, r3
10006f66:	681b      	ldr	r3, [r3, #0]
10006f68:	689b      	ldr	r3, [r3, #8]
10006f6a:	2201      	movs	r2, #1
10006f6c:	4013      	ands	r3, r2
10006f6e:	d0f7      	beq.n	10006f60 <clock_configure+0xf4>
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10006f70:	e029      	b.n	10006fc6 <clock_configure+0x15a>
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        // Disable clock. On clk_ref and clk_sys this does nothing,
        // all other clocks have the ENABLE bit in the same position.
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10006f72:	2380      	movs	r3, #128	; 0x80
10006f74:	18fb      	adds	r3, r7, r3
10006f76:	681b      	ldr	r3, [r3, #0]
10006f78:	673b      	str	r3, [r7, #112]	; 0x70
10006f7a:	2380      	movs	r3, #128	; 0x80
10006f7c:	011b      	lsls	r3, r3, #4
10006f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10006f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
10006f82:	22c0      	movs	r2, #192	; 0xc0
10006f84:	0192      	lsls	r2, r2, #6
10006f86:	4313      	orrs	r3, r2
10006f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
10006f8a:	601a      	str	r2, [r3, #0]
}
10006f8c:	46c0      	nop			; (mov r8, r8)
        if (configured_freq[clk_index] > 0) {
10006f8e:	210f      	movs	r1, #15
10006f90:	2628      	movs	r6, #40	; 0x28
10006f92:	198b      	adds	r3, r1, r6
10006f94:	19db      	adds	r3, r3, r7
10006f96:	781a      	ldrb	r2, [r3, #0]
10006f98:	4b50      	ldr	r3, [pc, #320]	; (100070dc <clock_configure+0x270>)
10006f9a:	0092      	lsls	r2, r2, #2
10006f9c:	58d3      	ldr	r3, [r2, r3]
10006f9e:	2b00      	cmp	r3, #0
10006fa0:	d011      	beq.n	10006fc6 <clock_configure+0x15a>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10006fa2:	4b4e      	ldr	r3, [pc, #312]	; (100070dc <clock_configure+0x270>)
10006fa4:	6958      	ldr	r0, [r3, #20]
10006fa6:	198b      	adds	r3, r1, r6
10006fa8:	19db      	adds	r3, r3, r7
10006faa:	781a      	ldrb	r2, [r3, #0]
10006fac:	4b4b      	ldr	r3, [pc, #300]	; (100070dc <clock_configure+0x270>)
10006fae:	0092      	lsls	r2, r2, #2
10006fb0:	58d3      	ldr	r3, [r2, r3]
10006fb2:	0019      	movs	r1, r3
10006fb4:	f005 fc84 	bl	1000c8c0 <__wrap___aeabi_uidiv>
10006fb8:	0003      	movs	r3, r0
10006fba:	3301      	adds	r3, #1
10006fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
            asm volatile (
10006fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10006fc0:	3b01      	subs	r3, #1
10006fc2:	d1fd      	bne.n	10006fc0 <clock_configure+0x154>
10006fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10006fc6:	2680      	movs	r6, #128	; 0x80
10006fc8:	19bb      	adds	r3, r7, r6
10006fca:	681a      	ldr	r2, [r3, #0]
10006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006fce:	015b      	lsls	r3, r3, #5
10006fd0:	66ba      	str	r2, [r7, #104]	; 0x68
10006fd2:	667b      	str	r3, [r7, #100]	; 0x64
10006fd4:	23e0      	movs	r3, #224	; 0xe0
10006fd6:	663b      	str	r3, [r7, #96]	; 0x60
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10006fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10006fda:	681a      	ldr	r2, [r3, #0]
10006fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10006fde:	4053      	eors	r3, r2
10006fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10006fe2:	4013      	ands	r3, r2
10006fe4:	6eba      	ldr	r2, [r7, #104]	; 0x68
10006fe6:	65fa      	str	r2, [r7, #92]	; 0x5c
10006fe8:	65bb      	str	r3, [r7, #88]	; 0x58
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10006fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10006fec:	2280      	movs	r2, #128	; 0x80
10006fee:	0152      	lsls	r2, r2, #5
10006ff0:	4313      	orrs	r3, r2
10006ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
10006ff4:	601a      	str	r2, [r3, #0]
}
10006ff6:	46c0      	nop			; (mov r8, r8)
}
10006ff8:	46c0      	nop			; (mov r8, r8)
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10006ffa:	230f      	movs	r3, #15
10006ffc:	2228      	movs	r2, #40	; 0x28
10006ffe:	189b      	adds	r3, r3, r2
10007000:	19db      	adds	r3, r3, r7
10007002:	781b      	ldrb	r3, [r3, #0]
10007004:	0018      	movs	r0, r3
10007006:	f7ff ff18 	bl	10006e3a <has_glitchless_mux>
1000700a:	1e03      	subs	r3, r0, #0
1000700c:	d023      	beq.n	10007056 <clock_configure+0x1ea>
        hw_write_masked(&clock->ctrl,
1000700e:	19bb      	adds	r3, r7, r6
10007010:	681b      	ldr	r3, [r3, #0]
10007012:	657b      	str	r3, [r7, #84]	; 0x54
10007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007016:	653b      	str	r3, [r7, #80]	; 0x50
10007018:	2303      	movs	r3, #3
1000701a:	64fb      	str	r3, [r7, #76]	; 0x4c
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000701c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000701e:	681a      	ldr	r2, [r3, #0]
10007020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10007022:	4053      	eors	r3, r2
10007024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10007026:	4013      	ands	r3, r2
10007028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1000702a:	64ba      	str	r2, [r7, #72]	; 0x48
1000702c:	647b      	str	r3, [r7, #68]	; 0x44
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000702e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10007030:	2280      	movs	r2, #128	; 0x80
10007032:	0152      	lsls	r2, r2, #5
10007034:	4313      	orrs	r3, r2
10007036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10007038:	601a      	str	r2, [r3, #0]
}
1000703a:	46c0      	nop			; (mov r8, r8)
}
1000703c:	46c0      	nop			; (mov r8, r8)
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
1000703e:	e000      	b.n	10007042 <clock_configure+0x1d6>
10007040:	46c0      	nop			; (mov r8, r8)
10007042:	2380      	movs	r3, #128	; 0x80
10007044:	18fb      	adds	r3, r7, r3
10007046:	681b      	ldr	r3, [r3, #0]
10007048:	689b      	ldr	r3, [r3, #8]
1000704a:	2101      	movs	r1, #1
1000704c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000704e:	4091      	lsls	r1, r2
10007050:	000a      	movs	r2, r1
10007052:	4013      	ands	r3, r2
10007054:	d0f4      	beq.n	10007040 <clock_configure+0x1d4>
            tight_loop_contents();
    }

    // Enable clock. On clk_ref and clk_sys this does nothing,
    // all other clocks have the ENABLE bit in the same position.
    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10007056:	2180      	movs	r1, #128	; 0x80
10007058:	187b      	adds	r3, r7, r1
1000705a:	681b      	ldr	r3, [r3, #0]
1000705c:	643b      	str	r3, [r7, #64]	; 0x40
1000705e:	2380      	movs	r3, #128	; 0x80
10007060:	011b      	lsls	r3, r3, #4
10007062:	63fb      	str	r3, [r7, #60]	; 0x3c
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10007066:	2280      	movs	r2, #128	; 0x80
10007068:	0192      	lsls	r2, r2, #6
1000706a:	4313      	orrs	r3, r2
1000706c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000706e:	601a      	str	r2, [r3, #0]
}
10007070:	46c0      	nop			; (mov r8, r8)

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
10007072:	187b      	adds	r3, r7, r1
10007074:	681b      	ldr	r3, [r3, #0]
10007076:	2084      	movs	r0, #132	; 0x84
10007078:	183a      	adds	r2, r7, r0
1000707a:	6812      	ldr	r2, [r2, #0]
1000707c:	605a      	str	r2, [r3, #4]

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
1000707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007080:	60bb      	str	r3, [r7, #8]
10007082:	2300      	movs	r3, #0
10007084:	60fb      	str	r3, [r7, #12]
10007086:	68ba      	ldr	r2, [r7, #8]
10007088:	68fb      	ldr	r3, [r7, #12]
1000708a:	0011      	movs	r1, r2
1000708c:	0e0d      	lsrs	r5, r1, #24
1000708e:	0013      	movs	r3, r2
10007090:	021c      	lsls	r4, r3, #8
10007092:	183b      	adds	r3, r7, r0
10007094:	681b      	ldr	r3, [r3, #0]
10007096:	603b      	str	r3, [r7, #0]
10007098:	2300      	movs	r3, #0
1000709a:	607b      	str	r3, [r7, #4]
1000709c:	683a      	ldr	r2, [r7, #0]
1000709e:	687b      	ldr	r3, [r7, #4]
100070a0:	0020      	movs	r0, r4
100070a2:	0029      	movs	r1, r5
100070a4:	f005 fc4e 	bl	1000c944 <__wrap___aeabi_uldivmod>
100070a8:	0002      	movs	r2, r0
100070aa:	000b      	movs	r3, r1
100070ac:	0010      	movs	r0, r2
100070ae:	0019      	movs	r1, r3
100070b0:	230f      	movs	r3, #15
100070b2:	2228      	movs	r2, #40	; 0x28
100070b4:	189b      	adds	r3, r3, r2
100070b6:	19db      	adds	r3, r3, r7
100070b8:	781a      	ldrb	r2, [r3, #0]
100070ba:	0001      	movs	r1, r0
100070bc:	4b07      	ldr	r3, [pc, #28]	; (100070dc <clock_configure+0x270>)
100070be:	0092      	lsls	r2, r2, #2
100070c0:	50d1      	str	r1, [r2, r3]

    return true;
100070c2:	2301      	movs	r3, #1
}
100070c4:	0018      	movs	r0, r3
100070c6:	46bd      	mov	sp, r7
100070c8:	b023      	add	sp, #140	; 0x8c
100070ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100070cc:	1000dddc 	.word	0x1000dddc
100070d0:	1000deec 	.word	0x1000deec
100070d4:	1000ddf0 	.word	0x1000ddf0
100070d8:	40008000 	.word	0x40008000
100070dc:	20004d68 	.word	0x20004d68

100070e0 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100070e0:	b580      	push	{r7, lr}
100070e2:	b088      	sub	sp, #32
100070e4:	af02      	add	r7, sp, #8
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100070e6:	200c      	movs	r0, #12
100070e8:	f001 ff7a 	bl	10008fe0 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100070ec:	f002 f92a 	bl	10009344 <running_on_fpga>
100070f0:	1e03      	subs	r3, r0, #0
100070f2:	d011      	beq.n	10007118 <clocks_init+0x38>
        for (uint i = 0; i < CLK_COUNT; i++) {
100070f4:	2300      	movs	r3, #0
100070f6:	617b      	str	r3, [r7, #20]
100070f8:	e007      	b.n	1000710a <clocks_init+0x2a>
            configured_freq[i] = 48 * MHZ;
100070fa:	4b3f      	ldr	r3, [pc, #252]	; (100071f8 <clocks_init+0x118>)
100070fc:	697a      	ldr	r2, [r7, #20]
100070fe:	0092      	lsls	r2, r2, #2
10007100:	493e      	ldr	r1, [pc, #248]	; (100071fc <clocks_init+0x11c>)
10007102:	50d1      	str	r1, [r2, r3]
        for (uint i = 0; i < CLK_COUNT; i++) {
10007104:	697b      	ldr	r3, [r7, #20]
10007106:	3301      	adds	r3, #1
10007108:	617b      	str	r3, [r7, #20]
1000710a:	697b      	ldr	r3, [r7, #20]
1000710c:	2b09      	cmp	r3, #9
1000710e:	d9f4      	bls.n	100070fa <clocks_init+0x1a>
        }
        configured_freq[clk_rtc] = 46875;
10007110:	4b39      	ldr	r3, [pc, #228]	; (100071f8 <clocks_init+0x118>)
10007112:	4a3b      	ldr	r2, [pc, #236]	; (10007200 <clocks_init+0x120>)
10007114:	625a      	str	r2, [r3, #36]	; 0x24
        return;
10007116:	e06c      	b.n	100071f2 <clocks_init+0x112>
    }

    // Disable resus that may be enabled from previous software
    clocks_hw->resus.ctrl = 0;
10007118:	4b3a      	ldr	r3, [pc, #232]	; (10007204 <clocks_init+0x124>)
1000711a:	2200      	movs	r2, #0
1000711c:	679a      	str	r2, [r3, #120]	; 0x78

    // Enable the xosc
    xosc_init();
1000711e:	f001 ff6f 	bl	10009000 <xosc_init>
10007122:	4b39      	ldr	r3, [pc, #228]	; (10007208 <clocks_init+0x128>)
10007124:	613b      	str	r3, [r7, #16]
10007126:	2301      	movs	r3, #1
10007128:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000712a:	693b      	ldr	r3, [r7, #16]
1000712c:	22c0      	movs	r2, #192	; 0xc0
1000712e:	0192      	lsls	r2, r2, #6
10007130:	4313      	orrs	r3, r2
10007132:	68fa      	ldr	r2, [r7, #12]
10007134:	601a      	str	r2, [r3, #0]
}
10007136:	46c0      	nop			; (mov r8, r8)

    // Before we touch PLLs, switch sys and ref cleanly away from their aux sources.
    hw_clear_bits(&clocks_hw->clk[clk_sys].ctrl, CLOCKS_CLK_SYS_CTRL_SRC_BITS);
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10007138:	e000      	b.n	1000713c <clocks_init+0x5c>
1000713a:	46c0      	nop			; (mov r8, r8)
1000713c:	4b31      	ldr	r3, [pc, #196]	; (10007204 <clocks_init+0x124>)
1000713e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10007140:	2b01      	cmp	r3, #1
10007142:	d1fa      	bne.n	1000713a <clocks_init+0x5a>
10007144:	4b31      	ldr	r3, [pc, #196]	; (1000720c <clocks_init+0x12c>)
10007146:	60bb      	str	r3, [r7, #8]
10007148:	2303      	movs	r3, #3
1000714a:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000714c:	68bb      	ldr	r3, [r7, #8]
1000714e:	22c0      	movs	r2, #192	; 0xc0
10007150:	0192      	lsls	r2, r2, #6
10007152:	4313      	orrs	r3, r2
10007154:	687a      	ldr	r2, [r7, #4]
10007156:	601a      	str	r2, [r3, #0]
}
10007158:	46c0      	nop			; (mov r8, r8)
        tight_loop_contents();
    hw_clear_bits(&clocks_hw->clk[clk_ref].ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
    while (clocks_hw->clk[clk_ref].selected != 0x1)
1000715a:	e000      	b.n	1000715e <clocks_init+0x7e>
1000715c:	46c0      	nop			; (mov r8, r8)
1000715e:	4b29      	ldr	r3, [pc, #164]	; (10007204 <clocks_init+0x124>)
10007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007162:	2b01      	cmp	r3, #1
10007164:	d1fa      	bne.n	1000715c <clocks_init+0x7c>
    // PLL SYS: 12 / 1 = 12MHz * 125 = 1500MHz / 6 / 2 = 125MHz
    // PLL USB: 12 / 1 = 12MHz * 100 = 1200MHz / 5 / 5 =  48MHz
    /// \end::pll_settings[]

    /// \tag::pll_init[]
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10007166:	4a2a      	ldr	r2, [pc, #168]	; (10007210 <clocks_init+0x130>)
10007168:	482a      	ldr	r0, [pc, #168]	; (10007214 <clocks_init+0x134>)
1000716a:	2302      	movs	r3, #2
1000716c:	9300      	str	r3, [sp, #0]
1000716e:	2306      	movs	r3, #6
10007170:	2101      	movs	r1, #1
10007172:	f001 f9a9 	bl	100084c8 <pll_init>
    pll_init(pll_usb, 1, 1200 * MHZ, 5, 5);
10007176:	4a28      	ldr	r2, [pc, #160]	; (10007218 <clocks_init+0x138>)
10007178:	4828      	ldr	r0, [pc, #160]	; (1000721c <clocks_init+0x13c>)
1000717a:	2305      	movs	r3, #5
1000717c:	9300      	str	r3, [sp, #0]
1000717e:	2305      	movs	r3, #5
10007180:	2101      	movs	r1, #1
10007182:	f001 f9a1 	bl	100084c8 <pll_init>
    /// \end::pll_init[]

    // Configure clocks
    // CLK_REF = XOSC (12MHz) / 1 = 12MHz
    clock_configure(clk_ref,
10007186:	4a26      	ldr	r2, [pc, #152]	; (10007220 <clocks_init+0x140>)
10007188:	4b25      	ldr	r3, [pc, #148]	; (10007220 <clocks_init+0x140>)
1000718a:	9300      	str	r3, [sp, #0]
1000718c:	0013      	movs	r3, r2
1000718e:	2200      	movs	r2, #0
10007190:	2102      	movs	r1, #2
10007192:	2004      	movs	r0, #4
10007194:	f7ff fe6a 	bl	10006e6c <clock_configure>
                    12 * MHZ,
                    12 * MHZ);

    /// \tag::configure_clk_sys[]
    // CLK SYS = PLL SYS (125MHz) / 1 = 125MHz
    clock_configure(clk_sys,
10007198:	4a22      	ldr	r2, [pc, #136]	; (10007224 <clocks_init+0x144>)
1000719a:	4b22      	ldr	r3, [pc, #136]	; (10007224 <clocks_init+0x144>)
1000719c:	9300      	str	r3, [sp, #0]
1000719e:	0013      	movs	r3, r2
100071a0:	2200      	movs	r2, #0
100071a2:	2101      	movs	r1, #1
100071a4:	2005      	movs	r0, #5
100071a6:	f7ff fe61 	bl	10006e6c <clock_configure>
                    125 * MHZ,
                    125 * MHZ);
    /// \end::configure_clk_sys[]

    // CLK USB = PLL USB (48MHz) / 1 = 48MHz
    clock_configure(clk_usb,
100071aa:	4a14      	ldr	r2, [pc, #80]	; (100071fc <clocks_init+0x11c>)
100071ac:	4b13      	ldr	r3, [pc, #76]	; (100071fc <clocks_init+0x11c>)
100071ae:	9300      	str	r3, [sp, #0]
100071b0:	0013      	movs	r3, r2
100071b2:	2200      	movs	r2, #0
100071b4:	2100      	movs	r1, #0
100071b6:	2007      	movs	r0, #7
100071b8:	f7ff fe58 	bl	10006e6c <clock_configure>
                    CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                    48 * MHZ,
                    48 * MHZ);

    // CLK ADC = PLL USB (48MHZ) / 1 = 48MHz
    clock_configure(clk_adc,
100071bc:	4a0f      	ldr	r2, [pc, #60]	; (100071fc <clocks_init+0x11c>)
100071be:	4b0f      	ldr	r3, [pc, #60]	; (100071fc <clocks_init+0x11c>)
100071c0:	9300      	str	r3, [sp, #0]
100071c2:	0013      	movs	r3, r2
100071c4:	2200      	movs	r2, #0
100071c6:	2100      	movs	r1, #0
100071c8:	2008      	movs	r0, #8
100071ca:	f7ff fe4f 	bl	10006e6c <clock_configure>
                    CLOCKS_CLK_ADC_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                    48 * MHZ,
                    48 * MHZ);

    // CLK RTC = PLL USB (48MHz) / 1024 = 46875Hz
    clock_configure(clk_rtc,
100071ce:	4a0b      	ldr	r2, [pc, #44]	; (100071fc <clocks_init+0x11c>)
100071d0:	4b0b      	ldr	r3, [pc, #44]	; (10007200 <clocks_init+0x120>)
100071d2:	9300      	str	r3, [sp, #0]
100071d4:	0013      	movs	r3, r2
100071d6:	2200      	movs	r2, #0
100071d8:	2100      	movs	r1, #0
100071da:	2009      	movs	r0, #9
100071dc:	f7ff fe46 	bl	10006e6c <clock_configure>
                    48 * MHZ,
                    46875);

    // CLK PERI = clk_sys. Used as reference clock for Peripherals. No dividers so just select and enable
    // Normally choose clk_sys or clk_usb
    clock_configure(clk_peri,
100071e0:	4a10      	ldr	r2, [pc, #64]	; (10007224 <clocks_init+0x144>)
100071e2:	4b10      	ldr	r3, [pc, #64]	; (10007224 <clocks_init+0x144>)
100071e4:	9300      	str	r3, [sp, #0]
100071e6:	0013      	movs	r3, r2
100071e8:	2200      	movs	r2, #0
100071ea:	2100      	movs	r1, #0
100071ec:	2006      	movs	r0, #6
100071ee:	f7ff fe3d 	bl	10006e6c <clock_configure>
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
100071f2:	46bd      	mov	sp, r7
100071f4:	b006      	add	sp, #24
100071f6:	bd80      	pop	{r7, pc}
100071f8:	20004d68 	.word	0x20004d68
100071fc:	02dc6c00 	.word	0x02dc6c00
10007200:	0000b71b 	.word	0x0000b71b
10007204:	40008000 	.word	0x40008000
10007208:	4000803c 	.word	0x4000803c
1000720c:	40008030 	.word	0x40008030
10007210:	59682f00 	.word	0x59682f00
10007214:	40028000 	.word	0x40028000
10007218:	47868c00 	.word	0x47868c00
1000721c:	4002c000 	.word	0x4002c000
10007220:	00b71b00 	.word	0x00b71b00
10007224:	07735940 	.word	0x07735940

10007228 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
10007228:	b580      	push	{r7, lr}
1000722a:	b082      	sub	sp, #8
1000722c:	af00      	add	r7, sp, #0
1000722e:	0002      	movs	r2, r0
10007230:	1dfb      	adds	r3, r7, #7
10007232:	701a      	strb	r2, [r3, #0]
    return configured_freq[clk_index];
10007234:	1dfb      	adds	r3, r7, #7
10007236:	781a      	ldrb	r2, [r3, #0]
10007238:	4b03      	ldr	r3, [pc, #12]	; (10007248 <clock_get_hz+0x20>)
1000723a:	0092      	lsls	r2, r2, #2
1000723c:	58d3      	ldr	r3, [r2, r3]
}
1000723e:	0018      	movs	r0, r3
10007240:	46bd      	mov	sp, r7
10007242:	b002      	add	sp, #8
10007244:	bd80      	pop	{r7, pc}
10007246:	46c0      	nop			; (mov r8, r8)
10007248:	20004d68 	.word	0x20004d68

1000724c <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
1000724c:	b5b0      	push	{r4, r5, r7, lr}
1000724e:	b08c      	sub	sp, #48	; 0x30
10007250:	af00      	add	r7, sp, #0
10007252:	6078      	str	r0, [r7, #4]
#if PICO_NO_FLASH
    __unused uint8_t *ignore = id_out;
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10007254:	241c      	movs	r4, #28
10007256:	193b      	adds	r3, r7, r4
10007258:	2200      	movs	r2, #0
1000725a:	601a      	str	r2, [r3, #0]
1000725c:	3304      	adds	r3, #4
1000725e:	2209      	movs	r2, #9
10007260:	2100      	movs	r1, #0
10007262:	0018      	movs	r0, r3
10007264:	f005 fe78 	bl	1000cf58 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10007268:	250c      	movs	r5, #12
1000726a:	197b      	adds	r3, r7, r5
1000726c:	2200      	movs	r2, #0
1000726e:	601a      	str	r2, [r3, #0]
10007270:	3304      	adds	r3, #4
10007272:	2209      	movs	r2, #9
10007274:	2100      	movs	r1, #0
10007276:	0018      	movs	r0, r3
10007278:	f005 fe6e 	bl	1000cf58 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
1000727c:	193b      	adds	r3, r7, r4
1000727e:	224b      	movs	r2, #75	; 0x4b
10007280:	701a      	strb	r2, [r3, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10007282:	1979      	adds	r1, r7, r5
10007284:	193b      	adds	r3, r7, r4
10007286:	220d      	movs	r2, #13
10007288:	0018      	movs	r0, r3
1000728a:	f005 fea1 	bl	1000cfd0 <__flash_do_cmd_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
1000728e:	2300      	movs	r3, #0
10007290:	62fb      	str	r3, [r7, #44]	; 0x2c
10007292:	e00b      	b.n	100072ac <flash_get_unique_id+0x60>
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10007296:	1d5a      	adds	r2, r3, #5
10007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000729a:	6879      	ldr	r1, [r7, #4]
1000729c:	18cb      	adds	r3, r1, r3
1000729e:	210c      	movs	r1, #12
100072a0:	1879      	adds	r1, r7, r1
100072a2:	5c8a      	ldrb	r2, [r1, r2]
100072a4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
100072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100072a8:	3301      	adds	r3, #1
100072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
100072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100072ae:	2b07      	cmp	r3, #7
100072b0:	ddf0      	ble.n	10007294 <flash_get_unique_id+0x48>
#endif
}
100072b2:	46c0      	nop			; (mov r8, r8)
100072b4:	46c0      	nop			; (mov r8, r8)
100072b6:	46bd      	mov	sp, r7
100072b8:	b00c      	add	sp, #48	; 0x30
100072ba:	bdb0      	pop	{r4, r5, r7, pc}

100072bc <check_gpio_param>:
static inline void check_gpio_param(__unused uint gpio) {
100072bc:	b580      	push	{r7, lr}
100072be:	b082      	sub	sp, #8
100072c0:	af00      	add	r7, sp, #0
100072c2:	6078      	str	r0, [r7, #4]
}
100072c4:	46c0      	nop			; (mov r8, r8)
100072c6:	46bd      	mov	sp, r7
100072c8:	b002      	add	sp, #8
100072ca:	bd80      	pop	{r7, pc}

100072cc <gpio_set_function>:
}

/// \tag::gpio_set_function[]
// Select function for this GPIO, and ensure input/output are enabled at the pad.
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
100072cc:	b580      	push	{r7, lr}
100072ce:	b088      	sub	sp, #32
100072d0:	af00      	add	r7, sp, #0
100072d2:	6078      	str	r0, [r7, #4]
100072d4:	000a      	movs	r2, r1
100072d6:	1cfb      	adds	r3, r7, #3
100072d8:	701a      	strb	r2, [r3, #0]
    check_gpio_param(gpio);
100072da:	687b      	ldr	r3, [r7, #4]
100072dc:	0018      	movs	r0, r3
100072de:	f7ff ffed 	bl	100072bc <check_gpio_param>
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100072e2:	687b      	ldr	r3, [r7, #4]
100072e4:	009b      	lsls	r3, r3, #2
100072e6:	4a12      	ldr	r2, [pc, #72]	; (10007330 <gpio_set_function+0x64>)
100072e8:	4694      	mov	ip, r2
100072ea:	4463      	add	r3, ip
100072ec:	61fb      	str	r3, [r7, #28]
100072ee:	2340      	movs	r3, #64	; 0x40
100072f0:	61bb      	str	r3, [r7, #24]
100072f2:	23c0      	movs	r3, #192	; 0xc0
100072f4:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100072f6:	69fb      	ldr	r3, [r7, #28]
100072f8:	681a      	ldr	r2, [r3, #0]
100072fa:	69bb      	ldr	r3, [r7, #24]
100072fc:	4053      	eors	r3, r2
100072fe:	697a      	ldr	r2, [r7, #20]
10007300:	4013      	ands	r3, r2
10007302:	69fa      	ldr	r2, [r7, #28]
10007304:	613a      	str	r2, [r7, #16]
10007306:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10007308:	693b      	ldr	r3, [r7, #16]
1000730a:	2280      	movs	r2, #128	; 0x80
1000730c:	0152      	lsls	r2, r2, #5
1000730e:	4313      	orrs	r3, r2
10007310:	68fa      	ldr	r2, [r7, #12]
10007312:	601a      	str	r2, [r3, #0]
}
10007314:	46c0      	nop			; (mov r8, r8)
}
10007316:	46c0      	nop			; (mov r8, r8)
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10007318:	4906      	ldr	r1, [pc, #24]	; (10007334 <gpio_set_function+0x68>)
1000731a:	1cfb      	adds	r3, r7, #3
1000731c:	781a      	ldrb	r2, [r3, #0]
1000731e:	687b      	ldr	r3, [r7, #4]
10007320:	00db      	lsls	r3, r3, #3
10007322:	18cb      	adds	r3, r1, r3
10007324:	3304      	adds	r3, #4
10007326:	601a      	str	r2, [r3, #0]
}
10007328:	46c0      	nop			; (mov r8, r8)
1000732a:	46bd      	mov	sp, r7
1000732c:	b008      	add	sp, #32
1000732e:	bd80      	pop	{r7, pc}
10007330:	4001c004 	.word	0x4001c004
10007334:	40014000 	.word	0x40014000

10007338 <gpio_set_pulls>:
    return (enum gpio_function) ((iobank0_hw->io[gpio].ctrl & IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS) >> IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB);
}

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
10007338:	b580      	push	{r7, lr}
1000733a:	b088      	sub	sp, #32
1000733c:	af00      	add	r7, sp, #0
1000733e:	6078      	str	r0, [r7, #4]
10007340:	0008      	movs	r0, r1
10007342:	0011      	movs	r1, r2
10007344:	1cfb      	adds	r3, r7, #3
10007346:	1c02      	adds	r2, r0, #0
10007348:	701a      	strb	r2, [r3, #0]
1000734a:	1cbb      	adds	r3, r7, #2
1000734c:	1c0a      	adds	r2, r1, #0
1000734e:	701a      	strb	r2, [r3, #0]
    check_gpio_param(gpio);
10007350:	687b      	ldr	r3, [r7, #4]
10007352:	0018      	movs	r0, r3
10007354:	f7ff ffb2 	bl	100072bc <check_gpio_param>
    hw_write_masked(
10007358:	687b      	ldr	r3, [r7, #4]
1000735a:	009b      	lsls	r3, r3, #2
1000735c:	4a14      	ldr	r2, [pc, #80]	; (100073b0 <gpio_set_pulls+0x78>)
1000735e:	1899      	adds	r1, r3, r2
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10007360:	1cfb      	adds	r3, r7, #3
10007362:	781b      	ldrb	r3, [r3, #0]
10007364:	2b00      	cmp	r3, #0
10007366:	d001      	beq.n	1000736c <gpio_set_pulls+0x34>
10007368:	2208      	movs	r2, #8
1000736a:	e000      	b.n	1000736e <gpio_set_pulls+0x36>
1000736c:	2200      	movs	r2, #0
1000736e:	1cbb      	adds	r3, r7, #2
10007370:	781b      	ldrb	r3, [r3, #0]
10007372:	2b00      	cmp	r3, #0
10007374:	d001      	beq.n	1000737a <gpio_set_pulls+0x42>
10007376:	2304      	movs	r3, #4
10007378:	e000      	b.n	1000737c <gpio_set_pulls+0x44>
1000737a:	2300      	movs	r3, #0
1000737c:	4313      	orrs	r3, r2
1000737e:	61f9      	str	r1, [r7, #28]
10007380:	61bb      	str	r3, [r7, #24]
10007382:	230c      	movs	r3, #12
10007384:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10007386:	69fb      	ldr	r3, [r7, #28]
10007388:	681a      	ldr	r2, [r3, #0]
1000738a:	69bb      	ldr	r3, [r7, #24]
1000738c:	4053      	eors	r3, r2
1000738e:	697a      	ldr	r2, [r7, #20]
10007390:	4013      	ands	r3, r2
10007392:	69fa      	ldr	r2, [r7, #28]
10007394:	613a      	str	r2, [r7, #16]
10007396:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10007398:	693b      	ldr	r3, [r7, #16]
1000739a:	2280      	movs	r2, #128	; 0x80
1000739c:	0152      	lsls	r2, r2, #5
1000739e:	4313      	orrs	r3, r2
100073a0:	68fa      	ldr	r2, [r7, #12]
100073a2:	601a      	str	r2, [r3, #0]
}
100073a4:	46c0      	nop			; (mov r8, r8)
}
100073a6:	46c0      	nop			; (mov r8, r8)
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100073a8:	46c0      	nop			; (mov r8, r8)
100073aa:	46bd      	mov	sp, r7
100073ac:	b008      	add	sp, #32
100073ae:	bd80      	pop	{r7, pc}
100073b0:	4001c004 	.word	0x4001c004

100073b4 <gpio_init>:
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
100073b4:	b580      	push	{r7, lr}
100073b6:	b082      	sub	sp, #8
100073b8:	af00      	add	r7, sp, #0
100073ba:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_clr = 1ul << gpio;
100073bc:	23d0      	movs	r3, #208	; 0xd0
100073be:	061b      	lsls	r3, r3, #24
100073c0:	2101      	movs	r1, #1
100073c2:	687a      	ldr	r2, [r7, #4]
100073c4:	4091      	lsls	r1, r2
100073c6:	000a      	movs	r2, r1
100073c8:	629a      	str	r2, [r3, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
100073ca:	23d0      	movs	r3, #208	; 0xd0
100073cc:	061b      	lsls	r3, r3, #24
100073ce:	2101      	movs	r1, #1
100073d0:	687a      	ldr	r2, [r7, #4]
100073d2:	4091      	lsls	r1, r2
100073d4:	000a      	movs	r2, r1
100073d6:	619a      	str	r2, [r3, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
100073d8:	687b      	ldr	r3, [r7, #4]
100073da:	2105      	movs	r1, #5
100073dc:	0018      	movs	r0, r3
100073de:	f7ff ff75 	bl	100072cc <gpio_set_function>
}
100073e2:	46c0      	nop			; (mov r8, r8)
100073e4:	46bd      	mov	sp, r7
100073e6:	b002      	add	sp, #8
100073e8:	bd80      	pop	{r7, pc}

100073ea <check_irq_param>:
 *
 * All interrupts handlers should be of this type, and follow normal ARM EABI register saving conventions
 */
typedef void (*irq_handler_t)(void);

static inline void check_irq_param(__unused uint num) {
100073ea:	b580      	push	{r7, lr}
100073ec:	b082      	sub	sp, #8
100073ee:	af00      	add	r7, sp, #0
100073f0:	6078      	str	r0, [r7, #4]
    invalid_params_if(IRQ, num >= NUM_IRQS);
}
100073f2:	46c0      	nop			; (mov r8, r8)
100073f4:	46bd      	mov	sp, r7
100073f6:	b002      	add	sp, #8
100073f8:	bd80      	pop	{r7, pc}
	...

100073fc <get_vtable>:

extern void __unhandled_user_irq(void);

static uint8_t user_irq_claimed[NUM_CORES];

static inline irq_handler_t *get_vtable(void) {
100073fc:	b580      	push	{r7, lr}
100073fe:	af00      	add	r7, sp, #0
    return (irq_handler_t *) scb_hw->vtor;
10007400:	4b02      	ldr	r3, [pc, #8]	; (1000740c <get_vtable+0x10>)
10007402:	689b      	ldr	r3, [r3, #8]
}
10007404:	0018      	movs	r0, r3
10007406:	46bd      	mov	sp, r7
10007408:	bd80      	pop	{r7, pc}
1000740a:	46c0      	nop			; (mov r8, r8)
1000740c:	e000ed00 	.word	0xe000ed00

10007410 <add_thumb_bit>:

static inline void *add_thumb_bit(void *addr) {
10007410:	b580      	push	{r7, lr}
10007412:	b082      	sub	sp, #8
10007414:	af00      	add	r7, sp, #0
10007416:	6078      	str	r0, [r7, #4]
    return (void *) (((uintptr_t) addr) | 0x1);
10007418:	687b      	ldr	r3, [r7, #4]
1000741a:	2201      	movs	r2, #1
1000741c:	4313      	orrs	r3, r2
}
1000741e:	0018      	movs	r0, r3
10007420:	46bd      	mov	sp, r7
10007422:	b002      	add	sp, #8
10007424:	bd80      	pop	{r7, pc}

10007426 <remove_thumb_bit>:

static inline void *remove_thumb_bit(void *addr) {
10007426:	b580      	push	{r7, lr}
10007428:	b082      	sub	sp, #8
1000742a:	af00      	add	r7, sp, #0
1000742c:	6078      	str	r0, [r7, #4]
    return (void *) (((uintptr_t) addr) & (uint)~0x1);
1000742e:	687b      	ldr	r3, [r7, #4]
10007430:	2201      	movs	r2, #1
10007432:	4393      	bics	r3, r2
}
10007434:	0018      	movs	r0, r3
10007436:	46bd      	mov	sp, r7
10007438:	b002      	add	sp, #8
1000743a:	bd80      	pop	{r7, pc}

1000743c <set_raw_irq_handler_and_unlock>:

static void set_raw_irq_handler_and_unlock(uint num, irq_handler_t handler, uint32_t save) {
1000743c:	b580      	push	{r7, lr}
1000743e:	b08a      	sub	sp, #40	; 0x28
10007440:	af00      	add	r7, sp, #0
10007442:	60f8      	str	r0, [r7, #12]
10007444:	60b9      	str	r1, [r7, #8]
10007446:	607a      	str	r2, [r7, #4]
    // update vtable (vtable_handler may be same or updated depending on cases, but we do it anyway for compactness)
    get_vtable()[16 + num] = handler;
10007448:	f7ff ffd8 	bl	100073fc <get_vtable>
1000744c:	0002      	movs	r2, r0
1000744e:	68fb      	ldr	r3, [r7, #12]
10007450:	3310      	adds	r3, #16
10007452:	009b      	lsls	r3, r3, #2
10007454:	18d3      	adds	r3, r2, r3
10007456:	68ba      	ldr	r2, [r7, #8]
10007458:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb" : : : "memory");
1000745a:	f3bf 8f5f 	dmb	sy
}
1000745e:	46c0      	nop			; (mov r8, r8)
10007460:	2309      	movs	r3, #9
10007462:	617b      	str	r3, [r7, #20]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10007464:	697b      	ldr	r3, [r7, #20]
10007466:	4a0e      	ldr	r2, [pc, #56]	; (100074a0 <set_raw_irq_handler_and_unlock+0x64>)
10007468:	4694      	mov	ip, r2
1000746a:	4463      	add	r3, ip
1000746c:	009b      	lsls	r3, r3, #2
1000746e:	627b      	str	r3, [r7, #36]	; 0x24
10007470:	687b      	ldr	r3, [r7, #4]
10007472:	623b      	str	r3, [r7, #32]
10007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10007476:	61fb      	str	r3, [r7, #28]
    __asm volatile ("dmb" : : : "memory");
10007478:	f3bf 8f5f 	dmb	sy
}
1000747c:	46c0      	nop			; (mov r8, r8)
}
1000747e:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10007480:	69fb      	ldr	r3, [r7, #28]
10007482:	2200      	movs	r2, #0
10007484:	601a      	str	r2, [r3, #0]
}
10007486:	46c0      	nop			; (mov r8, r8)
10007488:	6a3b      	ldr	r3, [r7, #32]
1000748a:	61bb      	str	r3, [r7, #24]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000748c:	69bb      	ldr	r3, [r7, #24]
1000748e:	f383 8810 	msr	PRIMASK, r3
}
10007492:	46c0      	nop			; (mov r8, r8)
}
10007494:	46c0      	nop			; (mov r8, r8)
    __dmb();
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_IRQ), save);
}
10007496:	46c0      	nop			; (mov r8, r8)
10007498:	46bd      	mov	sp, r7
1000749a:	b00a      	add	sp, #40	; 0x28
1000749c:	bd80      	pop	{r7, pc}
1000749e:	46c0      	nop			; (mov r8, r8)
100074a0:	34000040 	.word	0x34000040

100074a4 <irq_set_enabled>:

void irq_set_enabled(uint num, bool enabled) {
100074a4:	b580      	push	{r7, lr}
100074a6:	b082      	sub	sp, #8
100074a8:	af00      	add	r7, sp, #0
100074aa:	6078      	str	r0, [r7, #4]
100074ac:	000a      	movs	r2, r1
100074ae:	1cfb      	adds	r3, r7, #3
100074b0:	701a      	strb	r2, [r3, #0]
    check_irq_param(num);
100074b2:	687b      	ldr	r3, [r7, #4]
100074b4:	0018      	movs	r0, r3
100074b6:	f7ff ff98 	bl	100073ea <check_irq_param>
    irq_set_mask_enabled(1u << num, enabled);
100074ba:	2201      	movs	r2, #1
100074bc:	687b      	ldr	r3, [r7, #4]
100074be:	409a      	lsls	r2, r3
100074c0:	1cfb      	adds	r3, r7, #3
100074c2:	781b      	ldrb	r3, [r3, #0]
100074c4:	0019      	movs	r1, r3
100074c6:	0010      	movs	r0, r2
100074c8:	f000 f81c 	bl	10007504 <irq_set_mask_enabled>
}
100074cc:	46c0      	nop			; (mov r8, r8)
100074ce:	46bd      	mov	sp, r7
100074d0:	b002      	add	sp, #8
100074d2:	bd80      	pop	{r7, pc}

100074d4 <irq_is_enabled>:

bool irq_is_enabled(uint num) {
100074d4:	b580      	push	{r7, lr}
100074d6:	b082      	sub	sp, #8
100074d8:	af00      	add	r7, sp, #0
100074da:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
100074dc:	687b      	ldr	r3, [r7, #4]
100074de:	0018      	movs	r0, r3
100074e0:	f7ff ff83 	bl	100073ea <check_irq_param>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
100074e4:	2201      	movs	r2, #1
100074e6:	687b      	ldr	r3, [r7, #4]
100074e8:	409a      	lsls	r2, r3
100074ea:	4b05      	ldr	r3, [pc, #20]	; (10007500 <irq_is_enabled+0x2c>)
100074ec:	681b      	ldr	r3, [r3, #0]
100074ee:	4013      	ands	r3, r2
100074f0:	1e5a      	subs	r2, r3, #1
100074f2:	4193      	sbcs	r3, r2
100074f4:	b2db      	uxtb	r3, r3
}
100074f6:	0018      	movs	r0, r3
100074f8:	46bd      	mov	sp, r7
100074fa:	b002      	add	sp, #8
100074fc:	bd80      	pop	{r7, pc}
100074fe:	46c0      	nop			; (mov r8, r8)
10007500:	e000e100 	.word	0xe000e100

10007504 <irq_set_mask_enabled>:

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
10007504:	b580      	push	{r7, lr}
10007506:	b082      	sub	sp, #8
10007508:	af00      	add	r7, sp, #0
1000750a:	6078      	str	r0, [r7, #4]
1000750c:	000a      	movs	r2, r1
1000750e:	1cfb      	adds	r3, r7, #3
10007510:	701a      	strb	r2, [r3, #0]
    if (enabled) {
10007512:	1cfb      	adds	r3, r7, #3
10007514:	781b      	ldrb	r3, [r3, #0]
10007516:	2b00      	cmp	r3, #0
10007518:	d006      	beq.n	10007528 <irq_set_mask_enabled+0x24>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
1000751a:	4b07      	ldr	r3, [pc, #28]	; (10007538 <irq_set_mask_enabled+0x34>)
1000751c:	687a      	ldr	r2, [r7, #4]
1000751e:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10007520:	4b06      	ldr	r3, [pc, #24]	; (1000753c <irq_set_mask_enabled+0x38>)
10007522:	687a      	ldr	r2, [r7, #4]
10007524:	601a      	str	r2, [r3, #0]
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
    }
}
10007526:	e002      	b.n	1000752e <irq_set_mask_enabled+0x2a>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10007528:	4b05      	ldr	r3, [pc, #20]	; (10007540 <irq_set_mask_enabled+0x3c>)
1000752a:	687a      	ldr	r2, [r7, #4]
1000752c:	601a      	str	r2, [r3, #0]
}
1000752e:	46c0      	nop			; (mov r8, r8)
10007530:	46bd      	mov	sp, r7
10007532:	b002      	add	sp, #8
10007534:	bd80      	pop	{r7, pc}
10007536:	46c0      	nop			; (mov r8, r8)
10007538:	e000e280 	.word	0xe000e280
1000753c:	e000e100 	.word	0xe000e100
10007540:	e000e180 	.word	0xe000e180

10007544 <is_shared_irq_raw_handler>:
    irq_handler_t handler;
} irq_handler_chain_slots[PICO_MAX_SHARED_IRQ_HANDLERS];

static int8_t irq_hander_chain_free_slot_head;

static inline bool is_shared_irq_raw_handler(irq_handler_t raw_handler) {
10007544:	b580      	push	{r7, lr}
10007546:	b082      	sub	sp, #8
10007548:	af00      	add	r7, sp, #0
1000754a:	6078      	str	r0, [r7, #4]
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
1000754c:	687a      	ldr	r2, [r7, #4]
1000754e:	4b05      	ldr	r3, [pc, #20]	; (10007564 <is_shared_irq_raw_handler+0x20>)
10007550:	1ad2      	subs	r2, r2, r3
10007552:	212f      	movs	r1, #47	; 0x2f
10007554:	2300      	movs	r3, #0
10007556:	4291      	cmp	r1, r2
10007558:	415b      	adcs	r3, r3
1000755a:	b2db      	uxtb	r3, r3
}
1000755c:	0018      	movs	r0, r3
1000755e:	46bd      	mov	sp, r7
10007560:	b002      	add	sp, #8
10007562:	bd80      	pop	{r7, pc}
10007564:	200006c4 	.word	0x200006c4

10007568 <irq_get_vtable_handler>:
    return false;
}
#endif


irq_handler_t irq_get_vtable_handler(uint num) {
10007568:	b580      	push	{r7, lr}
1000756a:	b082      	sub	sp, #8
1000756c:	af00      	add	r7, sp, #0
1000756e:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
10007570:	687b      	ldr	r3, [r7, #4]
10007572:	0018      	movs	r0, r3
10007574:	f7ff ff39 	bl	100073ea <check_irq_param>
    return get_vtable()[16 + num];
10007578:	f7ff ff40 	bl	100073fc <get_vtable>
1000757c:	0002      	movs	r2, r0
1000757e:	687b      	ldr	r3, [r7, #4]
10007580:	3310      	adds	r3, #16
10007582:	009b      	lsls	r3, r3, #2
10007584:	18d3      	adds	r3, r2, r3
10007586:	681b      	ldr	r3, [r3, #0]
}
10007588:	0018      	movs	r0, r3
1000758a:	46bd      	mov	sp, r7
1000758c:	b002      	add	sp, #8
1000758e:	bd80      	pop	{r7, pc}

10007590 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10007590:	b580      	push	{r7, lr}
10007592:	b08a      	sub	sp, #40	; 0x28
10007594:	af00      	add	r7, sp, #0
10007596:	6078      	str	r0, [r7, #4]
10007598:	6039      	str	r1, [r7, #0]
    check_irq_param(num);
1000759a:	687b      	ldr	r3, [r7, #4]
1000759c:	0018      	movs	r0, r3
1000759e:	f7ff ff24 	bl	100073ea <check_irq_param>
100075a2:	2309      	movs	r3, #9
100075a4:	60bb      	str	r3, [r7, #8]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100075a6:	68bb      	ldr	r3, [r7, #8]
100075a8:	4a1d      	ldr	r2, [pc, #116]	; (10007620 <irq_set_exclusive_handler+0x90>)
100075aa:	4694      	mov	ip, r2
100075ac:	4463      	add	r3, ip
100075ae:	009b      	lsls	r3, r3, #2
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
100075b0:	627b      	str	r3, [r7, #36]	; 0x24
100075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100075b4:	61bb      	str	r3, [r7, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100075b6:	f3ef 8310 	mrs	r3, PRIMASK
100075ba:	617b      	str	r3, [r7, #20]
    __asm volatile ("cpsid i");
100075bc:	b672      	cpsid	i
    return status;
100075be:	697b      	ldr	r3, [r7, #20]
    uint32_t save = save_and_disable_interrupts();
100075c0:	613b      	str	r3, [r7, #16]
100075c2:	69bb      	ldr	r3, [r7, #24]
100075c4:	60fb      	str	r3, [r7, #12]
    while (__builtin_expect(!*lock, 0));
100075c6:	46c0      	nop			; (mov r8, r8)
100075c8:	68fb      	ldr	r3, [r7, #12]
100075ca:	681b      	ldr	r3, [r3, #0]
100075cc:	425a      	negs	r2, r3
100075ce:	4153      	adcs	r3, r2
100075d0:	b2db      	uxtb	r3, r3
100075d2:	2b00      	cmp	r3, #0
100075d4:	d1f8      	bne.n	100075c8 <irq_set_exclusive_handler+0x38>
    __asm volatile ("dmb" : : : "memory");
100075d6:	f3bf 8f5f 	dmb	sy
}
100075da:	46c0      	nop			; (mov r8, r8)
}
100075dc:	46c0      	nop			; (mov r8, r8)
}
100075de:	46c0      	nop			; (mov r8, r8)
    return save;
100075e0:	693b      	ldr	r3, [r7, #16]
    uint32_t save = spin_lock_blocking(lock);
100075e2:	623b      	str	r3, [r7, #32]
    __unused irq_handler_t current = irq_get_vtable_handler(num);
100075e4:	687b      	ldr	r3, [r7, #4]
100075e6:	0018      	movs	r0, r3
100075e8:	f7ff ffbe 	bl	10007568 <irq_get_vtable_handler>
100075ec:	0003      	movs	r3, r0
100075ee:	61fb      	str	r3, [r7, #28]
    hard_assert(current == __unhandled_user_irq || current == handler);
100075f0:	69fa      	ldr	r2, [r7, #28]
100075f2:	4b0c      	ldr	r3, [pc, #48]	; (10007624 <irq_set_exclusive_handler+0x94>)
100075f4:	429a      	cmp	r2, r3
100075f6:	d009      	beq.n	1000760c <irq_set_exclusive_handler+0x7c>
100075f8:	69fa      	ldr	r2, [r7, #28]
100075fa:	683b      	ldr	r3, [r7, #0]
100075fc:	429a      	cmp	r2, r3
100075fe:	d005      	beq.n	1000760c <irq_set_exclusive_handler+0x7c>
10007600:	4b09      	ldr	r3, [pc, #36]	; (10007628 <irq_set_exclusive_handler+0x98>)
10007602:	4a0a      	ldr	r2, [pc, #40]	; (1000762c <irq_set_exclusive_handler+0x9c>)
10007604:	480a      	ldr	r0, [pc, #40]	; (10007630 <irq_set_exclusive_handler+0xa0>)
10007606:	217c      	movs	r1, #124	; 0x7c
10007608:	f003 fb90 	bl	1000ad2c <__assert_func>
    set_raw_irq_handler_and_unlock(num, handler, save);
1000760c:	6a3a      	ldr	r2, [r7, #32]
1000760e:	6839      	ldr	r1, [r7, #0]
10007610:	687b      	ldr	r3, [r7, #4]
10007612:	0018      	movs	r0, r3
10007614:	f7ff ff12 	bl	1000743c <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
10007618:	46c0      	nop			; (mov r8, r8)
1000761a:	46bd      	mov	sp, r7
1000761c:	b00a      	add	sp, #40	; 0x28
1000761e:	bd80      	pop	{r7, pc}
10007620:	34000040 	.word	0x34000040
10007624:	100001cd 	.word	0x100001cd
10007628:	1000e07c 	.word	0x1000e07c
1000762c:	1000e2c4 	.word	0x1000e2c4
10007630:	1000e0b4 	.word	0x1000e0b4

10007634 <make_branch>:
#endif
}


#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
static uint16_t make_branch(uint16_t *from, void *to) {
10007634:	b580      	push	{r7, lr}
10007636:	b086      	sub	sp, #24
10007638:	af00      	add	r7, sp, #0
1000763a:	6078      	str	r0, [r7, #4]
1000763c:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
1000763e:	687b      	ldr	r3, [r7, #4]
10007640:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
10007642:	683b      	ldr	r3, [r7, #0]
10007644:	613b      	str	r3, [r7, #16]
    int32_t delta = (int32_t)(ui_to - ui_from - 4);
10007646:	693a      	ldr	r2, [r7, #16]
10007648:	697b      	ldr	r3, [r7, #20]
1000764a:	1ad3      	subs	r3, r2, r3
1000764c:	3b04      	subs	r3, #4
1000764e:	60fb      	str	r3, [r7, #12]
    assert(delta >= -2048 && delta <= 2046 && !(delta & 1));
10007650:	68fb      	ldr	r3, [r7, #12]
10007652:	4a0f      	ldr	r2, [pc, #60]	; (10007690 <make_branch+0x5c>)
10007654:	4293      	cmp	r3, r2
10007656:	db07      	blt.n	10007668 <make_branch+0x34>
10007658:	68fb      	ldr	r3, [r7, #12]
1000765a:	4a0e      	ldr	r2, [pc, #56]	; (10007694 <make_branch+0x60>)
1000765c:	4293      	cmp	r3, r2
1000765e:	dc03      	bgt.n	10007668 <make_branch+0x34>
10007660:	68fb      	ldr	r3, [r7, #12]
10007662:	2201      	movs	r2, #1
10007664:	4013      	ands	r3, r2
10007666:	d005      	beq.n	10007674 <make_branch+0x40>
10007668:	4b0b      	ldr	r3, [pc, #44]	; (10007698 <make_branch+0x64>)
1000766a:	4a0c      	ldr	r2, [pc, #48]	; (1000769c <make_branch+0x68>)
1000766c:	480c      	ldr	r0, [pc, #48]	; (100076a0 <make_branch+0x6c>)
1000766e:	2199      	movs	r1, #153	; 0x99
10007670:	f003 fb5c 	bl	1000ad2c <__assert_func>
    return (uint16_t)(0xe000 | ((delta >> 1) & 0x7ff));
10007674:	68fb      	ldr	r3, [r7, #12]
10007676:	105b      	asrs	r3, r3, #1
10007678:	b21b      	sxth	r3, r3
1000767a:	055b      	lsls	r3, r3, #21
1000767c:	0d5b      	lsrs	r3, r3, #21
1000767e:	b21b      	sxth	r3, r3
10007680:	4a08      	ldr	r2, [pc, #32]	; (100076a4 <make_branch+0x70>)
10007682:	4313      	orrs	r3, r2
10007684:	b21b      	sxth	r3, r3
10007686:	b29b      	uxth	r3, r3
}
10007688:	0018      	movs	r0, r3
1000768a:	46bd      	mov	sp, r7
1000768c:	b006      	add	sp, #24
1000768e:	bd80      	pop	{r7, pc}
10007690:	fffff800 	.word	0xfffff800
10007694:	000007fe 	.word	0x000007fe
10007698:	1000e108 	.word	0x1000e108
1000769c:	1000e2e0 	.word	0x1000e2e0
100076a0:	1000e0b4 	.word	0x1000e0b4
100076a4:	ffffe000 	.word	0xffffe000

100076a8 <insert_branch_and_link>:

static void insert_branch_and_link(uint16_t *from, void *to) {
100076a8:	b580      	push	{r7, lr}
100076aa:	b086      	sub	sp, #24
100076ac:	af00      	add	r7, sp, #0
100076ae:	6078      	str	r0, [r7, #4]
100076b0:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
100076b2:	687b      	ldr	r3, [r7, #4]
100076b4:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
100076b6:	683b      	ldr	r3, [r7, #0]
100076b8:	613b      	str	r3, [r7, #16]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100076ba:	693a      	ldr	r2, [r7, #16]
100076bc:	697b      	ldr	r3, [r7, #20]
100076be:	1ad3      	subs	r3, r2, r3
100076c0:	3b04      	subs	r3, #4
100076c2:	085b      	lsrs	r3, r3, #1
100076c4:	60fb      	str	r3, [r7, #12]
    assert(!(delta >> 11u));
100076c6:	68fb      	ldr	r3, [r7, #12]
100076c8:	0adb      	lsrs	r3, r3, #11
100076ca:	d005      	beq.n	100076d8 <insert_branch_and_link+0x30>
100076cc:	4b0e      	ldr	r3, [pc, #56]	; (10007708 <insert_branch_and_link+0x60>)
100076ce:	4a0f      	ldr	r2, [pc, #60]	; (1000770c <insert_branch_and_link+0x64>)
100076d0:	480f      	ldr	r0, [pc, #60]	; (10007710 <insert_branch_and_link+0x68>)
100076d2:	21a1      	movs	r1, #161	; 0xa1
100076d4:	f003 fb2a 	bl	1000ad2c <__assert_func>
    from[0] = (uint16_t)(0xf000 | ((delta >> 11u) & 0x7ffu));
100076d8:	68fb      	ldr	r3, [r7, #12]
100076da:	0adb      	lsrs	r3, r3, #11
100076dc:	b29b      	uxth	r3, r3
100076de:	055b      	lsls	r3, r3, #21
100076e0:	0d5b      	lsrs	r3, r3, #21
100076e2:	b29b      	uxth	r3, r3
100076e4:	4a0b      	ldr	r2, [pc, #44]	; (10007714 <insert_branch_and_link+0x6c>)
100076e6:	4313      	orrs	r3, r2
100076e8:	b29a      	uxth	r2, r3
100076ea:	687b      	ldr	r3, [r7, #4]
100076ec:	801a      	strh	r2, [r3, #0]
    from[1] = (uint16_t)(0xf800 | (delta & 0x7ffu));
100076ee:	68fb      	ldr	r3, [r7, #12]
100076f0:	b29a      	uxth	r2, r3
100076f2:	687b      	ldr	r3, [r7, #4]
100076f4:	3302      	adds	r3, #2
100076f6:	4908      	ldr	r1, [pc, #32]	; (10007718 <insert_branch_and_link+0x70>)
100076f8:	430a      	orrs	r2, r1
100076fa:	b292      	uxth	r2, r2
100076fc:	801a      	strh	r2, [r3, #0]
}
100076fe:	46c0      	nop			; (mov r8, r8)
10007700:	46bd      	mov	sp, r7
10007702:	b006      	add	sp, #24
10007704:	bd80      	pop	{r7, pc}
10007706:	46c0      	nop			; (mov r8, r8)
10007708:	1000e138 	.word	0x1000e138
1000770c:	1000e2ec 	.word	0x1000e2ec
10007710:	1000e0b4 	.word	0x1000e0b4
10007714:	fffff000 	.word	0xfffff000
10007718:	fffff800 	.word	0xfffff800

1000771c <resolve_branch>:

static inline void *resolve_branch(uint16_t *inst) {
1000771c:	b580      	push	{r7, lr}
1000771e:	b084      	sub	sp, #16
10007720:	af00      	add	r7, sp, #0
10007722:	6078      	str	r0, [r7, #4]
    assert(0x1c == (*inst)>>11u);
10007724:	687b      	ldr	r3, [r7, #4]
10007726:	881b      	ldrh	r3, [r3, #0]
10007728:	0adb      	lsrs	r3, r3, #11
1000772a:	b29b      	uxth	r3, r3
1000772c:	2b1c      	cmp	r3, #28
1000772e:	d005      	beq.n	1000773c <resolve_branch+0x20>
10007730:	4b0d      	ldr	r3, [pc, #52]	; (10007768 <resolve_branch+0x4c>)
10007732:	4a0e      	ldr	r2, [pc, #56]	; (1000776c <resolve_branch+0x50>)
10007734:	480e      	ldr	r0, [pc, #56]	; (10007770 <resolve_branch+0x54>)
10007736:	21a7      	movs	r1, #167	; 0xa7
10007738:	f003 faf8 	bl	1000ad2c <__assert_func>
    int32_t i_addr = (*inst) << 21u;
1000773c:	687b      	ldr	r3, [r7, #4]
1000773e:	881b      	ldrh	r3, [r3, #0]
10007740:	055b      	lsls	r3, r3, #21
10007742:	60fb      	str	r3, [r7, #12]
    i_addr /= (int32_t)(1u<<21u);
10007744:	68fb      	ldr	r3, [r7, #12]
10007746:	2b00      	cmp	r3, #0
10007748:	da02      	bge.n	10007750 <resolve_branch+0x34>
1000774a:	4a0a      	ldr	r2, [pc, #40]	; (10007774 <resolve_branch+0x58>)
1000774c:	4694      	mov	ip, r2
1000774e:	4463      	add	r3, ip
10007750:	155b      	asrs	r3, r3, #21
10007752:	60fb      	str	r3, [r7, #12]
    return inst + 2 + i_addr;
10007754:	68fb      	ldr	r3, [r7, #12]
10007756:	3302      	adds	r3, #2
10007758:	005b      	lsls	r3, r3, #1
1000775a:	687a      	ldr	r2, [r7, #4]
1000775c:	18d3      	adds	r3, r2, r3
}
1000775e:	0018      	movs	r0, r3
10007760:	46bd      	mov	sp, r7
10007762:	b004      	add	sp, #16
10007764:	bd80      	pop	{r7, pc}
10007766:	46c0      	nop			; (mov r8, r8)
10007768:	1000e148 	.word	0x1000e148
1000776c:	1000e304 	.word	0x1000e304
10007770:	1000e0b4 	.word	0x1000e0b4
10007774:	001fffff 	.word	0x001fffff

10007778 <slot_diff>:

// GCC produces horrible code for subtraction of pointers here, and it was bugging me
static inline int8_t slot_diff(struct irq_handler_chain_slot *to, struct irq_handler_chain_slot *from) {
10007778:	b580      	push	{r7, lr}
1000777a:	b084      	sub	sp, #16
1000777c:	af00      	add	r7, sp, #0
1000777e:	6078      	str	r0, [r7, #4]
10007780:	6039      	str	r1, [r7, #0]
    static_assert(sizeof(struct irq_handler_chain_slot) == 12, "");
    int32_t result = 0xaaaa;
10007782:	4b08      	ldr	r3, [pc, #32]	; (100077a4 <slot_diff+0x2c>)
10007784:	60fb      	str	r3, [r7, #12]
    // return (to - from);
    // note this implementation has limited range, but is fine for plenty more than -128->127 result
    asm (".syntax unified\n"
10007786:	6839      	ldr	r1, [r7, #0]
10007788:	68fa      	ldr	r2, [r7, #12]
1000778a:	687b      	ldr	r3, [r7, #4]
1000778c:	1a5b      	subs	r3, r3, r1
1000778e:	415b      	adcs	r3, r3
10007790:	435a      	muls	r2, r3
10007792:	0d12      	lsrs	r2, r2, #20
10007794:	60fa      	str	r2, [r7, #12]
10007796:	607b      	str	r3, [r7, #4]
         "lsrs %0, 20\n"
         : "+l" (result), "+l" (to)
         : "l" (from)
         :
         );
    return (int8_t)result;
10007798:	68fb      	ldr	r3, [r7, #12]
1000779a:	b25b      	sxtb	r3, r3
}
1000779c:	0018      	movs	r0, r3
1000779e:	46bd      	mov	sp, r7
100077a0:	b004      	add	sp, #16
100077a2:	bd80      	pop	{r7, pc}
100077a4:	0000aaaa 	.word	0x0000aaaa

100077a8 <get_slot_index>:

static inline int8_t get_slot_index(struct irq_handler_chain_slot *slot) {
100077a8:	b580      	push	{r7, lr}
100077aa:	b082      	sub	sp, #8
100077ac:	af00      	add	r7, sp, #0
100077ae:	6078      	str	r0, [r7, #4]
    return slot_diff(slot, irq_handler_chain_slots);
100077b0:	4a05      	ldr	r2, [pc, #20]	; (100077c8 <get_slot_index+0x20>)
100077b2:	687b      	ldr	r3, [r7, #4]
100077b4:	0011      	movs	r1, r2
100077b6:	0018      	movs	r0, r3
100077b8:	f7ff ffde 	bl	10007778 <slot_diff>
100077bc:	0003      	movs	r3, r0
}
100077be:	0018      	movs	r0, r3
100077c0:	46bd      	mov	sp, r7
100077c2:	b002      	add	sp, #8
100077c4:	bd80      	pop	{r7, pc}
100077c6:	46c0      	nop			; (mov r8, r8)
100077c8:	200006c4 	.word	0x200006c4

100077cc <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
100077cc:	b590      	push	{r4, r7, lr}
100077ce:	b093      	sub	sp, #76	; 0x4c
100077d0:	af00      	add	r7, sp, #0
100077d2:	6078      	str	r0, [r7, #4]
100077d4:	6039      	str	r1, [r7, #0]
100077d6:	2309      	movs	r3, #9
100077d8:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100077da:	68fb      	ldr	r3, [r7, #12]
100077dc:	4a84      	ldr	r2, [pc, #528]	; (100079f0 <irq_remove_handler+0x224>)
100077de:	4694      	mov	ip, r2
100077e0:	4463      	add	r3, ip
100077e2:	009b      	lsls	r3, r3, #2
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
100077e4:	63bb      	str	r3, [r7, #56]	; 0x38
100077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100077e8:	61fb      	str	r3, [r7, #28]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100077ea:	f3ef 8310 	mrs	r3, PRIMASK
100077ee:	61bb      	str	r3, [r7, #24]
    __asm volatile ("cpsid i");
100077f0:	b672      	cpsid	i
    return status;
100077f2:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
100077f4:	617b      	str	r3, [r7, #20]
100077f6:	69fb      	ldr	r3, [r7, #28]
100077f8:	613b      	str	r3, [r7, #16]
    while (__builtin_expect(!*lock, 0));
100077fa:	46c0      	nop			; (mov r8, r8)
100077fc:	693b      	ldr	r3, [r7, #16]
100077fe:	681b      	ldr	r3, [r3, #0]
10007800:	425a      	negs	r2, r3
10007802:	4153      	adcs	r3, r2
10007804:	b2db      	uxtb	r3, r3
10007806:	2b00      	cmp	r3, #0
10007808:	d1f8      	bne.n	100077fc <irq_remove_handler+0x30>
    __asm volatile ("dmb" : : : "memory");
1000780a:	f3bf 8f5f 	dmb	sy
}
1000780e:	46c0      	nop			; (mov r8, r8)
}
10007810:	46c0      	nop			; (mov r8, r8)
}
10007812:	46c0      	nop			; (mov r8, r8)
    return save;
10007814:	697b      	ldr	r3, [r7, #20]
    uint32_t save = spin_lock_blocking(lock);
10007816:	637b      	str	r3, [r7, #52]	; 0x34
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10007818:	f7ff fdf0 	bl	100073fc <get_vtable>
1000781c:	0002      	movs	r2, r0
1000781e:	687b      	ldr	r3, [r7, #4]
10007820:	3310      	adds	r3, #16
10007822:	009b      	lsls	r3, r3, #2
10007824:	18d3      	adds	r3, r2, r3
10007826:	681b      	ldr	r3, [r3, #0]
10007828:	647b      	str	r3, [r7, #68]	; 0x44
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
1000782a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000782c:	4b71      	ldr	r3, [pc, #452]	; (100079f4 <irq_remove_handler+0x228>)
1000782e:	429a      	cmp	r2, r3
10007830:	d100      	bne.n	10007834 <irq_remove_handler+0x68>
10007832:	e0d0      	b.n	100079d6 <irq_remove_handler+0x20a>
10007834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10007836:	683b      	ldr	r3, [r7, #0]
10007838:	429a      	cmp	r2, r3
1000783a:	d100      	bne.n	1000783e <irq_remove_handler+0x72>
1000783c:	e0cb      	b.n	100079d6 <irq_remove_handler+0x20a>
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
1000783e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10007840:	0018      	movs	r0, r3
10007842:	f7ff fe7f 	bl	10007544 <is_shared_irq_raw_handler>
10007846:	1e03      	subs	r3, r0, #0
10007848:	d100      	bne.n	1000784c <irq_remove_handler+0x80>
1000784a:	e0c6      	b.n	100079da <irq_remove_handler+0x20e>
            // This is a bit tricky, as an executing IRQ handler doesn't take a lock.

            // First thing to do is to disable the IRQ in question; that takes care of calls from user code.
            // Note that a irq handler chain is local to our own core, so we don't need to worry about the other core
            bool was_enabled = irq_is_enabled(num);
1000784c:	2333      	movs	r3, #51	; 0x33
1000784e:	18fc      	adds	r4, r7, r3
10007850:	687b      	ldr	r3, [r7, #4]
10007852:	0018      	movs	r0, r3
10007854:	f7ff fe3e 	bl	100074d4 <irq_is_enabled>
10007858:	0003      	movs	r3, r0
1000785a:	7023      	strb	r3, [r4, #0]
            irq_set_enabled(num, false);
1000785c:	687b      	ldr	r3, [r7, #4]
1000785e:	2100      	movs	r1, #0
10007860:	0018      	movs	r0, r3
10007862:	f7ff fe1f 	bl	100074a4 <irq_set_enabled>
    __asm volatile ("dmb" : : : "memory");
10007866:	f3bf 8f5f 	dmb	sy
}
1000786a:	46c0      	nop			; (mov r8, r8)
            // Note we expect that the slot we are deleting is the one that is executing.
            // In particular, bad things happen if the caller were to delete the handler in the chain
            // before it. This is not an allowed use case though, and I can't imagine anyone wanting to in practice.
            // Sadly this is not something we can detect.

            uint exception = __get_current_exception();
1000786c:	f7f8 fd13 	bl	10000296 <__get_current_exception>
10007870:	0003      	movs	r3, r0
10007872:	62fb      	str	r3, [r7, #44]	; 0x2c
            hard_assert(!exception || exception == num + 16);
10007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10007876:	2b00      	cmp	r3, #0
10007878:	d00b      	beq.n	10007892 <irq_remove_handler+0xc6>
1000787a:	687b      	ldr	r3, [r7, #4]
1000787c:	3310      	adds	r3, #16
1000787e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10007880:	429a      	cmp	r2, r3
10007882:	d006      	beq.n	10007892 <irq_remove_handler+0xc6>
10007884:	4b5c      	ldr	r3, [pc, #368]	; (100079f8 <irq_remove_handler+0x22c>)
10007886:	4a5d      	ldr	r2, [pc, #372]	; (100079fc <irq_remove_handler+0x230>)
10007888:	212c      	movs	r1, #44	; 0x2c
1000788a:	31ff      	adds	r1, #255	; 0xff
1000788c:	485c      	ldr	r0, [pc, #368]	; (10007a00 <irq_remove_handler+0x234>)
1000788e:	f003 fa4d 	bl	1000ad2c <__assert_func>

            struct irq_handler_chain_slot *prev_slot = NULL;
10007892:	2300      	movs	r3, #0
10007894:	643b      	str	r3, [r7, #64]	; 0x40
            struct irq_handler_chain_slot *existing_vtable_slot = remove_thumb_bit(vtable_handler);
10007896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10007898:	0018      	movs	r0, r3
1000789a:	f7ff fdc4 	bl	10007426 <remove_thumb_bit>
1000789e:	0003      	movs	r3, r0
100078a0:	62bb      	str	r3, [r7, #40]	; 0x28
            struct irq_handler_chain_slot *to_free_slot = existing_vtable_slot;
100078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            while (to_free_slot->handler != handler) {
100078a6:	e011      	b.n	100078cc <irq_remove_handler+0x100>
                prev_slot = to_free_slot;
100078a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100078aa:	643b      	str	r3, [r7, #64]	; 0x40
                if (to_free_slot->link < 0) break;
100078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100078ae:	799b      	ldrb	r3, [r3, #6]
100078b0:	b25b      	sxtb	r3, r3
100078b2:	2b00      	cmp	r3, #0
100078b4:	db10      	blt.n	100078d8 <irq_remove_handler+0x10c>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100078b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100078b8:	799b      	ldrb	r3, [r3, #6]
100078ba:	b25b      	sxtb	r3, r3
100078bc:	001a      	movs	r2, r3
100078be:	0013      	movs	r3, r2
100078c0:	005b      	lsls	r3, r3, #1
100078c2:	189b      	adds	r3, r3, r2
100078c4:	009b      	lsls	r3, r3, #2
100078c6:	4a4f      	ldr	r2, [pc, #316]	; (10007a04 <irq_remove_handler+0x238>)
100078c8:	189b      	adds	r3, r3, r2
100078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
            while (to_free_slot->handler != handler) {
100078cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100078ce:	689b      	ldr	r3, [r3, #8]
100078d0:	683a      	ldr	r2, [r7, #0]
100078d2:	429a      	cmp	r2, r3
100078d4:	d1e8      	bne.n	100078a8 <irq_remove_handler+0xdc>
100078d6:	e000      	b.n	100078da <irq_remove_handler+0x10e>
                if (to_free_slot->link < 0) break;
100078d8:	46c0      	nop			; (mov r8, r8)
            }
            if (to_free_slot->handler == handler) {
100078da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100078dc:	689b      	ldr	r3, [r3, #8]
100078de:	683a      	ldr	r2, [r7, #0]
100078e0:	429a      	cmp	r2, r3
100078e2:	d168      	bne.n	100079b6 <irq_remove_handler+0x1ea>
                int8_t next_slot_index = to_free_slot->link;
100078e4:	2127      	movs	r1, #39	; 0x27
100078e6:	187b      	adds	r3, r7, r1
100078e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
100078ea:	7992      	ldrb	r2, [r2, #6]
100078ec:	701a      	strb	r2, [r3, #0]
                if (next_slot_index >= 0) {
100078ee:	000a      	movs	r2, r1
100078f0:	18bb      	adds	r3, r7, r2
100078f2:	781b      	ldrb	r3, [r3, #0]
100078f4:	2b7f      	cmp	r3, #127	; 0x7f
100078f6:	d839      	bhi.n	1000796c <irq_remove_handler+0x1a0>
                    // There is another slot in the chain, so copy that over us, so that our inst3 points at something valid
                    // Note this only matters in the exception case anyway, and it that case, we will skip the next handler,
                    // however in that case it's IRQ cause should immediately cause re-entry of the IRQ and the only side
                    // effect will be that there was potentially brief out of priority order execution of the handlers
                    struct irq_handler_chain_slot *next_slot = &irq_handler_chain_slots[next_slot_index];
100078f8:	18bb      	adds	r3, r7, r2
100078fa:	2200      	movs	r2, #0
100078fc:	569a      	ldrsb	r2, [r3, r2]
100078fe:	0013      	movs	r3, r2
10007900:	005b      	lsls	r3, r3, #1
10007902:	189b      	adds	r3, r3, r2
10007904:	009b      	lsls	r3, r3, #2
10007906:	4a3f      	ldr	r2, [pc, #252]	; (10007a04 <irq_remove_handler+0x238>)
10007908:	189b      	adds	r3, r3, r2
1000790a:	623b      	str	r3, [r7, #32]
                    to_free_slot->handler = next_slot->handler;
1000790c:	6a3b      	ldr	r3, [r7, #32]
1000790e:	689a      	ldr	r2, [r3, #8]
10007910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007912:	609a      	str	r2, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10007914:	6a3b      	ldr	r3, [r7, #32]
10007916:	79da      	ldrb	r2, [r3, #7]
10007918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000791a:	71da      	strb	r2, [r3, #7]
                    to_free_slot->link = next_slot->link;
1000791c:	6a3b      	ldr	r3, [r7, #32]
1000791e:	2206      	movs	r2, #6
10007920:	569a      	ldrsb	r2, [r3, r2]
10007922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007924:	719a      	strb	r2, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10007926:	6a3b      	ldr	r3, [r7, #32]
10007928:	799b      	ldrb	r3, [r3, #6]
1000792a:	b25b      	sxtb	r3, r3
1000792c:	2b00      	cmp	r3, #0
1000792e:	db0e      	blt.n	1000794e <irq_remove_handler+0x182>
                            make_branch(&to_free_slot->inst3, resolve_branch(&next_slot->inst3)) : // b mext_>slot->next_slot
10007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007932:	1d1c      	adds	r4, r3, #4
10007934:	6a3b      	ldr	r3, [r7, #32]
10007936:	3304      	adds	r3, #4
10007938:	0018      	movs	r0, r3
1000793a:	f7ff feef 	bl	1000771c <resolve_branch>
1000793e:	0003      	movs	r3, r0
10007940:	0019      	movs	r1, r3
10007942:	0020      	movs	r0, r4
10007944:	f7ff fe76 	bl	10007634 <make_branch>
10007948:	0003      	movs	r3, r0
1000794a:	001a      	movs	r2, r3
1000794c:	e001      	b.n	10007952 <irq_remove_handler+0x186>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
1000794e:	23bd      	movs	r3, #189	; 0xbd
10007950:	021a      	lsls	r2, r3, #8
10007952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007954:	809a      	strh	r2, [r3, #4]
                            0xbd00;                                                                // pop {pc}

                    // add old next slot back to free list
                    next_slot->link = irq_hander_chain_free_slot_head;
10007956:	4b2c      	ldr	r3, [pc, #176]	; (10007a08 <irq_remove_handler+0x23c>)
10007958:	2200      	movs	r2, #0
1000795a:	569a      	ldrsb	r2, [r3, r2]
1000795c:	6a3b      	ldr	r3, [r7, #32]
1000795e:	719a      	strb	r2, [r3, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10007960:	4b29      	ldr	r3, [pc, #164]	; (10007a08 <irq_remove_handler+0x23c>)
10007962:	2227      	movs	r2, #39	; 0x27
10007964:	18ba      	adds	r2, r7, r2
10007966:	7812      	ldrb	r2, [r2, #0]
10007968:	701a      	strb	r2, [r3, #0]
1000796a:	e02b      	b.n	100079c4 <irq_remove_handler+0x1f8>
                } else {
                    // Slot being removed is at the end of the chain
                    if (!exception) {
1000796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000796e:	2b00      	cmp	r3, #0
10007970:	d119      	bne.n	100079a6 <irq_remove_handler+0x1da>
                        // case when we're not in exception, we physically unlink now
                        if (prev_slot) {
10007972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10007974:	2b00      	cmp	r3, #0
10007976:	d006      	beq.n	10007986 <irq_remove_handler+0x1ba>
                            // chain is not empty
                            prev_slot->link = -1;
10007978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000797a:	22ff      	movs	r2, #255	; 0xff
1000797c:	719a      	strb	r2, [r3, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
1000797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10007980:	4a22      	ldr	r2, [pc, #136]	; (10007a0c <irq_remove_handler+0x240>)
10007982:	809a      	strh	r2, [r3, #4]
10007984:	e001      	b.n	1000798a <irq_remove_handler+0x1be>
                        } else {
                            // chain is not empty
                            vtable_handler = __unhandled_user_irq;
10007986:	4b1b      	ldr	r3, [pc, #108]	; (100079f4 <irq_remove_handler+0x228>)
10007988:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        // add slot back to free list
                        to_free_slot->link = irq_hander_chain_free_slot_head;
1000798a:	4b1f      	ldr	r3, [pc, #124]	; (10007a08 <irq_remove_handler+0x23c>)
1000798c:	2200      	movs	r2, #0
1000798e:	569a      	ldrsb	r2, [r3, r2]
10007990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007992:	719a      	strb	r2, [r3, #6]
                        irq_hander_chain_free_slot_head = get_slot_index(to_free_slot);
10007994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007996:	0018      	movs	r0, r3
10007998:	f7ff ff06 	bl	100077a8 <get_slot_index>
1000799c:	0003      	movs	r3, r0
1000799e:	001a      	movs	r2, r3
100079a0:	4b19      	ldr	r3, [pc, #100]	; (10007a08 <irq_remove_handler+0x23c>)
100079a2:	701a      	strb	r2, [r3, #0]
100079a4:	e00e      	b.n	100079c4 <irq_remove_handler+0x1f8>
                    } else {
                        // since we are the last slot we know that our inst3 hasn't executed yet, so we change
                        // it to bl to irq_handler_chain_remove_tail which will remove the slot.
                        // NOTE THAT THIS TRASHES PRIORITY AND LINK SINCE THIS IS A 4 BYTE INSTRUCTION
                        //      BUT THEY ARE NOT NEEDED NOW
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
100079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100079a8:	3304      	adds	r3, #4
100079aa:	4a19      	ldr	r2, [pc, #100]	; (10007a10 <irq_remove_handler+0x244>)
100079ac:	0011      	movs	r1, r2
100079ae:	0018      	movs	r0, r3
100079b0:	f7ff fe7a 	bl	100076a8 <insert_branch_and_link>
100079b4:	e006      	b.n	100079c4 <irq_remove_handler+0x1f8>
                    }
                }
            } else {
                assert(false); // not found
100079b6:	4b17      	ldr	r3, [pc, #92]	; (10007a14 <irq_remove_handler+0x248>)
100079b8:	4a10      	ldr	r2, [pc, #64]	; (100079fc <irq_remove_handler+0x230>)
100079ba:	2160      	movs	r1, #96	; 0x60
100079bc:	31ff      	adds	r1, #255	; 0xff
100079be:	4810      	ldr	r0, [pc, #64]	; (10007a00 <irq_remove_handler+0x234>)
100079c0:	f003 f9b4 	bl	1000ad2c <__assert_func>
            }
            irq_set_enabled(num, was_enabled);
100079c4:	2333      	movs	r3, #51	; 0x33
100079c6:	18fb      	adds	r3, r7, r3
100079c8:	781a      	ldrb	r2, [r3, #0]
100079ca:	687b      	ldr	r3, [r7, #4]
100079cc:	0011      	movs	r1, r2
100079ce:	0018      	movs	r0, r3
100079d0:	f7ff fd68 	bl	100074a4 <irq_set_enabled>
        if (is_shared_irq_raw_handler(vtable_handler)) {
100079d4:	e001      	b.n	100079da <irq_remove_handler+0x20e>
        }
#else
        assert(false); // not found
#endif
    } else {
        vtable_handler = __unhandled_user_irq;
100079d6:	4b07      	ldr	r3, [pc, #28]	; (100079f4 <irq_remove_handler+0x228>)
100079d8:	647b      	str	r3, [r7, #68]	; 0x44
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
100079da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100079dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
100079de:	687b      	ldr	r3, [r7, #4]
100079e0:	0018      	movs	r0, r3
100079e2:	f7ff fd2b 	bl	1000743c <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
100079e6:	46c0      	nop			; (mov r8, r8)
100079e8:	46bd      	mov	sp, r7
100079ea:	b013      	add	sp, #76	; 0x4c
100079ec:	bd90      	pop	{r4, r7, pc}
100079ee:	46c0      	nop			; (mov r8, r8)
100079f0:	34000040 	.word	0x34000040
100079f4:	100001cd 	.word	0x100001cd
100079f8:	1000e224 	.word	0x1000e224
100079fc:	1000e314 	.word	0x1000e314
10007a00:	1000e0b4 	.word	0x1000e0b4
10007a04:	200006c4 	.word	0x200006c4
10007a08:	20009446 	.word	0x20009446
10007a0c:	ffffbd00 	.word	0xffffbd00
10007a10:	200006fe 	.word	0x200006fe
10007a14:	1000e248 	.word	0x1000e248

10007a18 <irq_add_tail_to_free_list>:
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10007a18:	b590      	push	{r4, r7, lr}
10007a1a:	b093      	sub	sp, #76	; 0x4c
10007a1c:	af00      	add	r7, sp, #0
10007a1e:	6078      	str	r0, [r7, #4]
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
10007a20:	687b      	ldr	r3, [r7, #4]
10007a22:	0018      	movs	r0, r3
10007a24:	f7ff fcf4 	bl	10007410 <add_thumb_bit>
10007a28:	0003      	movs	r3, r0
10007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    assert(is_shared_irq_raw_handler(slot_handler));
10007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10007a2e:	0018      	movs	r0, r3
10007a30:	f7ff fd88 	bl	10007544 <is_shared_irq_raw_handler>
10007a34:	1e03      	subs	r3, r0, #0
10007a36:	d106      	bne.n	10007a46 <irq_add_tail_to_free_list+0x2e>
10007a38:	4b5a      	ldr	r3, [pc, #360]	; (10007ba4 <irq_add_tail_to_free_list+0x18c>)
10007a3a:	4a5b      	ldr	r2, [pc, #364]	; (10007ba8 <irq_add_tail_to_free_list+0x190>)
10007a3c:	21c2      	movs	r1, #194	; 0xc2
10007a3e:	0049      	lsls	r1, r1, #1
10007a40:	485a      	ldr	r0, [pc, #360]	; (10007bac <irq_add_tail_to_free_list+0x194>)
10007a42:	f003 f973 	bl	1000ad2c <__assert_func>

    uint exception = __get_current_exception();
10007a46:	f7f8 fc26 	bl	10000296 <__get_current_exception>
10007a4a:	0003      	movs	r3, r0
10007a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    assert(exception);
10007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10007a50:	2b00      	cmp	r3, #0
10007a52:	d106      	bne.n	10007a62 <irq_add_tail_to_free_list+0x4a>
10007a54:	4b56      	ldr	r3, [pc, #344]	; (10007bb0 <irq_add_tail_to_free_list+0x198>)
10007a56:	4a54      	ldr	r2, [pc, #336]	; (10007ba8 <irq_add_tail_to_free_list+0x190>)
10007a58:	2188      	movs	r1, #136	; 0x88
10007a5a:	31ff      	adds	r1, #255	; 0xff
10007a5c:	4853      	ldr	r0, [pc, #332]	; (10007bac <irq_add_tail_to_free_list+0x194>)
10007a5e:	f003 f965 	bl	1000ad2c <__assert_func>
10007a62:	2309      	movs	r3, #9
10007a64:	61bb      	str	r3, [r7, #24]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10007a66:	69bb      	ldr	r3, [r7, #24]
10007a68:	4a52      	ldr	r2, [pc, #328]	; (10007bb4 <irq_add_tail_to_free_list+0x19c>)
10007a6a:	4694      	mov	ip, r2
10007a6c:	4463      	add	r3, ip
10007a6e:	009b      	lsls	r3, r3, #2
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
10007a70:	637b      	str	r3, [r7, #52]	; 0x34
10007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10007a74:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10007a76:	f3ef 8310 	mrs	r3, PRIMASK
10007a7a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("cpsid i");
10007a7c:	b672      	cpsid	i
    return status;
10007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    uint32_t save = save_and_disable_interrupts();
10007a80:	623b      	str	r3, [r7, #32]
10007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007a84:	61fb      	str	r3, [r7, #28]
    while (__builtin_expect(!*lock, 0));
10007a86:	46c0      	nop			; (mov r8, r8)
10007a88:	69fb      	ldr	r3, [r7, #28]
10007a8a:	681b      	ldr	r3, [r3, #0]
10007a8c:	425a      	negs	r2, r3
10007a8e:	4153      	adcs	r3, r2
10007a90:	b2db      	uxtb	r3, r3
10007a92:	2b00      	cmp	r3, #0
10007a94:	d1f8      	bne.n	10007a88 <irq_add_tail_to_free_list+0x70>
    __asm volatile ("dmb" : : : "memory");
10007a96:	f3bf 8f5f 	dmb	sy
}
10007a9a:	46c0      	nop			; (mov r8, r8)
}
10007a9c:	46c0      	nop			; (mov r8, r8)
}
10007a9e:	46c0      	nop			; (mov r8, r8)
    return save;
10007aa0:	6a3b      	ldr	r3, [r7, #32]
    uint32_t save = spin_lock_blocking(lock);
10007aa2:	633b      	str	r3, [r7, #48]	; 0x30
    int8_t slot_index = get_slot_index(slot);
10007aa4:	232f      	movs	r3, #47	; 0x2f
10007aa6:	18fc      	adds	r4, r7, r3
10007aa8:	687b      	ldr	r3, [r7, #4]
10007aaa:	0018      	movs	r0, r3
10007aac:	f7ff fe7c 	bl	100077a8 <get_slot_index>
10007ab0:	0003      	movs	r3, r0
10007ab2:	7023      	strb	r3, [r4, #0]
    if (slot_handler == get_vtable()[exception]) {
10007ab4:	f7ff fca2 	bl	100073fc <get_vtable>
10007ab8:	0002      	movs	r2, r0
10007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10007abc:	009b      	lsls	r3, r3, #2
10007abe:	18d3      	adds	r3, r2, r3
10007ac0:	681b      	ldr	r3, [r3, #0]
10007ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
10007ac4:	429a      	cmp	r2, r3
10007ac6:	d108      	bne.n	10007ada <irq_add_tail_to_free_list+0xc2>
        get_vtable()[exception] = __unhandled_user_irq;
10007ac8:	f7ff fc98 	bl	100073fc <get_vtable>
10007acc:	0002      	movs	r2, r0
10007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10007ad0:	009b      	lsls	r3, r3, #2
10007ad2:	18d3      	adds	r3, r2, r3
10007ad4:	4a38      	ldr	r2, [pc, #224]	; (10007bb8 <irq_add_tail_to_free_list+0x1a0>)
10007ad6:	601a      	str	r2, [r3, #0]
10007ad8:	e041      	b.n	10007b5e <irq_add_tail_to_free_list+0x146>
    } else {
        bool __unused found = false;
10007ada:	2347      	movs	r3, #71	; 0x47
10007adc:	18fb      	adds	r3, r7, r3
10007ade:	2200      	movs	r2, #0
10007ae0:	701a      	strb	r2, [r3, #0]
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10007ae2:	2300      	movs	r3, #0
10007ae4:	643b      	str	r3, [r7, #64]	; 0x40
10007ae6:	e02b      	b.n	10007b40 <irq_add_tail_to_free_list+0x128>
            if (irq_handler_chain_slots[i].link == slot_index) {
10007ae8:	4934      	ldr	r1, [pc, #208]	; (10007bbc <irq_add_tail_to_free_list+0x1a4>)
10007aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10007aec:	0013      	movs	r3, r2
10007aee:	005b      	lsls	r3, r3, #1
10007af0:	189b      	adds	r3, r3, r2
10007af2:	009b      	lsls	r3, r3, #2
10007af4:	18cb      	adds	r3, r1, r3
10007af6:	3306      	adds	r3, #6
10007af8:	781b      	ldrb	r3, [r3, #0]
10007afa:	b25b      	sxtb	r3, r3
10007afc:	222f      	movs	r2, #47	; 0x2f
10007afe:	18ba      	adds	r2, r7, r2
10007b00:	7812      	ldrb	r2, [r2, #0]
10007b02:	b252      	sxtb	r2, r2
10007b04:	429a      	cmp	r2, r3
10007b06:	d118      	bne.n	10007b3a <irq_add_tail_to_free_list+0x122>
                irq_handler_chain_slots[i].link = -1;
10007b08:	492c      	ldr	r1, [pc, #176]	; (10007bbc <irq_add_tail_to_free_list+0x1a4>)
10007b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10007b0c:	0013      	movs	r3, r2
10007b0e:	005b      	lsls	r3, r3, #1
10007b10:	189b      	adds	r3, r3, r2
10007b12:	009b      	lsls	r3, r3, #2
10007b14:	18cb      	adds	r3, r1, r3
10007b16:	3306      	adds	r3, #6
10007b18:	22ff      	movs	r2, #255	; 0xff
10007b1a:	701a      	strb	r2, [r3, #0]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10007b1c:	4927      	ldr	r1, [pc, #156]	; (10007bbc <irq_add_tail_to_free_list+0x1a4>)
10007b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10007b20:	0013      	movs	r3, r2
10007b22:	005b      	lsls	r3, r3, #1
10007b24:	189b      	adds	r3, r3, r2
10007b26:	009b      	lsls	r3, r3, #2
10007b28:	18cb      	adds	r3, r1, r3
10007b2a:	3304      	adds	r3, #4
10007b2c:	4a24      	ldr	r2, [pc, #144]	; (10007bc0 <irq_add_tail_to_free_list+0x1a8>)
10007b2e:	801a      	strh	r2, [r3, #0]
                found = true;
10007b30:	2347      	movs	r3, #71	; 0x47
10007b32:	18fb      	adds	r3, r7, r3
10007b34:	2201      	movs	r2, #1
10007b36:	701a      	strb	r2, [r3, #0]
                break;
10007b38:	e005      	b.n	10007b46 <irq_add_tail_to_free_list+0x12e>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10007b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10007b3c:	3301      	adds	r3, #1
10007b3e:	643b      	str	r3, [r7, #64]	; 0x40
10007b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10007b42:	2b03      	cmp	r3, #3
10007b44:	d9d0      	bls.n	10007ae8 <irq_add_tail_to_free_list+0xd0>
            }
        }
        assert(found);
10007b46:	2347      	movs	r3, #71	; 0x47
10007b48:	18fb      	adds	r3, r7, r3
10007b4a:	781b      	ldrb	r3, [r3, #0]
10007b4c:	2b00      	cmp	r3, #0
10007b4e:	d106      	bne.n	10007b5e <irq_add_tail_to_free_list+0x146>
10007b50:	4b1c      	ldr	r3, [pc, #112]	; (10007bc4 <irq_add_tail_to_free_list+0x1ac>)
10007b52:	4a15      	ldr	r2, [pc, #84]	; (10007ba8 <irq_add_tail_to_free_list+0x190>)
10007b54:	21cc      	movs	r1, #204	; 0xcc
10007b56:	0049      	lsls	r1, r1, #1
10007b58:	4814      	ldr	r0, [pc, #80]	; (10007bac <irq_add_tail_to_free_list+0x194>)
10007b5a:	f003 f8e7 	bl	1000ad2c <__assert_func>
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10007b5e:	4b1a      	ldr	r3, [pc, #104]	; (10007bc8 <irq_add_tail_to_free_list+0x1b0>)
10007b60:	2200      	movs	r2, #0
10007b62:	569a      	ldrsb	r2, [r3, r2]
10007b64:	687b      	ldr	r3, [r7, #4]
10007b66:	719a      	strb	r2, [r3, #6]
    irq_hander_chain_free_slot_head = slot_index;
10007b68:	4b17      	ldr	r3, [pc, #92]	; (10007bc8 <irq_add_tail_to_free_list+0x1b0>)
10007b6a:	222f      	movs	r2, #47	; 0x2f
10007b6c:	18ba      	adds	r2, r7, r2
10007b6e:	7812      	ldrb	r2, [r2, #0]
10007b70:	701a      	strb	r2, [r3, #0]
10007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10007b74:	617b      	str	r3, [r7, #20]
10007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007b78:	613b      	str	r3, [r7, #16]
10007b7a:	697b      	ldr	r3, [r7, #20]
10007b7c:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
10007b7e:	f3bf 8f5f 	dmb	sy
}
10007b82:	46c0      	nop			; (mov r8, r8)
}
10007b84:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10007b86:	68fb      	ldr	r3, [r7, #12]
10007b88:	2200      	movs	r2, #0
10007b8a:	601a      	str	r2, [r3, #0]
}
10007b8c:	46c0      	nop			; (mov r8, r8)
10007b8e:	693b      	ldr	r3, [r7, #16]
10007b90:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10007b92:	68bb      	ldr	r3, [r7, #8]
10007b94:	f383 8810 	msr	PRIMASK, r3
}
10007b98:	46c0      	nop			; (mov r8, r8)
}
10007b9a:	46c0      	nop			; (mov r8, r8)
    spin_unlock(lock, save);
}
10007b9c:	46c0      	nop			; (mov r8, r8)
10007b9e:	46bd      	mov	sp, r7
10007ba0:	b013      	add	sp, #76	; 0x4c
10007ba2:	bd90      	pop	{r4, r7, pc}
10007ba4:	1000e250 	.word	0x1000e250
10007ba8:	1000e328 	.word	0x1000e328
10007bac:	1000e0b4 	.word	0x1000e0b4
10007bb0:	1000e278 	.word	0x1000e278
10007bb4:	34000040 	.word	0x34000040
10007bb8:	100001cd 	.word	0x100001cd
10007bbc:	200006c4 	.word	0x200006c4
10007bc0:	ffffbd00 	.word	0xffffbd00
10007bc4:	1000e284 	.word	0x1000e284
10007bc8:	20009446 	.word	0x20009446

10007bcc <irq_init_priorities>:
#endif

void irq_init_priorities() {
10007bcc:	b580      	push	{r7, lr}
10007bce:	b084      	sub	sp, #16
10007bd0:	af00      	add	r7, sp, #0
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    static_assert(!(NUM_IRQS & 3), "");
    uint32_t prio4 = (PICO_DEFAULT_IRQ_PRIORITY & 0xff) * 0x1010101u;
10007bd2:	4b0b      	ldr	r3, [pc, #44]	; (10007c00 <irq_init_priorities+0x34>)
10007bd4:	607b      	str	r3, [r7, #4]
    io_rw_32 * p = (io_rw_32 *)(PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET);
10007bd6:	4b0b      	ldr	r3, [pc, #44]	; (10007c04 <irq_init_priorities+0x38>)
10007bd8:	60fb      	str	r3, [r7, #12]
    for (uint i = 0; i < NUM_IRQS / 4; i++) {
10007bda:	2300      	movs	r3, #0
10007bdc:	60bb      	str	r3, [r7, #8]
10007bde:	e007      	b.n	10007bf0 <irq_init_priorities+0x24>
        *p++ = prio4;
10007be0:	68fb      	ldr	r3, [r7, #12]
10007be2:	1d1a      	adds	r2, r3, #4
10007be4:	60fa      	str	r2, [r7, #12]
10007be6:	687a      	ldr	r2, [r7, #4]
10007be8:	601a      	str	r2, [r3, #0]
    for (uint i = 0; i < NUM_IRQS / 4; i++) {
10007bea:	68bb      	ldr	r3, [r7, #8]
10007bec:	3301      	adds	r3, #1
10007bee:	60bb      	str	r3, [r7, #8]
10007bf0:	68bb      	ldr	r3, [r7, #8]
10007bf2:	2b07      	cmp	r3, #7
10007bf4:	d9f4      	bls.n	10007be0 <irq_init_priorities+0x14>
    }
#endif
}
10007bf6:	46c0      	nop			; (mov r8, r8)
10007bf8:	46c0      	nop			; (mov r8, r8)
10007bfa:	46bd      	mov	sp, r7
10007bfc:	b004      	add	sp, #16
10007bfe:	bd80      	pop	{r7, pc}
10007c00:	80808080 	.word	0x80808080
10007c04:	e000e400 	.word	0xe000e400

10007c08 <_pio_major_instr_bits>:
    pio_isr = 6u | _PIO_INVALID_SET_DEST,
    pio_osr = 7u | _PIO_INVALID_OUT_DEST | _PIO_INVALID_SET_DEST,
    pio_exec_out = 7u | _PIO_INVALID_IN_SRC | _PIO_INVALID_SET_DEST | _PIO_INVALID_MOV_SRC | _PIO_INVALID_MOV_DEST,
};

static inline uint _pio_major_instr_bits(uint instr) {
10007c08:	b580      	push	{r7, lr}
10007c0a:	b082      	sub	sp, #8
10007c0c:	af00      	add	r7, sp, #0
10007c0e:	6078      	str	r0, [r7, #4]
    return instr & 0xe000u;
10007c10:	687a      	ldr	r2, [r7, #4]
10007c12:	23e0      	movs	r3, #224	; 0xe0
10007c14:	021b      	lsls	r3, r3, #8
10007c16:	4013      	ands	r3, r2
}
10007c18:	0018      	movs	r0, r3
10007c1a:	46bd      	mov	sp, r7
10007c1c:	b002      	add	sp, #8
10007c1e:	bd80      	pop	{r7, pc}

10007c20 <_pio_encode_instr_and_args>:

static inline uint _pio_encode_instr_and_args(enum pio_instr_bits instr_bits, uint arg1, uint arg2) {
10007c20:	b580      	push	{r7, lr}
10007c22:	b084      	sub	sp, #16
10007c24:	af00      	add	r7, sp, #0
10007c26:	60b9      	str	r1, [r7, #8]
10007c28:	607a      	str	r2, [r7, #4]
10007c2a:	210e      	movs	r1, #14
10007c2c:	187b      	adds	r3, r7, r1
10007c2e:	1c02      	adds	r2, r0, #0
10007c30:	801a      	strh	r2, [r3, #0]
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
10007c32:	187b      	adds	r3, r7, r1
10007c34:	881a      	ldrh	r2, [r3, #0]
10007c36:	68bb      	ldr	r3, [r7, #8]
10007c38:	015b      	lsls	r3, r3, #5
10007c3a:	431a      	orrs	r2, r3
10007c3c:	687b      	ldr	r3, [r7, #4]
10007c3e:	211f      	movs	r1, #31
10007c40:	400b      	ands	r3, r1
10007c42:	4313      	orrs	r3, r2
}
10007c44:	0018      	movs	r0, r3
10007c46:	46bd      	mov	sp, r7
10007c48:	b004      	add	sp, #16
10007c4a:	bd80      	pop	{r7, pc}

10007c4c <_pio_encode_instr_and_src_dest>:

static inline uint _pio_encode_instr_and_src_dest(enum pio_instr_bits instr_bits, enum pio_src_dest dest, uint value) {
10007c4c:	b580      	push	{r7, lr}
10007c4e:	b082      	sub	sp, #8
10007c50:	af00      	add	r7, sp, #0
10007c52:	603a      	str	r2, [r7, #0]
10007c54:	1dbb      	adds	r3, r7, #6
10007c56:	1c02      	adds	r2, r0, #0
10007c58:	801a      	strh	r2, [r3, #0]
10007c5a:	1d7b      	adds	r3, r7, #5
10007c5c:	1c0a      	adds	r2, r1, #0
10007c5e:	701a      	strb	r2, [r3, #0]
    return _pio_encode_instr_and_args(instr_bits, dest & 7u, value);
10007c60:	1d7b      	adds	r3, r7, #5
10007c62:	781b      	ldrb	r3, [r3, #0]
10007c64:	2207      	movs	r2, #7
10007c66:	4013      	ands	r3, r2
10007c68:	0019      	movs	r1, r3
10007c6a:	683a      	ldr	r2, [r7, #0]
10007c6c:	1dbb      	adds	r3, r7, #6
10007c6e:	881b      	ldrh	r3, [r3, #0]
10007c70:	0018      	movs	r0, r3
10007c72:	f7ff ffd5 	bl	10007c20 <_pio_encode_instr_and_args>
10007c76:	0003      	movs	r3, r0
}
10007c78:	0018      	movs	r0, r3
10007c7a:	46bd      	mov	sp, r7
10007c7c:	b002      	add	sp, #8
10007c7e:	bd80      	pop	{r7, pc}

10007c80 <pio_encode_jmp>:
 *
 * \param addr The target address 0-31 (an absolute address within the PIO instruction memory)
 * \return The instruction encoding with 0 delay and no side set value
 * \see pio_encode_delay, pio_encode_sideset, pio_encode_sideset_opt
 */
static inline uint pio_encode_jmp(uint addr) {
10007c80:	b580      	push	{r7, lr}
10007c82:	b082      	sub	sp, #8
10007c84:	af00      	add	r7, sp, #0
10007c86:	6078      	str	r0, [r7, #4]
    return _pio_encode_instr_and_args(pio_instr_bits_jmp, 0, addr);
10007c88:	687b      	ldr	r3, [r7, #4]
10007c8a:	001a      	movs	r2, r3
10007c8c:	2100      	movs	r1, #0
10007c8e:	2000      	movs	r0, #0
10007c90:	f7ff ffc6 	bl	10007c20 <_pio_encode_instr_and_args>
10007c94:	0003      	movs	r3, r0
}
10007c96:	0018      	movs	r0, r3
10007c98:	46bd      	mov	sp, r7
10007c9a:	b002      	add	sp, #8
10007c9c:	bd80      	pop	{r7, pc}

10007c9e <pio_encode_set>:
 * \param dest The destination to apply the value to
 * \param value The value 0-31
 * \return The instruction encoding with 0 delay and no side set value
 * \see pio_encode_delay, pio_encode_sideset, pio_encode_sideset_opt
 */
static inline uint pio_encode_set(enum pio_src_dest dest, uint value) {
10007c9e:	b580      	push	{r7, lr}
10007ca0:	b082      	sub	sp, #8
10007ca2:	af00      	add	r7, sp, #0
10007ca4:	0002      	movs	r2, r0
10007ca6:	6039      	str	r1, [r7, #0]
10007ca8:	1dfb      	adds	r3, r7, #7
10007caa:	701a      	strb	r2, [r3, #0]
    valid_params_if(PIO_INSTRUCTIONS, !(dest & _PIO_INVALID_SET_DEST));
    return _pio_encode_instr_and_src_dest(pio_instr_bits_set, dest, value);
10007cac:	683a      	ldr	r2, [r7, #0]
10007cae:	1dfb      	adds	r3, r7, #7
10007cb0:	7819      	ldrb	r1, [r3, #0]
10007cb2:	23e0      	movs	r3, #224	; 0xe0
10007cb4:	021b      	lsls	r3, r3, #8
10007cb6:	0018      	movs	r0, r3
10007cb8:	f7ff ffc8 	bl	10007c4c <_pio_encode_instr_and_src_dest>
10007cbc:	0003      	movs	r3, r0
}
10007cbe:	0018      	movs	r0, r3
10007cc0:	46bd      	mov	sp, r7
10007cc2:	b002      	add	sp, #8
10007cc4:	bd80      	pop	{r7, pc}

10007cc6 <check_sm_param>:
    uint32_t execctrl;
    uint32_t shiftctrl;
    uint32_t pinctrl;
} pio_sm_config;

static inline void check_sm_param(__unused uint sm) {
10007cc6:	b580      	push	{r7, lr}
10007cc8:	b082      	sub	sp, #8
10007cca:	af00      	add	r7, sp, #0
10007ccc:	6078      	str	r0, [r7, #4]
    valid_params_if(PIO, sm < NUM_PIO_STATE_MACHINES);
}
10007cce:	46c0      	nop			; (mov r8, r8)
10007cd0:	46bd      	mov	sp, r7
10007cd2:	b002      	add	sp, #8
10007cd4:	bd80      	pop	{r7, pc}

10007cd6 <check_pio_param>:
static inline void check_sm_mask(__unused uint mask) {
    valid_params_if(PIO, mask < (1u << NUM_PIO_STATE_MACHINES));
}


static inline void check_pio_param(__unused PIO pio) {
10007cd6:	b580      	push	{r7, lr}
10007cd8:	b082      	sub	sp, #8
10007cda:	af00      	add	r7, sp, #0
10007cdc:	6078      	str	r0, [r7, #4]
    valid_params_if(PIO, pio == pio0 || pio == pio1);
}
10007cde:	46c0      	nop			; (mov r8, r8)
10007ce0:	46bd      	mov	sp, r7
10007ce2:	b002      	add	sp, #8
10007ce4:	bd80      	pop	{r7, pc}

10007ce6 <sm_config_set_clkdiv_int_frac>:
 * \param c Pointer to the configuration structure to modify
 * \param div_int Integer part of the divisor
 * \param div_frac Fractional part in 1/256ths
 * \sa sm_config_set_clkdiv()
 */
static inline void sm_config_set_clkdiv_int_frac(pio_sm_config *c, uint16_t div_int, uint8_t div_frac) {
10007ce6:	b580      	push	{r7, lr}
10007ce8:	b082      	sub	sp, #8
10007cea:	af00      	add	r7, sp, #0
10007cec:	6078      	str	r0, [r7, #4]
10007cee:	0008      	movs	r0, r1
10007cf0:	0011      	movs	r1, r2
10007cf2:	1cbb      	adds	r3, r7, #2
10007cf4:	1c02      	adds	r2, r0, #0
10007cf6:	801a      	strh	r2, [r3, #0]
10007cf8:	1c7b      	adds	r3, r7, #1
10007cfa:	1c0a      	adds	r2, r1, #0
10007cfc:	701a      	strb	r2, [r3, #0]
    invalid_params_if(PIO, div_int == 0 && div_frac != 0);
    c->clkdiv =
            (((uint)div_frac) << PIO_SM0_CLKDIV_FRAC_LSB) |
10007cfe:	1c7b      	adds	r3, r7, #1
10007d00:	781b      	ldrb	r3, [r3, #0]
10007d02:	021a      	lsls	r2, r3, #8
            (((uint)div_int) << PIO_SM0_CLKDIV_INT_LSB);
10007d04:	1cbb      	adds	r3, r7, #2
10007d06:	881b      	ldrh	r3, [r3, #0]
10007d08:	041b      	lsls	r3, r3, #16
            (((uint)div_frac) << PIO_SM0_CLKDIV_FRAC_LSB) |
10007d0a:	431a      	orrs	r2, r3
    c->clkdiv =
10007d0c:	687b      	ldr	r3, [r7, #4]
10007d0e:	601a      	str	r2, [r3, #0]
}
10007d10:	46c0      	nop			; (mov r8, r8)
10007d12:	46bd      	mov	sp, r7
10007d14:	b002      	add	sp, #8
10007d16:	bd80      	pop	{r7, pc}

10007d18 <sm_config_set_wrap>:
 * \param c Pointer to the configuration structure to modify
 * \param wrap_target the instruction memory address to wrap to
 * \param wrap        the instruction memory address after which to set the program counter to wrap_target
 *                    if the instruction does not itself update the program_counter
 */
static inline void sm_config_set_wrap(pio_sm_config *c, uint wrap_target, uint wrap) {
10007d18:	b580      	push	{r7, lr}
10007d1a:	b084      	sub	sp, #16
10007d1c:	af00      	add	r7, sp, #0
10007d1e:	60f8      	str	r0, [r7, #12]
10007d20:	60b9      	str	r1, [r7, #8]
10007d22:	607a      	str	r2, [r7, #4]
    valid_params_if(PIO, wrap < PIO_INSTRUCTION_COUNT);
    valid_params_if(PIO, wrap_target < PIO_INSTRUCTION_COUNT);
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10007d24:	68fb      	ldr	r3, [r7, #12]
10007d26:	685b      	ldr	r3, [r3, #4]
10007d28:	4a06      	ldr	r2, [pc, #24]	; (10007d44 <sm_config_set_wrap+0x2c>)
10007d2a:	401a      	ands	r2, r3
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10007d2c:	68bb      	ldr	r3, [r7, #8]
10007d2e:	01db      	lsls	r3, r3, #7
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10007d30:	431a      	orrs	r2, r3
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
10007d32:	687b      	ldr	r3, [r7, #4]
10007d34:	031b      	lsls	r3, r3, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10007d36:	431a      	orrs	r2, r3
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10007d38:	68fb      	ldr	r3, [r7, #12]
10007d3a:	605a      	str	r2, [r3, #4]
}
10007d3c:	46c0      	nop			; (mov r8, r8)
10007d3e:	46bd      	mov	sp, r7
10007d40:	b004      	add	sp, #16
10007d42:	bd80      	pop	{r7, pc}
10007d44:	fffe007f 	.word	0xfffe007f

10007d48 <sm_config_set_in_shift>:
 * \param c Pointer to the configuration structure to modify
 * \param shift_right true to shift ISR to right, false to shift ISR to left
 * \param autopush whether autopush is enabled
 * \param push_threshold threshold in bits to shift in before auto/conditional re-pushing of the ISR
 */
static inline void sm_config_set_in_shift(pio_sm_config *c, bool shift_right, bool autopush, uint push_threshold) {
10007d48:	b590      	push	{r4, r7, lr}
10007d4a:	b085      	sub	sp, #20
10007d4c:	af00      	add	r7, sp, #0
10007d4e:	60f8      	str	r0, [r7, #12]
10007d50:	0008      	movs	r0, r1
10007d52:	0011      	movs	r1, r2
10007d54:	607b      	str	r3, [r7, #4]
10007d56:	240b      	movs	r4, #11
10007d58:	193b      	adds	r3, r7, r4
10007d5a:	1c02      	adds	r2, r0, #0
10007d5c:	701a      	strb	r2, [r3, #0]
10007d5e:	230a      	movs	r3, #10
10007d60:	18fb      	adds	r3, r7, r3
10007d62:	1c0a      	adds	r2, r1, #0
10007d64:	701a      	strb	r2, [r3, #0]
    valid_params_if(PIO, push_threshold <= 32);
    c->shiftctrl = (c->shiftctrl &
10007d66:	68fb      	ldr	r3, [r7, #12]
10007d68:	689b      	ldr	r3, [r3, #8]
10007d6a:	4a10      	ldr	r2, [pc, #64]	; (10007dac <sm_config_set_in_shift+0x64>)
10007d6c:	401a      	ands	r2, r3
                    ~(PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_BITS |
                      PIO_SM0_SHIFTCTRL_AUTOPUSH_BITS |
                      PIO_SM0_SHIFTCTRL_PUSH_THRESH_BITS)) |
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_LSB) |
10007d6e:	193b      	adds	r3, r7, r4
10007d70:	781b      	ldrb	r3, [r3, #0]
10007d72:	2b00      	cmp	r3, #0
10007d74:	d002      	beq.n	10007d7c <sm_config_set_in_shift+0x34>
10007d76:	2380      	movs	r3, #128	; 0x80
10007d78:	02db      	lsls	r3, r3, #11
10007d7a:	e000      	b.n	10007d7e <sm_config_set_in_shift+0x36>
10007d7c:	2300      	movs	r3, #0
                      PIO_SM0_SHIFTCTRL_PUSH_THRESH_BITS)) |
10007d7e:	431a      	orrs	r2, r3
                   (bool_to_bit(autopush) << PIO_SM0_SHIFTCTRL_AUTOPUSH_LSB) |
10007d80:	230a      	movs	r3, #10
10007d82:	18fb      	adds	r3, r7, r3
10007d84:	781b      	ldrb	r3, [r3, #0]
10007d86:	2b00      	cmp	r3, #0
10007d88:	d002      	beq.n	10007d90 <sm_config_set_in_shift+0x48>
10007d8a:	2380      	movs	r3, #128	; 0x80
10007d8c:	025b      	lsls	r3, r3, #9
10007d8e:	e000      	b.n	10007d92 <sm_config_set_in_shift+0x4a>
10007d90:	2300      	movs	r3, #0
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_LSB) |
10007d92:	431a      	orrs	r2, r3
                   ((push_threshold & 0x1fu) << PIO_SM0_SHIFTCTRL_PUSH_THRESH_LSB);
10007d94:	687b      	ldr	r3, [r7, #4]
10007d96:	0519      	lsls	r1, r3, #20
10007d98:	23f8      	movs	r3, #248	; 0xf8
10007d9a:	045b      	lsls	r3, r3, #17
10007d9c:	400b      	ands	r3, r1
                   (bool_to_bit(autopush) << PIO_SM0_SHIFTCTRL_AUTOPUSH_LSB) |
10007d9e:	431a      	orrs	r2, r3
    c->shiftctrl = (c->shiftctrl &
10007da0:	68fb      	ldr	r3, [r7, #12]
10007da2:	609a      	str	r2, [r3, #8]
}
10007da4:	46c0      	nop			; (mov r8, r8)
10007da6:	46bd      	mov	sp, r7
10007da8:	b005      	add	sp, #20
10007daa:	bd90      	pop	{r4, r7, pc}
10007dac:	fe0affff 	.word	0xfe0affff

10007db0 <sm_config_set_out_shift>:
 * \param c Pointer to the configuration structure to modify
 * \param shift_right true to shift OSR to right, false to shift OSR to left
 * \param autopull whether autopull is enabled
 * \param pull_threshold threshold in bits to shift out before auto/conditional re-pulling of the OSR
 */
static inline void sm_config_set_out_shift(pio_sm_config *c, bool shift_right, bool autopull, uint pull_threshold) {
10007db0:	b590      	push	{r4, r7, lr}
10007db2:	b085      	sub	sp, #20
10007db4:	af00      	add	r7, sp, #0
10007db6:	60f8      	str	r0, [r7, #12]
10007db8:	0008      	movs	r0, r1
10007dba:	0011      	movs	r1, r2
10007dbc:	607b      	str	r3, [r7, #4]
10007dbe:	240b      	movs	r4, #11
10007dc0:	193b      	adds	r3, r7, r4
10007dc2:	1c02      	adds	r2, r0, #0
10007dc4:	701a      	strb	r2, [r3, #0]
10007dc6:	230a      	movs	r3, #10
10007dc8:	18fb      	adds	r3, r7, r3
10007dca:	1c0a      	adds	r2, r1, #0
10007dcc:	701a      	strb	r2, [r3, #0]
    valid_params_if(PIO, pull_threshold <= 32);
    c->shiftctrl = (c->shiftctrl &
10007dce:	68fb      	ldr	r3, [r7, #12]
10007dd0:	689b      	ldr	r3, [r3, #8]
10007dd2:	4a10      	ldr	r2, [pc, #64]	; (10007e14 <sm_config_set_out_shift+0x64>)
10007dd4:	401a      	ands	r2, r3
                    ~(PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_BITS |
                      PIO_SM0_SHIFTCTRL_AUTOPULL_BITS |
                      PIO_SM0_SHIFTCTRL_PULL_THRESH_BITS)) |
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_LSB) |
10007dd6:	193b      	adds	r3, r7, r4
10007dd8:	781b      	ldrb	r3, [r3, #0]
10007dda:	2b00      	cmp	r3, #0
10007ddc:	d002      	beq.n	10007de4 <sm_config_set_out_shift+0x34>
10007dde:	2380      	movs	r3, #128	; 0x80
10007de0:	031b      	lsls	r3, r3, #12
10007de2:	e000      	b.n	10007de6 <sm_config_set_out_shift+0x36>
10007de4:	2300      	movs	r3, #0
                      PIO_SM0_SHIFTCTRL_PULL_THRESH_BITS)) |
10007de6:	431a      	orrs	r2, r3
                   (bool_to_bit(autopull) << PIO_SM0_SHIFTCTRL_AUTOPULL_LSB) |
10007de8:	230a      	movs	r3, #10
10007dea:	18fb      	adds	r3, r7, r3
10007dec:	781b      	ldrb	r3, [r3, #0]
10007dee:	2b00      	cmp	r3, #0
10007df0:	d002      	beq.n	10007df8 <sm_config_set_out_shift+0x48>
10007df2:	2380      	movs	r3, #128	; 0x80
10007df4:	029b      	lsls	r3, r3, #10
10007df6:	e000      	b.n	10007dfa <sm_config_set_out_shift+0x4a>
10007df8:	2300      	movs	r3, #0
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_LSB) |
10007dfa:	431a      	orrs	r2, r3
                   ((pull_threshold & 0x1fu) << PIO_SM0_SHIFTCTRL_PULL_THRESH_LSB);
10007dfc:	687b      	ldr	r3, [r7, #4]
10007dfe:	0659      	lsls	r1, r3, #25
10007e00:	23f8      	movs	r3, #248	; 0xf8
10007e02:	059b      	lsls	r3, r3, #22
10007e04:	400b      	ands	r3, r1
                   (bool_to_bit(autopull) << PIO_SM0_SHIFTCTRL_AUTOPULL_LSB) |
10007e06:	431a      	orrs	r2, r3
    c->shiftctrl = (c->shiftctrl &
10007e08:	68fb      	ldr	r3, [r7, #12]
10007e0a:	609a      	str	r2, [r3, #8]
}
10007e0c:	46c0      	nop			; (mov r8, r8)
10007e0e:	46bd      	mov	sp, r7
10007e10:	b005      	add	sp, #20
10007e12:	bd90      	pop	{r4, r7, pc}
10007e14:	c1f5ffff 	.word	0xc1f5ffff

10007e18 <pio_get_default_sm_config>:
 * Out Special | sticky=false, has_enable_pin=false, enable_pin_index=0
 * Mov Status | status_sel=STATUS_TX_LESSTHAN, n=0
 *
 * \return the default state machine configuration which can then be modified.
 */
static inline pio_sm_config pio_get_default_sm_config(void) {
10007e18:	b590      	push	{r4, r7, lr}
10007e1a:	b087      	sub	sp, #28
10007e1c:	af00      	add	r7, sp, #0
10007e1e:	6078      	str	r0, [r7, #4]
    pio_sm_config c = {0, 0, 0, 0};
10007e20:	2408      	movs	r4, #8
10007e22:	193b      	adds	r3, r7, r4
10007e24:	0018      	movs	r0, r3
10007e26:	2310      	movs	r3, #16
10007e28:	001a      	movs	r2, r3
10007e2a:	2100      	movs	r1, #0
10007e2c:	f005 f894 	bl	1000cf58 <__wrap_memset>
    sm_config_set_clkdiv_int_frac(&c, 1, 0);
10007e30:	193b      	adds	r3, r7, r4
10007e32:	2200      	movs	r2, #0
10007e34:	2101      	movs	r1, #1
10007e36:	0018      	movs	r0, r3
10007e38:	f7ff ff55 	bl	10007ce6 <sm_config_set_clkdiv_int_frac>
    sm_config_set_wrap(&c, 0, 31);
10007e3c:	193b      	adds	r3, r7, r4
10007e3e:	221f      	movs	r2, #31
10007e40:	2100      	movs	r1, #0
10007e42:	0018      	movs	r0, r3
10007e44:	f7ff ff68 	bl	10007d18 <sm_config_set_wrap>
    sm_config_set_in_shift(&c, true, false, 32);
10007e48:	1938      	adds	r0, r7, r4
10007e4a:	2320      	movs	r3, #32
10007e4c:	2200      	movs	r2, #0
10007e4e:	2101      	movs	r1, #1
10007e50:	f7ff ff7a 	bl	10007d48 <sm_config_set_in_shift>
    sm_config_set_out_shift(&c, true, false, 32);
10007e54:	1938      	adds	r0, r7, r4
10007e56:	2320      	movs	r3, #32
10007e58:	2200      	movs	r2, #0
10007e5a:	2101      	movs	r1, #1
10007e5c:	f7ff ffa8 	bl	10007db0 <sm_config_set_out_shift>
    return c;
10007e60:	687b      	ldr	r3, [r7, #4]
10007e62:	193a      	adds	r2, r7, r4
10007e64:	ca13      	ldmia	r2!, {r0, r1, r4}
10007e66:	c313      	stmia	r3!, {r0, r1, r4}
10007e68:	6812      	ldr	r2, [r2, #0]
10007e6a:	601a      	str	r2, [r3, #0]
}
10007e6c:	6878      	ldr	r0, [r7, #4]
10007e6e:	46bd      	mov	sp, r7
10007e70:	b007      	add	sp, #28
10007e72:	bd90      	pop	{r4, r7, pc}

10007e74 <pio_sm_set_config>:
 *
 * \param pio Handle to PIO instance; either \ref pio0 or \ref pio1
 * \param sm State machine index (0..3)
 * \param config the configuration to apply
*/
static inline void pio_sm_set_config(PIO pio, uint sm, const pio_sm_config *config) {
10007e74:	b590      	push	{r4, r7, lr}
10007e76:	b085      	sub	sp, #20
10007e78:	af00      	add	r7, sp, #0
10007e7a:	60f8      	str	r0, [r7, #12]
10007e7c:	60b9      	str	r1, [r7, #8]
10007e7e:	607a      	str	r2, [r7, #4]
    check_pio_param(pio);
10007e80:	68fb      	ldr	r3, [r7, #12]
10007e82:	0018      	movs	r0, r3
10007e84:	f7ff ff27 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
10007e88:	68bb      	ldr	r3, [r7, #8]
10007e8a:	0018      	movs	r0, r3
10007e8c:	f7ff ff1b 	bl	10007cc6 <check_sm_param>
    pio->sm[sm].clkdiv = config->clkdiv;
10007e90:	687b      	ldr	r3, [r7, #4]
10007e92:	6819      	ldr	r1, [r3, #0]
10007e94:	68f8      	ldr	r0, [r7, #12]
10007e96:	68ba      	ldr	r2, [r7, #8]
10007e98:	24c8      	movs	r4, #200	; 0xc8
10007e9a:	0013      	movs	r3, r2
10007e9c:	005b      	lsls	r3, r3, #1
10007e9e:	189b      	adds	r3, r3, r2
10007ea0:	00db      	lsls	r3, r3, #3
10007ea2:	18c3      	adds	r3, r0, r3
10007ea4:	191b      	adds	r3, r3, r4
10007ea6:	6019      	str	r1, [r3, #0]
    pio->sm[sm].execctrl = config->execctrl;
10007ea8:	687b      	ldr	r3, [r7, #4]
10007eaa:	6859      	ldr	r1, [r3, #4]
10007eac:	68f8      	ldr	r0, [r7, #12]
10007eae:	68ba      	ldr	r2, [r7, #8]
10007eb0:	24cc      	movs	r4, #204	; 0xcc
10007eb2:	0013      	movs	r3, r2
10007eb4:	005b      	lsls	r3, r3, #1
10007eb6:	189b      	adds	r3, r3, r2
10007eb8:	00db      	lsls	r3, r3, #3
10007eba:	18c3      	adds	r3, r0, r3
10007ebc:	191b      	adds	r3, r3, r4
10007ebe:	6019      	str	r1, [r3, #0]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10007ec0:	687b      	ldr	r3, [r7, #4]
10007ec2:	6899      	ldr	r1, [r3, #8]
10007ec4:	68f8      	ldr	r0, [r7, #12]
10007ec6:	68ba      	ldr	r2, [r7, #8]
10007ec8:	24d0      	movs	r4, #208	; 0xd0
10007eca:	0013      	movs	r3, r2
10007ecc:	005b      	lsls	r3, r3, #1
10007ece:	189b      	adds	r3, r3, r2
10007ed0:	00db      	lsls	r3, r3, #3
10007ed2:	18c3      	adds	r3, r0, r3
10007ed4:	191b      	adds	r3, r3, r4
10007ed6:	6019      	str	r1, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
10007ed8:	687b      	ldr	r3, [r7, #4]
10007eda:	68d9      	ldr	r1, [r3, #12]
10007edc:	68f8      	ldr	r0, [r7, #12]
10007ede:	68ba      	ldr	r2, [r7, #8]
10007ee0:	24dc      	movs	r4, #220	; 0xdc
10007ee2:	0013      	movs	r3, r2
10007ee4:	005b      	lsls	r3, r3, #1
10007ee6:	189b      	adds	r3, r3, r2
10007ee8:	00db      	lsls	r3, r3, #3
10007eea:	18c3      	adds	r3, r0, r3
10007eec:	191b      	adds	r3, r3, r4
10007eee:	6019      	str	r1, [r3, #0]
}
10007ef0:	46c0      	nop			; (mov r8, r8)
10007ef2:	46bd      	mov	sp, r7
10007ef4:	b005      	add	sp, #20
10007ef6:	bd90      	pop	{r4, r7, pc}

10007ef8 <pio_get_index>:
 *  \ingroup hardware_pio
 *
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
10007ef8:	b580      	push	{r7, lr}
10007efa:	b082      	sub	sp, #8
10007efc:	af00      	add	r7, sp, #0
10007efe:	6078      	str	r0, [r7, #4]
    check_pio_param(pio);
10007f00:	687b      	ldr	r3, [r7, #4]
10007f02:	0018      	movs	r0, r3
10007f04:	f7ff fee7 	bl	10007cd6 <check_pio_param>
    return pio == pio1 ? 1 : 0;
10007f08:	687b      	ldr	r3, [r7, #4]
10007f0a:	4a05      	ldr	r2, [pc, #20]	; (10007f20 <pio_get_index+0x28>)
10007f0c:	4694      	mov	ip, r2
10007f0e:	4463      	add	r3, ip
10007f10:	425a      	negs	r2, r3
10007f12:	4153      	adcs	r3, r2
10007f14:	b2db      	uxtb	r3, r3
}
10007f16:	0018      	movs	r0, r3
10007f18:	46bd      	mov	sp, r7
10007f1a:	b002      	add	sp, #8
10007f1c:	bd80      	pop	{r7, pc}
10007f1e:	46c0      	nop			; (mov r8, r8)
10007f20:	afd00000 	.word	0xafd00000

10007f24 <pio_sm_set_enabled>:
 *
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \param sm State machine index (0..3)
 * \param enabled true to enable the state machine; false to disable
 */
static inline void pio_sm_set_enabled(PIO pio, uint sm, bool enabled) {
10007f24:	b580      	push	{r7, lr}
10007f26:	b084      	sub	sp, #16
10007f28:	af00      	add	r7, sp, #0
10007f2a:	60f8      	str	r0, [r7, #12]
10007f2c:	60b9      	str	r1, [r7, #8]
10007f2e:	1dfb      	adds	r3, r7, #7
10007f30:	701a      	strb	r2, [r3, #0]
    check_pio_param(pio);
10007f32:	68fb      	ldr	r3, [r7, #12]
10007f34:	0018      	movs	r0, r3
10007f36:	f7ff fece 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
10007f3a:	68bb      	ldr	r3, [r7, #8]
10007f3c:	0018      	movs	r0, r3
10007f3e:	f7ff fec2 	bl	10007cc6 <check_sm_param>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (bool_to_bit(enabled) << sm);
10007f42:	68fb      	ldr	r3, [r7, #12]
10007f44:	681b      	ldr	r3, [r3, #0]
10007f46:	2101      	movs	r1, #1
10007f48:	68ba      	ldr	r2, [r7, #8]
10007f4a:	4091      	lsls	r1, r2
10007f4c:	000a      	movs	r2, r1
10007f4e:	43d2      	mvns	r2, r2
10007f50:	401a      	ands	r2, r3
10007f52:	1dfb      	adds	r3, r7, #7
10007f54:	781b      	ldrb	r3, [r3, #0]
10007f56:	0019      	movs	r1, r3
10007f58:	68bb      	ldr	r3, [r7, #8]
10007f5a:	4099      	lsls	r1, r3
10007f5c:	000b      	movs	r3, r1
10007f5e:	431a      	orrs	r2, r3
10007f60:	68fb      	ldr	r3, [r7, #12]
10007f62:	601a      	str	r2, [r3, #0]
}
10007f64:	46c0      	nop			; (mov r8, r8)
10007f66:	46bd      	mov	sp, r7
10007f68:	b004      	add	sp, #16
10007f6a:	bd80      	pop	{r7, pc}

10007f6c <pio_sm_restart>:
 * pin write flags, delay counter, latched EXEC instruction, and IRQ wait condition.
 *
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_restart(PIO pio, uint sm) {
10007f6c:	b580      	push	{r7, lr}
10007f6e:	b082      	sub	sp, #8
10007f70:	af00      	add	r7, sp, #0
10007f72:	6078      	str	r0, [r7, #4]
10007f74:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
10007f76:	687b      	ldr	r3, [r7, #4]
10007f78:	0018      	movs	r0, r3
10007f7a:	f7ff feac 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
10007f7e:	683b      	ldr	r3, [r7, #0]
10007f80:	0018      	movs	r0, r3
10007f82:	f7ff fea0 	bl	10007cc6 <check_sm_param>
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10007f86:	687b      	ldr	r3, [r7, #4]
10007f88:	681a      	ldr	r2, [r3, #0]
10007f8a:	683b      	ldr	r3, [r7, #0]
10007f8c:	3304      	adds	r3, #4
10007f8e:	2101      	movs	r1, #1
10007f90:	4099      	lsls	r1, r3
10007f92:	000b      	movs	r3, r1
10007f94:	431a      	orrs	r2, r3
10007f96:	687b      	ldr	r3, [r7, #4]
10007f98:	601a      	str	r2, [r3, #0]
}
10007f9a:	46c0      	nop			; (mov r8, r8)
10007f9c:	46bd      	mov	sp, r7
10007f9e:	b002      	add	sp, #8
10007fa0:	bd80      	pop	{r7, pc}

10007fa2 <pio_sm_clkdiv_restart>:
 * clocks of multiple state machines -- see pio_clkdiv_restart_sm_mask().
 *
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clkdiv_restart(PIO pio, uint sm) {
10007fa2:	b580      	push	{r7, lr}
10007fa4:	b082      	sub	sp, #8
10007fa6:	af00      	add	r7, sp, #0
10007fa8:	6078      	str	r0, [r7, #4]
10007faa:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
10007fac:	687b      	ldr	r3, [r7, #4]
10007fae:	0018      	movs	r0, r3
10007fb0:	f7ff fe91 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
10007fb4:	683b      	ldr	r3, [r7, #0]
10007fb6:	0018      	movs	r0, r3
10007fb8:	f7ff fe85 	bl	10007cc6 <check_sm_param>
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10007fbc:	687b      	ldr	r3, [r7, #4]
10007fbe:	681a      	ldr	r2, [r3, #0]
10007fc0:	683b      	ldr	r3, [r7, #0]
10007fc2:	3308      	adds	r3, #8
10007fc4:	2101      	movs	r1, #1
10007fc6:	4099      	lsls	r1, r3
10007fc8:	000b      	movs	r3, r1
10007fca:	431a      	orrs	r2, r3
10007fcc:	687b      	ldr	r3, [r7, #4]
10007fce:	601a      	str	r2, [r3, #0]
}
10007fd0:	46c0      	nop			; (mov r8, r8)
10007fd2:	46bd      	mov	sp, r7
10007fd4:	b002      	add	sp, #8
10007fd6:	bd80      	pop	{r7, pc}

10007fd8 <pio_sm_exec>:
 *
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
10007fd8:	b580      	push	{r7, lr}
10007fda:	b084      	sub	sp, #16
10007fdc:	af00      	add	r7, sp, #0
10007fde:	60f8      	str	r0, [r7, #12]
10007fe0:	60b9      	str	r1, [r7, #8]
10007fe2:	607a      	str	r2, [r7, #4]
    check_pio_param(pio);
10007fe4:	68fb      	ldr	r3, [r7, #12]
10007fe6:	0018      	movs	r0, r3
10007fe8:	f7ff fe75 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
10007fec:	68bb      	ldr	r3, [r7, #8]
10007fee:	0018      	movs	r0, r3
10007ff0:	f7ff fe69 	bl	10007cc6 <check_sm_param>
    pio->sm[sm].instr = instr;
10007ff4:	68f9      	ldr	r1, [r7, #12]
10007ff6:	68ba      	ldr	r2, [r7, #8]
10007ff8:	20d8      	movs	r0, #216	; 0xd8
10007ffa:	0013      	movs	r3, r2
10007ffc:	005b      	lsls	r3, r3, #1
10007ffe:	189b      	adds	r3, r3, r2
10008000:	00db      	lsls	r3, r3, #3
10008002:	18cb      	adds	r3, r1, r3
10008004:	181b      	adds	r3, r3, r0
10008006:	687a      	ldr	r2, [r7, #4]
10008008:	601a      	str	r2, [r3, #0]
}
1000800a:	46c0      	nop			; (mov r8, r8)
1000800c:	46bd      	mov	sp, r7
1000800e:	b004      	add	sp, #16
10008010:	bd80      	pop	{r7, pc}

10008012 <pio_sm_clear_fifos>:
 *  \ingroup hardware_pio
 *
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
10008012:	b580      	push	{r7, lr}
10008014:	b086      	sub	sp, #24
10008016:	af00      	add	r7, sp, #0
10008018:	6078      	str	r0, [r7, #4]
1000801a:	6039      	str	r1, [r7, #0]
    // changing the FIFO join state clears the fifo
    check_pio_param(pio);
1000801c:	687b      	ldr	r3, [r7, #4]
1000801e:	0018      	movs	r0, r3
10008020:	f7ff fe59 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
10008024:	683b      	ldr	r3, [r7, #0]
10008026:	0018      	movs	r0, r3
10008028:	f7ff fe4d 	bl	10007cc6 <check_sm_param>
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
1000802c:	683a      	ldr	r2, [r7, #0]
1000802e:	0013      	movs	r3, r2
10008030:	005b      	lsls	r3, r3, #1
10008032:	189b      	adds	r3, r3, r2
10008034:	00db      	lsls	r3, r3, #3
10008036:	33d0      	adds	r3, #208	; 0xd0
10008038:	687a      	ldr	r2, [r7, #4]
1000803a:	18d3      	adds	r3, r2, r3
1000803c:	60fb      	str	r3, [r7, #12]
1000803e:	2380      	movs	r3, #128	; 0x80
10008040:	061b      	lsls	r3, r3, #24
10008042:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10008044:	68fb      	ldr	r3, [r7, #12]
10008046:	2280      	movs	r2, #128	; 0x80
10008048:	0152      	lsls	r2, r2, #5
1000804a:	4313      	orrs	r3, r2
1000804c:	68ba      	ldr	r2, [r7, #8]
1000804e:	601a      	str	r2, [r3, #0]
}
10008050:	46c0      	nop			; (mov r8, r8)
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
10008052:	683a      	ldr	r2, [r7, #0]
10008054:	0013      	movs	r3, r2
10008056:	005b      	lsls	r3, r3, #1
10008058:	189b      	adds	r3, r3, r2
1000805a:	00db      	lsls	r3, r3, #3
1000805c:	33d0      	adds	r3, #208	; 0xd0
1000805e:	687a      	ldr	r2, [r7, #4]
10008060:	18d3      	adds	r3, r2, r3
10008062:	617b      	str	r3, [r7, #20]
10008064:	2380      	movs	r3, #128	; 0x80
10008066:	061b      	lsls	r3, r3, #24
10008068:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000806a:	697b      	ldr	r3, [r7, #20]
1000806c:	2280      	movs	r2, #128	; 0x80
1000806e:	0152      	lsls	r2, r2, #5
10008070:	4313      	orrs	r3, r2
10008072:	693a      	ldr	r2, [r7, #16]
10008074:	601a      	str	r2, [r3, #0]
}
10008076:	46c0      	nop			; (mov r8, r8)
}
10008078:	46c0      	nop			; (mov r8, r8)
1000807a:	46bd      	mov	sp, r7
1000807c:	b006      	add	sp, #24
1000807e:	bd80      	pop	{r7, pc}

10008080 <_pio_find_offset_for_program>:
}

static_assert(PIO_INSTRUCTION_COUNT <= 32, "");
static uint32_t _used_instruction_space[2];

static int _pio_find_offset_for_program(PIO pio, const pio_program_t *program) {
10008080:	b580      	push	{r7, lr}
10008082:	b086      	sub	sp, #24
10008084:	af00      	add	r7, sp, #0
10008086:	6078      	str	r0, [r7, #4]
10008088:	6039      	str	r1, [r7, #0]
    assert(program->length <= PIO_INSTRUCTION_COUNT);
1000808a:	683b      	ldr	r3, [r7, #0]
1000808c:	791b      	ldrb	r3, [r3, #4]
1000808e:	2b20      	cmp	r3, #32
10008090:	d905      	bls.n	1000809e <_pio_find_offset_for_program+0x1e>
10008092:	4b2a      	ldr	r3, [pc, #168]	; (1000813c <_pio_find_offset_for_program+0xbc>)
10008094:	4a2a      	ldr	r2, [pc, #168]	; (10008140 <_pio_find_offset_for_program+0xc0>)
10008096:	482b      	ldr	r0, [pc, #172]	; (10008144 <_pio_find_offset_for_program+0xc4>)
10008098:	2140      	movs	r1, #64	; 0x40
1000809a:	f002 fe47 	bl	1000ad2c <__assert_func>
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
1000809e:	687b      	ldr	r3, [r7, #4]
100080a0:	0018      	movs	r0, r3
100080a2:	f7ff ff29 	bl	10007ef8 <pio_get_index>
100080a6:	0002      	movs	r2, r0
100080a8:	4b27      	ldr	r3, [pc, #156]	; (10008148 <_pio_find_offset_for_program+0xc8>)
100080aa:	0092      	lsls	r2, r2, #2
100080ac:	58d3      	ldr	r3, [r2, r3]
100080ae:	613b      	str	r3, [r7, #16]
    uint32_t program_mask = (1u << program->length) - 1;
100080b0:	683b      	ldr	r3, [r7, #0]
100080b2:	791b      	ldrb	r3, [r3, #4]
100080b4:	001a      	movs	r2, r3
100080b6:	2301      	movs	r3, #1
100080b8:	4093      	lsls	r3, r2
100080ba:	3b01      	subs	r3, #1
100080bc:	60fb      	str	r3, [r7, #12]
    if (program->origin >= 0) {
100080be:	683b      	ldr	r3, [r7, #0]
100080c0:	795b      	ldrb	r3, [r3, #5]
100080c2:	b25b      	sxtb	r3, r3
100080c4:	2b00      	cmp	r3, #0
100080c6:	db1d      	blt.n	10008104 <_pio_find_offset_for_program+0x84>
        if (program->origin > 32 - program->length) return -1;
100080c8:	683b      	ldr	r3, [r7, #0]
100080ca:	795b      	ldrb	r3, [r3, #5]
100080cc:	b25b      	sxtb	r3, r3
100080ce:	001a      	movs	r2, r3
100080d0:	683b      	ldr	r3, [r7, #0]
100080d2:	791b      	ldrb	r3, [r3, #4]
100080d4:	0019      	movs	r1, r3
100080d6:	2320      	movs	r3, #32
100080d8:	1a5b      	subs	r3, r3, r1
100080da:	429a      	cmp	r2, r3
100080dc:	dd02      	ble.n	100080e4 <_pio_find_offset_for_program+0x64>
100080de:	2301      	movs	r3, #1
100080e0:	425b      	negs	r3, r3
100080e2:	e027      	b.n	10008134 <_pio_find_offset_for_program+0xb4>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
100080e4:	683b      	ldr	r3, [r7, #0]
100080e6:	795b      	ldrb	r3, [r3, #5]
100080e8:	b25b      	sxtb	r3, r3
100080ea:	001a      	movs	r2, r3
100080ec:	68fb      	ldr	r3, [r7, #12]
100080ee:	4093      	lsls	r3, r2
100080f0:	693a      	ldr	r2, [r7, #16]
100080f2:	4013      	ands	r3, r2
100080f4:	d103      	bne.n	100080fe <_pio_find_offset_for_program+0x7e>
100080f6:	683b      	ldr	r3, [r7, #0]
100080f8:	795b      	ldrb	r3, [r3, #5]
100080fa:	b25b      	sxtb	r3, r3
100080fc:	e01a      	b.n	10008134 <_pio_find_offset_for_program+0xb4>
100080fe:	2301      	movs	r3, #1
10008100:	425b      	negs	r3, r3
10008102:	e017      	b.n	10008134 <_pio_find_offset_for_program+0xb4>
    } else {
        // work down from the top always
        for (int i = 32 - program->length; i >= 0; i--) {
10008104:	683b      	ldr	r3, [r7, #0]
10008106:	791b      	ldrb	r3, [r3, #4]
10008108:	001a      	movs	r2, r3
1000810a:	2320      	movs	r3, #32
1000810c:	1a9b      	subs	r3, r3, r2
1000810e:	617b      	str	r3, [r7, #20]
10008110:	e00b      	b.n	1000812a <_pio_find_offset_for_program+0xaa>
            if (!(used_mask & (program_mask << (uint) i))) {
10008112:	697b      	ldr	r3, [r7, #20]
10008114:	68fa      	ldr	r2, [r7, #12]
10008116:	409a      	lsls	r2, r3
10008118:	0013      	movs	r3, r2
1000811a:	693a      	ldr	r2, [r7, #16]
1000811c:	4013      	ands	r3, r2
1000811e:	d101      	bne.n	10008124 <_pio_find_offset_for_program+0xa4>
                return i;
10008120:	697b      	ldr	r3, [r7, #20]
10008122:	e007      	b.n	10008134 <_pio_find_offset_for_program+0xb4>
        for (int i = 32 - program->length; i >= 0; i--) {
10008124:	697b      	ldr	r3, [r7, #20]
10008126:	3b01      	subs	r3, #1
10008128:	617b      	str	r3, [r7, #20]
1000812a:	697b      	ldr	r3, [r7, #20]
1000812c:	2b00      	cmp	r3, #0
1000812e:	daf0      	bge.n	10008112 <_pio_find_offset_for_program+0x92>
            }
        }
        return -1;
10008130:	2301      	movs	r3, #1
10008132:	425b      	negs	r3, r3
    }
}
10008134:	0018      	movs	r0, r3
10008136:	46bd      	mov	sp, r7
10008138:	b006      	add	sp, #24
1000813a:	bd80      	pop	{r7, pc}
1000813c:	1000e3a8 	.word	0x1000e3a8
10008140:	1000e48c 	.word	0x1000e48c
10008144:	1000e3d4 	.word	0x1000e3d4
10008148:	20000b80 	.word	0x20000b80

1000814c <_pio_can_add_program_at_offset>:
    bool rc =  -1 != _pio_find_offset_for_program(pio, program);
    hw_claim_unlock(save);
    return rc;
}

static bool _pio_can_add_program_at_offset(PIO pio, const pio_program_t *program, uint offset) {
1000814c:	b580      	push	{r7, lr}
1000814e:	b086      	sub	sp, #24
10008150:	af00      	add	r7, sp, #0
10008152:	60f8      	str	r0, [r7, #12]
10008154:	60b9      	str	r1, [r7, #8]
10008156:	607a      	str	r2, [r7, #4]
    valid_params_if(PIO, offset < PIO_INSTRUCTION_COUNT);
    valid_params_if(PIO, offset + program->length <= PIO_INSTRUCTION_COUNT);
    if (program->origin >= 0 && (uint)program->origin != offset) return false;
10008158:	68bb      	ldr	r3, [r7, #8]
1000815a:	795b      	ldrb	r3, [r3, #5]
1000815c:	b25b      	sxtb	r3, r3
1000815e:	2b00      	cmp	r3, #0
10008160:	db08      	blt.n	10008174 <_pio_can_add_program_at_offset+0x28>
10008162:	68bb      	ldr	r3, [r7, #8]
10008164:	795b      	ldrb	r3, [r3, #5]
10008166:	b25b      	sxtb	r3, r3
10008168:	001a      	movs	r2, r3
1000816a:	687b      	ldr	r3, [r7, #4]
1000816c:	4293      	cmp	r3, r2
1000816e:	d001      	beq.n	10008174 <_pio_can_add_program_at_offset+0x28>
10008170:	2300      	movs	r3, #0
10008172:	e018      	b.n	100081a6 <_pio_can_add_program_at_offset+0x5a>
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
10008174:	68fb      	ldr	r3, [r7, #12]
10008176:	0018      	movs	r0, r3
10008178:	f7ff febe 	bl	10007ef8 <pio_get_index>
1000817c:	0002      	movs	r2, r0
1000817e:	4b0c      	ldr	r3, [pc, #48]	; (100081b0 <_pio_can_add_program_at_offset+0x64>)
10008180:	0092      	lsls	r2, r2, #2
10008182:	58d3      	ldr	r3, [r2, r3]
10008184:	617b      	str	r3, [r7, #20]
    uint32_t program_mask = (1u << program->length) - 1;
10008186:	68bb      	ldr	r3, [r7, #8]
10008188:	791b      	ldrb	r3, [r3, #4]
1000818a:	001a      	movs	r2, r3
1000818c:	2301      	movs	r3, #1
1000818e:	4093      	lsls	r3, r2
10008190:	3b01      	subs	r3, #1
10008192:	613b      	str	r3, [r7, #16]
    return !(used_mask & (program_mask << offset));
10008194:	693a      	ldr	r2, [r7, #16]
10008196:	687b      	ldr	r3, [r7, #4]
10008198:	409a      	lsls	r2, r3
1000819a:	0013      	movs	r3, r2
1000819c:	697a      	ldr	r2, [r7, #20]
1000819e:	4013      	ands	r3, r2
100081a0:	425a      	negs	r2, r3
100081a2:	4153      	adcs	r3, r2
100081a4:	b2db      	uxtb	r3, r3
}
100081a6:	0018      	movs	r0, r3
100081a8:	46bd      	mov	sp, r7
100081aa:	b006      	add	sp, #24
100081ac:	bd80      	pop	{r7, pc}
100081ae:	46c0      	nop			; (mov r8, r8)
100081b0:	20000b80 	.word	0x20000b80

100081b4 <_pio_add_program_at_offset>:
    bool rc = _pio_can_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
    return rc;
}

static void _pio_add_program_at_offset(PIO pio, const pio_program_t *program, uint offset) {
100081b4:	b590      	push	{r4, r7, lr}
100081b6:	b089      	sub	sp, #36	; 0x24
100081b8:	af00      	add	r7, sp, #0
100081ba:	60f8      	str	r0, [r7, #12]
100081bc:	60b9      	str	r1, [r7, #8]
100081be:	607a      	str	r2, [r7, #4]
    if (!_pio_can_add_program_at_offset(pio, program, offset)) {
100081c0:	687a      	ldr	r2, [r7, #4]
100081c2:	68b9      	ldr	r1, [r7, #8]
100081c4:	68fb      	ldr	r3, [r7, #12]
100081c6:	0018      	movs	r0, r3
100081c8:	f7ff ffc0 	bl	1000814c <_pio_can_add_program_at_offset>
100081cc:	0003      	movs	r3, r0
100081ce:	001a      	movs	r2, r3
100081d0:	2301      	movs	r3, #1
100081d2:	4053      	eors	r3, r2
100081d4:	b2db      	uxtb	r3, r3
100081d6:	2b00      	cmp	r3, #0
100081d8:	d003      	beq.n	100081e2 <_pio_add_program_at_offset+0x2e>
        panic("No program space");
100081da:	4b2a      	ldr	r3, [pc, #168]	; (10008284 <_pio_add_program_at_offset+0xd0>)
100081dc:	0018      	movs	r0, r3
100081de:	f002 fdcb 	bl	1000ad78 <panic>
    }
    for (uint i = 0; i < program->length; ++i) {
100081e2:	2300      	movs	r3, #0
100081e4:	61fb      	str	r3, [r7, #28]
100081e6:	e02b      	b.n	10008240 <_pio_add_program_at_offset+0x8c>
        uint16_t instr = program->instructions[i];
100081e8:	68bb      	ldr	r3, [r7, #8]
100081ea:	781a      	ldrb	r2, [r3, #0]
100081ec:	7859      	ldrb	r1, [r3, #1]
100081ee:	0209      	lsls	r1, r1, #8
100081f0:	430a      	orrs	r2, r1
100081f2:	7899      	ldrb	r1, [r3, #2]
100081f4:	0409      	lsls	r1, r1, #16
100081f6:	430a      	orrs	r2, r1
100081f8:	78db      	ldrb	r3, [r3, #3]
100081fa:	061b      	lsls	r3, r3, #24
100081fc:	4313      	orrs	r3, r2
100081fe:	001a      	movs	r2, r3
10008200:	69fb      	ldr	r3, [r7, #28]
10008202:	005b      	lsls	r3, r3, #1
10008204:	18d2      	adds	r2, r2, r3
10008206:	2416      	movs	r4, #22
10008208:	193b      	adds	r3, r7, r4
1000820a:	8812      	ldrh	r2, [r2, #0]
1000820c:	801a      	strh	r2, [r3, #0]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
1000820e:	193b      	adds	r3, r7, r4
10008210:	881b      	ldrh	r3, [r3, #0]
10008212:	0018      	movs	r0, r3
10008214:	f7ff fcf8 	bl	10007c08 <_pio_major_instr_bits>
10008218:	1e03      	subs	r3, r0, #0
1000821a:	d002      	beq.n	10008222 <_pio_add_program_at_offset+0x6e>
1000821c:	193b      	adds	r3, r7, r4
1000821e:	881b      	ldrh	r3, [r3, #0]
10008220:	e004      	b.n	1000822c <_pio_add_program_at_offset+0x78>
10008222:	2316      	movs	r3, #22
10008224:	18fb      	adds	r3, r7, r3
10008226:	881a      	ldrh	r2, [r3, #0]
10008228:	687b      	ldr	r3, [r7, #4]
1000822a:	18d3      	adds	r3, r2, r3
1000822c:	6879      	ldr	r1, [r7, #4]
1000822e:	69fa      	ldr	r2, [r7, #28]
10008230:	1889      	adds	r1, r1, r2
10008232:	68fa      	ldr	r2, [r7, #12]
10008234:	3112      	adds	r1, #18
10008236:	0089      	lsls	r1, r1, #2
10008238:	508b      	str	r3, [r1, r2]
    for (uint i = 0; i < program->length; ++i) {
1000823a:	69fb      	ldr	r3, [r7, #28]
1000823c:	3301      	adds	r3, #1
1000823e:	61fb      	str	r3, [r7, #28]
10008240:	68bb      	ldr	r3, [r7, #8]
10008242:	791b      	ldrb	r3, [r3, #4]
10008244:	001a      	movs	r2, r3
10008246:	69fb      	ldr	r3, [r7, #28]
10008248:	4293      	cmp	r3, r2
1000824a:	d3cd      	bcc.n	100081e8 <_pio_add_program_at_offset+0x34>
    }
    uint32_t program_mask = (1u << program->length) - 1;
1000824c:	68bb      	ldr	r3, [r7, #8]
1000824e:	791b      	ldrb	r3, [r3, #4]
10008250:	001a      	movs	r2, r3
10008252:	2301      	movs	r3, #1
10008254:	4093      	lsls	r3, r2
10008256:	3b01      	subs	r3, #1
10008258:	61bb      	str	r3, [r7, #24]
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
1000825a:	68fb      	ldr	r3, [r7, #12]
1000825c:	0018      	movs	r0, r3
1000825e:	f7ff fe4b 	bl	10007ef8 <pio_get_index>
10008262:	0003      	movs	r3, r0
10008264:	4a08      	ldr	r2, [pc, #32]	; (10008288 <_pio_add_program_at_offset+0xd4>)
10008266:	0099      	lsls	r1, r3, #2
10008268:	5889      	ldr	r1, [r1, r2]
1000826a:	69b8      	ldr	r0, [r7, #24]
1000826c:	687a      	ldr	r2, [r7, #4]
1000826e:	4090      	lsls	r0, r2
10008270:	0002      	movs	r2, r0
10008272:	4311      	orrs	r1, r2
10008274:	4a04      	ldr	r2, [pc, #16]	; (10008288 <_pio_add_program_at_offset+0xd4>)
10008276:	009b      	lsls	r3, r3, #2
10008278:	5099      	str	r1, [r3, r2]
}
1000827a:	46c0      	nop			; (mov r8, r8)
1000827c:	46bd      	mov	sp, r7
1000827e:	b009      	add	sp, #36	; 0x24
10008280:	bd90      	pop	{r4, r7, pc}
10008282:	46c0      	nop			; (mov r8, r8)
10008284:	1000e428 	.word	0x1000e428
10008288:	20000b80 	.word	0x20000b80

1000828c <pio_add_program>:

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
1000828c:	b580      	push	{r7, lr}
1000828e:	b084      	sub	sp, #16
10008290:	af00      	add	r7, sp, #0
10008292:	6078      	str	r0, [r7, #4]
10008294:	6039      	str	r1, [r7, #0]
    uint32_t save = hw_claim_lock();
10008296:	f7fe fce3 	bl	10006c60 <hw_claim_lock>
1000829a:	0003      	movs	r3, r0
1000829c:	60fb      	str	r3, [r7, #12]
    int offset = _pio_find_offset_for_program(pio, program);
1000829e:	683a      	ldr	r2, [r7, #0]
100082a0:	687b      	ldr	r3, [r7, #4]
100082a2:	0011      	movs	r1, r2
100082a4:	0018      	movs	r0, r3
100082a6:	f7ff feeb 	bl	10008080 <_pio_find_offset_for_program>
100082aa:	0003      	movs	r3, r0
100082ac:	60bb      	str	r3, [r7, #8]
    if (offset < 0) {
100082ae:	68bb      	ldr	r3, [r7, #8]
100082b0:	2b00      	cmp	r3, #0
100082b2:	da03      	bge.n	100082bc <pio_add_program+0x30>
        panic("No program space");
100082b4:	4b09      	ldr	r3, [pc, #36]	; (100082dc <pio_add_program+0x50>)
100082b6:	0018      	movs	r0, r3
100082b8:	f002 fd5e 	bl	1000ad78 <panic>
    }
    _pio_add_program_at_offset(pio, program, (uint)offset);
100082bc:	68ba      	ldr	r2, [r7, #8]
100082be:	6839      	ldr	r1, [r7, #0]
100082c0:	687b      	ldr	r3, [r7, #4]
100082c2:	0018      	movs	r0, r3
100082c4:	f7ff ff76 	bl	100081b4 <_pio_add_program_at_offset>
    hw_claim_unlock(save);
100082c8:	68fb      	ldr	r3, [r7, #12]
100082ca:	0018      	movs	r0, r3
100082cc:	f7fe fcf0 	bl	10006cb0 <hw_claim_unlock>
    return (uint)offset;
100082d0:	68bb      	ldr	r3, [r7, #8]
}
100082d2:	0018      	movs	r0, r3
100082d4:	46bd      	mov	sp, r7
100082d6:	b004      	add	sp, #16
100082d8:	bd80      	pop	{r7, pc}
100082da:	46c0      	nop			; (mov r8, r8)
100082dc:	1000e428 	.word	0x1000e428

100082e0 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100082e0:	b590      	push	{r4, r7, lr}
100082e2:	b087      	sub	sp, #28
100082e4:	af00      	add	r7, sp, #0
100082e6:	60f8      	str	r0, [r7, #12]
100082e8:	60b9      	str	r1, [r7, #8]
100082ea:	607a      	str	r2, [r7, #4]
100082ec:	603b      	str	r3, [r7, #0]
    check_pio_param(pio);
100082ee:	68fb      	ldr	r3, [r7, #12]
100082f0:	0018      	movs	r0, r3
100082f2:	f7ff fcf0 	bl	10007cd6 <check_pio_param>
    check_sm_param(sm);
100082f6:	68bb      	ldr	r3, [r7, #8]
100082f8:	0018      	movs	r0, r3
100082fa:	f7ff fce4 	bl	10007cc6 <check_sm_param>
    valid_params_if(PIO, pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100082fe:	68f9      	ldr	r1, [r7, #12]
10008300:	68ba      	ldr	r2, [r7, #8]
10008302:	20dc      	movs	r0, #220	; 0xdc
10008304:	0013      	movs	r3, r2
10008306:	005b      	lsls	r3, r3, #1
10008308:	189b      	adds	r3, r3, r2
1000830a:	00db      	lsls	r3, r3, #3
1000830c:	18cb      	adds	r3, r1, r3
1000830e:	181b      	adds	r3, r3, r0
10008310:	681b      	ldr	r3, [r3, #0]
10008312:	617b      	str	r3, [r7, #20]
    uint pindir_val = is_out ? 0x1f : 0;
10008314:	2328      	movs	r3, #40	; 0x28
10008316:	18fb      	adds	r3, r7, r3
10008318:	781b      	ldrb	r3, [r3, #0]
1000831a:	2b00      	cmp	r3, #0
1000831c:	d001      	beq.n	10008322 <pio_sm_set_consecutive_pindirs+0x42>
1000831e:	231f      	movs	r3, #31
10008320:	e000      	b.n	10008324 <pio_sm_set_consecutive_pindirs+0x44>
10008322:	2300      	movs	r3, #0
10008324:	613b      	str	r3, [r7, #16]
    while (count > 5) {
10008326:	e022      	b.n	1000836e <pio_sm_set_consecutive_pindirs+0x8e>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10008328:	687b      	ldr	r3, [r7, #4]
1000832a:	015b      	lsls	r3, r3, #5
1000832c:	22a0      	movs	r2, #160	; 0xa0
1000832e:	0552      	lsls	r2, r2, #21
10008330:	431a      	orrs	r2, r3
10008332:	0011      	movs	r1, r2
10008334:	68f8      	ldr	r0, [r7, #12]
10008336:	68ba      	ldr	r2, [r7, #8]
10008338:	24dc      	movs	r4, #220	; 0xdc
1000833a:	0013      	movs	r3, r2
1000833c:	005b      	lsls	r3, r3, #1
1000833e:	189b      	adds	r3, r3, r2
10008340:	00db      	lsls	r3, r3, #3
10008342:	18c3      	adds	r3, r0, r3
10008344:	191b      	adds	r3, r3, r4
10008346:	6019      	str	r1, [r3, #0]
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
10008348:	693b      	ldr	r3, [r7, #16]
1000834a:	0019      	movs	r1, r3
1000834c:	20cc      	movs	r0, #204	; 0xcc
1000834e:	f7ff fca6 	bl	10007c9e <pio_encode_set>
10008352:	0002      	movs	r2, r0
10008354:	68b9      	ldr	r1, [r7, #8]
10008356:	68fb      	ldr	r3, [r7, #12]
10008358:	0018      	movs	r0, r3
1000835a:	f7ff fe3d 	bl	10007fd8 <pio_sm_exec>
        count -= 5;
1000835e:	683b      	ldr	r3, [r7, #0]
10008360:	3b05      	subs	r3, #5
10008362:	603b      	str	r3, [r7, #0]
        pin = (pin + 5) & 0x1f;
10008364:	687b      	ldr	r3, [r7, #4]
10008366:	3305      	adds	r3, #5
10008368:	221f      	movs	r2, #31
1000836a:	4013      	ands	r3, r2
1000836c:	607b      	str	r3, [r7, #4]
    while (count > 5) {
1000836e:	683b      	ldr	r3, [r7, #0]
10008370:	2b05      	cmp	r3, #5
10008372:	d8d9      	bhi.n	10008328 <pio_sm_set_consecutive_pindirs+0x48>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10008374:	683b      	ldr	r3, [r7, #0]
10008376:	069a      	lsls	r2, r3, #26
10008378:	687b      	ldr	r3, [r7, #4]
1000837a:	015b      	lsls	r3, r3, #5
1000837c:	431a      	orrs	r2, r3
1000837e:	0011      	movs	r1, r2
10008380:	68f8      	ldr	r0, [r7, #12]
10008382:	68ba      	ldr	r2, [r7, #8]
10008384:	24dc      	movs	r4, #220	; 0xdc
10008386:	0013      	movs	r3, r2
10008388:	005b      	lsls	r3, r3, #1
1000838a:	189b      	adds	r3, r3, r2
1000838c:	00db      	lsls	r3, r3, #3
1000838e:	18c3      	adds	r3, r0, r3
10008390:	191b      	adds	r3, r3, r4
10008392:	6019      	str	r1, [r3, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
10008394:	693b      	ldr	r3, [r7, #16]
10008396:	0019      	movs	r1, r3
10008398:	20cc      	movs	r0, #204	; 0xcc
1000839a:	f7ff fc80 	bl	10007c9e <pio_encode_set>
1000839e:	0002      	movs	r2, r0
100083a0:	68b9      	ldr	r1, [r7, #8]
100083a2:	68fb      	ldr	r3, [r7, #12]
100083a4:	0018      	movs	r0, r3
100083a6:	f7ff fe17 	bl	10007fd8 <pio_sm_exec>
    pio->sm[sm].pinctrl = pinctrl_saved;
100083aa:	68f9      	ldr	r1, [r7, #12]
100083ac:	68ba      	ldr	r2, [r7, #8]
100083ae:	20dc      	movs	r0, #220	; 0xdc
100083b0:	0013      	movs	r3, r2
100083b2:	005b      	lsls	r3, r3, #1
100083b4:	189b      	adds	r3, r3, r2
100083b6:	00db      	lsls	r3, r3, #3
100083b8:	18cb      	adds	r3, r1, r3
100083ba:	181b      	adds	r3, r3, r0
100083bc:	697a      	ldr	r2, [r7, #20]
100083be:	601a      	str	r2, [r3, #0]
}
100083c0:	46c0      	nop			; (mov r8, r8)
100083c2:	46bd      	mov	sp, r7
100083c4:	b007      	add	sp, #28
100083c6:	bd90      	pop	{r4, r7, pc}

100083c8 <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
100083c8:	b590      	push	{r4, r7, lr}
100083ca:	b08b      	sub	sp, #44	; 0x2c
100083cc:	af00      	add	r7, sp, #0
100083ce:	60f8      	str	r0, [r7, #12]
100083d0:	60b9      	str	r1, [r7, #8]
100083d2:	607a      	str	r2, [r7, #4]
100083d4:	603b      	str	r3, [r7, #0]
    valid_params_if(PIO, initial_pc < PIO_INSTRUCTION_COUNT);
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);
100083d6:	68b9      	ldr	r1, [r7, #8]
100083d8:	68fb      	ldr	r3, [r7, #12]
100083da:	2200      	movs	r2, #0
100083dc:	0018      	movs	r0, r3
100083de:	f7ff fda1 	bl	10007f24 <pio_sm_set_enabled>

    if (config) {
100083e2:	683b      	ldr	r3, [r7, #0]
100083e4:	2b00      	cmp	r3, #0
100083e6:	d006      	beq.n	100083f6 <pio_sm_init+0x2e>
        pio_sm_set_config(pio, sm, config);
100083e8:	683a      	ldr	r2, [r7, #0]
100083ea:	68b9      	ldr	r1, [r7, #8]
100083ec:	68fb      	ldr	r3, [r7, #12]
100083ee:	0018      	movs	r0, r3
100083f0:	f7ff fd40 	bl	10007e74 <pio_sm_set_config>
100083f4:	e00a      	b.n	1000840c <pio_sm_init+0x44>
    } else {
        pio_sm_config c = pio_get_default_sm_config();
100083f6:	2414      	movs	r4, #20
100083f8:	193b      	adds	r3, r7, r4
100083fa:	0018      	movs	r0, r3
100083fc:	f7ff fd0c 	bl	10007e18 <pio_get_default_sm_config>
        pio_sm_set_config(pio, sm, &c);
10008400:	193a      	adds	r2, r7, r4
10008402:	68b9      	ldr	r1, [r7, #8]
10008404:	68fb      	ldr	r3, [r7, #12]
10008406:	0018      	movs	r0, r3
10008408:	f7ff fd34 	bl	10007e74 <pio_sm_set_config>
    }

    pio_sm_clear_fifos(pio, sm);
1000840c:	68ba      	ldr	r2, [r7, #8]
1000840e:	68fb      	ldr	r3, [r7, #12]
10008410:	0011      	movs	r1, r2
10008412:	0018      	movs	r0, r3
10008414:	f7ff fdfd 	bl	10008012 <pio_sm_clear_fifos>

    // Clear FIFO debug flags
    const uint32_t fdebug_sm_mask =
10008418:	4b10      	ldr	r3, [pc, #64]	; (1000845c <pio_sm_init+0x94>)
1000841a:	627b      	str	r3, [r7, #36]	; 0x24
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
1000841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000841e:	68bb      	ldr	r3, [r7, #8]
10008420:	409a      	lsls	r2, r3
10008422:	68fb      	ldr	r3, [r7, #12]
10008424:	609a      	str	r2, [r3, #8]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
10008426:	68ba      	ldr	r2, [r7, #8]
10008428:	68fb      	ldr	r3, [r7, #12]
1000842a:	0011      	movs	r1, r2
1000842c:	0018      	movs	r0, r3
1000842e:	f7ff fd9d 	bl	10007f6c <pio_sm_restart>
    pio_sm_clkdiv_restart(pio, sm);
10008432:	68ba      	ldr	r2, [r7, #8]
10008434:	68fb      	ldr	r3, [r7, #12]
10008436:	0011      	movs	r1, r2
10008438:	0018      	movs	r0, r3
1000843a:	f7ff fdb2 	bl	10007fa2 <pio_sm_clkdiv_restart>
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
1000843e:	687b      	ldr	r3, [r7, #4]
10008440:	0018      	movs	r0, r3
10008442:	f7ff fc1d 	bl	10007c80 <pio_encode_jmp>
10008446:	0002      	movs	r2, r0
10008448:	68b9      	ldr	r1, [r7, #8]
1000844a:	68fb      	ldr	r3, [r7, #12]
1000844c:	0018      	movs	r0, r3
1000844e:	f7ff fdc3 	bl	10007fd8 <pio_sm_exec>
}
10008452:	46c0      	nop			; (mov r8, r8)
10008454:	46bd      	mov	sp, r7
10008456:	b00b      	add	sp, #44	; 0x2c
10008458:	bd90      	pop	{r4, r7, pc}
1000845a:	46c0      	nop			; (mov r8, r8)
1000845c:	01010101 	.word	0x01010101

10008460 <reset_block>:
static inline void reset_block(uint32_t bits) {
10008460:	b580      	push	{r7, lr}
10008462:	b084      	sub	sp, #16
10008464:	af00      	add	r7, sp, #0
10008466:	6078      	str	r0, [r7, #4]
10008468:	4b07      	ldr	r3, [pc, #28]	; (10008488 <reset_block+0x28>)
1000846a:	60fb      	str	r3, [r7, #12]
1000846c:	687b      	ldr	r3, [r7, #4]
1000846e:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10008470:	68fb      	ldr	r3, [r7, #12]
10008472:	2280      	movs	r2, #128	; 0x80
10008474:	0192      	lsls	r2, r2, #6
10008476:	4313      	orrs	r3, r2
10008478:	68ba      	ldr	r2, [r7, #8]
1000847a:	601a      	str	r2, [r3, #0]
}
1000847c:	46c0      	nop			; (mov r8, r8)
}
1000847e:	46c0      	nop			; (mov r8, r8)
10008480:	46bd      	mov	sp, r7
10008482:	b004      	add	sp, #16
10008484:	bd80      	pop	{r7, pc}
10008486:	46c0      	nop			; (mov r8, r8)
10008488:	4000c000 	.word	0x4000c000

1000848c <unreset_block_wait>:
static inline void unreset_block_wait(uint32_t bits) {
1000848c:	b580      	push	{r7, lr}
1000848e:	b084      	sub	sp, #16
10008490:	af00      	add	r7, sp, #0
10008492:	6078      	str	r0, [r7, #4]
10008494:	4b0b      	ldr	r3, [pc, #44]	; (100084c4 <unreset_block_wait+0x38>)
10008496:	60fb      	str	r3, [r7, #12]
10008498:	687b      	ldr	r3, [r7, #4]
1000849a:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000849c:	68fb      	ldr	r3, [r7, #12]
1000849e:	22c0      	movs	r2, #192	; 0xc0
100084a0:	0192      	lsls	r2, r2, #6
100084a2:	4313      	orrs	r3, r2
100084a4:	68ba      	ldr	r2, [r7, #8]
100084a6:	601a      	str	r2, [r3, #0]
}
100084a8:	46c0      	nop			; (mov r8, r8)
    while (~resets_hw->reset_done & bits)
100084aa:	e000      	b.n	100084ae <unreset_block_wait+0x22>
100084ac:	46c0      	nop			; (mov r8, r8)
100084ae:	4b05      	ldr	r3, [pc, #20]	; (100084c4 <unreset_block_wait+0x38>)
100084b0:	689b      	ldr	r3, [r3, #8]
100084b2:	43db      	mvns	r3, r3
100084b4:	687a      	ldr	r2, [r7, #4]
100084b6:	4013      	ands	r3, r2
100084b8:	d1f8      	bne.n	100084ac <unreset_block_wait+0x20>
}
100084ba:	46c0      	nop			; (mov r8, r8)
100084bc:	46c0      	nop			; (mov r8, r8)
100084be:	46bd      	mov	sp, r7
100084c0:	b004      	add	sp, #16
100084c2:	bd80      	pop	{r7, pc}
100084c4:	4000c000 	.word	0x4000c000

100084c8 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100084c8:	b580      	push	{r7, lr}
100084ca:	b08e      	sub	sp, #56	; 0x38
100084cc:	af00      	add	r7, sp, #0
100084ce:	60f8      	str	r0, [r7, #12]
100084d0:	60b9      	str	r1, [r7, #8]
100084d2:	607a      	str	r2, [r7, #4]
100084d4:	603b      	str	r3, [r7, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100084d6:	68b9      	ldr	r1, [r7, #8]
100084d8:	200c      	movs	r0, #12
100084da:	f004 f9f1 	bl	1000c8c0 <__wrap___aeabi_uidiv>
100084de:	0003      	movs	r3, r0
100084e0:	637b      	str	r3, [r7, #52]	; 0x34

    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * MHZ));
100084e2:	687b      	ldr	r3, [r7, #4]
100084e4:	4a57      	ldr	r2, [pc, #348]	; (10008644 <pll_init+0x17c>)
100084e6:	4293      	cmp	r3, r2
100084e8:	d903      	bls.n	100084f2 <pll_init+0x2a>
100084ea:	687b      	ldr	r3, [r7, #4]
100084ec:	4a56      	ldr	r2, [pc, #344]	; (10008648 <pll_init+0x180>)
100084ee:	4293      	cmp	r3, r2
100084f0:	d905      	bls.n	100084fe <pll_init+0x36>
100084f2:	4b56      	ldr	r3, [pc, #344]	; (1000864c <pll_init+0x184>)
100084f4:	4a56      	ldr	r2, [pc, #344]	; (10008650 <pll_init+0x188>)
100084f6:	4857      	ldr	r0, [pc, #348]	; (10008654 <pll_init+0x18c>)
100084f8:	2111      	movs	r1, #17
100084fa:	f002 fc17 	bl	1000ad2c <__assert_func>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
100084fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
10008500:	000a      	movs	r2, r1
10008502:	0152      	lsls	r2, r2, #5
10008504:	1a52      	subs	r2, r2, r1
10008506:	0193      	lsls	r3, r2, #6
10008508:	1a9b      	subs	r3, r3, r2
1000850a:	00db      	lsls	r3, r3, #3
1000850c:	185b      	adds	r3, r3, r1
1000850e:	019b      	lsls	r3, r3, #6
10008510:	0019      	movs	r1, r3
10008512:	6878      	ldr	r0, [r7, #4]
10008514:	f004 f9d4 	bl	1000c8c0 <__wrap___aeabi_uidiv>
10008518:	0003      	movs	r3, r0
1000851a:	633b      	str	r3, [r7, #48]	; 0x30
/// \end::pll_init_calculations[]

    // fbdiv
    assert(fbdiv >= 16 && fbdiv <= 320);
1000851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000851e:	2b0f      	cmp	r3, #15
10008520:	d904      	bls.n	1000852c <pll_init+0x64>
10008522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10008524:	23a0      	movs	r3, #160	; 0xa0
10008526:	005b      	lsls	r3, r3, #1
10008528:	429a      	cmp	r2, r3
1000852a:	d905      	bls.n	10008538 <pll_init+0x70>
1000852c:	4b4a      	ldr	r3, [pc, #296]	; (10008658 <pll_init+0x190>)
1000852e:	4a48      	ldr	r2, [pc, #288]	; (10008650 <pll_init+0x188>)
10008530:	4848      	ldr	r0, [pc, #288]	; (10008654 <pll_init+0x18c>)
10008532:	2119      	movs	r1, #25
10008534:	f002 fbfa 	bl	1000ad2c <__assert_func>

    // Check divider ranges
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
10008538:	683b      	ldr	r3, [r7, #0]
1000853a:	2b00      	cmp	r3, #0
1000853c:	d008      	beq.n	10008550 <pll_init+0x88>
1000853e:	683b      	ldr	r3, [r7, #0]
10008540:	2b07      	cmp	r3, #7
10008542:	d805      	bhi.n	10008550 <pll_init+0x88>
10008544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
10008546:	2b00      	cmp	r3, #0
10008548:	d002      	beq.n	10008550 <pll_init+0x88>
1000854a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000854c:	2b07      	cmp	r3, #7
1000854e:	d905      	bls.n	1000855c <pll_init+0x94>
10008550:	4b42      	ldr	r3, [pc, #264]	; (1000865c <pll_init+0x194>)
10008552:	4a3f      	ldr	r2, [pc, #252]	; (10008650 <pll_init+0x188>)
10008554:	483f      	ldr	r0, [pc, #252]	; (10008654 <pll_init+0x18c>)
10008556:	211c      	movs	r1, #28
10008558:	f002 fbe8 	bl	1000ad2c <__assert_func>

    // post_div1 should be >= post_div2
    // from appnote page 11
    // postdiv1 is designed to operate with a higher input frequency
    // than postdiv2
    assert(post_div2 <= post_div1);
1000855c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000855e:	683b      	ldr	r3, [r7, #0]
10008560:	429a      	cmp	r2, r3
10008562:	d905      	bls.n	10008570 <pll_init+0xa8>
10008564:	4b3e      	ldr	r3, [pc, #248]	; (10008660 <pll_init+0x198>)
10008566:	4a3a      	ldr	r2, [pc, #232]	; (10008650 <pll_init+0x188>)
10008568:	483a      	ldr	r0, [pc, #232]	; (10008654 <pll_init+0x18c>)
1000856a:	2122      	movs	r1, #34	; 0x22
1000856c:	f002 fbde 	bl	1000ad2c <__assert_func>

    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));
10008570:	687b      	ldr	r3, [r7, #4]
10008572:	091b      	lsrs	r3, r3, #4
10008574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
10008576:	429a      	cmp	r2, r3
10008578:	d905      	bls.n	10008586 <pll_init+0xbe>
1000857a:	4b3a      	ldr	r3, [pc, #232]	; (10008664 <pll_init+0x19c>)
1000857c:	4a34      	ldr	r2, [pc, #208]	; (10008650 <pll_init+0x188>)
1000857e:	4835      	ldr	r0, [pc, #212]	; (10008654 <pll_init+0x18c>)
10008580:	2125      	movs	r1, #37	; 0x25
10008582:	f002 fbd3 	bl	1000ad2c <__assert_func>

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10008586:	683b      	ldr	r3, [r7, #0]
10008588:	041a      	lsls	r2, r3, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
1000858a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
1000858c:	031b      	lsls	r3, r3, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000858e:	4313      	orrs	r3, r2
10008590:	62fb      	str	r3, [r7, #44]	; 0x2c

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10008592:	68fb      	ldr	r3, [r7, #12]
10008594:	681b      	ldr	r3, [r3, #0]
10008596:	2b00      	cmp	r3, #0
10008598:	da15      	bge.n	100085c6 <pll_init+0xfe>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000859a:	68fb      	ldr	r3, [r7, #12]
1000859c:	681b      	ldr	r3, [r3, #0]
1000859e:	223f      	movs	r2, #63	; 0x3f
100085a0:	4013      	ands	r3, r2
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100085a2:	68ba      	ldr	r2, [r7, #8]
100085a4:	429a      	cmp	r2, r3
100085a6:	d10e      	bne.n	100085c6 <pll_init+0xfe>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100085a8:	68fb      	ldr	r3, [r7, #12]
100085aa:	689b      	ldr	r3, [r3, #8]
100085ac:	051b      	lsls	r3, r3, #20
100085ae:	0d1b      	lsrs	r3, r3, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100085b2:	429a      	cmp	r2, r3
100085b4:	d107      	bne.n	100085c6 <pll_init+0xfe>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
100085b6:	68fb      	ldr	r3, [r7, #12]
100085b8:	68da      	ldr	r2, [r3, #12]
100085ba:	23ee      	movs	r3, #238	; 0xee
100085bc:	02db      	lsls	r3, r3, #11
100085be:	4013      	ands	r3, r2
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
100085c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100085c2:	429a      	cmp	r2, r3
100085c4:	d03a      	beq.n	1000863c <pll_init+0x174>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
100085c6:	68fb      	ldr	r3, [r7, #12]
100085c8:	4a27      	ldr	r2, [pc, #156]	; (10008668 <pll_init+0x1a0>)
100085ca:	4293      	cmp	r3, r2
100085cc:	d102      	bne.n	100085d4 <pll_init+0x10c>
100085ce:	2380      	movs	r3, #128	; 0x80
100085d0:	019b      	lsls	r3, r3, #6
100085d2:	e001      	b.n	100085d8 <pll_init+0x110>
100085d4:	2380      	movs	r3, #128	; 0x80
100085d6:	015b      	lsls	r3, r3, #5
100085d8:	62bb      	str	r3, [r7, #40]	; 0x28
    reset_block(pll_reset);
100085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
100085dc:	0018      	movs	r0, r3
100085de:	f7ff ff3f 	bl	10008460 <reset_block>
    unreset_block_wait(pll_reset);
100085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100085e4:	0018      	movs	r0, r3
100085e6:	f7ff ff51 	bl	1000848c <unreset_block_wait>

    // Load VCO-related dividers before starting VCO
    pll->cs = refdiv;
100085ea:	68fb      	ldr	r3, [r7, #12]
100085ec:	68ba      	ldr	r2, [r7, #8]
100085ee:	601a      	str	r2, [r3, #0]
    pll->fbdiv_int = fbdiv;
100085f0:	68fb      	ldr	r3, [r7, #12]
100085f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100085f4:	609a      	str	r2, [r3, #8]

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
100085f6:	2321      	movs	r3, #33	; 0x21
100085f8:	627b      	str	r3, [r7, #36]	; 0x24
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
100085fa:	68fb      	ldr	r3, [r7, #12]
100085fc:	3304      	adds	r3, #4
100085fe:	623b      	str	r3, [r7, #32]
10008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10008602:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10008604:	6a3b      	ldr	r3, [r7, #32]
10008606:	22c0      	movs	r2, #192	; 0xc0
10008608:	0192      	lsls	r2, r2, #6
1000860a:	4313      	orrs	r3, r2
1000860c:	69fa      	ldr	r2, [r7, #28]
1000860e:	601a      	str	r2, [r3, #0]
}
10008610:	46c0      	nop			; (mov r8, r8)

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10008612:	e000      	b.n	10008616 <pll_init+0x14e>
10008614:	46c0      	nop			; (mov r8, r8)
10008616:	68fb      	ldr	r3, [r7, #12]
10008618:	681b      	ldr	r3, [r3, #0]
1000861a:	2b00      	cmp	r3, #0
1000861c:	dafa      	bge.n	10008614 <pll_init+0x14c>

    // Set up post dividers
    pll->prim = pdiv;
1000861e:	68fb      	ldr	r3, [r7, #12]
10008620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10008622:	60da      	str	r2, [r3, #12]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
10008624:	68fb      	ldr	r3, [r7, #12]
10008626:	3304      	adds	r3, #4
10008628:	61bb      	str	r3, [r7, #24]
1000862a:	2308      	movs	r3, #8
1000862c:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000862e:	69bb      	ldr	r3, [r7, #24]
10008630:	22c0      	movs	r2, #192	; 0xc0
10008632:	0192      	lsls	r2, r2, #6
10008634:	4313      	orrs	r3, r2
10008636:	697a      	ldr	r2, [r7, #20]
10008638:	601a      	str	r2, [r3, #0]
}
1000863a:	e000      	b.n	1000863e <pll_init+0x176>
        return;
1000863c:	46c0      	nop			; (mov r8, r8)
/// \end::pll_init_finish[]
}
1000863e:	46bd      	mov	sp, r7
10008640:	b00e      	add	sp, #56	; 0x38
10008642:	bd80      	pop	{r7, pc}
10008644:	2cb4177f 	.word	0x2cb4177f
10008648:	5f5e1000 	.word	0x5f5e1000
1000864c:	1000e4ac 	.word	0x1000e4ac
10008650:	1000e5fc 	.word	0x1000e5fc
10008654:	1000e50c 	.word	0x1000e50c
10008658:	1000e560 	.word	0x1000e560
1000865c:	1000e57c 	.word	0x1000e57c
10008660:	1000e5c8 	.word	0x1000e5c8
10008664:	1000e5e0 	.word	0x1000e5e0
10008668:	4002c000 	.word	0x4002c000

1000866c <spin_locks_reset>:

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
1000866c:	b580      	push	{r7, lr}
1000866e:	b084      	sub	sp, #16
10008670:	af00      	add	r7, sp, #0
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10008672:	2300      	movs	r3, #0
10008674:	60fb      	str	r3, [r7, #12]
10008676:	e012      	b.n	1000869e <spin_locks_reset+0x32>
10008678:	68fb      	ldr	r3, [r7, #12]
1000867a:	607b      	str	r3, [r7, #4]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000867c:	687b      	ldr	r3, [r7, #4]
1000867e:	4a0c      	ldr	r2, [pc, #48]	; (100086b0 <spin_locks_reset+0x44>)
10008680:	4694      	mov	ip, r2
10008682:	4463      	add	r3, ip
10008684:	009b      	lsls	r3, r3, #2
10008686:	60bb      	str	r3, [r7, #8]
    __asm volatile ("dmb" : : : "memory");
10008688:	f3bf 8f5f 	dmb	sy
}
1000868c:	46c0      	nop			; (mov r8, r8)
}
1000868e:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10008690:	68bb      	ldr	r3, [r7, #8]
10008692:	2200      	movs	r2, #0
10008694:	601a      	str	r2, [r3, #0]
}
10008696:	46c0      	nop			; (mov r8, r8)
10008698:	68fb      	ldr	r3, [r7, #12]
1000869a:	3301      	adds	r3, #1
1000869c:	60fb      	str	r3, [r7, #12]
1000869e:	68fb      	ldr	r3, [r7, #12]
100086a0:	2b1f      	cmp	r3, #31
100086a2:	d9e9      	bls.n	10008678 <spin_locks_reset+0xc>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
100086a4:	46c0      	nop			; (mov r8, r8)
100086a6:	46c0      	nop			; (mov r8, r8)
100086a8:	46bd      	mov	sp, r7
100086aa:	b004      	add	sp, #16
100086ac:	bd80      	pop	{r7, pc}
100086ae:	46c0      	nop			; (mov r8, r8)
100086b0:	34000040 	.word	0x34000040

100086b4 <next_striped_spin_lock_num>:
    spin_lock_t *lock = spin_lock_instance(lock_num);
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
100086b4:	b580      	push	{r7, lr}
100086b6:	b082      	sub	sp, #8
100086b8:	af00      	add	r7, sp, #0
    uint rc = striped_spin_lock_num++;
100086ba:	4b09      	ldr	r3, [pc, #36]	; (100086e0 <next_striped_spin_lock_num+0x2c>)
100086bc:	781b      	ldrb	r3, [r3, #0]
100086be:	1c5a      	adds	r2, r3, #1
100086c0:	b2d1      	uxtb	r1, r2
100086c2:	4a07      	ldr	r2, [pc, #28]	; (100086e0 <next_striped_spin_lock_num+0x2c>)
100086c4:	7011      	strb	r1, [r2, #0]
100086c6:	607b      	str	r3, [r7, #4]
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
100086c8:	4b05      	ldr	r3, [pc, #20]	; (100086e0 <next_striped_spin_lock_num+0x2c>)
100086ca:	781b      	ldrb	r3, [r3, #0]
100086cc:	2b17      	cmp	r3, #23
100086ce:	d902      	bls.n	100086d6 <next_striped_spin_lock_num+0x22>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
100086d0:	4b03      	ldr	r3, [pc, #12]	; (100086e0 <next_striped_spin_lock_num+0x2c>)
100086d2:	2210      	movs	r2, #16
100086d4:	701a      	strb	r2, [r3, #0]
    }
    return rc;
100086d6:	687b      	ldr	r3, [r7, #4]
}
100086d8:	0018      	movs	r0, r3
100086da:	46bd      	mov	sp, r7
100086dc:	b002      	add	sp, #8
100086de:	bd80      	pop	{r7, pc}
100086e0:	2000069c 	.word	0x2000069c

100086e4 <spin_lock_claim_unused>:
    check_lock_num(lock_num);
    spin_unlock_unsafe(spin_lock_instance(lock_num));
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
100086e4:	b580      	push	{r7, lr}
100086e6:	b084      	sub	sp, #16
100086e8:	af02      	add	r7, sp, #8
100086ea:	0002      	movs	r2, r0
100086ec:	1dfb      	adds	r3, r7, #7
100086ee:	701a      	strb	r2, [r3, #0]
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_LAST, "No spinlocks are available");
100086f0:	1dfb      	adds	r3, r7, #7
100086f2:	7819      	ldrb	r1, [r3, #0]
100086f4:	4805      	ldr	r0, [pc, #20]	; (1000870c <spin_lock_claim_unused+0x28>)
100086f6:	4b06      	ldr	r3, [pc, #24]	; (10008710 <spin_lock_claim_unused+0x2c>)
100086f8:	9300      	str	r3, [sp, #0]
100086fa:	231f      	movs	r3, #31
100086fc:	2218      	movs	r2, #24
100086fe:	f7fe fb49 	bl	10006d94 <hw_claim_unused_from_range>
10008702:	0003      	movs	r3, r0
}
10008704:	0018      	movs	r0, r3
10008706:	46bd      	mov	sp, r7
10008708:	b002      	add	sp, #8
1000870a:	bd80      	pop	{r7, pc}
1000870c:	20004d64 	.word	0x20004d64
10008710:	1000e698 	.word	0x1000e698

10008714 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10008714:	b580      	push	{r7, lr}
10008716:	b082      	sub	sp, #8
10008718:	af00      	add	r7, sp, #0
1000871a:	6038      	str	r0, [r7, #0]
1000871c:	6079      	str	r1, [r7, #4]
    return t._private_us_since_boot;
1000871e:	683a      	ldr	r2, [r7, #0]
10008720:	687b      	ldr	r3, [r7, #4]
}
10008722:	0010      	movs	r0, r2
10008724:	0019      	movs	r1, r3
10008726:	46bd      	mov	sp, r7
10008728:	b002      	add	sp, #8
1000872a:	bd80      	pop	{r7, pc}

1000872c <check_hardware_alarm_num_param>:
static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
1000872c:	b580      	push	{r7, lr}
1000872e:	b082      	sub	sp, #8
10008730:	af00      	add	r7, sp, #0
10008732:	6078      	str	r0, [r7, #4]
}
10008734:	46c0      	nop			; (mov r8, r8)
10008736:	46bd      	mov	sp, r7
10008738:	b002      	add	sp, #8
1000873a:	bd80      	pop	{r7, pc}

1000873c <irq_clear>:
 * as the the NVIC always reflects the current state of the IRQ state of the hardware for hardware IRQs, and clearing
 * of the IRQ state of the hardware is performed via the hardware's registers instead.
 *
 * \param int_num Interrupt number \ref interrupt_nums
 */
static inline void irq_clear(uint int_num) {
1000873c:	b580      	push	{r7, lr}
1000873e:	b082      	sub	sp, #8
10008740:	af00      	add	r7, sp, #0
10008742:	6078      	str	r0, [r7, #4]
    *((volatile uint32_t *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = (1u << ((uint32_t) (int_num & 0x1F)));
10008744:	687b      	ldr	r3, [r7, #4]
10008746:	221f      	movs	r2, #31
10008748:	401a      	ands	r2, r3
1000874a:	4b04      	ldr	r3, [pc, #16]	; (1000875c <irq_clear+0x20>)
1000874c:	2101      	movs	r1, #1
1000874e:	4091      	lsls	r1, r2
10008750:	000a      	movs	r2, r1
10008752:	601a      	str	r2, [r3, #0]
}
10008754:	46c0      	nop			; (mov r8, r8)
10008756:	46bd      	mov	sp, r7
10008758:	b002      	add	sp, #8
1000875a:	bd80      	pop	{r7, pc}
1000875c:	e000e280 	.word	0xe000e280

10008760 <hardware_alarm_claim>:
static uint8_t timer_callbacks_pending;

static_assert(NUM_TIMERS <= 4, "");
static uint8_t claimed;

void hardware_alarm_claim(uint alarm_num) {
10008760:	b580      	push	{r7, lr}
10008762:	b082      	sub	sp, #8
10008764:	af00      	add	r7, sp, #0
10008766:	6078      	str	r0, [r7, #4]
    check_hardware_alarm_num_param(alarm_num);
10008768:	687b      	ldr	r3, [r7, #4]
1000876a:	0018      	movs	r0, r3
1000876c:	f7ff ffde 	bl	1000872c <check_hardware_alarm_num_param>
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10008770:	4a04      	ldr	r2, [pc, #16]	; (10008784 <hardware_alarm_claim+0x24>)
10008772:	6879      	ldr	r1, [r7, #4]
10008774:	4b04      	ldr	r3, [pc, #16]	; (10008788 <hardware_alarm_claim+0x28>)
10008776:	0018      	movs	r0, r3
10008778:	f7fe fad9 	bl	10006d2e <hw_claim_or_assert>
}
1000877c:	46c0      	nop			; (mov r8, r8)
1000877e:	46bd      	mov	sp, r7
10008780:	b002      	add	sp, #8
10008782:	bd80      	pop	{r7, pc}
10008784:	1000e720 	.word	0x1000e720
10008788:	20009445 	.word	0x20009445

1000878c <time_us_64>:
    check_hardware_alarm_num_param(alarm_num);
    return hw_is_claimed(&claimed, alarm_num);
}

/// tag::time_us_64[]
uint64_t time_us_64() {
1000878c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000878e:	b087      	sub	sp, #28
10008790:	af00      	add	r7, sp, #0
    // Need to make sure that the upper 32 bits of the timer
    // don't change, so read that first
    uint32_t hi = timer_hw->timerawh;
10008792:	4e15      	ldr	r6, [pc, #84]	; (100087e8 <time_us_64+0x5c>)
10008794:	6a76      	ldr	r6, [r6, #36]	; 0x24
10008796:	617e      	str	r6, [r7, #20]
    uint32_t lo;
    do {
        // Read the lower 32 bits
        lo = timer_hw->timerawl;
10008798:	4e13      	ldr	r6, [pc, #76]	; (100087e8 <time_us_64+0x5c>)
1000879a:	6ab6      	ldr	r6, [r6, #40]	; 0x28
1000879c:	613e      	str	r6, [r7, #16]
        // Now read the upper 32 bits again and
        // check that it hasn't incremented. If it has loop around
        // and read the lower 32 bits again to get an accurate value
        uint32_t next_hi = timer_hw->timerawh;
1000879e:	4e12      	ldr	r6, [pc, #72]	; (100087e8 <time_us_64+0x5c>)
100087a0:	6a76      	ldr	r6, [r6, #36]	; 0x24
100087a2:	60fe      	str	r6, [r7, #12]
        if (hi == next_hi) break;
100087a4:	697e      	ldr	r6, [r7, #20]
100087a6:	46b4      	mov	ip, r6
100087a8:	68fe      	ldr	r6, [r7, #12]
100087aa:	45b4      	cmp	ip, r6
100087ac:	d002      	beq.n	100087b4 <time_us_64+0x28>
        hi = next_hi;
100087ae:	68fe      	ldr	r6, [r7, #12]
100087b0:	617e      	str	r6, [r7, #20]
    do {
100087b2:	e7f1      	b.n	10008798 <time_us_64+0xc>
        if (hi == next_hi) break;
100087b4:	46c0      	nop			; (mov r8, r8)
    } while (true);
    return ((uint64_t) hi << 32u) | lo;
100087b6:	697e      	ldr	r6, [r7, #20]
100087b8:	603e      	str	r6, [r7, #0]
100087ba:	2600      	movs	r6, #0
100087bc:	607e      	str	r6, [r7, #4]
100087be:	683e      	ldr	r6, [r7, #0]
100087c0:	0033      	movs	r3, r6
100087c2:	2600      	movs	r6, #0
100087c4:	0032      	movs	r2, r6
100087c6:	693e      	ldr	r6, [r7, #16]
100087c8:	0030      	movs	r0, r6
100087ca:	2600      	movs	r6, #0
100087cc:	0031      	movs	r1, r6
100087ce:	0016      	movs	r6, r2
100087d0:	4306      	orrs	r6, r0
100087d2:	0034      	movs	r4, r6
100087d4:	430b      	orrs	r3, r1
100087d6:	001d      	movs	r5, r3
100087d8:	0022      	movs	r2, r4
100087da:	002b      	movs	r3, r5
}
100087dc:	0010      	movs	r0, r2
100087de:	0019      	movs	r1, r3
100087e0:	46bd      	mov	sp, r7
100087e2:	b007      	add	sp, #28
100087e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100087e6:	46c0      	nop			; (mov r8, r8)
100087e8:	40054000 	.word	0x40054000

100087ec <harware_alarm_irq_number>:
        tight_loop_contents();
    }
}
/// \end::busy_wait[]

static inline uint harware_alarm_irq_number(uint alarm_num) {
100087ec:	b580      	push	{r7, lr}
100087ee:	b082      	sub	sp, #8
100087f0:	af00      	add	r7, sp, #0
100087f2:	6078      	str	r0, [r7, #4]
    return TIMER_IRQ_0 + alarm_num;
100087f4:	687b      	ldr	r3, [r7, #4]
}
100087f6:	0018      	movs	r0, r3
100087f8:	46bd      	mov	sp, r7
100087fa:	b002      	add	sp, #8
100087fc:	bd80      	pop	{r7, pc}
	...

10008800 <hardware_alarm_irq_handler>:

static void hardware_alarm_irq_handler(void) {
10008800:	b580      	push	{r7, lr}
10008802:	b08e      	sub	sp, #56	; 0x38
10008804:	af00      	add	r7, sp, #0
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10008806:	f3ef 8305 	mrs	r3, IPSR
1000880a:	633b      	str	r3, [r7, #48]	; 0x30
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
1000880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000880e:	223f      	movs	r2, #63	; 0x3f
10008810:	4013      	ands	r3, r2
10008812:	3b10      	subs	r3, #16
10008814:	62fb      	str	r3, [r7, #44]	; 0x2c
    check_hardware_alarm_num_param(alarm_num);
10008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10008818:	0018      	movs	r0, r3
1000881a:	f7ff ff87 	bl	1000872c <check_hardware_alarm_num_param>

    hardware_alarm_callback_t callback = NULL;
1000881e:	2300      	movs	r3, #0
10008820:	637b      	str	r3, [r7, #52]	; 0x34
10008822:	230a      	movs	r3, #10
10008824:	613b      	str	r3, [r7, #16]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10008826:	693b      	ldr	r3, [r7, #16]
10008828:	4a38      	ldr	r2, [pc, #224]	; (1000890c <hardware_alarm_irq_handler+0x10c>)
1000882a:	4694      	mov	ip, r2
1000882c:	4463      	add	r3, ip
1000882e:	009b      	lsls	r3, r3, #2

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
10008830:	62bb      	str	r3, [r7, #40]	; 0x28
10008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008834:	623b      	str	r3, [r7, #32]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10008836:	f3ef 8310 	mrs	r3, PRIMASK
1000883a:	61fb      	str	r3, [r7, #28]
    __asm volatile ("cpsid i");
1000883c:	b672      	cpsid	i
    return status;
1000883e:	69fb      	ldr	r3, [r7, #28]
    uint32_t save = save_and_disable_interrupts();
10008840:	61bb      	str	r3, [r7, #24]
10008842:	6a3b      	ldr	r3, [r7, #32]
10008844:	617b      	str	r3, [r7, #20]
    while (__builtin_expect(!*lock, 0));
10008846:	46c0      	nop			; (mov r8, r8)
10008848:	697b      	ldr	r3, [r7, #20]
1000884a:	681b      	ldr	r3, [r3, #0]
1000884c:	425a      	negs	r2, r3
1000884e:	4153      	adcs	r3, r2
10008850:	b2db      	uxtb	r3, r3
10008852:	2b00      	cmp	r3, #0
10008854:	d1f8      	bne.n	10008848 <hardware_alarm_irq_handler+0x48>
    __asm volatile ("dmb" : : : "memory");
10008856:	f3bf 8f5f 	dmb	sy
}
1000885a:	46c0      	nop			; (mov r8, r8)
}
1000885c:	46c0      	nop			; (mov r8, r8)
}
1000885e:	46c0      	nop			; (mov r8, r8)
    return save;
10008860:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = spin_lock_blocking(lock);
10008862:	627b      	str	r3, [r7, #36]	; 0x24
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10008864:	4b2a      	ldr	r3, [pc, #168]	; (10008910 <hardware_alarm_irq_handler+0x110>)
10008866:	2101      	movs	r1, #1
10008868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000886a:	4091      	lsls	r1, r2
1000886c:	000a      	movs	r2, r1
1000886e:	635a      	str	r2, [r3, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10008870:	4b28      	ldr	r3, [pc, #160]	; (10008914 <hardware_alarm_irq_handler+0x114>)
10008872:	781b      	ldrb	r3, [r3, #0]
10008874:	001a      	movs	r2, r3
10008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10008878:	40da      	lsrs	r2, r3
1000887a:	0013      	movs	r3, r2
1000887c:	2201      	movs	r2, #1
1000887e:	4013      	ands	r3, r2
10008880:	d024      	beq.n	100088cc <hardware_alarm_irq_handler+0xcc>
        // Now check whether we have a timer event to handle that isn't already obsolete (this could happen if we
        // were already in the IRQ handler before someone else changed the timer setup
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10008882:	4b23      	ldr	r3, [pc, #140]	; (10008910 <hardware_alarm_irq_handler+0x110>)
10008884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10008886:	4b24      	ldr	r3, [pc, #144]	; (10008918 <hardware_alarm_irq_handler+0x118>)
10008888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000888a:	0089      	lsls	r1, r1, #2
1000888c:	58cb      	ldr	r3, [r1, r3]
1000888e:	429a      	cmp	r2, r3
10008890:	d312      	bcc.n	100088b8 <hardware_alarm_irq_handler+0xb8>
            // we have reached the right high word as well as low word value
            callback = alarm_callbacks[alarm_num];
10008892:	4b22      	ldr	r3, [pc, #136]	; (1000891c <hardware_alarm_irq_handler+0x11c>)
10008894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10008896:	0092      	lsls	r2, r2, #2
10008898:	58d3      	ldr	r3, [r2, r3]
1000889a:	637b      	str	r3, [r7, #52]	; 0x34
            timer_callbacks_pending &= (uint8_t)~(1u << alarm_num);
1000889c:	2201      	movs	r2, #1
1000889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100088a0:	409a      	lsls	r2, r3
100088a2:	0013      	movs	r3, r2
100088a4:	b2db      	uxtb	r3, r3
100088a6:	43db      	mvns	r3, r3
100088a8:	b2db      	uxtb	r3, r3
100088aa:	4a1a      	ldr	r2, [pc, #104]	; (10008914 <hardware_alarm_irq_handler+0x114>)
100088ac:	7812      	ldrb	r2, [r2, #0]
100088ae:	4013      	ands	r3, r2
100088b0:	b2da      	uxtb	r2, r3
100088b2:	4b18      	ldr	r3, [pc, #96]	; (10008914 <hardware_alarm_irq_handler+0x114>)
100088b4:	701a      	strb	r2, [r3, #0]
100088b6:	e009      	b.n	100088cc <hardware_alarm_irq_handler+0xcc>
        } else {
            // try again in 2^32 us
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
100088b8:	4a15      	ldr	r2, [pc, #84]	; (10008910 <hardware_alarm_irq_handler+0x110>)
100088ba:	4915      	ldr	r1, [pc, #84]	; (10008910 <hardware_alarm_irq_handler+0x110>)
100088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100088be:	3304      	adds	r3, #4
100088c0:	009b      	lsls	r3, r3, #2
100088c2:	589a      	ldr	r2, [r3, r2]
100088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100088c6:	3304      	adds	r3, #4
100088c8:	009b      	lsls	r3, r3, #2
100088ca:	505a      	str	r2, [r3, r1]
100088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
100088ce:	60fb      	str	r3, [r7, #12]
100088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100088d2:	60bb      	str	r3, [r7, #8]
100088d4:	68fb      	ldr	r3, [r7, #12]
100088d6:	607b      	str	r3, [r7, #4]
    __asm volatile ("dmb" : : : "memory");
100088d8:	f3bf 8f5f 	dmb	sy
}
100088dc:	46c0      	nop			; (mov r8, r8)
}
100088de:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
100088e0:	687b      	ldr	r3, [r7, #4]
100088e2:	2200      	movs	r2, #0
100088e4:	601a      	str	r2, [r3, #0]
}
100088e6:	46c0      	nop			; (mov r8, r8)
100088e8:	68bb      	ldr	r3, [r7, #8]
100088ea:	603b      	str	r3, [r7, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100088ec:	683b      	ldr	r3, [r7, #0]
100088ee:	f383 8810 	msr	PRIMASK, r3
}
100088f2:	46c0      	nop			; (mov r8, r8)
}
100088f4:	46c0      	nop			; (mov r8, r8)
        }
    }

    spin_unlock(lock, save);

    if (callback) {
100088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100088f8:	2b00      	cmp	r3, #0
100088fa:	d003      	beq.n	10008904 <hardware_alarm_irq_handler+0x104>
        callback(alarm_num);
100088fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100088fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008900:	0010      	movs	r0, r2
10008902:	4798      	blx	r3
    }
}
10008904:	46c0      	nop			; (mov r8, r8)
10008906:	46bd      	mov	sp, r7
10008908:	b00e      	add	sp, #56	; 0x38
1000890a:	bd80      	pop	{r7, pc}
1000890c:	34000040 	.word	0x34000040
10008910:	40054000 	.word	0x40054000
10008914:	20009447 	.word	0x20009447
10008918:	2000940c 	.word	0x2000940c
1000891c:	20004c54 	.word	0x20004c54

10008920 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10008920:	b580      	push	{r7, lr}
10008922:	b090      	sub	sp, #64	; 0x40
10008924:	af00      	add	r7, sp, #0
10008926:	6078      	str	r0, [r7, #4]
10008928:	6039      	str	r1, [r7, #0]
    // todo check current core owner
    //  note this should probably be subsumed by irq_set_exclusive_handler anyway, since that
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
1000892a:	687b      	ldr	r3, [r7, #4]
1000892c:	0018      	movs	r0, r3
1000892e:	f7ff fefd 	bl	1000872c <check_hardware_alarm_num_param>
    uint irq_num = harware_alarm_irq_number(alarm_num);
10008932:	687b      	ldr	r3, [r7, #4]
10008934:	0018      	movs	r0, r3
10008936:	f7ff ff59 	bl	100087ec <harware_alarm_irq_number>
1000893a:	0003      	movs	r3, r0
1000893c:	63fb      	str	r3, [r7, #60]	; 0x3c
1000893e:	230a      	movs	r3, #10
10008940:	623b      	str	r3, [r7, #32]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10008942:	6a3b      	ldr	r3, [r7, #32]
10008944:	4a3e      	ldr	r2, [pc, #248]	; (10008a40 <hardware_alarm_set_callback+0x120>)
10008946:	4694      	mov	ip, r2
10008948:	4463      	add	r3, ip
1000894a:	009b      	lsls	r3, r3, #2
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
1000894c:	63bb      	str	r3, [r7, #56]	; 0x38
1000894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10008950:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10008952:	f3ef 8310 	mrs	r3, PRIMASK
10008956:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("cpsid i");
10008958:	b672      	cpsid	i
    return status;
1000895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    uint32_t save = save_and_disable_interrupts();
1000895c:	62bb      	str	r3, [r7, #40]	; 0x28
1000895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008960:	627b      	str	r3, [r7, #36]	; 0x24
    while (__builtin_expect(!*lock, 0));
10008962:	46c0      	nop			; (mov r8, r8)
10008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10008966:	681b      	ldr	r3, [r3, #0]
10008968:	425a      	negs	r2, r3
1000896a:	4153      	adcs	r3, r2
1000896c:	b2db      	uxtb	r3, r3
1000896e:	2b00      	cmp	r3, #0
10008970:	d1f8      	bne.n	10008964 <hardware_alarm_set_callback+0x44>
    __asm volatile ("dmb" : : : "memory");
10008972:	f3bf 8f5f 	dmb	sy
}
10008976:	46c0      	nop			; (mov r8, r8)
}
10008978:	46c0      	nop			; (mov r8, r8)
}
1000897a:	46c0      	nop			; (mov r8, r8)
    return save;
1000897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    uint32_t save = spin_lock_blocking(lock);
1000897e:	637b      	str	r3, [r7, #52]	; 0x34
    if (callback) {
10008980:	683b      	ldr	r3, [r7, #0]
10008982:	2b00      	cmp	r3, #0
10008984:	d026      	beq.n	100089d4 <hardware_alarm_set_callback+0xb4>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10008986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10008988:	0018      	movs	r0, r3
1000898a:	f7fe fded 	bl	10007568 <irq_get_vtable_handler>
1000898e:	0002      	movs	r2, r0
10008990:	4b2c      	ldr	r3, [pc, #176]	; (10008a44 <hardware_alarm_set_callback+0x124>)
10008992:	429a      	cmp	r2, r3
10008994:	d018      	beq.n	100089c8 <hardware_alarm_set_callback+0xa8>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10008996:	4a2b      	ldr	r2, [pc, #172]	; (10008a44 <hardware_alarm_set_callback+0x124>)
10008998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000899a:	0011      	movs	r1, r2
1000899c:	0018      	movs	r0, r3
1000899e:	f7fe fdf7 	bl	10007590 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
100089a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100089a4:	2101      	movs	r1, #1
100089a6:	0018      	movs	r0, r3
100089a8:	f7fe fd7c 	bl	100074a4 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
100089ac:	2201      	movs	r2, #1
100089ae:	687b      	ldr	r3, [r7, #4]
100089b0:	409a      	lsls	r2, r3
100089b2:	0013      	movs	r3, r2
100089b4:	4a24      	ldr	r2, [pc, #144]	; (10008a48 <hardware_alarm_set_callback+0x128>)
100089b6:	61fa      	str	r2, [r7, #28]
100089b8:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100089ba:	69fb      	ldr	r3, [r7, #28]
100089bc:	2280      	movs	r2, #128	; 0x80
100089be:	0192      	lsls	r2, r2, #6
100089c0:	4313      	orrs	r3, r2
100089c2:	69ba      	ldr	r2, [r7, #24]
100089c4:	601a      	str	r2, [r3, #0]
}
100089c6:	46c0      	nop			; (mov r8, r8)
        }
        alarm_callbacks[alarm_num] = callback;
100089c8:	4b20      	ldr	r3, [pc, #128]	; (10008a4c <hardware_alarm_set_callback+0x12c>)
100089ca:	687a      	ldr	r2, [r7, #4]
100089cc:	0092      	lsls	r2, r2, #2
100089ce:	6839      	ldr	r1, [r7, #0]
100089d0:	50d1      	str	r1, [r2, r3]
100089d2:	e01c      	b.n	10008a0e <hardware_alarm_set_callback+0xee>
    } else {
        alarm_callbacks[alarm_num] = NULL;
100089d4:	4b1d      	ldr	r3, [pc, #116]	; (10008a4c <hardware_alarm_set_callback+0x12c>)
100089d6:	687a      	ldr	r2, [r7, #4]
100089d8:	0092      	lsls	r2, r2, #2
100089da:	2100      	movs	r1, #0
100089dc:	50d1      	str	r1, [r2, r3]
        timer_callbacks_pending &= (uint8_t)~(1u << alarm_num);
100089de:	2201      	movs	r2, #1
100089e0:	687b      	ldr	r3, [r7, #4]
100089e2:	409a      	lsls	r2, r3
100089e4:	0013      	movs	r3, r2
100089e6:	b2db      	uxtb	r3, r3
100089e8:	43db      	mvns	r3, r3
100089ea:	b2db      	uxtb	r3, r3
100089ec:	4a18      	ldr	r2, [pc, #96]	; (10008a50 <hardware_alarm_set_callback+0x130>)
100089ee:	7812      	ldrb	r2, [r2, #0]
100089f0:	4013      	ands	r3, r2
100089f2:	b2da      	uxtb	r2, r3
100089f4:	4b16      	ldr	r3, [pc, #88]	; (10008a50 <hardware_alarm_set_callback+0x130>)
100089f6:	701a      	strb	r2, [r3, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
100089f8:	4a12      	ldr	r2, [pc, #72]	; (10008a44 <hardware_alarm_set_callback+0x124>)
100089fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100089fc:	0011      	movs	r1, r2
100089fe:	0018      	movs	r0, r3
10008a00:	f7fe fee4 	bl	100077cc <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10008a06:	2100      	movs	r1, #0
10008a08:	0018      	movs	r0, r3
10008a0a:	f7fe fd4b 	bl	100074a4 <irq_set_enabled>
10008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10008a10:	617b      	str	r3, [r7, #20]
10008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008a14:	613b      	str	r3, [r7, #16]
10008a16:	697b      	ldr	r3, [r7, #20]
10008a18:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
10008a1a:	f3bf 8f5f 	dmb	sy
}
10008a1e:	46c0      	nop			; (mov r8, r8)
}
10008a20:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10008a22:	68fb      	ldr	r3, [r7, #12]
10008a24:	2200      	movs	r2, #0
10008a26:	601a      	str	r2, [r3, #0]
}
10008a28:	46c0      	nop			; (mov r8, r8)
10008a2a:	693b      	ldr	r3, [r7, #16]
10008a2c:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10008a2e:	68bb      	ldr	r3, [r7, #8]
10008a30:	f383 8810 	msr	PRIMASK, r3
}
10008a34:	46c0      	nop			; (mov r8, r8)
}
10008a36:	46c0      	nop			; (mov r8, r8)
    }
    spin_unlock(lock, save);
}
10008a38:	46c0      	nop			; (mov r8, r8)
10008a3a:	46bd      	mov	sp, r7
10008a3c:	b010      	add	sp, #64	; 0x40
10008a3e:	bd80      	pop	{r7, pc}
10008a40:	34000040 	.word	0x34000040
10008a44:	10008801 	.word	0x10008801
10008a48:	40054038 	.word	0x40054038
10008a4c:	20004c54 	.word	0x20004c54
10008a50:	20009447 	.word	0x20009447

10008a54 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10008a54:	b5b0      	push	{r4, r5, r7, lr}
10008a56:	b096      	sub	sp, #88	; 0x58
10008a58:	af00      	add	r7, sp, #0
10008a5a:	60f8      	str	r0, [r7, #12]
10008a5c:	603a      	str	r2, [r7, #0]
10008a5e:	607b      	str	r3, [r7, #4]
    bool missed;
    uint64_t now = time_us_64();
10008a60:	f7ff fe94 	bl	1000878c <time_us_64>
10008a64:	0002      	movs	r2, r0
10008a66:	000b      	movs	r3, r1
10008a68:	64ba      	str	r2, [r7, #72]	; 0x48
10008a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint64_t t = to_us_since_boot(target);
10008a6c:	683a      	ldr	r2, [r7, #0]
10008a6e:	687b      	ldr	r3, [r7, #4]
10008a70:	0010      	movs	r0, r2
10008a72:	0019      	movs	r1, r3
10008a74:	f7ff fe4e 	bl	10008714 <to_us_since_boot>
10008a78:	0002      	movs	r2, r0
10008a7a:	000b      	movs	r3, r1
10008a7c:	643a      	str	r2, [r7, #64]	; 0x40
10008a7e:	647b      	str	r3, [r7, #68]	; 0x44
    if (now >= t) {
10008a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10008a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10008a84:	429a      	cmp	r2, r3
10008a86:	d80c      	bhi.n	10008aa2 <hardware_alarm_set_target+0x4e>
10008a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
10008a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10008a8c:	429a      	cmp	r2, r3
10008a8e:	d103      	bne.n	10008a98 <hardware_alarm_set_target+0x44>
10008a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10008a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10008a94:	429a      	cmp	r2, r3
10008a96:	d804      	bhi.n	10008aa2 <hardware_alarm_set_target+0x4e>
        missed = true;
10008a98:	2357      	movs	r3, #87	; 0x57
10008a9a:	18fb      	adds	r3, r7, r3
10008a9c:	2201      	movs	r2, #1
10008a9e:	701a      	strb	r2, [r3, #0]
10008aa0:	e0a4      	b.n	10008bec <hardware_alarm_set_target+0x198>
    } else {
        missed = false;
10008aa2:	2357      	movs	r3, #87	; 0x57
10008aa4:	18fb      	adds	r3, r7, r3
10008aa6:	2200      	movs	r2, #0
10008aa8:	701a      	strb	r2, [r3, #0]
10008aaa:	230a      	movs	r3, #10
10008aac:	623b      	str	r3, [r7, #32]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10008aae:	6a3b      	ldr	r3, [r7, #32]
10008ab0:	4a52      	ldr	r2, [pc, #328]	; (10008bfc <hardware_alarm_set_target+0x1a8>)
10008ab2:	4694      	mov	ip, r2
10008ab4:	4463      	add	r3, ip
10008ab6:	009b      	lsls	r3, r3, #2

        // 1) actually set the hardware timer
        spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
10008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
10008aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10008abc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10008abe:	f3ef 8310 	mrs	r3, PRIMASK
10008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm volatile ("cpsid i");
10008ac4:	b672      	cpsid	i
    return status;
10008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    uint32_t save = save_and_disable_interrupts();
10008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
10008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008acc:	627b      	str	r3, [r7, #36]	; 0x24
    while (__builtin_expect(!*lock, 0));
10008ace:	46c0      	nop			; (mov r8, r8)
10008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10008ad2:	681b      	ldr	r3, [r3, #0]
10008ad4:	425a      	negs	r2, r3
10008ad6:	4153      	adcs	r3, r2
10008ad8:	b2db      	uxtb	r3, r3
10008ada:	2b00      	cmp	r3, #0
10008adc:	d1f8      	bne.n	10008ad0 <hardware_alarm_set_target+0x7c>
    __asm volatile ("dmb" : : : "memory");
10008ade:	f3bf 8f5f 	dmb	sy
}
10008ae2:	46c0      	nop			; (mov r8, r8)
}
10008ae4:	46c0      	nop			; (mov r8, r8)
}
10008ae6:	46c0      	nop			; (mov r8, r8)
    return save;
10008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        uint32_t save = spin_lock_blocking(lock);
10008aea:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t old_timer_callbacks_pending = timer_callbacks_pending;
10008aec:	2337      	movs	r3, #55	; 0x37
10008aee:	18fb      	adds	r3, r7, r3
10008af0:	4a43      	ldr	r2, [pc, #268]	; (10008c00 <hardware_alarm_set_target+0x1ac>)
10008af2:	7812      	ldrb	r2, [r2, #0]
10008af4:	701a      	strb	r2, [r3, #0]
        timer_callbacks_pending |= (uint8_t)(1u << alarm_num);
10008af6:	2201      	movs	r2, #1
10008af8:	68fb      	ldr	r3, [r7, #12]
10008afa:	409a      	lsls	r2, r3
10008afc:	0013      	movs	r3, r2
10008afe:	b2da      	uxtb	r2, r3
10008b00:	4b3f      	ldr	r3, [pc, #252]	; (10008c00 <hardware_alarm_set_target+0x1ac>)
10008b02:	781b      	ldrb	r3, [r3, #0]
10008b04:	4313      	orrs	r3, r2
10008b06:	b2da      	uxtb	r2, r3
10008b08:	4b3d      	ldr	r3, [pc, #244]	; (10008c00 <hardware_alarm_set_target+0x1ac>)
10008b0a:	701a      	strb	r2, [r3, #0]
        timer_hw->intr = 1u << alarm_num; // clear any IRQ
10008b0c:	4b3d      	ldr	r3, [pc, #244]	; (10008c04 <hardware_alarm_set_target+0x1b0>)
10008b0e:	2101      	movs	r1, #1
10008b10:	68fa      	ldr	r2, [r7, #12]
10008b12:	4091      	lsls	r1, r2
10008b14:	000a      	movs	r2, r1
10008b16:	635a      	str	r2, [r3, #52]	; 0x34
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10008b18:	493a      	ldr	r1, [pc, #232]	; (10008c04 <hardware_alarm_set_target+0x1b0>)
10008b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
10008b1c:	68fb      	ldr	r3, [r7, #12]
10008b1e:	3304      	adds	r3, #4
10008b20:	009b      	lsls	r3, r3, #2
10008b22:	505a      	str	r2, [r3, r1]
        // Set the alarm. Writing time should arm it
        target_hi[alarm_num] = (uint32_t)(t >> 32u);
10008b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10008b26:	001c      	movs	r4, r3
10008b28:	2300      	movs	r3, #0
10008b2a:	001d      	movs	r5, r3
10008b2c:	0021      	movs	r1, r4
10008b2e:	4b36      	ldr	r3, [pc, #216]	; (10008c08 <hardware_alarm_set_target+0x1b4>)
10008b30:	68fa      	ldr	r2, [r7, #12]
10008b32:	0092      	lsls	r2, r2, #2
10008b34:	50d1      	str	r1, [r2, r3]

        // 2) check for races
        if (!(timer_hw->armed & 1u << alarm_num)) {
10008b36:	4b33      	ldr	r3, [pc, #204]	; (10008c04 <hardware_alarm_set_target+0x1b0>)
10008b38:	6a1b      	ldr	r3, [r3, #32]
10008b3a:	2101      	movs	r1, #1
10008b3c:	68fa      	ldr	r2, [r7, #12]
10008b3e:	4091      	lsls	r1, r2
10008b40:	000a      	movs	r2, r1
10008b42:	4013      	ands	r3, r2
10008b44:	d10d      	bne.n	10008b62 <hardware_alarm_set_target+0x10e>
            // not armed, so has already fired .. IRQ must be pending (we are still under lock)
            assert(timer_hw->ints & 1u << alarm_num);
10008b46:	4b2f      	ldr	r3, [pc, #188]	; (10008c04 <hardware_alarm_set_target+0x1b0>)
10008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10008b4a:	2101      	movs	r1, #1
10008b4c:	68fa      	ldr	r2, [r7, #12]
10008b4e:	4091      	lsls	r1, r2
10008b50:	000a      	movs	r2, r1
10008b52:	4013      	ands	r3, r2
10008b54:	d135      	bne.n	10008bc2 <hardware_alarm_set_target+0x16e>
10008b56:	4b2d      	ldr	r3, [pc, #180]	; (10008c0c <hardware_alarm_set_target+0x1b8>)
10008b58:	4a2d      	ldr	r2, [pc, #180]	; (10008c10 <hardware_alarm_set_target+0x1bc>)
10008b5a:	482e      	ldr	r0, [pc, #184]	; (10008c14 <hardware_alarm_set_target+0x1c0>)
10008b5c:	21c1      	movs	r1, #193	; 0xc1
10008b5e:	f002 f8e5 	bl	1000ad2c <__assert_func>
        } else {
            if (time_us_64() >= t) {
10008b62:	f7ff fe13 	bl	1000878c <time_us_64>
10008b66:	0002      	movs	r2, r0
10008b68:	000b      	movs	r3, r1
10008b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
10008b6c:	4299      	cmp	r1, r3
10008b6e:	d828      	bhi.n	10008bc2 <hardware_alarm_set_target+0x16e>
10008b70:	6c79      	ldr	r1, [r7, #68]	; 0x44
10008b72:	4299      	cmp	r1, r3
10008b74:	d102      	bne.n	10008b7c <hardware_alarm_set_target+0x128>
10008b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
10008b78:	4291      	cmp	r1, r2
10008b7a:	d822      	bhi.n	10008bc2 <hardware_alarm_set_target+0x16e>
                // we are already at or past the right time; there is no point in us racing against the IRQ
                // we are about to generate. note however that, if there was already a timer pending before,
                // then we still let the IRQ fire, as whatever it was, is not handled by our setting missed=true here
                missed = true;
10008b7c:	2357      	movs	r3, #87	; 0x57
10008b7e:	18fb      	adds	r3, r7, r3
10008b80:	2201      	movs	r2, #1
10008b82:	701a      	strb	r2, [r3, #0]
                if (timer_callbacks_pending != old_timer_callbacks_pending) {
10008b84:	4b1e      	ldr	r3, [pc, #120]	; (10008c00 <hardware_alarm_set_target+0x1ac>)
10008b86:	781b      	ldrb	r3, [r3, #0]
10008b88:	2437      	movs	r4, #55	; 0x37
10008b8a:	193a      	adds	r2, r7, r4
10008b8c:	7812      	ldrb	r2, [r2, #0]
10008b8e:	429a      	cmp	r2, r3
10008b90:	d017      	beq.n	10008bc2 <hardware_alarm_set_target+0x16e>
                    // disarm the timer
                    timer_hw->armed = 1u << alarm_num;
10008b92:	4b1c      	ldr	r3, [pc, #112]	; (10008c04 <hardware_alarm_set_target+0x1b0>)
10008b94:	2101      	movs	r1, #1
10008b96:	68fa      	ldr	r2, [r7, #12]
10008b98:	4091      	lsls	r1, r2
10008b9a:	000a      	movs	r2, r1
10008b9c:	621a      	str	r2, [r3, #32]
                    // clear the IRQ...
                    timer_hw->intr = 1u << alarm_num;
10008b9e:	4b19      	ldr	r3, [pc, #100]	; (10008c04 <hardware_alarm_set_target+0x1b0>)
10008ba0:	2101      	movs	r1, #1
10008ba2:	68fa      	ldr	r2, [r7, #12]
10008ba4:	4091      	lsls	r1, r2
10008ba6:	000a      	movs	r2, r1
10008ba8:	635a      	str	r2, [r3, #52]	; 0x34
                    // ... including anything pending on the processor - perhaps unnecessary, but
                    // our timer flag says we aren't expecting anything.
                    irq_clear(harware_alarm_irq_number(alarm_num));
10008baa:	68fb      	ldr	r3, [r7, #12]
10008bac:	0018      	movs	r0, r3
10008bae:	f7ff fe1d 	bl	100087ec <harware_alarm_irq_number>
10008bb2:	0003      	movs	r3, r0
10008bb4:	0018      	movs	r0, r3
10008bb6:	f7ff fdc1 	bl	1000873c <irq_clear>
                    // and clear our flag so that if the IRQ handler is already active (because it is on
                    // the other core) it will also skip doing anything
                    timer_callbacks_pending = old_timer_callbacks_pending;
10008bba:	4b11      	ldr	r3, [pc, #68]	; (10008c00 <hardware_alarm_set_target+0x1ac>)
10008bbc:	193a      	adds	r2, r7, r4
10008bbe:	7812      	ldrb	r2, [r2, #0]
10008bc0:	701a      	strb	r2, [r3, #0]
10008bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10008bc4:	61fb      	str	r3, [r7, #28]
10008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10008bc8:	61bb      	str	r3, [r7, #24]
10008bca:	69fb      	ldr	r3, [r7, #28]
10008bcc:	617b      	str	r3, [r7, #20]
    __asm volatile ("dmb" : : : "memory");
10008bce:	f3bf 8f5f 	dmb	sy
}
10008bd2:	46c0      	nop			; (mov r8, r8)
}
10008bd4:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10008bd6:	697b      	ldr	r3, [r7, #20]
10008bd8:	2200      	movs	r2, #0
10008bda:	601a      	str	r2, [r3, #0]
}
10008bdc:	46c0      	nop			; (mov r8, r8)
10008bde:	69bb      	ldr	r3, [r7, #24]
10008be0:	613b      	str	r3, [r7, #16]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10008be2:	693b      	ldr	r3, [r7, #16]
10008be4:	f383 8810 	msr	PRIMASK, r3
}
10008be8:	46c0      	nop			; (mov r8, r8)
}
10008bea:	46c0      	nop			; (mov r8, r8)
            }
        }
        spin_unlock(lock, save);
        // note at this point any pending timer IRQ can likely run
    }
    return missed;
10008bec:	2357      	movs	r3, #87	; 0x57
10008bee:	18fb      	adds	r3, r7, r3
10008bf0:	781b      	ldrb	r3, [r3, #0]
}
10008bf2:	0018      	movs	r0, r3
10008bf4:	46bd      	mov	sp, r7
10008bf6:	b016      	add	sp, #88	; 0x58
10008bf8:	bdb0      	pop	{r4, r5, r7, pc}
10008bfa:	46c0      	nop			; (mov r8, r8)
10008bfc:	34000040 	.word	0x34000040
10008c00:	20009447 	.word	0x20009447
10008c04:	40054000 	.word	0x40054000
10008c08:	2000940c 	.word	0x2000940c
10008c0c:	1000e744 	.word	0x1000e744
10008c10:	1000e7c0 	.word	0x1000e7c0
10008c14:	1000e768 	.word	0x1000e768

10008c18 <hardware_alarm_cancel>:

void hardware_alarm_cancel(uint alarm_num) {
10008c18:	b580      	push	{r7, lr}
10008c1a:	b08e      	sub	sp, #56	; 0x38
10008c1c:	af00      	add	r7, sp, #0
10008c1e:	6078      	str	r0, [r7, #4]
    check_hardware_alarm_num_param(alarm_num);
10008c20:	687b      	ldr	r3, [r7, #4]
10008c22:	0018      	movs	r0, r3
10008c24:	f7ff fd82 	bl	1000872c <check_hardware_alarm_num_param>
10008c28:	230a      	movs	r3, #10
10008c2a:	60fb      	str	r3, [r7, #12]
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10008c2c:	68fb      	ldr	r3, [r7, #12]
10008c2e:	4a25      	ldr	r2, [pc, #148]	; (10008cc4 <hardware_alarm_cancel+0xac>)
10008c30:	4694      	mov	ip, r2
10008c32:	4463      	add	r3, ip
10008c34:	009b      	lsls	r3, r3, #2

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
10008c36:	637b      	str	r3, [r7, #52]	; 0x34
10008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c3a:	61fb      	str	r3, [r7, #28]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10008c3c:	f3ef 8310 	mrs	r3, PRIMASK
10008c40:	61bb      	str	r3, [r7, #24]
    __asm volatile ("cpsid i");
10008c42:	b672      	cpsid	i
    return status;
10008c44:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
10008c46:	617b      	str	r3, [r7, #20]
10008c48:	69fb      	ldr	r3, [r7, #28]
10008c4a:	613b      	str	r3, [r7, #16]
    while (__builtin_expect(!*lock, 0));
10008c4c:	46c0      	nop			; (mov r8, r8)
10008c4e:	693b      	ldr	r3, [r7, #16]
10008c50:	681b      	ldr	r3, [r3, #0]
10008c52:	425a      	negs	r2, r3
10008c54:	4153      	adcs	r3, r2
10008c56:	b2db      	uxtb	r3, r3
10008c58:	2b00      	cmp	r3, #0
10008c5a:	d1f8      	bne.n	10008c4e <hardware_alarm_cancel+0x36>
    __asm volatile ("dmb" : : : "memory");
10008c5c:	f3bf 8f5f 	dmb	sy
}
10008c60:	46c0      	nop			; (mov r8, r8)
}
10008c62:	46c0      	nop			; (mov r8, r8)
}
10008c64:	46c0      	nop			; (mov r8, r8)
    return save;
10008c66:	697b      	ldr	r3, [r7, #20]
    uint32_t save = spin_lock_blocking(lock);
10008c68:	633b      	str	r3, [r7, #48]	; 0x30
    timer_hw->armed = 1u << alarm_num;
10008c6a:	4b17      	ldr	r3, [pc, #92]	; (10008cc8 <hardware_alarm_cancel+0xb0>)
10008c6c:	2101      	movs	r1, #1
10008c6e:	687a      	ldr	r2, [r7, #4]
10008c70:	4091      	lsls	r1, r2
10008c72:	000a      	movs	r2, r1
10008c74:	621a      	str	r2, [r3, #32]
    timer_callbacks_pending &= (uint8_t)~(1u << alarm_num);
10008c76:	2201      	movs	r2, #1
10008c78:	687b      	ldr	r3, [r7, #4]
10008c7a:	409a      	lsls	r2, r3
10008c7c:	0013      	movs	r3, r2
10008c7e:	b2db      	uxtb	r3, r3
10008c80:	43db      	mvns	r3, r3
10008c82:	b2db      	uxtb	r3, r3
10008c84:	4a11      	ldr	r2, [pc, #68]	; (10008ccc <hardware_alarm_cancel+0xb4>)
10008c86:	7812      	ldrb	r2, [r2, #0]
10008c88:	4013      	ands	r3, r2
10008c8a:	b2da      	uxtb	r2, r3
10008c8c:	4b0f      	ldr	r3, [pc, #60]	; (10008ccc <hardware_alarm_cancel+0xb4>)
10008c8e:	701a      	strb	r2, [r3, #0]
10008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
10008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10008c96:	62bb      	str	r3, [r7, #40]	; 0x28
10008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10008c9a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("dmb" : : : "memory");
10008c9c:	f3bf 8f5f 	dmb	sy
}
10008ca0:	46c0      	nop			; (mov r8, r8)
}
10008ca2:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
10008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10008ca6:	2200      	movs	r2, #0
10008ca8:	601a      	str	r2, [r3, #0]
}
10008caa:	46c0      	nop			; (mov r8, r8)
10008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008cae:	623b      	str	r3, [r7, #32]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10008cb0:	6a3b      	ldr	r3, [r7, #32]
10008cb2:	f383 8810 	msr	PRIMASK, r3
}
10008cb6:	46c0      	nop			; (mov r8, r8)
}
10008cb8:	46c0      	nop			; (mov r8, r8)
    spin_unlock(lock, save);
}
10008cba:	46c0      	nop			; (mov r8, r8)
10008cbc:	46bd      	mov	sp, r7
10008cbe:	b00e      	add	sp, #56	; 0x38
10008cc0:	bd80      	pop	{r7, pc}
10008cc2:	46c0      	nop			; (mov r8, r8)
10008cc4:	34000040 	.word	0x34000040
10008cc8:	40054000 	.word	0x40054000
10008ccc:	20009447 	.word	0x20009447

10008cd0 <uart_get_index>:
static inline uint uart_get_index(uart_inst_t *uart) {
10008cd0:	b580      	push	{r7, lr}
10008cd2:	b082      	sub	sp, #8
10008cd4:	af00      	add	r7, sp, #0
10008cd6:	6078      	str	r0, [r7, #4]
    return uart == uart1 ? 1 : 0;
10008cd8:	687b      	ldr	r3, [r7, #4]
10008cda:	4a05      	ldr	r2, [pc, #20]	; (10008cf0 <uart_get_index+0x20>)
10008cdc:	4694      	mov	ip, r2
10008cde:	4463      	add	r3, ip
10008ce0:	425a      	negs	r2, r3
10008ce2:	4153      	adcs	r3, r2
10008ce4:	b2db      	uxtb	r3, r3
}
10008ce6:	0018      	movs	r0, r3
10008ce8:	46bd      	mov	sp, r7
10008cea:	b002      	add	sp, #8
10008cec:	bd80      	pop	{r7, pc}
10008cee:	46c0      	nop			; (mov r8, r8)
10008cf0:	bffc8000 	.word	0xbffc8000

10008cf4 <uart_get_hw>:

static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
10008cf4:	b580      	push	{r7, lr}
10008cf6:	b082      	sub	sp, #8
10008cf8:	af00      	add	r7, sp, #0
10008cfa:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
10008cfc:	687b      	ldr	r3, [r7, #4]
10008cfe:	0018      	movs	r0, r3
10008d00:	f7ff ffe6 	bl	10008cd0 <uart_get_index>
    return (uart_hw_t *)uart;
10008d04:	687b      	ldr	r3, [r7, #4]
}
10008d06:	0018      	movs	r0, r3
10008d08:	46bd      	mov	sp, r7
10008d0a:	b002      	add	sp, #8
10008d0c:	bd80      	pop	{r7, pc}

10008d0e <uart_set_format>:
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param data_bits Number of bits of data. 5..8
 * \param stop_bits Number of stop bits 1..2
 * \param parity Parity option.
 */
static inline void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
10008d0e:	b580      	push	{r7, lr}
10008d10:	b08a      	sub	sp, #40	; 0x28
10008d12:	af00      	add	r7, sp, #0
10008d14:	60f8      	str	r0, [r7, #12]
10008d16:	60b9      	str	r1, [r7, #8]
10008d18:	607a      	str	r2, [r7, #4]
10008d1a:	001a      	movs	r2, r3
10008d1c:	1cfb      	adds	r3, r7, #3
10008d1e:	701a      	strb	r2, [r3, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10008d20:	68fb      	ldr	r3, [r7, #12]
10008d22:	0018      	movs	r0, r3
10008d24:	f7ff ffe6 	bl	10008cf4 <uart_get_hw>
10008d28:	0003      	movs	r3, r0
10008d2a:	332c      	adds	r3, #44	; 0x2c
10008d2c:	001a      	movs	r2, r3
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10008d2e:	68bb      	ldr	r3, [r7, #8]
10008d30:	3b05      	subs	r3, #5
10008d32:	0159      	lsls	r1, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10008d34:	687b      	ldr	r3, [r7, #4]
10008d36:	3b01      	subs	r3, #1
10008d38:	00db      	lsls	r3, r3, #3
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10008d3a:	4319      	orrs	r1, r3
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10008d3c:	1cfb      	adds	r3, r7, #3
10008d3e:	781b      	ldrb	r3, [r3, #0]
10008d40:	2b00      	cmp	r3, #0
10008d42:	d001      	beq.n	10008d48 <uart_set_format+0x3a>
10008d44:	2302      	movs	r3, #2
10008d46:	e000      	b.n	10008d4a <uart_set_format+0x3c>
10008d48:	2300      	movs	r3, #0
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10008d4a:	4319      	orrs	r1, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10008d4c:	1cfb      	adds	r3, r7, #3
10008d4e:	781b      	ldrb	r3, [r3, #0]
10008d50:	2b01      	cmp	r3, #1
10008d52:	d101      	bne.n	10008d58 <uart_set_format+0x4a>
10008d54:	2304      	movs	r3, #4
10008d56:	e000      	b.n	10008d5a <uart_set_format+0x4c>
10008d58:	2300      	movs	r3, #0
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10008d5a:	430b      	orrs	r3, r1
10008d5c:	627a      	str	r2, [r7, #36]	; 0x24
10008d5e:	623b      	str	r3, [r7, #32]
10008d60:	236e      	movs	r3, #110	; 0x6e
10008d62:	61fb      	str	r3, [r7, #28]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10008d66:	681a      	ldr	r2, [r3, #0]
10008d68:	6a3b      	ldr	r3, [r7, #32]
10008d6a:	4053      	eors	r3, r2
10008d6c:	69fa      	ldr	r2, [r7, #28]
10008d6e:	4013      	ands	r3, r2
10008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10008d72:	61ba      	str	r2, [r7, #24]
10008d74:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10008d76:	69bb      	ldr	r3, [r7, #24]
10008d78:	2280      	movs	r2, #128	; 0x80
10008d7a:	0152      	lsls	r2, r2, #5
10008d7c:	4313      	orrs	r3, r2
10008d7e:	697a      	ldr	r2, [r7, #20]
10008d80:	601a      	str	r2, [r3, #0]
}
10008d82:	46c0      	nop			; (mov r8, r8)
}
10008d84:	46c0      	nop			; (mov r8, r8)
                   UART_UARTLCR_H_WLEN_BITS |
                   UART_UARTLCR_H_STP2_BITS |
                   UART_UARTLCR_H_PEN_BITS |
                   UART_UARTLCR_H_EPS_BITS);
}
10008d86:	46c0      	nop			; (mov r8, r8)
10008d88:	46bd      	mov	sp, r7
10008d8a:	b00a      	add	sp, #40	; 0x28
10008d8c:	bd80      	pop	{r7, pc}
	...

10008d90 <reset_block>:
static inline void reset_block(uint32_t bits) {
10008d90:	b580      	push	{r7, lr}
10008d92:	b084      	sub	sp, #16
10008d94:	af00      	add	r7, sp, #0
10008d96:	6078      	str	r0, [r7, #4]
10008d98:	4b07      	ldr	r3, [pc, #28]	; (10008db8 <reset_block+0x28>)
10008d9a:	60fb      	str	r3, [r7, #12]
10008d9c:	687b      	ldr	r3, [r7, #4]
10008d9e:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10008da0:	68fb      	ldr	r3, [r7, #12]
10008da2:	2280      	movs	r2, #128	; 0x80
10008da4:	0192      	lsls	r2, r2, #6
10008da6:	4313      	orrs	r3, r2
10008da8:	68ba      	ldr	r2, [r7, #8]
10008daa:	601a      	str	r2, [r3, #0]
}
10008dac:	46c0      	nop			; (mov r8, r8)
}
10008dae:	46c0      	nop			; (mov r8, r8)
10008db0:	46bd      	mov	sp, r7
10008db2:	b004      	add	sp, #16
10008db4:	bd80      	pop	{r7, pc}
10008db6:	46c0      	nop			; (mov r8, r8)
10008db8:	4000c000 	.word	0x4000c000

10008dbc <unreset_block_wait>:
static inline void unreset_block_wait(uint32_t bits) {
10008dbc:	b580      	push	{r7, lr}
10008dbe:	b084      	sub	sp, #16
10008dc0:	af00      	add	r7, sp, #0
10008dc2:	6078      	str	r0, [r7, #4]
10008dc4:	4b0b      	ldr	r3, [pc, #44]	; (10008df4 <unreset_block_wait+0x38>)
10008dc6:	60fb      	str	r3, [r7, #12]
10008dc8:	687b      	ldr	r3, [r7, #4]
10008dca:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10008dcc:	68fb      	ldr	r3, [r7, #12]
10008dce:	22c0      	movs	r2, #192	; 0xc0
10008dd0:	0192      	lsls	r2, r2, #6
10008dd2:	4313      	orrs	r3, r2
10008dd4:	68ba      	ldr	r2, [r7, #8]
10008dd6:	601a      	str	r2, [r3, #0]
}
10008dd8:	46c0      	nop			; (mov r8, r8)
    while (~resets_hw->reset_done & bits)
10008dda:	e000      	b.n	10008dde <unreset_block_wait+0x22>
10008ddc:	46c0      	nop			; (mov r8, r8)
10008dde:	4b05      	ldr	r3, [pc, #20]	; (10008df4 <unreset_block_wait+0x38>)
10008de0:	689b      	ldr	r3, [r3, #8]
10008de2:	43db      	mvns	r3, r3
10008de4:	687a      	ldr	r2, [r7, #4]
10008de6:	4013      	ands	r3, r2
10008de8:	d1f8      	bne.n	10008ddc <unreset_block_wait+0x20>
}
10008dea:	46c0      	nop			; (mov r8, r8)
10008dec:	46c0      	nop			; (mov r8, r8)
10008dee:	46bd      	mov	sp, r7
10008df0:	b004      	add	sp, #16
10008df2:	bd80      	pop	{r7, pc}
10008df4:	4000c000 	.word	0x4000c000

10008df8 <uart_reset>:
#if PICO_UART_ENABLE_CRLF_SUPPORT
short uart_char_to_line_feed[NUM_UARTS];
#endif

/// \tag::uart_reset[]
static inline void uart_reset(uart_inst_t *uart) {
10008df8:	b580      	push	{r7, lr}
10008dfa:	b082      	sub	sp, #8
10008dfc:	af00      	add	r7, sp, #0
10008dfe:	6078      	str	r0, [r7, #4]
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10008e00:	687b      	ldr	r3, [r7, #4]
10008e02:	0018      	movs	r0, r3
10008e04:	f7ff ff64 	bl	10008cd0 <uart_get_index>
10008e08:	1e03      	subs	r3, r0, #0
10008e0a:	d002      	beq.n	10008e12 <uart_reset+0x1a>
10008e0c:	2380      	movs	r3, #128	; 0x80
10008e0e:	041b      	lsls	r3, r3, #16
10008e10:	e001      	b.n	10008e16 <uart_reset+0x1e>
10008e12:	2380      	movs	r3, #128	; 0x80
10008e14:	03db      	lsls	r3, r3, #15
10008e16:	0018      	movs	r0, r3
10008e18:	f7ff ffba 	bl	10008d90 <reset_block>
}
10008e1c:	46c0      	nop			; (mov r8, r8)
10008e1e:	46bd      	mov	sp, r7
10008e20:	b002      	add	sp, #8
10008e22:	bd80      	pop	{r7, pc}

10008e24 <uart_unreset>:

static inline void uart_unreset(uart_inst_t *uart) {
10008e24:	b580      	push	{r7, lr}
10008e26:	b082      	sub	sp, #8
10008e28:	af00      	add	r7, sp, #0
10008e2a:	6078      	str	r0, [r7, #4]
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    unreset_block_wait(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10008e2c:	687b      	ldr	r3, [r7, #4]
10008e2e:	0018      	movs	r0, r3
10008e30:	f7ff ff4e 	bl	10008cd0 <uart_get_index>
10008e34:	1e03      	subs	r3, r0, #0
10008e36:	d002      	beq.n	10008e3e <uart_unreset+0x1a>
10008e38:	2380      	movs	r3, #128	; 0x80
10008e3a:	041b      	lsls	r3, r3, #16
10008e3c:	e001      	b.n	10008e42 <uart_unreset+0x1e>
10008e3e:	2380      	movs	r3, #128	; 0x80
10008e40:	03db      	lsls	r3, r3, #15
10008e42:	0018      	movs	r0, r3
10008e44:	f7ff ffba 	bl	10008dbc <unreset_block_wait>
}
10008e48:	46c0      	nop			; (mov r8, r8)
10008e4a:	46bd      	mov	sp, r7
10008e4c:	b002      	add	sp, #8
10008e4e:	bd80      	pop	{r7, pc}

10008e50 <uart_init>:
/// \end::uart_reset[]

/// \tag::uart_init[]
uint uart_init(uart_inst_t *uart, uint baudrate) {
10008e50:	b580      	push	{r7, lr}
10008e52:	b086      	sub	sp, #24
10008e54:	af00      	add	r7, sp, #0
10008e56:	6078      	str	r0, [r7, #4]
10008e58:	6039      	str	r1, [r7, #0]
    invalid_params_if(UART, uart != uart0 && uart != uart1);

    if (clock_get_hz(clk_peri) == 0)
10008e5a:	2006      	movs	r0, #6
10008e5c:	f7fe f9e4 	bl	10007228 <clock_get_hz>
10008e60:	1e03      	subs	r3, r0, #0
10008e62:	d101      	bne.n	10008e68 <uart_init+0x18>
        return 0;
10008e64:	2300      	movs	r3, #0
10008e66:	e039      	b.n	10008edc <uart_init+0x8c>

    uart_reset(uart);
10008e68:	687b      	ldr	r3, [r7, #4]
10008e6a:	0018      	movs	r0, r3
10008e6c:	f7ff ffc4 	bl	10008df8 <uart_reset>
    uart_unreset(uart);
10008e70:	687b      	ldr	r3, [r7, #4]
10008e72:	0018      	movs	r0, r3
10008e74:	f7ff ffd6 	bl	10008e24 <uart_unreset>

#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_set_translate_crlf(uart, PICO_UART_DEFAULT_CRLF);
10008e78:	687b      	ldr	r3, [r7, #4]
10008e7a:	2100      	movs	r1, #0
10008e7c:	0018      	movs	r0, r3
10008e7e:	f000 f891 	bl	10008fa4 <uart_set_translate_crlf>
#endif

    // Any LCR writes need to take place before enabling the UART
    uint baud = uart_set_baudrate(uart, baudrate);
10008e82:	683a      	ldr	r2, [r7, #0]
10008e84:	687b      	ldr	r3, [r7, #4]
10008e86:	0011      	movs	r1, r2
10008e88:	0018      	movs	r0, r3
10008e8a:	f000 f82d 	bl	10008ee8 <uart_set_baudrate>
10008e8e:	0003      	movs	r3, r0
10008e90:	617b      	str	r3, [r7, #20]
    uart_set_format(uart, 8, 1, UART_PARITY_NONE);
10008e92:	6878      	ldr	r0, [r7, #4]
10008e94:	2300      	movs	r3, #0
10008e96:	2201      	movs	r2, #1
10008e98:	2108      	movs	r1, #8
10008e9a:	f7ff ff38 	bl	10008d0e <uart_set_format>

    // Enable the UART, both TX and RX
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10008e9e:	687b      	ldr	r3, [r7, #4]
10008ea0:	0018      	movs	r0, r3
10008ea2:	f7ff ff27 	bl	10008cf4 <uart_get_hw>
10008ea6:	0003      	movs	r3, r0
10008ea8:	4a0e      	ldr	r2, [pc, #56]	; (10008ee4 <uart_init+0x94>)
10008eaa:	631a      	str	r2, [r3, #48]	; 0x30
    // Enable FIFOs
    hw_set_bits(&uart_get_hw(uart)->lcr_h, UART_UARTLCR_H_FEN_BITS);
10008eac:	687b      	ldr	r3, [r7, #4]
10008eae:	0018      	movs	r0, r3
10008eb0:	f7ff ff20 	bl	10008cf4 <uart_get_hw>
10008eb4:	0003      	movs	r3, r0
10008eb6:	332c      	adds	r3, #44	; 0x2c
10008eb8:	613b      	str	r3, [r7, #16]
10008eba:	2310      	movs	r3, #16
10008ebc:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10008ebe:	693b      	ldr	r3, [r7, #16]
10008ec0:	2280      	movs	r2, #128	; 0x80
10008ec2:	0192      	lsls	r2, r2, #6
10008ec4:	4313      	orrs	r3, r2
10008ec6:	68fa      	ldr	r2, [r7, #12]
10008ec8:	601a      	str	r2, [r3, #0]
}
10008eca:	46c0      	nop			; (mov r8, r8)
    // Always enable DREQ signals -- no harm in this if DMA is not listening
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10008ecc:	687b      	ldr	r3, [r7, #4]
10008ece:	0018      	movs	r0, r3
10008ed0:	f7ff ff10 	bl	10008cf4 <uart_get_hw>
10008ed4:	0003      	movs	r3, r0
10008ed6:	2203      	movs	r2, #3
10008ed8:	649a      	str	r2, [r3, #72]	; 0x48

    return baud;
10008eda:	697b      	ldr	r3, [r7, #20]
}
10008edc:	0018      	movs	r0, r3
10008ede:	46bd      	mov	sp, r7
10008ee0:	b006      	add	sp, #24
10008ee2:	bd80      	pop	{r7, pc}
10008ee4:	00000301 	.word	0x00000301

10008ee8 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10008ee8:	b580      	push	{r7, lr}
10008eea:	b088      	sub	sp, #32
10008eec:	af00      	add	r7, sp, #0
10008eee:	6078      	str	r0, [r7, #4]
10008ef0:	6039      	str	r1, [r7, #0]
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
10008ef2:	2006      	movs	r0, #6
10008ef4:	f7fe f998 	bl	10007228 <clock_get_hz>
10008ef8:	0003      	movs	r3, r0
10008efa:	00db      	lsls	r3, r3, #3
10008efc:	6839      	ldr	r1, [r7, #0]
10008efe:	0018      	movs	r0, r3
10008f00:	f003 fcde 	bl	1000c8c0 <__wrap___aeabi_uidiv>
10008f04:	0003      	movs	r3, r0
10008f06:	617b      	str	r3, [r7, #20]
    uint32_t baud_ibrd = baud_rate_div >> 7;
10008f08:	697b      	ldr	r3, [r7, #20]
10008f0a:	09db      	lsrs	r3, r3, #7
10008f0c:	61fb      	str	r3, [r7, #28]
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
10008f0e:	69fb      	ldr	r3, [r7, #28]
10008f10:	2b00      	cmp	r3, #0
10008f12:	d104      	bne.n	10008f1e <uart_set_baudrate+0x36>
        baud_ibrd = 1;
10008f14:	2301      	movs	r3, #1
10008f16:	61fb      	str	r3, [r7, #28]
        baud_fbrd = 0;
10008f18:	2300      	movs	r3, #0
10008f1a:	61bb      	str	r3, [r7, #24]
10008f1c:	e00e      	b.n	10008f3c <uart_set_baudrate+0x54>
    } else if (baud_ibrd >= 65535) {
10008f1e:	69fb      	ldr	r3, [r7, #28]
10008f20:	4a1e      	ldr	r2, [pc, #120]	; (10008f9c <uart_set_baudrate+0xb4>)
10008f22:	4293      	cmp	r3, r2
10008f24:	d904      	bls.n	10008f30 <uart_set_baudrate+0x48>
        baud_ibrd = 65535;
10008f26:	4b1e      	ldr	r3, [pc, #120]	; (10008fa0 <uart_set_baudrate+0xb8>)
10008f28:	61fb      	str	r3, [r7, #28]
        baud_fbrd = 0;
10008f2a:	2300      	movs	r3, #0
10008f2c:	61bb      	str	r3, [r7, #24]
10008f2e:	e005      	b.n	10008f3c <uart_set_baudrate+0x54>
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
10008f30:	697b      	ldr	r3, [r7, #20]
10008f32:	227f      	movs	r2, #127	; 0x7f
10008f34:	4013      	ands	r3, r2
10008f36:	3301      	adds	r3, #1
10008f38:	085b      	lsrs	r3, r3, #1
10008f3a:	61bb      	str	r3, [r7, #24]
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10008f3c:	687b      	ldr	r3, [r7, #4]
10008f3e:	0018      	movs	r0, r3
10008f40:	f7ff fed8 	bl	10008cf4 <uart_get_hw>
10008f44:	0003      	movs	r3, r0
10008f46:	69fa      	ldr	r2, [r7, #28]
10008f48:	625a      	str	r2, [r3, #36]	; 0x24
    uart_get_hw(uart)->fbrd = baud_fbrd;
10008f4a:	687b      	ldr	r3, [r7, #4]
10008f4c:	0018      	movs	r0, r3
10008f4e:	f7ff fed1 	bl	10008cf4 <uart_get_hw>
10008f52:	0003      	movs	r3, r0
10008f54:	69ba      	ldr	r2, [r7, #24]
10008f56:	629a      	str	r2, [r3, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
10008f58:	687b      	ldr	r3, [r7, #4]
10008f5a:	0018      	movs	r0, r3
10008f5c:	f7ff feca 	bl	10008cf4 <uart_get_hw>
10008f60:	0003      	movs	r3, r0
10008f62:	332c      	adds	r3, #44	; 0x2c
10008f64:	613b      	str	r3, [r7, #16]
10008f66:	2300      	movs	r3, #0
10008f68:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10008f6a:	693b      	ldr	r3, [r7, #16]
10008f6c:	2280      	movs	r2, #128	; 0x80
10008f6e:	0192      	lsls	r2, r2, #6
10008f70:	4313      	orrs	r3, r2
10008f72:	68fa      	ldr	r2, [r7, #12]
10008f74:	601a      	str	r2, [r3, #0]
}
10008f76:	46c0      	nop			; (mov r8, r8)

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10008f78:	2006      	movs	r0, #6
10008f7a:	f7fe f955 	bl	10007228 <clock_get_hz>
10008f7e:	0003      	movs	r3, r0
10008f80:	0098      	lsls	r0, r3, #2
10008f82:	69fb      	ldr	r3, [r7, #28]
10008f84:	019a      	lsls	r2, r3, #6
10008f86:	69bb      	ldr	r3, [r7, #24]
10008f88:	18d3      	adds	r3, r2, r3
10008f8a:	0019      	movs	r1, r3
10008f8c:	f003 fc98 	bl	1000c8c0 <__wrap___aeabi_uidiv>
10008f90:	0003      	movs	r3, r0
}
10008f92:	0018      	movs	r0, r3
10008f94:	46bd      	mov	sp, r7
10008f96:	b008      	add	sp, #32
10008f98:	bd80      	pop	{r7, pc}
10008f9a:	46c0      	nop			; (mov r8, r8)
10008f9c:	0000fffe 	.word	0x0000fffe
10008fa0:	0000ffff 	.word	0x0000ffff

10008fa4 <uart_set_translate_crlf>:
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
10008fa4:	b590      	push	{r4, r7, lr}
10008fa6:	b083      	sub	sp, #12
10008fa8:	af00      	add	r7, sp, #0
10008faa:	6078      	str	r0, [r7, #4]
10008fac:	000a      	movs	r2, r1
10008fae:	1cfb      	adds	r3, r7, #3
10008fb0:	701a      	strb	r2, [r3, #0]
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10008fb2:	1cfb      	adds	r3, r7, #3
10008fb4:	781b      	ldrb	r3, [r3, #0]
10008fb6:	2b00      	cmp	r3, #0
10008fb8:	d001      	beq.n	10008fbe <uart_set_translate_crlf+0x1a>
10008fba:	240a      	movs	r4, #10
10008fbc:	e001      	b.n	10008fc2 <uart_set_translate_crlf+0x1e>
10008fbe:	2380      	movs	r3, #128	; 0x80
10008fc0:	005c      	lsls	r4, r3, #1
10008fc2:	687b      	ldr	r3, [r7, #4]
10008fc4:	0018      	movs	r0, r3
10008fc6:	f7ff fe83 	bl	10008cd0 <uart_get_index>
10008fca:	0002      	movs	r2, r0
10008fcc:	4b03      	ldr	r3, [pc, #12]	; (10008fdc <uart_set_translate_crlf+0x38>)
10008fce:	0052      	lsls	r2, r2, #1
10008fd0:	1c21      	adds	r1, r4, #0
10008fd2:	52d1      	strh	r1, [r2, r3]
#else
    panic_unsupported();
#endif
}
10008fd4:	46c0      	nop			; (mov r8, r8)
10008fd6:	46bd      	mov	sp, r7
10008fd8:	b003      	add	sp, #12
10008fda:	bd90      	pop	{r4, r7, pc}
10008fdc:	20009424 	.word	0x20009424

10008fe0 <watchdog_start_tick>:
#include "hardware/watchdog.h"
#include "hardware/structs/watchdog.h"
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
10008fe0:	b580      	push	{r7, lr}
10008fe2:	b082      	sub	sp, #8
10008fe4:	af00      	add	r7, sp, #0
10008fe6:	6078      	str	r0, [r7, #4]
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10008fe8:	4b04      	ldr	r3, [pc, #16]	; (10008ffc <watchdog_start_tick+0x1c>)
10008fea:	687a      	ldr	r2, [r7, #4]
10008fec:	2180      	movs	r1, #128	; 0x80
10008fee:	0089      	lsls	r1, r1, #2
10008ff0:	430a      	orrs	r2, r1
10008ff2:	62da      	str	r2, [r3, #44]	; 0x2c
}
10008ff4:	46c0      	nop			; (mov r8, r8)
10008ff6:	46bd      	mov	sp, r7
10008ff8:	b002      	add	sp, #8
10008ffa:	bd80      	pop	{r7, pc}
10008ffc:	40058000 	.word	0x40058000

10009000 <xosc_init>:
// The DELAY field in xosc_hw->startup is 14 bits wide.
#if STARTUP_DELAY >= (1 << 13)
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
10009000:	b580      	push	{r7, lr}
10009002:	b082      	sub	sp, #8
10009004:	af00      	add	r7, sp, #0
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10009006:	4b0e      	ldr	r3, [pc, #56]	; (10009040 <xosc_init+0x40>)
10009008:	22aa      	movs	r2, #170	; 0xaa
1000900a:	0112      	lsls	r2, r2, #4
1000900c:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
1000900e:	4b0c      	ldr	r3, [pc, #48]	; (10009040 <xosc_init+0x40>)
10009010:	22bc      	movs	r2, #188	; 0xbc
10009012:	0112      	lsls	r2, r2, #4
10009014:	60da      	str	r2, [r3, #12]
10009016:	4b0a      	ldr	r3, [pc, #40]	; (10009040 <xosc_init+0x40>)
10009018:	607b      	str	r3, [r7, #4]
1000901a:	4b0a      	ldr	r3, [pc, #40]	; (10009044 <xosc_init+0x44>)
1000901c:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000901e:	687b      	ldr	r3, [r7, #4]
10009020:	2280      	movs	r2, #128	; 0x80
10009022:	0192      	lsls	r2, r2, #6
10009024:	4313      	orrs	r3, r2
10009026:	683a      	ldr	r2, [r7, #0]
10009028:	601a      	str	r2, [r3, #0]
}
1000902a:	46c0      	nop			; (mov r8, r8)

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
1000902c:	46c0      	nop			; (mov r8, r8)
1000902e:	4b04      	ldr	r3, [pc, #16]	; (10009040 <xosc_init+0x40>)
10009030:	685b      	ldr	r3, [r3, #4]
10009032:	2b00      	cmp	r3, #0
10009034:	dafb      	bge.n	1000902e <xosc_init+0x2e>
}
10009036:	46c0      	nop			; (mov r8, r8)
10009038:	46c0      	nop			; (mov r8, r8)
1000903a:	46bd      	mov	sp, r7
1000903c:	b002      	add	sp, #8
1000903e:	bd80      	pop	{r7, pc}
10009040:	40024000 	.word	0x40024000
10009044:	00fab000 	.word	0x00fab000

10009048 <rom_func_lookup>:

// Bootrom function: rom_table_lookup
// Returns the 32 bit pointer into the ROM if found or NULL otherwise.
typedef void *(*rom_table_lookup_fn)(uint16_t *table, uint32_t code);

void *rom_func_lookup(uint32_t code) {
10009048:	b580      	push	{r7, lr}
1000904a:	b086      	sub	sp, #24
1000904c:	af00      	add	r7, sp, #0
1000904e:	6078      	str	r0, [r7, #4]
10009050:	687b      	ldr	r3, [r7, #4]
10009052:	617b      	str	r3, [r7, #20]
 * \ingroup pico_bootrom
 * \param code the code
 * \return a pointer to the function, or NULL if the code does not match any bootrom function
 */
static __force_inline void *rom_func_lookup_inline(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10009054:	2318      	movs	r3, #24
10009056:	881b      	ldrh	r3, [r3, #0]
10009058:	613b      	str	r3, [r7, #16]
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000905a:	2314      	movs	r3, #20
1000905c:	881b      	ldrh	r3, [r3, #0]
1000905e:	60fb      	str	r3, [r7, #12]
    return rom_table_lookup(func_table, code);
10009060:	6979      	ldr	r1, [r7, #20]
10009062:	68fa      	ldr	r2, [r7, #12]
10009064:	693b      	ldr	r3, [r7, #16]
10009066:	0010      	movs	r0, r2
10009068:	4798      	blx	r3
1000906a:	0003      	movs	r3, r0
    return rom_func_lookup_inline(code);
}
1000906c:	0018      	movs	r0, r3
1000906e:	46bd      	mov	sp, r7
10009070:	b006      	add	sp, #24
10009072:	bd80      	pop	{r7, pc}

10009074 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
10009074:	b580      	push	{r7, lr}
10009076:	b084      	sub	sp, #16
10009078:	af00      	add	r7, sp, #0
1000907a:	6078      	str	r0, [r7, #4]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000907c:	2318      	movs	r3, #24
1000907e:	881b      	ldrh	r3, [r3, #0]
10009080:	60fb      	str	r3, [r7, #12]
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10009082:	2316      	movs	r3, #22
10009084:	881b      	ldrh	r3, [r3, #0]
10009086:	60bb      	str	r3, [r7, #8]
    return rom_table_lookup(data_table, code);
10009088:	6879      	ldr	r1, [r7, #4]
1000908a:	68ba      	ldr	r2, [r7, #8]
1000908c:	68fb      	ldr	r3, [r7, #12]
1000908e:	0010      	movs	r0, r2
10009090:	4798      	blx	r3
10009092:	0003      	movs	r3, r0
}
10009094:	0018      	movs	r0, r3
10009096:	46bd      	mov	sp, r7
10009098:	b004      	add	sp, #16
1000909a:	bd80      	pop	{r7, pc}

1000909c <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
1000909c:	b580      	push	{r7, lr}
1000909e:	b084      	sub	sp, #16
100090a0:	af00      	add	r7, sp, #0
100090a2:	6078      	str	r0, [r7, #4]
100090a4:	6039      	str	r1, [r7, #0]
    bool ok = true;
100090a6:	230f      	movs	r3, #15
100090a8:	18fb      	adds	r3, r7, r3
100090aa:	2201      	movs	r2, #1
100090ac:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < count; i++) {
100090ae:	2300      	movs	r3, #0
100090b0:	60bb      	str	r3, [r7, #8]
100090b2:	e01c      	b.n	100090ee <rom_funcs_lookup+0x52>
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
100090b4:	68bb      	ldr	r3, [r7, #8]
100090b6:	009b      	lsls	r3, r3, #2
100090b8:	687a      	ldr	r2, [r7, #4]
100090ba:	18d3      	adds	r3, r2, r3
100090bc:	681b      	ldr	r3, [r3, #0]
100090be:	0018      	movs	r0, r3
100090c0:	f7ff ffc2 	bl	10009048 <rom_func_lookup>
100090c4:	0001      	movs	r1, r0
100090c6:	68bb      	ldr	r3, [r7, #8]
100090c8:	009b      	lsls	r3, r3, #2
100090ca:	687a      	ldr	r2, [r7, #4]
100090cc:	18d3      	adds	r3, r2, r3
100090ce:	000a      	movs	r2, r1
100090d0:	601a      	str	r2, [r3, #0]
        if (!table[i]) ok = false;
100090d2:	68bb      	ldr	r3, [r7, #8]
100090d4:	009b      	lsls	r3, r3, #2
100090d6:	687a      	ldr	r2, [r7, #4]
100090d8:	18d3      	adds	r3, r2, r3
100090da:	681b      	ldr	r3, [r3, #0]
100090dc:	2b00      	cmp	r3, #0
100090de:	d103      	bne.n	100090e8 <rom_funcs_lookup+0x4c>
100090e0:	230f      	movs	r3, #15
100090e2:	18fb      	adds	r3, r7, r3
100090e4:	2200      	movs	r2, #0
100090e6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < count; i++) {
100090e8:	68bb      	ldr	r3, [r7, #8]
100090ea:	3301      	adds	r3, #1
100090ec:	60bb      	str	r3, [r7, #8]
100090ee:	68ba      	ldr	r2, [r7, #8]
100090f0:	683b      	ldr	r3, [r7, #0]
100090f2:	429a      	cmp	r2, r3
100090f4:	d3de      	bcc.n	100090b4 <rom_funcs_lookup+0x18>
    }
    return ok;
100090f6:	230f      	movs	r3, #15
100090f8:	18fb      	adds	r3, r7, r3
100090fa:	781b      	ldrb	r3, [r3, #0]
}
100090fc:	0018      	movs	r0, r3
100090fe:	46bd      	mov	sp, r7
10009100:	b004      	add	sp, #16
10009102:	bd80      	pop	{r7, pc}

10009104 <rp2040_rom_version>:
static inline uint8_t rp2040_rom_version(void) {
10009104:	b580      	push	{r7, lr}
10009106:	af00      	add	r7, sp, #0
    return *(uint8_t*)0x13;
10009108:	2313      	movs	r3, #19
1000910a:	781b      	ldrb	r3, [r3, #0]
}
1000910c:	0018      	movs	r0, r3
1000910e:	46bd      	mov	sp, r7
10009110:	bd80      	pop	{r7, pc}

10009112 <rom_table_code>:
static inline uint32_t rom_table_code(uint8_t c1, uint8_t c2) {
10009112:	b580      	push	{r7, lr}
10009114:	b082      	sub	sp, #8
10009116:	af00      	add	r7, sp, #0
10009118:	0002      	movs	r2, r0
1000911a:	1dfb      	adds	r3, r7, #7
1000911c:	701a      	strb	r2, [r3, #0]
1000911e:	1dbb      	adds	r3, r7, #6
10009120:	1c0a      	adds	r2, r1, #0
10009122:	701a      	strb	r2, [r3, #0]
    return ROM_TABLE_CODE((uint32_t) c1, (uint32_t) c2);
10009124:	1dfb      	adds	r3, r7, #7
10009126:	781a      	ldrb	r2, [r3, #0]
10009128:	1dbb      	adds	r3, r7, #6
1000912a:	781b      	ldrb	r3, [r3, #0]
1000912c:	021b      	lsls	r3, r3, #8
1000912e:	4313      	orrs	r3, r2
}
10009130:	0018      	movs	r0, r3
10009132:	46bd      	mov	sp, r7
10009134:	b002      	add	sp, #8
10009136:	bd80      	pop	{r7, pc}

10009138 <missing_double_func_shim>:
// NOTE THIS FUNCTION TABLE IS NOT PUBLIC OR NECESSARILY COMPLETE...
// IT IS ***NOT*** SAFE TO CALL THESE FUNCTION POINTERS FROM ARBITRARY CODE
uint32_t sd_table[SF_TABLE_V2_SIZE / 2];

#if !(PICO_DOUBLE_SUPPORT_ROM_V1 && PICO_RP2040_B0_SUPPORTED)
static __attribute__((noreturn)) void missing_double_func_shim(void) {
10009138:	b580      	push	{r7, lr}
1000913a:	af00      	add	r7, sp, #0
    panic("missing double function");
1000913c:	4b01      	ldr	r3, [pc, #4]	; (10009144 <missing_double_func_shim+0xc>)
1000913e:	0018      	movs	r0, r3
10009140:	f001 fe1a 	bl	1000ad78 <panic>
10009144:	1000e7dc 	.word	0x1000e7dc

10009148 <__aeabi_double_init>:
#endif
extern void double_table_shim_on_use_helper(void);

void __attribute__((weak)) *sf_clz_func;

void __aeabi_double_init(void) {
10009148:	b580      	push	{r7, lr}
1000914a:	b084      	sub	sp, #16
1000914c:	af00      	add	r7, sp, #0
    int rom_version = rp2040_rom_version();
1000914e:	f7ff ffd9 	bl	10009104 <rp2040_rom_version>
10009152:	0003      	movs	r3, r0
10009154:	60bb      	str	r3, [r7, #8]
        for(uint i=0; i<SF_TABLE_V2_SIZE/4; i++) {
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
        }
    }
#else
    if (rom_version == 1) {
10009156:	68bb      	ldr	r3, [r7, #8]
10009158:	2b01      	cmp	r3, #1
1000915a:	d10d      	bne.n	10009178 <__aeabi_double_init+0x30>
        // opting for soft failure for now - you'll get a panic at runtime if you call any of the missing methods
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
1000915c:	2300      	movs	r3, #0
1000915e:	60fb      	str	r3, [r7, #12]
10009160:	e007      	b.n	10009172 <__aeabi_double_init+0x2a>
            sd_table[i] = (uintptr_t)missing_double_func_shim;
10009162:	492c      	ldr	r1, [pc, #176]	; (10009214 <__aeabi_double_init+0xcc>)
10009164:	4b2c      	ldr	r3, [pc, #176]	; (10009218 <__aeabi_double_init+0xd0>)
10009166:	68fa      	ldr	r2, [r7, #12]
10009168:	0092      	lsls	r2, r2, #2
1000916a:	50d1      	str	r1, [r2, r3]
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
1000916c:	68fb      	ldr	r3, [r7, #12]
1000916e:	3301      	adds	r3, #1
10009170:	60fb      	str	r3, [r7, #12]
10009172:	68fb      	ldr	r3, [r7, #12]
10009174:	2b1f      	cmp	r3, #31
10009176:	d9f4      	bls.n	10009162 <__aeabi_double_init+0x1a>
        }
    }
#endif
    if (rom_version >= 2) {
10009178:	68bb      	ldr	r3, [r7, #8]
1000917a:	2b01      	cmp	r3, #1
1000917c:	dd39      	ble.n	100091f2 <__aeabi_double_init+0xaa>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
1000917e:	2144      	movs	r1, #68	; 0x44
10009180:	2053      	movs	r0, #83	; 0x53
10009182:	f7ff ffc6 	bl	10009112 <rom_table_code>
10009186:	0003      	movs	r3, r0
10009188:	0018      	movs	r0, r3
1000918a:	f7ff ff73 	bl	10009074 <rom_data_lookup>
1000918e:	0003      	movs	r3, r0
10009190:	607b      	str	r3, [r7, #4]
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
10009192:	2146      	movs	r1, #70	; 0x46
10009194:	2053      	movs	r0, #83	; 0x53
10009196:	f7ff ffbc 	bl	10009112 <rom_table_code>
1000919a:	0003      	movs	r3, r0
1000919c:	0018      	movs	r0, r3
1000919e:	f7ff ff69 	bl	10009074 <rom_data_lookup>
100091a2:	0003      	movs	r3, r0
100091a4:	3b02      	subs	r3, #2
100091a6:	781b      	ldrb	r3, [r3, #0]
100091a8:	009b      	lsls	r3, r3, #2
100091aa:	2b7f      	cmp	r3, #127	; 0x7f
100091ac:	dc05      	bgt.n	100091ba <__aeabi_double_init+0x72>
100091ae:	4b1b      	ldr	r3, [pc, #108]	; (1000921c <__aeabi_double_init+0xd4>)
100091b0:	4a1b      	ldr	r2, [pc, #108]	; (10009220 <__aeabi_double_init+0xd8>)
100091b2:	481c      	ldr	r0, [pc, #112]	; (10009224 <__aeabi_double_init+0xdc>)
100091b4:	2132      	movs	r1, #50	; 0x32
100091b6:	f001 fdb9 	bl	1000ad2c <__assert_func>
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100091ba:	6879      	ldr	r1, [r7, #4]
100091bc:	4b16      	ldr	r3, [pc, #88]	; (10009218 <__aeabi_double_init+0xd0>)
100091be:	2280      	movs	r2, #128	; 0x80
100091c0:	0018      	movs	r0, r3
100091c2:	f003 fecf 	bl	1000cf64 <__wrap___aeabi_memcpy>
        if (rom_version == 2) {
100091c6:	68bb      	ldr	r3, [r7, #8]
100091c8:	2b02      	cmp	r3, #2
100091ca:	d112      	bne.n	100091f2 <__aeabi_double_init+0xaa>
#ifndef NDEBUG
            if (*(uint16_t *)0x3854 != 0xb500 || // this is dsincos(_internal)
100091cc:	4b16      	ldr	r3, [pc, #88]	; (10009228 <__aeabi_double_init+0xe0>)
100091ce:	881a      	ldrh	r2, [r3, #0]
100091d0:	23b5      	movs	r3, #181	; 0xb5
100091d2:	021b      	lsls	r3, r3, #8
100091d4:	429a      	cmp	r2, r3
100091d6:	d109      	bne.n	100091ec <__aeabi_double_init+0xa4>

                *(uint16_t *)0x38d8 != 0x4649 || // this is dsin_finish
100091d8:	4b14      	ldr	r3, [pc, #80]	; (1000922c <__aeabi_double_init+0xe4>)
100091da:	881b      	ldrh	r3, [r3, #0]
            if (*(uint16_t *)0x3854 != 0xb500 || // this is dsincos(_internal)
100091dc:	4a14      	ldr	r2, [pc, #80]	; (10009230 <__aeabi_double_init+0xe8>)
100091de:	4293      	cmp	r3, r2
100091e0:	d104      	bne.n	100091ec <__aeabi_double_init+0xa4>
                *(uint16_t *)0x389c != 0x4659  // this is dcos_finish
100091e2:	4b14      	ldr	r3, [pc, #80]	; (10009234 <__aeabi_double_init+0xec>)
100091e4:	881b      	ldrh	r3, [r3, #0]
                *(uint16_t *)0x38d8 != 0x4649 || // this is dsin_finish
100091e6:	4a14      	ldr	r2, [pc, #80]	; (10009238 <__aeabi_double_init+0xf0>)
100091e8:	4293      	cmp	r3, r2
100091ea:	d002      	beq.n	100091f2 <__aeabi_double_init+0xaa>
                    ) {
                panic(NULL);
100091ec:	2000      	movs	r0, #0
100091ee:	f001 fdc3 	bl	1000ad78 <panic>
            }
#endif
        }
    }
    if (rom_version < 3) {
100091f2:	68bb      	ldr	r3, [r7, #8]
100091f4:	2b02      	cmp	r3, #2
100091f6:	dc02      	bgt.n	100091fe <__aeabi_double_init+0xb6>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100091f8:	4a10      	ldr	r2, [pc, #64]	; (1000923c <__aeabi_double_init+0xf4>)
100091fa:	4b07      	ldr	r3, [pc, #28]	; (10009218 <__aeabi_double_init+0xd0>)
100091fc:	649a      	str	r2, [r3, #72]	; 0x48
    }

    sf_clz_func = rom_func_lookup(ROM_FUNC_CLZ32);
100091fe:	4b10      	ldr	r3, [pc, #64]	; (10009240 <__aeabi_double_init+0xf8>)
10009200:	0018      	movs	r0, r3
10009202:	f7ff ff21 	bl	10009048 <rom_func_lookup>
10009206:	0002      	movs	r2, r0
10009208:	4b0e      	ldr	r3, [pc, #56]	; (10009244 <__aeabi_double_init+0xfc>)
1000920a:	601a      	str	r2, [r3, #0]
}
1000920c:	46c0      	nop			; (mov r8, r8)
1000920e:	46bd      	mov	sp, r7
10009210:	b004      	add	sp, #16
10009212:	bd80      	pop	{r7, pc}
10009214:	10009139 	.word	0x10009139
10009218:	20009204 	.word	0x20009204
1000921c:	1000e7f4 	.word	0x1000e7f4
10009220:	1000e8b4 	.word	0x1000e8b4
10009224:	1000e854 	.word	0x1000e854
10009228:	00003854 	.word	0x00003854
1000922c:	000038d8 	.word	0x000038d8
10009230:	00004649 	.word	0x00004649
10009234:	0000389c 	.word	0x0000389c
10009238:	00004659 	.word	0x00004659
1000923c:	1000cee1 	.word	0x1000cee1
10009240:	0000334c 	.word	0x0000334c
10009244:	20009304 	.word	0x20009304

10009248 <rp2040_rom_version>:
static inline uint8_t rp2040_rom_version(void) {
10009248:	b580      	push	{r7, lr}
1000924a:	af00      	add	r7, sp, #0
    return *(uint8_t*)0x13;
1000924c:	2313      	movs	r3, #19
1000924e:	781b      	ldrb	r3, [r3, #0]
}
10009250:	0018      	movs	r0, r3
10009252:	46bd      	mov	sp, r7
10009254:	bd80      	pop	{r7, pc}

10009256 <rom_table_code>:
static inline uint32_t rom_table_code(uint8_t c1, uint8_t c2) {
10009256:	b580      	push	{r7, lr}
10009258:	b082      	sub	sp, #8
1000925a:	af00      	add	r7, sp, #0
1000925c:	0002      	movs	r2, r0
1000925e:	1dfb      	adds	r3, r7, #7
10009260:	701a      	strb	r2, [r3, #0]
10009262:	1dbb      	adds	r3, r7, #6
10009264:	1c0a      	adds	r2, r1, #0
10009266:	701a      	strb	r2, [r3, #0]
    return ROM_TABLE_CODE((uint32_t) c1, (uint32_t) c2);
10009268:	1dfb      	adds	r3, r7, #7
1000926a:	781a      	ldrb	r2, [r3, #0]
1000926c:	1dbb      	adds	r3, r7, #6
1000926e:	781b      	ldrb	r3, [r3, #0]
10009270:	021b      	lsls	r3, r3, #8
10009272:	4313      	orrs	r3, r2
}
10009274:	0018      	movs	r0, r3
10009276:	46bd      	mov	sp, r7
10009278:	b002      	add	sp, #8
1000927a:	bd80      	pop	{r7, pc}

1000927c <missing_float_func_shim>:
// IT IS ***NOT*** SAFE TO CALL THESE FUNCTION POINTERS FROM ARBITRARY CODE
uint32_t sf_table[SF_TABLE_V2_SIZE / 2];
void __attribute__((weak)) *sf_clz_func;

#if !(PICO_FLOAT_SUPPORT_ROM_V1 && PICO_RP2040_B0_SUPPORTED)
static __attribute__((noreturn)) void missing_float_func_shim(void) {
1000927c:	b580      	push	{r7, lr}
1000927e:	af00      	add	r7, sp, #0
    panic("");
10009280:	4b01      	ldr	r3, [pc, #4]	; (10009288 <missing_float_func_shim+0xc>)
10009282:	0018      	movs	r0, r3
10009284:	f001 fd78 	bl	1000ad78 <panic>
10009288:	1000e8c8 	.word	0x1000e8c8

1000928c <__aeabi_float_init>:
}
#endif

void __aeabi_float_init(void) {
1000928c:	b580      	push	{r7, lr}
1000928e:	b084      	sub	sp, #16
10009290:	af00      	add	r7, sp, #0
    int rom_version = rp2040_rom_version();
10009292:	f7ff ffd9 	bl	10009248 <rp2040_rom_version>
10009296:	0003      	movs	r3, r0
10009298:	60bb      	str	r3, [r7, #8]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
1000929a:	2146      	movs	r1, #70	; 0x46
1000929c:	2053      	movs	r0, #83	; 0x53
1000929e:	f7ff ffda 	bl	10009256 <rom_table_code>
100092a2:	0003      	movs	r3, r0
100092a4:	0018      	movs	r0, r3
100092a6:	f7ff fee5 	bl	10009074 <rom_data_lookup>
100092aa:	0003      	movs	r3, r0
100092ac:	607b      	str	r3, [r7, #4]
        }
        // we shim these for -0 and -denormal handling
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
    }
#else
    if (rom_version == 1) {
100092ae:	68bb      	ldr	r3, [r7, #8]
100092b0:	2b01      	cmp	r3, #1
100092b2:	d119      	bne.n	100092e8 <__aeabi_float_init+0x5c>
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
100092b4:	6879      	ldr	r1, [r7, #4]
100092b6:	4b1c      	ldr	r3, [pc, #112]	; (10009328 <__aeabi_float_init+0x9c>)
100092b8:	2254      	movs	r2, #84	; 0x54
100092ba:	0018      	movs	r0, r3
100092bc:	f003 fe52 	bl	1000cf64 <__wrap___aeabi_memcpy>
        // opting for soft failure for now - you'll get a panic at runtime if you call any of the missing methods
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
100092c0:	2300      	movs	r3, #0
100092c2:	60fb      	str	r3, [r7, #12]
100092c4:	e00d      	b.n	100092e2 <__aeabi_float_init+0x56>
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
100092c6:	4b18      	ldr	r3, [pc, #96]	; (10009328 <__aeabi_float_init+0x9c>)
100092c8:	68fa      	ldr	r2, [r7, #12]
100092ca:	0092      	lsls	r2, r2, #2
100092cc:	58d3      	ldr	r3, [r2, r3]
100092ce:	2b00      	cmp	r3, #0
100092d0:	d104      	bne.n	100092dc <__aeabi_float_init+0x50>
100092d2:	4916      	ldr	r1, [pc, #88]	; (1000932c <__aeabi_float_init+0xa0>)
100092d4:	4b14      	ldr	r3, [pc, #80]	; (10009328 <__aeabi_float_init+0x9c>)
100092d6:	68fa      	ldr	r2, [r7, #12]
100092d8:	0092      	lsls	r2, r2, #2
100092da:	50d1      	str	r1, [r2, r3]
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
100092dc:	68fb      	ldr	r3, [r7, #12]
100092de:	3301      	adds	r3, #1
100092e0:	60fb      	str	r3, [r7, #12]
100092e2:	68fb      	ldr	r3, [r7, #12]
100092e4:	2b1f      	cmp	r3, #31
100092e6:	d9ee      	bls.n	100092c6 <__aeabi_float_init+0x3a>
        }
    }
#endif
    if (rom_version >= 2) {
100092e8:	68bb      	ldr	r3, [r7, #8]
100092ea:	2b01      	cmp	r3, #1
100092ec:	dd11      	ble.n	10009312 <__aeabi_float_init+0x86>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
100092ee:	687b      	ldr	r3, [r7, #4]
100092f0:	3b02      	subs	r3, #2
100092f2:	781b      	ldrb	r3, [r3, #0]
100092f4:	009b      	lsls	r3, r3, #2
100092f6:	2b7f      	cmp	r3, #127	; 0x7f
100092f8:	dc05      	bgt.n	10009306 <__aeabi_float_init+0x7a>
100092fa:	4b0d      	ldr	r3, [pc, #52]	; (10009330 <__aeabi_float_init+0xa4>)
100092fc:	4a0d      	ldr	r2, [pc, #52]	; (10009334 <__aeabi_float_init+0xa8>)
100092fe:	480e      	ldr	r0, [pc, #56]	; (10009338 <__aeabi_float_init+0xac>)
10009300:	2142      	movs	r1, #66	; 0x42
10009302:	f001 fd13 	bl	1000ad2c <__assert_func>
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10009306:	6879      	ldr	r1, [r7, #4]
10009308:	4b07      	ldr	r3, [pc, #28]	; (10009328 <__aeabi_float_init+0x9c>)
1000930a:	2280      	movs	r2, #128	; 0x80
1000930c:	0018      	movs	r0, r3
1000930e:	f003 fe29 	bl	1000cf64 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(ROM_FUNC_CLZ32);
10009312:	4b0a      	ldr	r3, [pc, #40]	; (1000933c <__aeabi_float_init+0xb0>)
10009314:	0018      	movs	r0, r3
10009316:	f7ff fe97 	bl	10009048 <rom_func_lookup>
1000931a:	0002      	movs	r2, r0
1000931c:	4b08      	ldr	r3, [pc, #32]	; (10009340 <__aeabi_float_init+0xb4>)
1000931e:	601a      	str	r2, [r3, #0]
}
10009320:	46c0      	nop			; (mov r8, r8)
10009322:	46bd      	mov	sp, r7
10009324:	b004      	add	sp, #16
10009326:	bd80      	pop	{r7, pc}
10009328:	20009308 	.word	0x20009308
1000932c:	1000927d 	.word	0x1000927d
10009330:	1000e8cc 	.word	0x1000e8cc
10009334:	1000e95c 	.word	0x1000e95c
10009338:	1000e900 	.word	0x1000e900
1000933c:	0000334c 	.word	0x0000334c
10009340:	20009304 	.word	0x20009304

10009344 <running_on_fpga>:
// (mainly clock generators and oscillators) that aren't present on FPGA.

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
10009344:	b580      	push	{r7, lr}
10009346:	af00      	add	r7, sp, #0
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10009348:	4b04      	ldr	r3, [pc, #16]	; (1000935c <running_on_fpga+0x18>)
1000934a:	681b      	ldr	r3, [r3, #0]
1000934c:	2202      	movs	r2, #2
1000934e:	4013      	ands	r3, r2
10009350:	1e5a      	subs	r2, r3, #1
10009352:	4193      	sbcs	r3, r2
10009354:	b2db      	uxtb	r3, r3
}
10009356:	0018      	movs	r0, r3
10009358:	46bd      	mov	sp, r7
1000935a:	bd80      	pop	{r7, pc}
1000935c:	4006c000 	.word	0x4006c000

10009360 <_out_null>:
        ((char *) buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
10009360:	b580      	push	{r7, lr}
10009362:	b084      	sub	sp, #16
10009364:	af00      	add	r7, sp, #0
10009366:	60b9      	str	r1, [r7, #8]
10009368:	607a      	str	r2, [r7, #4]
1000936a:	603b      	str	r3, [r7, #0]
1000936c:	230f      	movs	r3, #15
1000936e:	18fb      	adds	r3, r7, r3
10009370:	1c02      	adds	r2, r0, #0
10009372:	701a      	strb	r2, [r3, #0]
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
10009374:	46c0      	nop			; (mov r8, r8)
10009376:	46bd      	mov	sp, r7
10009378:	b004      	add	sp, #16
1000937a:	bd80      	pop	{r7, pc}

1000937c <_out_fct>:
    }
}


// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
1000937c:	b580      	push	{r7, lr}
1000937e:	b084      	sub	sp, #16
10009380:	af00      	add	r7, sp, #0
10009382:	60b9      	str	r1, [r7, #8]
10009384:	607a      	str	r2, [r7, #4]
10009386:	603b      	str	r3, [r7, #0]
10009388:	210f      	movs	r1, #15
1000938a:	187b      	adds	r3, r7, r1
1000938c:	1c02      	adds	r2, r0, #0
1000938e:	701a      	strb	r2, [r3, #0]
    (void) idx;
    (void) maxlen;
    if (character) {
10009390:	0008      	movs	r0, r1
10009392:	187b      	adds	r3, r7, r1
10009394:	781b      	ldrb	r3, [r3, #0]
10009396:	2b00      	cmp	r3, #0
10009398:	d007      	beq.n	100093aa <_out_fct+0x2e>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
1000939a:	68bb      	ldr	r3, [r7, #8]
1000939c:	681a      	ldr	r2, [r3, #0]
1000939e:	68bb      	ldr	r3, [r7, #8]
100093a0:	6859      	ldr	r1, [r3, #4]
100093a2:	183b      	adds	r3, r7, r0
100093a4:	781b      	ldrb	r3, [r3, #0]
100093a6:	0018      	movs	r0, r3
100093a8:	4790      	blx	r2
    }
}
100093aa:	46c0      	nop			; (mov r8, r8)
100093ac:	46bd      	mov	sp, r7
100093ae:	b004      	add	sp, #16
100093b0:	bd80      	pop	{r7, pc}

100093b2 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
100093b2:	b580      	push	{r7, lr}
100093b4:	b084      	sub	sp, #16
100093b6:	af00      	add	r7, sp, #0
100093b8:	6078      	str	r0, [r7, #4]
100093ba:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s);
100093bc:	687b      	ldr	r3, [r7, #4]
100093be:	60fb      	str	r3, [r7, #12]
100093c0:	e002      	b.n	100093c8 <_strnlen_s+0x16>
100093c2:	68fb      	ldr	r3, [r7, #12]
100093c4:	3301      	adds	r3, #1
100093c6:	60fb      	str	r3, [r7, #12]
100093c8:	68fb      	ldr	r3, [r7, #12]
100093ca:	781b      	ldrb	r3, [r3, #0]
100093cc:	2b00      	cmp	r3, #0
100093ce:	d004      	beq.n	100093da <_strnlen_s+0x28>
100093d0:	683b      	ldr	r3, [r7, #0]
100093d2:	1e5a      	subs	r2, r3, #1
100093d4:	603a      	str	r2, [r7, #0]
100093d6:	2b00      	cmp	r3, #0
100093d8:	d1f3      	bne.n	100093c2 <_strnlen_s+0x10>
    return (unsigned int) (s - str);
100093da:	68fa      	ldr	r2, [r7, #12]
100093dc:	687b      	ldr	r3, [r7, #4]
100093de:	1ad3      	subs	r3, r2, r3
}
100093e0:	0018      	movs	r0, r3
100093e2:	46bd      	mov	sp, r7
100093e4:	b004      	add	sp, #16
100093e6:	bd80      	pop	{r7, pc}

100093e8 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) {
100093e8:	b580      	push	{r7, lr}
100093ea:	b082      	sub	sp, #8
100093ec:	af00      	add	r7, sp, #0
100093ee:	0002      	movs	r2, r0
100093f0:	1dfb      	adds	r3, r7, #7
100093f2:	701a      	strb	r2, [r3, #0]
    return (ch >= '0') && (ch <= '9');
100093f4:	1dfb      	adds	r3, r7, #7
100093f6:	781b      	ldrb	r3, [r3, #0]
100093f8:	2b2f      	cmp	r3, #47	; 0x2f
100093fa:	d905      	bls.n	10009408 <_is_digit+0x20>
100093fc:	1dfb      	adds	r3, r7, #7
100093fe:	781b      	ldrb	r3, [r3, #0]
10009400:	2b39      	cmp	r3, #57	; 0x39
10009402:	d801      	bhi.n	10009408 <_is_digit+0x20>
10009404:	2301      	movs	r3, #1
10009406:	e000      	b.n	1000940a <_is_digit+0x22>
10009408:	2300      	movs	r3, #0
1000940a:	1c1a      	adds	r2, r3, #0
1000940c:	2301      	movs	r3, #1
1000940e:	4013      	ands	r3, r2
10009410:	b2db      	uxtb	r3, r3
}
10009412:	0018      	movs	r0, r3
10009414:	46bd      	mov	sp, r7
10009416:	b002      	add	sp, #8
10009418:	bd80      	pop	{r7, pc}

1000941a <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
1000941a:	b580      	push	{r7, lr}
1000941c:	b084      	sub	sp, #16
1000941e:	af00      	add	r7, sp, #0
10009420:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
10009422:	2300      	movs	r3, #0
10009424:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
10009426:	e00e      	b.n	10009446 <_atoi+0x2c>
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10009428:	68fa      	ldr	r2, [r7, #12]
1000942a:	0013      	movs	r3, r2
1000942c:	009b      	lsls	r3, r3, #2
1000942e:	189b      	adds	r3, r3, r2
10009430:	005b      	lsls	r3, r3, #1
10009432:	0018      	movs	r0, r3
10009434:	687b      	ldr	r3, [r7, #4]
10009436:	681b      	ldr	r3, [r3, #0]
10009438:	1c59      	adds	r1, r3, #1
1000943a:	687a      	ldr	r2, [r7, #4]
1000943c:	6011      	str	r1, [r2, #0]
1000943e:	781b      	ldrb	r3, [r3, #0]
10009440:	18c3      	adds	r3, r0, r3
10009442:	3b30      	subs	r3, #48	; 0x30
10009444:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
10009446:	687b      	ldr	r3, [r7, #4]
10009448:	681b      	ldr	r3, [r3, #0]
1000944a:	781b      	ldrb	r3, [r3, #0]
1000944c:	0018      	movs	r0, r3
1000944e:	f7ff ffcb 	bl	100093e8 <_is_digit>
10009452:	1e03      	subs	r3, r0, #0
10009454:	d1e8      	bne.n	10009428 <_atoi+0xe>
    }
    return i;
10009456:	68fb      	ldr	r3, [r7, #12]
}
10009458:	0018      	movs	r0, r3
1000945a:	46bd      	mov	sp, r7
1000945c:	b004      	add	sp, #16
1000945e:	bd80      	pop	{r7, pc}

10009460 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
10009460:	b590      	push	{r4, r7, lr}
10009462:	b087      	sub	sp, #28
10009464:	af00      	add	r7, sp, #0
10009466:	60f8      	str	r0, [r7, #12]
10009468:	60b9      	str	r1, [r7, #8]
1000946a:	607a      	str	r2, [r7, #4]
1000946c:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
1000946e:	687b      	ldr	r3, [r7, #4]
10009470:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
10009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009474:	2202      	movs	r2, #2
10009476:	4013      	ands	r3, r2
10009478:	d124      	bne.n	100094c4 <_out_rev+0x64>
1000947a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000947c:	2201      	movs	r2, #1
1000947e:	4013      	ands	r3, r2
10009480:	d120      	bne.n	100094c4 <_out_rev+0x64>
        for (size_t i = len; i < width; i++) {
10009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10009484:	617b      	str	r3, [r7, #20]
10009486:	e00a      	b.n	1000949e <_out_rev+0x3e>
            out(' ', buffer, idx++, maxlen);
10009488:	687a      	ldr	r2, [r7, #4]
1000948a:	1c53      	adds	r3, r2, #1
1000948c:	607b      	str	r3, [r7, #4]
1000948e:	683b      	ldr	r3, [r7, #0]
10009490:	68b9      	ldr	r1, [r7, #8]
10009492:	68fc      	ldr	r4, [r7, #12]
10009494:	2020      	movs	r0, #32
10009496:	47a0      	blx	r4
        for (size_t i = len; i < width; i++) {
10009498:	697b      	ldr	r3, [r7, #20]
1000949a:	3301      	adds	r3, #1
1000949c:	617b      	str	r3, [r7, #20]
1000949e:	697a      	ldr	r2, [r7, #20]
100094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100094a2:	429a      	cmp	r2, r3
100094a4:	d3f0      	bcc.n	10009488 <_out_rev+0x28>
        }
    }

    // reverse string
    while (len) {
100094a6:	e00d      	b.n	100094c4 <_out_rev+0x64>
        out(buf[--len], buffer, idx++, maxlen);
100094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100094aa:	3b01      	subs	r3, #1
100094ac:	62fb      	str	r3, [r7, #44]	; 0x2c
100094ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
100094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100094b2:	18d3      	adds	r3, r2, r3
100094b4:	7818      	ldrb	r0, [r3, #0]
100094b6:	687a      	ldr	r2, [r7, #4]
100094b8:	1c53      	adds	r3, r2, #1
100094ba:	607b      	str	r3, [r7, #4]
100094bc:	683b      	ldr	r3, [r7, #0]
100094be:	68b9      	ldr	r1, [r7, #8]
100094c0:	68fc      	ldr	r4, [r7, #12]
100094c2:	47a0      	blx	r4
    while (len) {
100094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100094c6:	2b00      	cmp	r3, #0
100094c8:	d1ee      	bne.n	100094a8 <_out_rev+0x48>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
100094ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100094cc:	2202      	movs	r2, #2
100094ce:	4013      	ands	r3, r2
100094d0:	d00e      	beq.n	100094f0 <_out_rev+0x90>
        while (idx - start_idx < width) {
100094d2:	e007      	b.n	100094e4 <_out_rev+0x84>
            out(' ', buffer, idx++, maxlen);
100094d4:	687a      	ldr	r2, [r7, #4]
100094d6:	1c53      	adds	r3, r2, #1
100094d8:	607b      	str	r3, [r7, #4]
100094da:	683b      	ldr	r3, [r7, #0]
100094dc:	68b9      	ldr	r1, [r7, #8]
100094de:	68fc      	ldr	r4, [r7, #12]
100094e0:	2020      	movs	r0, #32
100094e2:	47a0      	blx	r4
        while (idx - start_idx < width) {
100094e4:	687a      	ldr	r2, [r7, #4]
100094e6:	693b      	ldr	r3, [r7, #16]
100094e8:	1ad3      	subs	r3, r2, r3
100094ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100094ec:	429a      	cmp	r2, r3
100094ee:	d8f1      	bhi.n	100094d4 <_out_rev+0x74>
        }
    }

    return idx;
100094f0:	687b      	ldr	r3, [r7, #4]
}
100094f2:	0018      	movs	r0, r3
100094f4:	46bd      	mov	sp, r7
100094f6:	b007      	add	sp, #28
100094f8:	bd90      	pop	{r4, r7, pc}

100094fa <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
100094fa:	b590      	push	{r4, r7, lr}
100094fc:	b089      	sub	sp, #36	; 0x24
100094fe:	af04      	add	r7, sp, #16
10009500:	60f8      	str	r0, [r7, #12]
10009502:	60b9      	str	r1, [r7, #8]
10009504:	607a      	str	r2, [r7, #4]
10009506:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
10009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000950a:	2202      	movs	r2, #2
1000950c:	4013      	ands	r3, r2
1000950e:	d134      	bne.n	1000957a <_ntoa_format+0x80>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10009510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009512:	2b00      	cmp	r3, #0
10009514:	d017      	beq.n	10009546 <_ntoa_format+0x4c>
10009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10009518:	2201      	movs	r2, #1
1000951a:	4013      	ands	r3, r2
1000951c:	d013      	beq.n	10009546 <_ntoa_format+0x4c>
1000951e:	2328      	movs	r3, #40	; 0x28
10009520:	18fb      	adds	r3, r7, r3
10009522:	781b      	ldrb	r3, [r3, #0]
10009524:	2b00      	cmp	r3, #0
10009526:	d103      	bne.n	10009530 <_ntoa_format+0x36>
10009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000952a:	220c      	movs	r2, #12
1000952c:	4013      	ands	r3, r2
1000952e:	d00a      	beq.n	10009546 <_ntoa_format+0x4c>
            width--;
10009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009532:	3b01      	subs	r3, #1
10009534:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10009536:	e006      	b.n	10009546 <_ntoa_format+0x4c>
            buf[len++] = '0';
10009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000953a:	1c5a      	adds	r2, r3, #1
1000953c:	627a      	str	r2, [r7, #36]	; 0x24
1000953e:	6a3a      	ldr	r2, [r7, #32]
10009540:	18d3      	adds	r3, r2, r3
10009542:	2230      	movs	r2, #48	; 0x30
10009544:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10009546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000954a:	429a      	cmp	r2, r3
1000954c:	d20a      	bcs.n	10009564 <_ntoa_format+0x6a>
1000954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009550:	2b1f      	cmp	r3, #31
10009552:	d9f1      	bls.n	10009538 <_ntoa_format+0x3e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10009554:	e006      	b.n	10009564 <_ntoa_format+0x6a>
            buf[len++] = '0';
10009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009558:	1c5a      	adds	r2, r3, #1
1000955a:	627a      	str	r2, [r7, #36]	; 0x24
1000955c:	6a3a      	ldr	r2, [r7, #32]
1000955e:	18d3      	adds	r3, r2, r3
10009560:	2230      	movs	r2, #48	; 0x30
10009562:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10009566:	2201      	movs	r2, #1
10009568:	4013      	ands	r3, r2
1000956a:	d006      	beq.n	1000957a <_ntoa_format+0x80>
1000956c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000956e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009570:	429a      	cmp	r2, r3
10009572:	d202      	bcs.n	1000957a <_ntoa_format+0x80>
10009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009576:	2b1f      	cmp	r3, #31
10009578:	d9ed      	bls.n	10009556 <_ntoa_format+0x5c>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
1000957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000957c:	2210      	movs	r2, #16
1000957e:	4013      	ands	r3, r2
10009580:	d056      	beq.n	10009630 <_ntoa_format+0x136>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10009582:	6bba      	ldr	r2, [r7, #56]	; 0x38
10009584:	2380      	movs	r3, #128	; 0x80
10009586:	00db      	lsls	r3, r3, #3
10009588:	4013      	ands	r3, r2
1000958a:	d116      	bne.n	100095ba <_ntoa_format+0xc0>
1000958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000958e:	2b00      	cmp	r3, #0
10009590:	d013      	beq.n	100095ba <_ntoa_format+0xc0>
10009592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10009596:	429a      	cmp	r2, r3
10009598:	d003      	beq.n	100095a2 <_ntoa_format+0xa8>
1000959a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000959e:	429a      	cmp	r2, r3
100095a0:	d10b      	bne.n	100095ba <_ntoa_format+0xc0>
            len--;
100095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095a4:	3b01      	subs	r3, #1
100095a6:	627b      	str	r3, [r7, #36]	; 0x24
            if (len && (base == 16U)) {
100095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095aa:	2b00      	cmp	r3, #0
100095ac:	d005      	beq.n	100095ba <_ntoa_format+0xc0>
100095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100095b0:	2b10      	cmp	r3, #16
100095b2:	d102      	bne.n	100095ba <_ntoa_format+0xc0>
                len--;
100095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095b6:	3b01      	subs	r3, #1
100095b8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100095bc:	2b10      	cmp	r3, #16
100095be:	d10e      	bne.n	100095de <_ntoa_format+0xe4>
100095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100095c2:	2220      	movs	r2, #32
100095c4:	4013      	ands	r3, r2
100095c6:	d10a      	bne.n	100095de <_ntoa_format+0xe4>
100095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095ca:	2b1f      	cmp	r3, #31
100095cc:	d807      	bhi.n	100095de <_ntoa_format+0xe4>
            buf[len++] = 'x';
100095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095d0:	1c5a      	adds	r2, r3, #1
100095d2:	627a      	str	r2, [r7, #36]	; 0x24
100095d4:	6a3a      	ldr	r2, [r7, #32]
100095d6:	18d3      	adds	r3, r2, r3
100095d8:	2278      	movs	r2, #120	; 0x78
100095da:	701a      	strb	r2, [r3, #0]
100095dc:	e01e      	b.n	1000961c <_ntoa_format+0x122>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100095e0:	2b10      	cmp	r3, #16
100095e2:	d10e      	bne.n	10009602 <_ntoa_format+0x108>
100095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100095e6:	2220      	movs	r2, #32
100095e8:	4013      	ands	r3, r2
100095ea:	d00a      	beq.n	10009602 <_ntoa_format+0x108>
100095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095ee:	2b1f      	cmp	r3, #31
100095f0:	d807      	bhi.n	10009602 <_ntoa_format+0x108>
            buf[len++] = 'X';
100095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100095f4:	1c5a      	adds	r2, r3, #1
100095f6:	627a      	str	r2, [r7, #36]	; 0x24
100095f8:	6a3a      	ldr	r2, [r7, #32]
100095fa:	18d3      	adds	r3, r2, r3
100095fc:	2258      	movs	r2, #88	; 0x58
100095fe:	701a      	strb	r2, [r3, #0]
10009600:	e00c      	b.n	1000961c <_ntoa_format+0x122>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10009604:	2b02      	cmp	r3, #2
10009606:	d109      	bne.n	1000961c <_ntoa_format+0x122>
10009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000960a:	2b1f      	cmp	r3, #31
1000960c:	d806      	bhi.n	1000961c <_ntoa_format+0x122>
            buf[len++] = 'b';
1000960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009610:	1c5a      	adds	r2, r3, #1
10009612:	627a      	str	r2, [r7, #36]	; 0x24
10009614:	6a3a      	ldr	r2, [r7, #32]
10009616:	18d3      	adds	r3, r2, r3
10009618:	2262      	movs	r2, #98	; 0x62
1000961a:	701a      	strb	r2, [r3, #0]
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
1000961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000961e:	2b1f      	cmp	r3, #31
10009620:	d806      	bhi.n	10009630 <_ntoa_format+0x136>
            buf[len++] = '0';
10009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009624:	1c5a      	adds	r2, r3, #1
10009626:	627a      	str	r2, [r7, #36]	; 0x24
10009628:	6a3a      	ldr	r2, [r7, #32]
1000962a:	18d3      	adds	r3, r2, r3
1000962c:	2230      	movs	r2, #48	; 0x30
1000962e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009632:	2b1f      	cmp	r3, #31
10009634:	d823      	bhi.n	1000967e <_ntoa_format+0x184>
        if (negative) {
10009636:	2328      	movs	r3, #40	; 0x28
10009638:	18fb      	adds	r3, r7, r3
1000963a:	781b      	ldrb	r3, [r3, #0]
1000963c:	2b00      	cmp	r3, #0
1000963e:	d007      	beq.n	10009650 <_ntoa_format+0x156>
            buf[len++] = '-';
10009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009642:	1c5a      	adds	r2, r3, #1
10009644:	627a      	str	r2, [r7, #36]	; 0x24
10009646:	6a3a      	ldr	r2, [r7, #32]
10009648:	18d3      	adds	r3, r2, r3
1000964a:	222d      	movs	r2, #45	; 0x2d
1000964c:	701a      	strb	r2, [r3, #0]
1000964e:	e016      	b.n	1000967e <_ntoa_format+0x184>
        } else if (flags & FLAGS_PLUS) {
10009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10009652:	2204      	movs	r2, #4
10009654:	4013      	ands	r3, r2
10009656:	d007      	beq.n	10009668 <_ntoa_format+0x16e>
            buf[len++] = '+';  // ignore the space if the '+' exists
10009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000965a:	1c5a      	adds	r2, r3, #1
1000965c:	627a      	str	r2, [r7, #36]	; 0x24
1000965e:	6a3a      	ldr	r2, [r7, #32]
10009660:	18d3      	adds	r3, r2, r3
10009662:	222b      	movs	r2, #43	; 0x2b
10009664:	701a      	strb	r2, [r3, #0]
10009666:	e00a      	b.n	1000967e <_ntoa_format+0x184>
        } else if (flags & FLAGS_SPACE) {
10009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000966a:	2208      	movs	r2, #8
1000966c:	4013      	ands	r3, r2
1000966e:	d006      	beq.n	1000967e <_ntoa_format+0x184>
            buf[len++] = ' ';
10009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009672:	1c5a      	adds	r2, r3, #1
10009674:	627a      	str	r2, [r7, #36]	; 0x24
10009676:	6a3a      	ldr	r2, [r7, #32]
10009678:	18d3      	adds	r3, r2, r3
1000967a:	2220      	movs	r2, #32
1000967c:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
1000967e:	683c      	ldr	r4, [r7, #0]
10009680:	687a      	ldr	r2, [r7, #4]
10009682:	68b9      	ldr	r1, [r7, #8]
10009684:	68f8      	ldr	r0, [r7, #12]
10009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10009688:	9303      	str	r3, [sp, #12]
1000968a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000968c:	9302      	str	r3, [sp, #8]
1000968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009690:	9301      	str	r3, [sp, #4]
10009692:	6a3b      	ldr	r3, [r7, #32]
10009694:	9300      	str	r3, [sp, #0]
10009696:	0023      	movs	r3, r4
10009698:	f7ff fee2 	bl	10009460 <_out_rev>
1000969c:	0003      	movs	r3, r0
}
1000969e:	0018      	movs	r0, r3
100096a0:	46bd      	mov	sp, r7
100096a2:	b005      	add	sp, #20
100096a4:	bd90      	pop	{r4, r7, pc}

100096a6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags) {
100096a6:	b590      	push	{r4, r7, lr}
100096a8:	b097      	sub	sp, #92	; 0x5c
100096aa:	af08      	add	r7, sp, #32
100096ac:	60f8      	str	r0, [r7, #12]
100096ae:	60b9      	str	r1, [r7, #8]
100096b0:	607a      	str	r2, [r7, #4]
100096b2:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
100096b4:	2300      	movs	r3, #0
100096b6:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
100096b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100096ba:	2b00      	cmp	r3, #0
100096bc:	d103      	bne.n	100096c6 <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
100096be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100096c0:	2210      	movs	r2, #16
100096c2:	4393      	bics	r3, r2
100096c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
100096c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
100096c8:	2380      	movs	r3, #128	; 0x80
100096ca:	00db      	lsls	r3, r3, #3
100096cc:	4013      	ands	r3, r2
100096ce:	d002      	beq.n	100096d6 <_ntoa_long+0x30>
100096d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100096d2:	2b00      	cmp	r3, #0
100096d4:	d033      	beq.n	1000973e <_ntoa_long+0x98>
        do {
            const char digit = (char) (value % base);
100096d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100096d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
100096da:	0018      	movs	r0, r3
100096dc:	f003 f8f0 	bl	1000c8c0 <__wrap___aeabi_uidiv>
100096e0:	000b      	movs	r3, r1
100096e2:	001a      	movs	r2, r3
100096e4:	2133      	movs	r1, #51	; 0x33
100096e6:	187b      	adds	r3, r7, r1
100096e8:	701a      	strb	r2, [r3, #0]
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
100096ea:	000a      	movs	r2, r1
100096ec:	18bb      	adds	r3, r7, r2
100096ee:	781b      	ldrb	r3, [r3, #0]
100096f0:	2b09      	cmp	r3, #9
100096f2:	d804      	bhi.n	100096fe <_ntoa_long+0x58>
100096f4:	18bb      	adds	r3, r7, r2
100096f6:	781b      	ldrb	r3, [r3, #0]
100096f8:	3330      	adds	r3, #48	; 0x30
100096fa:	b2da      	uxtb	r2, r3
100096fc:	e00d      	b.n	1000971a <_ntoa_long+0x74>
100096fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10009700:	2220      	movs	r2, #32
10009702:	4013      	ands	r3, r2
10009704:	d001      	beq.n	1000970a <_ntoa_long+0x64>
10009706:	2341      	movs	r3, #65	; 0x41
10009708:	e000      	b.n	1000970c <_ntoa_long+0x66>
1000970a:	2361      	movs	r3, #97	; 0x61
1000970c:	2233      	movs	r2, #51	; 0x33
1000970e:	18ba      	adds	r2, r7, r2
10009710:	7812      	ldrb	r2, [r2, #0]
10009712:	189b      	adds	r3, r3, r2
10009714:	b2db      	uxtb	r3, r3
10009716:	3b0a      	subs	r3, #10
10009718:	b2da      	uxtb	r2, r3
1000971a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000971c:	1c59      	adds	r1, r3, #1
1000971e:	6379      	str	r1, [r7, #52]	; 0x34
10009720:	2110      	movs	r1, #16
10009722:	1879      	adds	r1, r7, r1
10009724:	54ca      	strb	r2, [r1, r3]
            value /= base;
10009726:	6d39      	ldr	r1, [r7, #80]	; 0x50
10009728:	6cb8      	ldr	r0, [r7, #72]	; 0x48
1000972a:	f003 f8c9 	bl	1000c8c0 <__wrap___aeabi_uidiv>
1000972e:	0003      	movs	r3, r0
10009730:	64bb      	str	r3, [r7, #72]	; 0x48
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10009732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009734:	2b00      	cmp	r3, #0
10009736:	d002      	beq.n	1000973e <_ntoa_long+0x98>
10009738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000973a:	2b1f      	cmp	r3, #31
1000973c:	d9cb      	bls.n	100096d6 <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000973e:	683c      	ldr	r4, [r7, #0]
10009740:	687a      	ldr	r2, [r7, #4]
10009742:	68b9      	ldr	r1, [r7, #8]
10009744:	68f8      	ldr	r0, [r7, #12]
10009746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10009748:	9306      	str	r3, [sp, #24]
1000974a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000974c:	9305      	str	r3, [sp, #20]
1000974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009750:	9304      	str	r3, [sp, #16]
10009752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
10009754:	9303      	str	r3, [sp, #12]
10009756:	234c      	movs	r3, #76	; 0x4c
10009758:	18fb      	adds	r3, r7, r3
1000975a:	781b      	ldrb	r3, [r3, #0]
1000975c:	9302      	str	r3, [sp, #8]
1000975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009760:	9301      	str	r3, [sp, #4]
10009762:	2310      	movs	r3, #16
10009764:	18fb      	adds	r3, r7, r3
10009766:	9300      	str	r3, [sp, #0]
10009768:	0023      	movs	r3, r4
1000976a:	f7ff fec6 	bl	100094fa <_ntoa_format>
1000976e:	0003      	movs	r3, r0
}
10009770:	0018      	movs	r0, r3
10009772:	46bd      	mov	sp, r7
10009774:	b00f      	add	sp, #60	; 0x3c
10009776:	bd90      	pop	{r4, r7, pc}

10009778 <_ntoa_long_long>:
// internal itoa for 'long long' type
#if PICO_PRINTF_SUPPORT_LONG_LONG

static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
10009778:	b5b0      	push	{r4, r5, r7, lr}
1000977a:	b096      	sub	sp, #88	; 0x58
1000977c:	af08      	add	r7, sp, #32
1000977e:	60f8      	str	r0, [r7, #12]
10009780:	60b9      	str	r1, [r7, #8]
10009782:	607a      	str	r2, [r7, #4]
10009784:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
10009786:	2300      	movs	r3, #0
10009788:	637b      	str	r3, [r7, #52]	; 0x34

    // no hash for 0 values
    if (!value) {
1000978a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000978c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000978e:	4313      	orrs	r3, r2
10009790:	d103      	bne.n	1000979a <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
10009792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
10009794:	2210      	movs	r2, #16
10009796:	4393      	bics	r3, r2
10009798:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
1000979a:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000979c:	2380      	movs	r3, #128	; 0x80
1000979e:	00db      	lsls	r3, r3, #3
100097a0:	4013      	ands	r3, r2
100097a2:	d003      	beq.n	100097ac <_ntoa_long_long+0x34>
100097a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
100097a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
100097a8:	4313      	orrs	r3, r2
100097aa:	d03a      	beq.n	10009822 <_ntoa_long_long+0xaa>
        do {
            const char digit = (char) (value % base);
100097ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
100097ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
100097b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
100097b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
100097b4:	f003 f8c6 	bl	1000c944 <__wrap___aeabi_uldivmod>
100097b8:	0010      	movs	r0, r2
100097ba:	0019      	movs	r1, r3
100097bc:	2433      	movs	r4, #51	; 0x33
100097be:	193b      	adds	r3, r7, r4
100097c0:	1c02      	adds	r2, r0, #0
100097c2:	701a      	strb	r2, [r3, #0]
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
100097c4:	0022      	movs	r2, r4
100097c6:	18bb      	adds	r3, r7, r2
100097c8:	781b      	ldrb	r3, [r3, #0]
100097ca:	2b09      	cmp	r3, #9
100097cc:	d804      	bhi.n	100097d8 <_ntoa_long_long+0x60>
100097ce:	18bb      	adds	r3, r7, r2
100097d0:	781b      	ldrb	r3, [r3, #0]
100097d2:	3330      	adds	r3, #48	; 0x30
100097d4:	b2da      	uxtb	r2, r3
100097d6:	e00d      	b.n	100097f4 <_ntoa_long_long+0x7c>
100097d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
100097da:	2220      	movs	r2, #32
100097dc:	4013      	ands	r3, r2
100097de:	d001      	beq.n	100097e4 <_ntoa_long_long+0x6c>
100097e0:	2341      	movs	r3, #65	; 0x41
100097e2:	e000      	b.n	100097e6 <_ntoa_long_long+0x6e>
100097e4:	2361      	movs	r3, #97	; 0x61
100097e6:	2233      	movs	r2, #51	; 0x33
100097e8:	18ba      	adds	r2, r7, r2
100097ea:	7812      	ldrb	r2, [r2, #0]
100097ec:	189b      	adds	r3, r3, r2
100097ee:	b2db      	uxtb	r3, r3
100097f0:	3b0a      	subs	r3, #10
100097f2:	b2da      	uxtb	r2, r3
100097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100097f6:	1c59      	adds	r1, r3, #1
100097f8:	6379      	str	r1, [r7, #52]	; 0x34
100097fa:	2110      	movs	r1, #16
100097fc:	1879      	adds	r1, r7, r1
100097fe:	54ca      	strb	r2, [r1, r3]
            value /= base;
10009800:	6dba      	ldr	r2, [r7, #88]	; 0x58
10009802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
10009804:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10009806:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10009808:	f003 f89c 	bl	1000c944 <__wrap___aeabi_uldivmod>
1000980c:	0002      	movs	r2, r0
1000980e:	000b      	movs	r3, r1
10009810:	64ba      	str	r2, [r7, #72]	; 0x48
10009812:	64fb      	str	r3, [r7, #76]	; 0x4c
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10009814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
10009818:	4313      	orrs	r3, r2
1000981a:	d002      	beq.n	10009822 <_ntoa_long_long+0xaa>
1000981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000981e:	2b1f      	cmp	r3, #31
10009820:	d9c4      	bls.n	100097ac <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10009822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
10009824:	683d      	ldr	r5, [r7, #0]
10009826:	687c      	ldr	r4, [r7, #4]
10009828:	68b9      	ldr	r1, [r7, #8]
1000982a:	68f8      	ldr	r0, [r7, #12]
1000982c:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000982e:	9206      	str	r2, [sp, #24]
10009830:	6e7a      	ldr	r2, [r7, #100]	; 0x64
10009832:	9205      	str	r2, [sp, #20]
10009834:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10009836:	9204      	str	r2, [sp, #16]
10009838:	9303      	str	r3, [sp, #12]
1000983a:	2350      	movs	r3, #80	; 0x50
1000983c:	18fb      	adds	r3, r7, r3
1000983e:	781b      	ldrb	r3, [r3, #0]
10009840:	9302      	str	r3, [sp, #8]
10009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10009844:	9301      	str	r3, [sp, #4]
10009846:	2310      	movs	r3, #16
10009848:	18fb      	adds	r3, r7, r3
1000984a:	9300      	str	r3, [sp, #0]
1000984c:	002b      	movs	r3, r5
1000984e:	0022      	movs	r2, r4
10009850:	f7ff fe53 	bl	100094fa <_ntoa_format>
10009854:	0003      	movs	r3, r0
}
10009856:	0018      	movs	r0, r3
10009858:	46bd      	mov	sp, r7
1000985a:	b00e      	add	sp, #56	; 0x38
1000985c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10009860 <_ftoa>:

#define is_nan __builtin_isnan

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10009860:	b5f0      	push	{r4, r5, r6, r7, lr}
10009862:	b09d      	sub	sp, #116	; 0x74
10009864:	af06      	add	r7, sp, #24
10009866:	60f8      	str	r0, [r7, #12]
10009868:	60b9      	str	r1, [r7, #8]
1000986a:	607a      	str	r2, [r7, #4]
1000986c:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
1000986e:	2300      	movs	r3, #0
10009870:	657b      	str	r3, [r7, #84]	; 0x54
    double diff = 0.0;
10009872:	2200      	movs	r2, #0
10009874:	2300      	movs	r3, #0
10009876:	63ba      	str	r2, [r7, #56]	; 0x38
10009878:	63fb      	str	r3, [r7, #60]	; 0x3c

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (is_nan(value))
1000987a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1000987c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000987e:	6f38      	ldr	r0, [r7, #112]	; 0x70
10009880:	6f79      	ldr	r1, [r7, #116]	; 0x74
10009882:	f003 fad6 	bl	1000ce32 <__wrap___aeabi_dcmpun>
10009886:	1e03      	subs	r3, r0, #0
10009888:	d012      	beq.n	100098b0 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
1000988a:	683c      	ldr	r4, [r7, #0]
1000988c:	687a      	ldr	r2, [r7, #4]
1000988e:	68b9      	ldr	r1, [r7, #8]
10009890:	68f8      	ldr	r0, [r7, #12]
10009892:	2380      	movs	r3, #128	; 0x80
10009894:	18fb      	adds	r3, r7, r3
10009896:	681b      	ldr	r3, [r3, #0]
10009898:	9303      	str	r3, [sp, #12]
1000989a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000989c:	9302      	str	r3, [sp, #8]
1000989e:	2303      	movs	r3, #3
100098a0:	9301      	str	r3, [sp, #4]
100098a2:	4bc5      	ldr	r3, [pc, #788]	; (10009bb8 <_ftoa+0x358>)
100098a4:	9300      	str	r3, [sp, #0]
100098a6:	0023      	movs	r3, r4
100098a8:	f7ff fdda 	bl	10009460 <_out_rev>
100098ac:	0003      	movs	r3, r0
100098ae:	e21d      	b.n	10009cec <_ftoa+0x48c>
    if (value < -DBL_MAX)
100098b0:	2201      	movs	r2, #1
100098b2:	4252      	negs	r2, r2
100098b4:	4bc1      	ldr	r3, [pc, #772]	; (10009bbc <_ftoa+0x35c>)
100098b6:	6f38      	ldr	r0, [r7, #112]	; 0x70
100098b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
100098ba:	f003 faa7 	bl	1000ce0c <__wrap___aeabi_dcmplt>
100098be:	1e03      	subs	r3, r0, #0
100098c0:	d012      	beq.n	100098e8 <_ftoa+0x88>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
100098c2:	683c      	ldr	r4, [r7, #0]
100098c4:	687a      	ldr	r2, [r7, #4]
100098c6:	68b9      	ldr	r1, [r7, #8]
100098c8:	68f8      	ldr	r0, [r7, #12]
100098ca:	2380      	movs	r3, #128	; 0x80
100098cc:	18fb      	adds	r3, r7, r3
100098ce:	681b      	ldr	r3, [r3, #0]
100098d0:	9303      	str	r3, [sp, #12]
100098d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
100098d4:	9302      	str	r3, [sp, #8]
100098d6:	2304      	movs	r3, #4
100098d8:	9301      	str	r3, [sp, #4]
100098da:	4bb9      	ldr	r3, [pc, #740]	; (10009bc0 <_ftoa+0x360>)
100098dc:	9300      	str	r3, [sp, #0]
100098de:	0023      	movs	r3, r4
100098e0:	f7ff fdbe 	bl	10009460 <_out_rev>
100098e4:	0003      	movs	r3, r0
100098e6:	e201      	b.n	10009cec <_ftoa+0x48c>
    if (value > DBL_MAX)
100098e8:	2201      	movs	r2, #1
100098ea:	4252      	negs	r2, r2
100098ec:	4bb5      	ldr	r3, [pc, #724]	; (10009bc4 <_ftoa+0x364>)
100098ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
100098f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
100098f2:	f003 fa99 	bl	1000ce28 <__wrap___aeabi_dcmpgt>
100098f6:	1e03      	subs	r3, r0, #0
100098f8:	d024      	beq.n	10009944 <_ftoa+0xe4>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
100098fa:	2380      	movs	r3, #128	; 0x80
100098fc:	18fb      	adds	r3, r7, r3
100098fe:	681b      	ldr	r3, [r3, #0]
10009900:	2204      	movs	r2, #4
10009902:	4013      	ands	r3, r2
10009904:	d001      	beq.n	1000990a <_ftoa+0xaa>
10009906:	4bb0      	ldr	r3, [pc, #704]	; (10009bc8 <_ftoa+0x368>)
10009908:	e000      	b.n	1000990c <_ftoa+0xac>
1000990a:	4bb0      	ldr	r3, [pc, #704]	; (10009bcc <_ftoa+0x36c>)
1000990c:	2280      	movs	r2, #128	; 0x80
1000990e:	18ba      	adds	r2, r7, r2
10009910:	6812      	ldr	r2, [r2, #0]
10009912:	2104      	movs	r1, #4
10009914:	400a      	ands	r2, r1
10009916:	d001      	beq.n	1000991c <_ftoa+0xbc>
10009918:	2204      	movs	r2, #4
1000991a:	e000      	b.n	1000991e <_ftoa+0xbe>
1000991c:	2203      	movs	r2, #3
1000991e:	683e      	ldr	r6, [r7, #0]
10009920:	687d      	ldr	r5, [r7, #4]
10009922:	68bc      	ldr	r4, [r7, #8]
10009924:	68f8      	ldr	r0, [r7, #12]
10009926:	2180      	movs	r1, #128	; 0x80
10009928:	1879      	adds	r1, r7, r1
1000992a:	6809      	ldr	r1, [r1, #0]
1000992c:	9103      	str	r1, [sp, #12]
1000992e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
10009930:	9102      	str	r1, [sp, #8]
10009932:	9201      	str	r2, [sp, #4]
10009934:	9300      	str	r3, [sp, #0]
10009936:	0033      	movs	r3, r6
10009938:	002a      	movs	r2, r5
1000993a:	0021      	movs	r1, r4
1000993c:	f7ff fd90 	bl	10009460 <_out_rev>
10009940:	0003      	movs	r3, r0
10009942:	e1d3      	b.n	10009cec <_ftoa+0x48c>
                        width, flags);

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10009944:	2200      	movs	r2, #0
10009946:	4ba2      	ldr	r3, [pc, #648]	; (10009bd0 <_ftoa+0x370>)
10009948:	6f38      	ldr	r0, [r7, #112]	; 0x70
1000994a:	6f79      	ldr	r1, [r7, #116]	; 0x74
1000994c:	f003 fa6c 	bl	1000ce28 <__wrap___aeabi_dcmpgt>
10009950:	1e03      	subs	r3, r0, #0
10009952:	d107      	bne.n	10009964 <_ftoa+0x104>
10009954:	2200      	movs	r2, #0
10009956:	4b9f      	ldr	r3, [pc, #636]	; (10009bd4 <_ftoa+0x374>)
10009958:	6f38      	ldr	r0, [r7, #112]	; 0x70
1000995a:	6f79      	ldr	r1, [r7, #116]	; 0x74
1000995c:	f003 fa56 	bl	1000ce0c <__wrap___aeabi_dcmplt>
10009960:	1e03      	subs	r3, r0, #0
10009962:	d015      	beq.n	10009990 <_ftoa+0x130>
#if PICO_PRINTF_SUPPORT_EXPONENTIAL
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10009964:	683d      	ldr	r5, [r7, #0]
10009966:	687c      	ldr	r4, [r7, #4]
10009968:	68b9      	ldr	r1, [r7, #8]
1000996a:	68f8      	ldr	r0, [r7, #12]
1000996c:	2380      	movs	r3, #128	; 0x80
1000996e:	18fb      	adds	r3, r7, r3
10009970:	681b      	ldr	r3, [r3, #0]
10009972:	9304      	str	r3, [sp, #16]
10009974:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10009976:	9303      	str	r3, [sp, #12]
10009978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000997a:	9302      	str	r3, [sp, #8]
1000997c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
1000997e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10009980:	9200      	str	r2, [sp, #0]
10009982:	9301      	str	r3, [sp, #4]
10009984:	002b      	movs	r3, r5
10009986:	0022      	movs	r2, r4
10009988:	f000 f9b4 	bl	10009cf4 <_etoa>
1000998c:	0003      	movs	r3, r0
1000998e:	e1ad      	b.n	10009cec <_ftoa+0x48c>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
10009990:	2453      	movs	r4, #83	; 0x53
10009992:	193b      	adds	r3, r7, r4
10009994:	2200      	movs	r2, #0
10009996:	701a      	strb	r2, [r3, #0]
    if (value < 0) {
10009998:	2200      	movs	r2, #0
1000999a:	2300      	movs	r3, #0
1000999c:	6f38      	ldr	r0, [r7, #112]	; 0x70
1000999e:	6f79      	ldr	r1, [r7, #116]	; 0x74
100099a0:	f003 fa34 	bl	1000ce0c <__wrap___aeabi_dcmplt>
100099a4:	1e03      	subs	r3, r0, #0
100099a6:	d00c      	beq.n	100099c2 <_ftoa+0x162>
        negative = true;
100099a8:	193b      	adds	r3, r7, r4
100099aa:	2201      	movs	r2, #1
100099ac:	701a      	strb	r2, [r3, #0]
        value = 0 - value;
100099ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
100099b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
100099b2:	2000      	movs	r0, #0
100099b4:	2100      	movs	r1, #0
100099b6:	f003 f9c6 	bl	1000cd46 <__wrap___aeabi_dsub>
100099ba:	0002      	movs	r2, r0
100099bc:	000b      	movs	r3, r1
100099be:	673a      	str	r2, [r7, #112]	; 0x70
100099c0:	677b      	str	r3, [r7, #116]	; 0x74
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
100099c2:	2380      	movs	r3, #128	; 0x80
100099c4:	18fb      	adds	r3, r7, r3
100099c6:	681a      	ldr	r2, [r3, #0]
100099c8:	2380      	movs	r3, #128	; 0x80
100099ca:	00db      	lsls	r3, r3, #3
100099cc:	4013      	ands	r3, r2
100099ce:	d10c      	bne.n	100099ea <_ftoa+0x18a>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
100099d0:	2306      	movs	r3, #6
100099d2:	67bb      	str	r3, [r7, #120]	; 0x78
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
100099d4:	e009      	b.n	100099ea <_ftoa+0x18a>
        buf[len++] = '0';
100099d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100099d8:	1c5a      	adds	r2, r3, #1
100099da:	657a      	str	r2, [r7, #84]	; 0x54
100099dc:	2210      	movs	r2, #16
100099de:	18ba      	adds	r2, r7, r2
100099e0:	2130      	movs	r1, #48	; 0x30
100099e2:	54d1      	strb	r1, [r2, r3]
        prec--;
100099e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100099e6:	3b01      	subs	r3, #1
100099e8:	67bb      	str	r3, [r7, #120]	; 0x78
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
100099ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
100099ec:	2b1f      	cmp	r3, #31
100099ee:	d802      	bhi.n	100099f6 <_ftoa+0x196>
100099f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
100099f2:	2b09      	cmp	r3, #9
100099f4:	d8ef      	bhi.n	100099d6 <_ftoa+0x176>
    }

    int whole = (int) value;
100099f6:	6f38      	ldr	r0, [r7, #112]	; 0x70
100099f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
100099fa:	f003 fa45 	bl	1000ce88 <__wrap___aeabi_d2iz>
100099fe:	0003      	movs	r3, r0
10009a00:	64fb      	str	r3, [r7, #76]	; 0x4c
    double tmp = (value - whole) * pow10[prec];
10009a02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
10009a04:	f003 fa28 	bl	1000ce58 <__wrap___aeabi_i2d>
10009a08:	0002      	movs	r2, r0
10009a0a:	000b      	movs	r3, r1
10009a0c:	6f38      	ldr	r0, [r7, #112]	; 0x70
10009a0e:	6f79      	ldr	r1, [r7, #116]	; 0x74
10009a10:	f003 f999 	bl	1000cd46 <__wrap___aeabi_dsub>
10009a14:	0002      	movs	r2, r0
10009a16:	000b      	movs	r3, r1
10009a18:	0010      	movs	r0, r2
10009a1a:	0019      	movs	r1, r3
10009a1c:	4a6e      	ldr	r2, [pc, #440]	; (10009bd8 <_ftoa+0x378>)
10009a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10009a20:	00db      	lsls	r3, r3, #3
10009a22:	18d3      	adds	r3, r2, r3
10009a24:	681a      	ldr	r2, [r3, #0]
10009a26:	685b      	ldr	r3, [r3, #4]
10009a28:	f003 f9b1 	bl	1000cd8e <__wrap___aeabi_dmul>
10009a2c:	0002      	movs	r2, r0
10009a2e:	000b      	movs	r3, r1
10009a30:	633a      	str	r2, [r7, #48]	; 0x30
10009a32:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned long frac = (unsigned long) tmp;
10009a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
10009a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
10009a38:	f003 fa4a 	bl	1000ced0 <__wrap___aeabi_d2uiz>
10009a3c:	0003      	movs	r3, r0
10009a3e:	64bb      	str	r3, [r7, #72]	; 0x48
    diff = tmp - frac;
10009a40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10009a42:	f003 fa05 	bl	1000ce50 <__wrap___aeabi_ui2d>
10009a46:	0002      	movs	r2, r0
10009a48:	000b      	movs	r3, r1
10009a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
10009a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
10009a4e:	f003 f97a 	bl	1000cd46 <__wrap___aeabi_dsub>
10009a52:	0002      	movs	r2, r0
10009a54:	000b      	movs	r3, r1
10009a56:	63ba      	str	r2, [r7, #56]	; 0x38
10009a58:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (diff > 0.5) {
10009a5a:	2200      	movs	r2, #0
10009a5c:	4b5f      	ldr	r3, [pc, #380]	; (10009bdc <_ftoa+0x37c>)
10009a5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10009a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10009a62:	f003 f9e1 	bl	1000ce28 <__wrap___aeabi_dcmpgt>
10009a66:	1e03      	subs	r3, r0, #0
10009a68:	d015      	beq.n	10009a96 <_ftoa+0x236>
        ++frac;
10009a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009a6c:	3301      	adds	r3, #1
10009a6e:	64bb      	str	r3, [r7, #72]	; 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
10009a70:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10009a72:	f003 f9ed 	bl	1000ce50 <__wrap___aeabi_ui2d>
10009a76:	4a58      	ldr	r2, [pc, #352]	; (10009bd8 <_ftoa+0x378>)
10009a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10009a7a:	00db      	lsls	r3, r3, #3
10009a7c:	18d3      	adds	r3, r2, r3
10009a7e:	681a      	ldr	r2, [r3, #0]
10009a80:	685b      	ldr	r3, [r3, #4]
10009a82:	f003 f9c9 	bl	1000ce18 <__wrap___aeabi_dcmpge>
10009a86:	1e03      	subs	r3, r0, #0
10009a88:	d017      	beq.n	10009aba <_ftoa+0x25a>
            frac = 0;
10009a8a:	2300      	movs	r3, #0
10009a8c:	64bb      	str	r3, [r7, #72]	; 0x48
            ++whole;
10009a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009a90:	3301      	adds	r3, #1
10009a92:	64fb      	str	r3, [r7, #76]	; 0x4c
10009a94:	e011      	b.n	10009aba <_ftoa+0x25a>
        }
    } else if (diff < 0.5) {
10009a96:	2200      	movs	r2, #0
10009a98:	4b50      	ldr	r3, [pc, #320]	; (10009bdc <_ftoa+0x37c>)
10009a9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10009a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10009a9e:	f003 f9b5 	bl	1000ce0c <__wrap___aeabi_dcmplt>
10009aa2:	1e03      	subs	r3, r0, #0
10009aa4:	d109      	bne.n	10009aba <_ftoa+0x25a>
    } else if ((frac == 0U) || (frac & 1U)) {
10009aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009aa8:	2b00      	cmp	r3, #0
10009aaa:	d003      	beq.n	10009ab4 <_ftoa+0x254>
10009aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009aae:	2201      	movs	r2, #1
10009ab0:	4013      	ands	r3, r2
10009ab2:	d002      	beq.n	10009aba <_ftoa+0x25a>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
10009ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009ab6:	3301      	adds	r3, #1
10009ab8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (prec == 0U) {
10009aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10009abc:	2b00      	cmp	r3, #0
10009abe:	d13b      	bne.n	10009b38 <_ftoa+0x2d8>
        diff = value - (double) whole;
10009ac0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
10009ac2:	f003 f9c9 	bl	1000ce58 <__wrap___aeabi_i2d>
10009ac6:	0002      	movs	r2, r0
10009ac8:	000b      	movs	r3, r1
10009aca:	6f38      	ldr	r0, [r7, #112]	; 0x70
10009acc:	6f79      	ldr	r1, [r7, #116]	; 0x74
10009ace:	f003 f93a 	bl	1000cd46 <__wrap___aeabi_dsub>
10009ad2:	0002      	movs	r2, r0
10009ad4:	000b      	movs	r3, r1
10009ad6:	63ba      	str	r2, [r7, #56]	; 0x38
10009ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10009ada:	2301      	movs	r3, #1
10009adc:	1c1c      	adds	r4, r3, #0
10009ade:	2200      	movs	r2, #0
10009ae0:	4b3e      	ldr	r3, [pc, #248]	; (10009bdc <_ftoa+0x37c>)
10009ae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10009ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10009ae6:	f003 f991 	bl	1000ce0c <__wrap___aeabi_dcmplt>
10009aea:	1e03      	subs	r3, r0, #0
10009aec:	d101      	bne.n	10009af2 <_ftoa+0x292>
10009aee:	2300      	movs	r3, #0
10009af0:	1c1c      	adds	r4, r3, #0
10009af2:	b2e3      	uxtb	r3, r4
10009af4:	2201      	movs	r2, #1
10009af6:	4053      	eors	r3, r2
10009af8:	b2db      	uxtb	r3, r3
10009afa:	2b00      	cmp	r3, #0
10009afc:	d100      	bne.n	10009b00 <_ftoa+0x2a0>
10009afe:	e088      	b.n	10009c12 <_ftoa+0x3b2>
10009b00:	2301      	movs	r3, #1
10009b02:	1c1c      	adds	r4, r3, #0
10009b04:	2200      	movs	r2, #0
10009b06:	4b35      	ldr	r3, [pc, #212]	; (10009bdc <_ftoa+0x37c>)
10009b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
10009b0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
10009b0c:	f003 f98c 	bl	1000ce28 <__wrap___aeabi_dcmpgt>
10009b10:	1e03      	subs	r3, r0, #0
10009b12:	d101      	bne.n	10009b18 <_ftoa+0x2b8>
10009b14:	2300      	movs	r3, #0
10009b16:	1c1c      	adds	r4, r3, #0
10009b18:	b2e3      	uxtb	r3, r4
10009b1a:	2201      	movs	r2, #1
10009b1c:	4053      	eors	r3, r2
10009b1e:	b2db      	uxtb	r3, r3
10009b20:	2b00      	cmp	r3, #0
10009b22:	d100      	bne.n	10009b26 <_ftoa+0x2c6>
10009b24:	e075      	b.n	10009c12 <_ftoa+0x3b2>
10009b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009b28:	2201      	movs	r2, #1
10009b2a:	4013      	ands	r3, r2
10009b2c:	d100      	bne.n	10009b30 <_ftoa+0x2d0>
10009b2e:	e070      	b.n	10009c12 <_ftoa+0x3b2>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
10009b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009b32:	3301      	adds	r3, #1
10009b34:	64fb      	str	r3, [r7, #76]	; 0x4c
10009b36:	e06c      	b.n	10009c12 <_ftoa+0x3b2>
        }
    } else {
        unsigned int count = prec;
10009b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
10009b3a:	647b      	str	r3, [r7, #68]	; 0x44
        // now do fractional part, as an unsigned number
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10009b3c:	e01b      	b.n	10009b76 <_ftoa+0x316>
            --count;
10009b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10009b40:	3b01      	subs	r3, #1
10009b42:	647b      	str	r3, [r7, #68]	; 0x44
            buf[len++] = (char) (48U + (frac % 10U));
10009b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009b46:	210a      	movs	r1, #10
10009b48:	0018      	movs	r0, r3
10009b4a:	f002 feb9 	bl	1000c8c0 <__wrap___aeabi_uidiv>
10009b4e:	000b      	movs	r3, r1
10009b50:	b2da      	uxtb	r2, r3
10009b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009b54:	1c59      	adds	r1, r3, #1
10009b56:	6579      	str	r1, [r7, #84]	; 0x54
10009b58:	3230      	adds	r2, #48	; 0x30
10009b5a:	b2d1      	uxtb	r1, r2
10009b5c:	2210      	movs	r2, #16
10009b5e:	18ba      	adds	r2, r7, r2
10009b60:	54d1      	strb	r1, [r2, r3]
            if (!(frac /= 10U)) {
10009b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009b64:	210a      	movs	r1, #10
10009b66:	0018      	movs	r0, r3
10009b68:	f002 feaa 	bl	1000c8c0 <__wrap___aeabi_uidiv>
10009b6c:	0003      	movs	r3, r0
10009b6e:	64bb      	str	r3, [r7, #72]	; 0x48
10009b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
10009b72:	2b00      	cmp	r3, #0
10009b74:	d003      	beq.n	10009b7e <_ftoa+0x31e>
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10009b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009b78:	2b1f      	cmp	r3, #31
10009b7a:	d9e0      	bls.n	10009b3e <_ftoa+0x2de>
10009b7c:	e008      	b.n	10009b90 <_ftoa+0x330>
                break;
10009b7e:	46c0      	nop			; (mov r8, r8)
            }
        }
        // add extra 0s
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10009b80:	e006      	b.n	10009b90 <_ftoa+0x330>
            buf[len++] = '0';
10009b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009b84:	1c5a      	adds	r2, r3, #1
10009b86:	657a      	str	r2, [r7, #84]	; 0x54
10009b88:	2210      	movs	r2, #16
10009b8a:	18ba      	adds	r2, r7, r2
10009b8c:	2130      	movs	r1, #48	; 0x30
10009b8e:	54d1      	strb	r1, [r2, r3]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10009b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009b92:	2b1f      	cmp	r3, #31
10009b94:	d804      	bhi.n	10009ba0 <_ftoa+0x340>
10009b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
10009b98:	1e5a      	subs	r2, r3, #1
10009b9a:	647a      	str	r2, [r7, #68]	; 0x44
10009b9c:	2b00      	cmp	r3, #0
10009b9e:	d1f0      	bne.n	10009b82 <_ftoa+0x322>
        }
        if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10009ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009ba2:	2b1f      	cmp	r3, #31
10009ba4:	d835      	bhi.n	10009c12 <_ftoa+0x3b2>
            // add decimal
            buf[len++] = '.';
10009ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009ba8:	1c5a      	adds	r2, r3, #1
10009baa:	657a      	str	r2, [r7, #84]	; 0x54
10009bac:	2210      	movs	r2, #16
10009bae:	18ba      	adds	r2, r7, r2
10009bb0:	212e      	movs	r1, #46	; 0x2e
10009bb2:	54d1      	strb	r1, [r2, r3]
        }
    }

    // do whole part, number is reversed
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10009bb4:	e02d      	b.n	10009c12 <_ftoa+0x3b2>
10009bb6:	46c0      	nop			; (mov r8, r8)
10009bb8:	1000e970 	.word	0x1000e970
10009bbc:	ffefffff 	.word	0xffefffff
10009bc0:	1000e974 	.word	0x1000e974
10009bc4:	7fefffff 	.word	0x7fefffff
10009bc8:	1000e97c 	.word	0x1000e97c
10009bcc:	1000e984 	.word	0x1000e984
10009bd0:	41cdcd65 	.word	0x41cdcd65
10009bd4:	c1cdcd65 	.word	0xc1cdcd65
10009bd8:	1000eb68 	.word	0x1000eb68
10009bdc:	3fe00000 	.word	0x3fe00000
        buf[len++] = (char) (48 + (whole % 10));
10009be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009be2:	210a      	movs	r1, #10
10009be4:	0018      	movs	r0, r3
10009be6:	f002 fe43 	bl	1000c870 <__wrap___aeabi_idiv>
10009bea:	000b      	movs	r3, r1
10009bec:	b2da      	uxtb	r2, r3
10009bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009bf0:	1c59      	adds	r1, r3, #1
10009bf2:	6579      	str	r1, [r7, #84]	; 0x54
10009bf4:	3230      	adds	r2, #48	; 0x30
10009bf6:	b2d1      	uxtb	r1, r2
10009bf8:	2210      	movs	r2, #16
10009bfa:	18ba      	adds	r2, r7, r2
10009bfc:	54d1      	strb	r1, [r2, r3]
        if (!(whole /= 10)) {
10009bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009c00:	210a      	movs	r1, #10
10009c02:	0018      	movs	r0, r3
10009c04:	f002 fe34 	bl	1000c870 <__wrap___aeabi_idiv>
10009c08:	0003      	movs	r3, r0
10009c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
10009c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009c0e:	2b00      	cmp	r3, #0
10009c10:	d003      	beq.n	10009c1a <_ftoa+0x3ba>
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10009c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009c14:	2b1f      	cmp	r3, #31
10009c16:	d9e3      	bls.n	10009be0 <_ftoa+0x380>
10009c18:	e000      	b.n	10009c1c <_ftoa+0x3bc>
            break;
10009c1a:	46c0      	nop			; (mov r8, r8)
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10009c1c:	2180      	movs	r1, #128	; 0x80
10009c1e:	187b      	adds	r3, r7, r1
10009c20:	681b      	ldr	r3, [r3, #0]
10009c22:	2202      	movs	r2, #2
10009c24:	4013      	ands	r3, r2
10009c26:	d123      	bne.n	10009c70 <_ftoa+0x410>
10009c28:	187b      	adds	r3, r7, r1
10009c2a:	681b      	ldr	r3, [r3, #0]
10009c2c:	2201      	movs	r2, #1
10009c2e:	4013      	ands	r3, r2
10009c30:	d01e      	beq.n	10009c70 <_ftoa+0x410>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10009c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10009c34:	2b00      	cmp	r3, #0
10009c36:	d014      	beq.n	10009c62 <_ftoa+0x402>
10009c38:	2353      	movs	r3, #83	; 0x53
10009c3a:	18fb      	adds	r3, r7, r3
10009c3c:	781b      	ldrb	r3, [r3, #0]
10009c3e:	2b00      	cmp	r3, #0
10009c40:	d104      	bne.n	10009c4c <_ftoa+0x3ec>
10009c42:	187b      	adds	r3, r7, r1
10009c44:	681b      	ldr	r3, [r3, #0]
10009c46:	220c      	movs	r2, #12
10009c48:	4013      	ands	r3, r2
10009c4a:	d00a      	beq.n	10009c62 <_ftoa+0x402>
            width--;
10009c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10009c4e:	3b01      	subs	r3, #1
10009c50:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10009c52:	e006      	b.n	10009c62 <_ftoa+0x402>
            buf[len++] = '0';
10009c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009c56:	1c5a      	adds	r2, r3, #1
10009c58:	657a      	str	r2, [r7, #84]	; 0x54
10009c5a:	2210      	movs	r2, #16
10009c5c:	18ba      	adds	r2, r7, r2
10009c5e:	2130      	movs	r1, #48	; 0x30
10009c60:	54d1      	strb	r1, [r2, r3]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10009c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
10009c64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10009c66:	429a      	cmp	r2, r3
10009c68:	d202      	bcs.n	10009c70 <_ftoa+0x410>
10009c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009c6c:	2b1f      	cmp	r3, #31
10009c6e:	d9f1      	bls.n	10009c54 <_ftoa+0x3f4>
        }
    }

    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10009c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009c72:	2b1f      	cmp	r3, #31
10009c74:	d827      	bhi.n	10009cc6 <_ftoa+0x466>
        if (negative) {
10009c76:	2353      	movs	r3, #83	; 0x53
10009c78:	18fb      	adds	r3, r7, r3
10009c7a:	781b      	ldrb	r3, [r3, #0]
10009c7c:	2b00      	cmp	r3, #0
10009c7e:	d007      	beq.n	10009c90 <_ftoa+0x430>
            buf[len++] = '-';
10009c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009c82:	1c5a      	adds	r2, r3, #1
10009c84:	657a      	str	r2, [r7, #84]	; 0x54
10009c86:	2210      	movs	r2, #16
10009c88:	18ba      	adds	r2, r7, r2
10009c8a:	212d      	movs	r1, #45	; 0x2d
10009c8c:	54d1      	strb	r1, [r2, r3]
10009c8e:	e01a      	b.n	10009cc6 <_ftoa+0x466>
        } else if (flags & FLAGS_PLUS) {
10009c90:	2380      	movs	r3, #128	; 0x80
10009c92:	18fb      	adds	r3, r7, r3
10009c94:	681b      	ldr	r3, [r3, #0]
10009c96:	2204      	movs	r2, #4
10009c98:	4013      	ands	r3, r2
10009c9a:	d007      	beq.n	10009cac <_ftoa+0x44c>
            buf[len++] = '+';  // ignore the space if the '+' exists
10009c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009c9e:	1c5a      	adds	r2, r3, #1
10009ca0:	657a      	str	r2, [r7, #84]	; 0x54
10009ca2:	2210      	movs	r2, #16
10009ca4:	18ba      	adds	r2, r7, r2
10009ca6:	212b      	movs	r1, #43	; 0x2b
10009ca8:	54d1      	strb	r1, [r2, r3]
10009caa:	e00c      	b.n	10009cc6 <_ftoa+0x466>
        } else if (flags & FLAGS_SPACE) {
10009cac:	2380      	movs	r3, #128	; 0x80
10009cae:	18fb      	adds	r3, r7, r3
10009cb0:	681b      	ldr	r3, [r3, #0]
10009cb2:	2208      	movs	r2, #8
10009cb4:	4013      	ands	r3, r2
10009cb6:	d006      	beq.n	10009cc6 <_ftoa+0x466>
            buf[len++] = ' ';
10009cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009cba:	1c5a      	adds	r2, r3, #1
10009cbc:	657a      	str	r2, [r7, #84]	; 0x54
10009cbe:	2210      	movs	r2, #16
10009cc0:	18ba      	adds	r2, r7, r2
10009cc2:	2120      	movs	r1, #32
10009cc4:	54d1      	strb	r1, [r2, r3]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10009cc6:	683c      	ldr	r4, [r7, #0]
10009cc8:	687a      	ldr	r2, [r7, #4]
10009cca:	68b9      	ldr	r1, [r7, #8]
10009ccc:	68f8      	ldr	r0, [r7, #12]
10009cce:	2380      	movs	r3, #128	; 0x80
10009cd0:	18fb      	adds	r3, r7, r3
10009cd2:	681b      	ldr	r3, [r3, #0]
10009cd4:	9303      	str	r3, [sp, #12]
10009cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10009cd8:	9302      	str	r3, [sp, #8]
10009cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
10009cdc:	9301      	str	r3, [sp, #4]
10009cde:	2310      	movs	r3, #16
10009ce0:	18fb      	adds	r3, r7, r3
10009ce2:	9300      	str	r3, [sp, #0]
10009ce4:	0023      	movs	r3, r4
10009ce6:	f7ff fbbb 	bl	10009460 <_out_rev>
10009cea:	0003      	movs	r3, r0
}
10009cec:	0018      	movs	r0, r3
10009cee:	46bd      	mov	sp, r7
10009cf0:	b017      	add	sp, #92	; 0x5c
10009cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009cf4 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10009cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009cf6:	b0a7      	sub	sp, #156	; 0x9c
10009cf8:	af06      	add	r7, sp, #24
10009cfa:	6478      	str	r0, [r7, #68]	; 0x44
10009cfc:	6439      	str	r1, [r7, #64]	; 0x40
10009cfe:	63fa      	str	r2, [r7, #60]	; 0x3c
10009d00:	63bb      	str	r3, [r7, #56]	; 0x38
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
10009d02:	2698      	movs	r6, #152	; 0x98
10009d04:	19bb      	adds	r3, r7, r6
10009d06:	681a      	ldr	r2, [r3, #0]
10009d08:	685b      	ldr	r3, [r3, #4]
10009d0a:	19b9      	adds	r1, r7, r6
10009d0c:	6808      	ldr	r0, [r1, #0]
10009d0e:	6849      	ldr	r1, [r1, #4]
10009d10:	f003 f88f 	bl	1000ce32 <__wrap___aeabi_dcmpun>
10009d14:	1e03      	subs	r3, r0, #0
10009d16:	d113      	bne.n	10009d40 <_etoa+0x4c>
10009d18:	2201      	movs	r2, #1
10009d1a:	4252      	negs	r2, r2
10009d1c:	4bd9      	ldr	r3, [pc, #868]	; (1000a084 <_etoa+0x390>)
10009d1e:	19b9      	adds	r1, r7, r6
10009d20:	6808      	ldr	r0, [r1, #0]
10009d22:	6849      	ldr	r1, [r1, #4]
10009d24:	f003 f880 	bl	1000ce28 <__wrap___aeabi_dcmpgt>
10009d28:	1e03      	subs	r3, r0, #0
10009d2a:	d109      	bne.n	10009d40 <_etoa+0x4c>
10009d2c:	2201      	movs	r2, #1
10009d2e:	4252      	negs	r2, r2
10009d30:	4bd5      	ldr	r3, [pc, #852]	; (1000a088 <_etoa+0x394>)
10009d32:	19b9      	adds	r1, r7, r6
10009d34:	6808      	ldr	r0, [r1, #0]
10009d36:	6849      	ldr	r1, [r1, #4]
10009d38:	f003 f868 	bl	1000ce0c <__wrap___aeabi_dcmplt>
10009d3c:	1e03      	subs	r3, r0, #0
10009d3e:	d01b      	beq.n	10009d78 <_etoa+0x84>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
10009d40:	6bbd      	ldr	r5, [r7, #56]	; 0x38
10009d42:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
10009d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
10009d46:	6c78      	ldr	r0, [r7, #68]	; 0x44
10009d48:	23a8      	movs	r3, #168	; 0xa8
10009d4a:	18fb      	adds	r3, r7, r3
10009d4c:	681b      	ldr	r3, [r3, #0]
10009d4e:	9304      	str	r3, [sp, #16]
10009d50:	23a4      	movs	r3, #164	; 0xa4
10009d52:	18fb      	adds	r3, r7, r3
10009d54:	681b      	ldr	r3, [r3, #0]
10009d56:	9303      	str	r3, [sp, #12]
10009d58:	23a0      	movs	r3, #160	; 0xa0
10009d5a:	18fb      	adds	r3, r7, r3
10009d5c:	681b      	ldr	r3, [r3, #0]
10009d5e:	9302      	str	r3, [sp, #8]
10009d60:	2398      	movs	r3, #152	; 0x98
10009d62:	18fb      	adds	r3, r7, r3
10009d64:	681a      	ldr	r2, [r3, #0]
10009d66:	685b      	ldr	r3, [r3, #4]
10009d68:	9200      	str	r2, [sp, #0]
10009d6a:	9301      	str	r3, [sp, #4]
10009d6c:	002b      	movs	r3, r5
10009d6e:	0022      	movs	r2, r4
10009d70:	f7ff fd76 	bl	10009860 <_ftoa>
10009d74:	0003      	movs	r3, r0
10009d76:	e281      	b.n	1000a27c <_etoa+0x588>
    }

    // determine the sign
    const bool negative = value < 0;
10009d78:	233b      	movs	r3, #59	; 0x3b
10009d7a:	2238      	movs	r2, #56	; 0x38
10009d7c:	189b      	adds	r3, r3, r2
10009d7e:	19de      	adds	r6, r3, r7
10009d80:	2301      	movs	r3, #1
10009d82:	73fb      	strb	r3, [r7, #15]
10009d84:	2200      	movs	r2, #0
10009d86:	2300      	movs	r3, #0
10009d88:	2198      	movs	r1, #152	; 0x98
10009d8a:	1879      	adds	r1, r7, r1
10009d8c:	6808      	ldr	r0, [r1, #0]
10009d8e:	6849      	ldr	r1, [r1, #4]
10009d90:	f003 f83c 	bl	1000ce0c <__wrap___aeabi_dcmplt>
10009d94:	1e03      	subs	r3, r0, #0
10009d96:	d101      	bne.n	10009d9c <_etoa+0xa8>
10009d98:	2300      	movs	r3, #0
10009d9a:	73fb      	strb	r3, [r7, #15]
10009d9c:	7bfb      	ldrb	r3, [r7, #15]
10009d9e:	7033      	strb	r3, [r6, #0]
    if (negative) {
10009da0:	233b      	movs	r3, #59	; 0x3b
10009da2:	2238      	movs	r2, #56	; 0x38
10009da4:	189b      	adds	r3, r3, r2
10009da6:	19db      	adds	r3, r3, r7
10009da8:	781b      	ldrb	r3, [r3, #0]
10009daa:	2b00      	cmp	r3, #0
10009dac:	d00f      	beq.n	10009dce <_etoa+0xda>
        value = -value;
10009dae:	2198      	movs	r1, #152	; 0x98
10009db0:	187b      	adds	r3, r7, r1
10009db2:	681b      	ldr	r3, [r3, #0]
10009db4:	603b      	str	r3, [r7, #0]
10009db6:	239c      	movs	r3, #156	; 0x9c
10009db8:	18fb      	adds	r3, r7, r3
10009dba:	681a      	ldr	r2, [r3, #0]
10009dbc:	2380      	movs	r3, #128	; 0x80
10009dbe:	061b      	lsls	r3, r3, #24
10009dc0:	4053      	eors	r3, r2
10009dc2:	607b      	str	r3, [r7, #4]
10009dc4:	683a      	ldr	r2, [r7, #0]
10009dc6:	687b      	ldr	r3, [r7, #4]
10009dc8:	1879      	adds	r1, r7, r1
10009dca:	600a      	str	r2, [r1, #0]
10009dcc:	604b      	str	r3, [r1, #4]
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
10009dce:	23a8      	movs	r3, #168	; 0xa8
10009dd0:	18fb      	adds	r3, r7, r3
10009dd2:	681a      	ldr	r2, [r3, #0]
10009dd4:	2380      	movs	r3, #128	; 0x80
10009dd6:	00db      	lsls	r3, r3, #3
10009dd8:	4013      	ands	r3, r2
10009dda:	d103      	bne.n	10009de4 <_etoa+0xf0>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10009ddc:	2306      	movs	r3, #6
10009dde:	22a0      	movs	r2, #160	; 0xa0
10009de0:	18ba      	adds	r2, r7, r2
10009de2:	6013      	str	r3, [r2, #0]
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
10009de4:	2698      	movs	r6, #152	; 0x98
10009de6:	19bb      	adds	r3, r7, r6
10009de8:	681a      	ldr	r2, [r3, #0]
10009dea:	685b      	ldr	r3, [r3, #4]
10009dec:	64ba      	str	r2, [r7, #72]	; 0x48
10009dee:	64fb      	str	r3, [r7, #76]	; 0x4c
    int expval;
    if (conv.U) {
10009df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
10009df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009df4:	0011      	movs	r1, r2
10009df6:	4319      	orrs	r1, r3
10009df8:	d100      	bne.n	10009dfc <_etoa+0x108>
10009dfa:	e108      	b.n	1000a00e <_etoa+0x31a>
        int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
10009dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
10009dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009e00:	0d1b      	lsrs	r3, r3, #20
10009e02:	62bb      	str	r3, [r7, #40]	; 0x28
10009e04:	2300      	movs	r3, #0
10009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
10009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
10009e0a:	055b      	lsls	r3, r3, #21
10009e0c:	0d5b      	lsrs	r3, r3, #21
10009e0e:	4a9f      	ldr	r2, [pc, #636]	; (1000a08c <_etoa+0x398>)
10009e10:	4694      	mov	ip, r2
10009e12:	4463      	add	r3, ip
10009e14:	66fb      	str	r3, [r7, #108]	; 0x6c
        conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10009e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
10009e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009e1a:	2100      	movs	r1, #0
10009e1c:	0010      	movs	r0, r2
10009e1e:	4388      	bics	r0, r1
10009e20:	0004      	movs	r4, r0
10009e22:	031b      	lsls	r3, r3, #12
10009e24:	0b1d      	lsrs	r5, r3, #12
10009e26:	2300      	movs	r3, #0
10009e28:	4323      	orrs	r3, r4
10009e2a:	623b      	str	r3, [r7, #32]
10009e2c:	4b98      	ldr	r3, [pc, #608]	; (1000a090 <_etoa+0x39c>)
10009e2e:	432b      	orrs	r3, r5
10009e30:	627b      	str	r3, [r7, #36]	; 0x24
10009e32:	6a3b      	ldr	r3, [r7, #32]
10009e34:	6a7c      	ldr	r4, [r7, #36]	; 0x24
10009e36:	64bb      	str	r3, [r7, #72]	; 0x48
10009e38:	64fc      	str	r4, [r7, #76]	; 0x4c
        // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
        expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
10009e3a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
10009e3c:	f003 f80c 	bl	1000ce58 <__wrap___aeabi_i2d>
10009e40:	4a94      	ldr	r2, [pc, #592]	; (1000a094 <_etoa+0x3a0>)
10009e42:	4b95      	ldr	r3, [pc, #596]	; (1000a098 <_etoa+0x3a4>)
10009e44:	f002 ffa3 	bl	1000cd8e <__wrap___aeabi_dmul>
10009e48:	0002      	movs	r2, r0
10009e4a:	000b      	movs	r3, r1
10009e4c:	0010      	movs	r0, r2
10009e4e:	0019      	movs	r1, r3
10009e50:	4a92      	ldr	r2, [pc, #584]	; (1000a09c <_etoa+0x3a8>)
10009e52:	4b93      	ldr	r3, [pc, #588]	; (1000a0a0 <_etoa+0x3ac>)
10009e54:	f002 ff7c 	bl	1000cd50 <__wrap___aeabi_dadd>
10009e58:	0002      	movs	r2, r0
10009e5a:	000b      	movs	r3, r1
10009e5c:	0014      	movs	r4, r2
10009e5e:	001d      	movs	r5, r3
10009e60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10009e62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10009e64:	2200      	movs	r2, #0
10009e66:	4b8f      	ldr	r3, [pc, #572]	; (1000a0a4 <_etoa+0x3b0>)
10009e68:	f002 ff6d 	bl	1000cd46 <__wrap___aeabi_dsub>
10009e6c:	0002      	movs	r2, r0
10009e6e:	000b      	movs	r3, r1
10009e70:	0010      	movs	r0, r2
10009e72:	0019      	movs	r1, r3
10009e74:	4a8c      	ldr	r2, [pc, #560]	; (1000a0a8 <_etoa+0x3b4>)
10009e76:	4b8d      	ldr	r3, [pc, #564]	; (1000a0ac <_etoa+0x3b8>)
10009e78:	f002 ff89 	bl	1000cd8e <__wrap___aeabi_dmul>
10009e7c:	0002      	movs	r2, r0
10009e7e:	000b      	movs	r3, r1
10009e80:	0020      	movs	r0, r4
10009e82:	0029      	movs	r1, r5
10009e84:	f002 ff64 	bl	1000cd50 <__wrap___aeabi_dadd>
10009e88:	0002      	movs	r2, r0
10009e8a:	000b      	movs	r3, r1
10009e8c:	0010      	movs	r0, r2
10009e8e:	0019      	movs	r1, r3
10009e90:	f002 fffa 	bl	1000ce88 <__wrap___aeabi_d2iz>
10009e94:	0003      	movs	r3, r0
10009e96:	67fb      	str	r3, [r7, #124]	; 0x7c
        // now we want to compute 10^expval but we want to be sure it won't overflow
        exp2 = (int) (expval * 3.321928094887362 + 0.5);
10009e98:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
10009e9a:	f002 ffdd 	bl	1000ce58 <__wrap___aeabi_i2d>
10009e9e:	4a84      	ldr	r2, [pc, #528]	; (1000a0b0 <_etoa+0x3bc>)
10009ea0:	4b84      	ldr	r3, [pc, #528]	; (1000a0b4 <_etoa+0x3c0>)
10009ea2:	f002 ff74 	bl	1000cd8e <__wrap___aeabi_dmul>
10009ea6:	0002      	movs	r2, r0
10009ea8:	000b      	movs	r3, r1
10009eaa:	0010      	movs	r0, r2
10009eac:	0019      	movs	r1, r3
10009eae:	2200      	movs	r2, #0
10009eb0:	4b81      	ldr	r3, [pc, #516]	; (1000a0b8 <_etoa+0x3c4>)
10009eb2:	f002 ff4d 	bl	1000cd50 <__wrap___aeabi_dadd>
10009eb6:	0002      	movs	r2, r0
10009eb8:	000b      	movs	r3, r1
10009eba:	0010      	movs	r0, r2
10009ebc:	0019      	movs	r1, r3
10009ebe:	f002 ffe3 	bl	1000ce88 <__wrap___aeabi_d2iz>
10009ec2:	0003      	movs	r3, r0
10009ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
        const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
10009ec6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
10009ec8:	f002 ffc6 	bl	1000ce58 <__wrap___aeabi_i2d>
10009ecc:	4a7b      	ldr	r2, [pc, #492]	; (1000a0bc <_etoa+0x3c8>)
10009ece:	4b7c      	ldr	r3, [pc, #496]	; (1000a0c0 <_etoa+0x3cc>)
10009ed0:	f002 ff5d 	bl	1000cd8e <__wrap___aeabi_dmul>
10009ed4:	0002      	movs	r2, r0
10009ed6:	000b      	movs	r3, r1
10009ed8:	0014      	movs	r4, r2
10009eda:	001d      	movs	r5, r3
10009edc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
10009ede:	f002 ffbb 	bl	1000ce58 <__wrap___aeabi_i2d>
10009ee2:	4a78      	ldr	r2, [pc, #480]	; (1000a0c4 <_etoa+0x3d0>)
10009ee4:	4b78      	ldr	r3, [pc, #480]	; (1000a0c8 <_etoa+0x3d4>)
10009ee6:	f002 ff52 	bl	1000cd8e <__wrap___aeabi_dmul>
10009eea:	0002      	movs	r2, r0
10009eec:	000b      	movs	r3, r1
10009eee:	0020      	movs	r0, r4
10009ef0:	0029      	movs	r1, r5
10009ef2:	f002 ff28 	bl	1000cd46 <__wrap___aeabi_dsub>
10009ef6:	0002      	movs	r2, r0
10009ef8:	000b      	movs	r3, r1
10009efa:	663a      	str	r2, [r7, #96]	; 0x60
10009efc:	667b      	str	r3, [r7, #100]	; 0x64
        const double z2 = z * z;
10009efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10009f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10009f02:	6e38      	ldr	r0, [r7, #96]	; 0x60
10009f04:	6e79      	ldr	r1, [r7, #100]	; 0x64
10009f06:	f002 ff42 	bl	1000cd8e <__wrap___aeabi_dmul>
10009f0a:	0002      	movs	r2, r0
10009f0c:	000b      	movs	r3, r1
10009f0e:	65ba      	str	r2, [r7, #88]	; 0x58
10009f10:	65fb      	str	r3, [r7, #92]	; 0x5c
        conv.U = (uint64_t) (exp2 + 1023) << 52U;
10009f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
10009f14:	4a6d      	ldr	r2, [pc, #436]	; (1000a0cc <_etoa+0x3d8>)
10009f16:	4694      	mov	ip, r2
10009f18:	4463      	add	r3, ip
10009f1a:	61bb      	str	r3, [r7, #24]
10009f1c:	17db      	asrs	r3, r3, #31
10009f1e:	61fb      	str	r3, [r7, #28]
10009f20:	69bb      	ldr	r3, [r7, #24]
10009f22:	051b      	lsls	r3, r3, #20
10009f24:	617b      	str	r3, [r7, #20]
10009f26:	2300      	movs	r3, #0
10009f28:	613b      	str	r3, [r7, #16]
10009f2a:	693b      	ldr	r3, [r7, #16]
10009f2c:	697c      	ldr	r4, [r7, #20]
10009f2e:	64bb      	str	r3, [r7, #72]	; 0x48
10009f30:	64fc      	str	r4, [r7, #76]	; 0x4c
        // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
        conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10009f32:	6cbc      	ldr	r4, [r7, #72]	; 0x48
10009f34:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
10009f36:	6e38      	ldr	r0, [r7, #96]	; 0x60
10009f38:	6e79      	ldr	r1, [r7, #100]	; 0x64
10009f3a:	0002      	movs	r2, r0
10009f3c:	000b      	movs	r3, r1
10009f3e:	f002 ff07 	bl	1000cd50 <__wrap___aeabi_dadd>
10009f42:	0002      	movs	r2, r0
10009f44:	000b      	movs	r3, r1
10009f46:	62ba      	str	r2, [r7, #40]	; 0x28
10009f48:	62fb      	str	r3, [r7, #44]	; 0x2c
10009f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
10009f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
10009f4e:	2000      	movs	r0, #0
10009f50:	2180      	movs	r1, #128	; 0x80
10009f52:	05c9      	lsls	r1, r1, #23
10009f54:	f002 fef7 	bl	1000cd46 <__wrap___aeabi_dsub>
10009f58:	0002      	movs	r2, r0
10009f5a:	000b      	movs	r3, r1
10009f5c:	623a      	str	r2, [r7, #32]
10009f5e:	627b      	str	r3, [r7, #36]	; 0x24
10009f60:	2200      	movs	r2, #0
10009f62:	4b5b      	ldr	r3, [pc, #364]	; (1000a0d0 <_etoa+0x3dc>)
10009f64:	6db8      	ldr	r0, [r7, #88]	; 0x58
10009f66:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10009f68:	f002 fef7 	bl	1000cd5a <__wrap___aeabi_ddiv>
10009f6c:	0002      	movs	r2, r0
10009f6e:	000b      	movs	r3, r1
10009f70:	0010      	movs	r0, r2
10009f72:	0019      	movs	r1, r3
10009f74:	2200      	movs	r2, #0
10009f76:	4b57      	ldr	r3, [pc, #348]	; (1000a0d4 <_etoa+0x3e0>)
10009f78:	f002 feea 	bl	1000cd50 <__wrap___aeabi_dadd>
10009f7c:	0002      	movs	r2, r0
10009f7e:	000b      	movs	r3, r1
10009f80:	6db8      	ldr	r0, [r7, #88]	; 0x58
10009f82:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10009f84:	f002 fee9 	bl	1000cd5a <__wrap___aeabi_ddiv>
10009f88:	0002      	movs	r2, r0
10009f8a:	000b      	movs	r3, r1
10009f8c:	0010      	movs	r0, r2
10009f8e:	0019      	movs	r1, r3
10009f90:	2200      	movs	r2, #0
10009f92:	4b51      	ldr	r3, [pc, #324]	; (1000a0d8 <_etoa+0x3e4>)
10009f94:	f002 fedc 	bl	1000cd50 <__wrap___aeabi_dadd>
10009f98:	0002      	movs	r2, r0
10009f9a:	000b      	movs	r3, r1
10009f9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
10009f9e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
10009fa0:	f002 fedb 	bl	1000cd5a <__wrap___aeabi_ddiv>
10009fa4:	0002      	movs	r2, r0
10009fa6:	000b      	movs	r3, r1
10009fa8:	6a38      	ldr	r0, [r7, #32]
10009faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
10009fac:	f002 fed0 	bl	1000cd50 <__wrap___aeabi_dadd>
10009fb0:	0002      	movs	r2, r0
10009fb2:	000b      	movs	r3, r1
10009fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10009fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10009fb8:	f002 fecf 	bl	1000cd5a <__wrap___aeabi_ddiv>
10009fbc:	0002      	movs	r2, r0
10009fbe:	000b      	movs	r3, r1
10009fc0:	0010      	movs	r0, r2
10009fc2:	0019      	movs	r1, r3
10009fc4:	2200      	movs	r2, #0
10009fc6:	4b32      	ldr	r3, [pc, #200]	; (1000a090 <_etoa+0x39c>)
10009fc8:	f002 fec2 	bl	1000cd50 <__wrap___aeabi_dadd>
10009fcc:	0002      	movs	r2, r0
10009fce:	000b      	movs	r3, r1
10009fd0:	0020      	movs	r0, r4
10009fd2:	0029      	movs	r1, r5
10009fd4:	f002 fedb 	bl	1000cd8e <__wrap___aeabi_dmul>
10009fd8:	0002      	movs	r2, r0
10009fda:	000b      	movs	r3, r1
10009fdc:	64ba      	str	r2, [r7, #72]	; 0x48
10009fde:	64fb      	str	r3, [r7, #76]	; 0x4c
        // correct for rounding errors
        if (value < conv.F) {
10009fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
10009fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
10009fe4:	19b9      	adds	r1, r7, r6
10009fe6:	6808      	ldr	r0, [r1, #0]
10009fe8:	6849      	ldr	r1, [r1, #4]
10009fea:	f002 ff0f 	bl	1000ce0c <__wrap___aeabi_dcmplt>
10009fee:	1e03      	subs	r3, r0, #0
10009ff0:	d00f      	beq.n	1000a012 <_etoa+0x31e>
            expval--;
10009ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
10009ff4:	3b01      	subs	r3, #1
10009ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
            conv.F /= 10;
10009ff8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
10009ffa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
10009ffc:	2200      	movs	r2, #0
10009ffe:	4b35      	ldr	r3, [pc, #212]	; (1000a0d4 <_etoa+0x3e0>)
1000a000:	f002 feab 	bl	1000cd5a <__wrap___aeabi_ddiv>
1000a004:	0002      	movs	r2, r0
1000a006:	000b      	movs	r3, r1
1000a008:	64ba      	str	r2, [r7, #72]	; 0x48
1000a00a:	64fb      	str	r3, [r7, #76]	; 0x4c
1000a00c:	e001      	b.n	1000a012 <_etoa+0x31e>
        }
    } else {
        expval = 0;
1000a00e:	2300      	movs	r3, #0
1000a010:	67fb      	str	r3, [r7, #124]	; 0x7c
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
1000a012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000a014:	2b63      	cmp	r3, #99	; 0x63
1000a016:	dc04      	bgt.n	1000a022 <_etoa+0x32e>
1000a018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000a01a:	3363      	adds	r3, #99	; 0x63
1000a01c:	db01      	blt.n	1000a022 <_etoa+0x32e>
1000a01e:	2304      	movs	r3, #4
1000a020:	e000      	b.n	1000a024 <_etoa+0x330>
1000a022:	2305      	movs	r3, #5
1000a024:	67bb      	str	r3, [r7, #120]	; 0x78

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
1000a026:	23a8      	movs	r3, #168	; 0xa8
1000a028:	18fb      	adds	r3, r7, r3
1000a02a:	681a      	ldr	r2, [r3, #0]
1000a02c:	2380      	movs	r3, #128	; 0x80
1000a02e:	011b      	lsls	r3, r3, #4
1000a030:	4013      	ands	r3, r2
1000a032:	d100      	bne.n	1000a036 <_etoa+0x342>
1000a034:	e07a      	b.n	1000a12c <_etoa+0x438>
        // do we want to fall-back to "%f" mode?
        if ((conv.U == 0) || ((value >= 1e-4) && (value < 1e6))) {
1000a036:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000a038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000a03a:	0011      	movs	r1, r2
1000a03c:	4319      	orrs	r1, r3
1000a03e:	d012      	beq.n	1000a066 <_etoa+0x372>
1000a040:	4a26      	ldr	r2, [pc, #152]	; (1000a0dc <_etoa+0x3e8>)
1000a042:	4b27      	ldr	r3, [pc, #156]	; (1000a0e0 <_etoa+0x3ec>)
1000a044:	2498      	movs	r4, #152	; 0x98
1000a046:	1939      	adds	r1, r7, r4
1000a048:	6808      	ldr	r0, [r1, #0]
1000a04a:	6849      	ldr	r1, [r1, #4]
1000a04c:	f002 fee4 	bl	1000ce18 <__wrap___aeabi_dcmpge>
1000a050:	1e03      	subs	r3, r0, #0
1000a052:	d05a      	beq.n	1000a10a <_etoa+0x416>
1000a054:	2200      	movs	r2, #0
1000a056:	4b23      	ldr	r3, [pc, #140]	; (1000a0e4 <_etoa+0x3f0>)
1000a058:	1939      	adds	r1, r7, r4
1000a05a:	6808      	ldr	r0, [r1, #0]
1000a05c:	6849      	ldr	r1, [r1, #4]
1000a05e:	f002 fed5 	bl	1000ce0c <__wrap___aeabi_dcmplt>
1000a062:	1e03      	subs	r3, r0, #0
1000a064:	d051      	beq.n	1000a10a <_etoa+0x416>
            if ((int) prec > expval) {
1000a066:	21a0      	movs	r1, #160	; 0xa0
1000a068:	187b      	adds	r3, r7, r1
1000a06a:	681b      	ldr	r3, [r3, #0]
1000a06c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
1000a06e:	429a      	cmp	r2, r3
1000a070:	da3a      	bge.n	1000a0e8 <_etoa+0x3f4>
                prec = (unsigned) ((int) prec - expval - 1);
1000a072:	187b      	adds	r3, r7, r1
1000a074:	681a      	ldr	r2, [r3, #0]
1000a076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000a078:	1ad3      	subs	r3, r2, r3
1000a07a:	3b01      	subs	r3, #1
1000a07c:	187a      	adds	r2, r7, r1
1000a07e:	6013      	str	r3, [r2, #0]
1000a080:	e036      	b.n	1000a0f0 <_etoa+0x3fc>
1000a082:	46c0      	nop			; (mov r8, r8)
1000a084:	7fefffff 	.word	0x7fefffff
1000a088:	ffefffff 	.word	0xffefffff
1000a08c:	fffffc01 	.word	0xfffffc01
1000a090:	3ff00000 	.word	0x3ff00000
1000a094:	509f79fb 	.word	0x509f79fb
1000a098:	3fd34413 	.word	0x3fd34413
1000a09c:	8b60c8b3 	.word	0x8b60c8b3
1000a0a0:	3fc68a28 	.word	0x3fc68a28
1000a0a4:	3ff80000 	.word	0x3ff80000
1000a0a8:	636f4361 	.word	0x636f4361
1000a0ac:	3fd287a7 	.word	0x3fd287a7
1000a0b0:	0979a371 	.word	0x0979a371
1000a0b4:	400a934f 	.word	0x400a934f
1000a0b8:	3fe00000 	.word	0x3fe00000
1000a0bc:	bbb55516 	.word	0xbbb55516
1000a0c0:	40026bb1 	.word	0x40026bb1
1000a0c4:	fefa39ef 	.word	0xfefa39ef
1000a0c8:	3fe62e42 	.word	0x3fe62e42
1000a0cc:	000003ff 	.word	0x000003ff
1000a0d0:	402c0000 	.word	0x402c0000
1000a0d4:	40240000 	.word	0x40240000
1000a0d8:	40180000 	.word	0x40180000
1000a0dc:	eb1c432d 	.word	0xeb1c432d
1000a0e0:	3f1a36e2 	.word	0x3f1a36e2
1000a0e4:	412e8480 	.word	0x412e8480
            } else {
                prec = 0;
1000a0e8:	2300      	movs	r3, #0
1000a0ea:	22a0      	movs	r2, #160	; 0xa0
1000a0ec:	18ba      	adds	r2, r7, r2
1000a0ee:	6013      	str	r3, [r2, #0]
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
1000a0f0:	21a8      	movs	r1, #168	; 0xa8
1000a0f2:	187b      	adds	r3, r7, r1
1000a0f4:	681b      	ldr	r3, [r3, #0]
1000a0f6:	2280      	movs	r2, #128	; 0x80
1000a0f8:	00d2      	lsls	r2, r2, #3
1000a0fa:	4313      	orrs	r3, r2
1000a0fc:	187a      	adds	r2, r7, r1
1000a0fe:	6013      	str	r3, [r2, #0]
            // no characters in exponent
            minwidth = 0U;
1000a100:	2300      	movs	r3, #0
1000a102:	67bb      	str	r3, [r7, #120]	; 0x78
            expval = 0;
1000a104:	2300      	movs	r3, #0
1000a106:	67fb      	str	r3, [r7, #124]	; 0x7c
1000a108:	e010      	b.n	1000a12c <_etoa+0x438>
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
1000a10a:	21a0      	movs	r1, #160	; 0xa0
1000a10c:	187b      	adds	r3, r7, r1
1000a10e:	681b      	ldr	r3, [r3, #0]
1000a110:	2b00      	cmp	r3, #0
1000a112:	d00b      	beq.n	1000a12c <_etoa+0x438>
1000a114:	23a8      	movs	r3, #168	; 0xa8
1000a116:	18fb      	adds	r3, r7, r3
1000a118:	681a      	ldr	r2, [r3, #0]
1000a11a:	2380      	movs	r3, #128	; 0x80
1000a11c:	00db      	lsls	r3, r3, #3
1000a11e:	4013      	ands	r3, r2
1000a120:	d004      	beq.n	1000a12c <_etoa+0x438>
                --prec;
1000a122:	187b      	adds	r3, r7, r1
1000a124:	681b      	ldr	r3, [r3, #0]
1000a126:	3b01      	subs	r3, #1
1000a128:	187a      	adds	r2, r7, r1
1000a12a:	6013      	str	r3, [r2, #0]
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
1000a12c:	22a4      	movs	r2, #164	; 0xa4
1000a12e:	18bb      	adds	r3, r7, r2
1000a130:	681b      	ldr	r3, [r3, #0]
1000a132:	677b      	str	r3, [r7, #116]	; 0x74
    if (width > minwidth) {
1000a134:	18bb      	adds	r3, r7, r2
1000a136:	681a      	ldr	r2, [r3, #0]
1000a138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000a13a:	429a      	cmp	r2, r3
1000a13c:	d904      	bls.n	1000a148 <_etoa+0x454>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
1000a13e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
1000a140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000a142:	1ad3      	subs	r3, r2, r3
1000a144:	677b      	str	r3, [r7, #116]	; 0x74
1000a146:	e001      	b.n	1000a14c <_etoa+0x458>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
1000a148:	2300      	movs	r3, #0
1000a14a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
1000a14c:	23a8      	movs	r3, #168	; 0xa8
1000a14e:	18fb      	adds	r3, r7, r3
1000a150:	681b      	ldr	r3, [r3, #0]
1000a152:	2202      	movs	r2, #2
1000a154:	4013      	ands	r3, r2
1000a156:	d004      	beq.n	1000a162 <_etoa+0x46e>
1000a158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000a15a:	2b00      	cmp	r3, #0
1000a15c:	d001      	beq.n	1000a162 <_etoa+0x46e>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
1000a15e:	2300      	movs	r3, #0
1000a160:	677b      	str	r3, [r7, #116]	; 0x74
    }

    // rescale the float value
    if (expval) {
1000a162:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000a164:	2b00      	cmp	r3, #0
1000a166:	d00c      	beq.n	1000a182 <_etoa+0x48e>
        value /= conv.F;
1000a168:	6cba      	ldr	r2, [r7, #72]	; 0x48
1000a16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000a16c:	2498      	movs	r4, #152	; 0x98
1000a16e:	1939      	adds	r1, r7, r4
1000a170:	6808      	ldr	r0, [r1, #0]
1000a172:	6849      	ldr	r1, [r1, #4]
1000a174:	f002 fdf1 	bl	1000cd5a <__wrap___aeabi_ddiv>
1000a178:	0002      	movs	r2, r0
1000a17a:	000b      	movs	r3, r1
1000a17c:	1939      	adds	r1, r7, r4
1000a17e:	600a      	str	r2, [r1, #0]
1000a180:	604b      	str	r3, [r1, #4]
    }

    // output the floating part
    const size_t start_idx = idx;
1000a182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000a184:	657b      	str	r3, [r7, #84]	; 0x54
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
1000a186:	233b      	movs	r3, #59	; 0x3b
1000a188:	2238      	movs	r2, #56	; 0x38
1000a18a:	189b      	adds	r3, r3, r2
1000a18c:	19db      	adds	r3, r3, r7
1000a18e:	781b      	ldrb	r3, [r3, #0]
1000a190:	2b00      	cmp	r3, #0
1000a192:	d00b      	beq.n	1000a1ac <_etoa+0x4b8>
1000a194:	2398      	movs	r3, #152	; 0x98
1000a196:	18fb      	adds	r3, r7, r3
1000a198:	681b      	ldr	r3, [r3, #0]
1000a19a:	633b      	str	r3, [r7, #48]	; 0x30
1000a19c:	239c      	movs	r3, #156	; 0x9c
1000a19e:	18fb      	adds	r3, r7, r3
1000a1a0:	681b      	ldr	r3, [r3, #0]
1000a1a2:	2280      	movs	r2, #128	; 0x80
1000a1a4:	0612      	lsls	r2, r2, #24
1000a1a6:	405a      	eors	r2, r3
1000a1a8:	637a      	str	r2, [r7, #52]	; 0x34
1000a1aa:	e005      	b.n	1000a1b8 <_etoa+0x4c4>
1000a1ac:	2398      	movs	r3, #152	; 0x98
1000a1ae:	18fb      	adds	r3, r7, r3
1000a1b0:	685c      	ldr	r4, [r3, #4]
1000a1b2:	681b      	ldr	r3, [r3, #0]
1000a1b4:	633b      	str	r3, [r7, #48]	; 0x30
1000a1b6:	637c      	str	r4, [r7, #52]	; 0x34
1000a1b8:	23a8      	movs	r3, #168	; 0xa8
1000a1ba:	18fa      	adds	r2, r7, r3
1000a1bc:	6813      	ldr	r3, [r2, #0]
1000a1be:	4a31      	ldr	r2, [pc, #196]	; (1000a284 <_etoa+0x590>)
1000a1c0:	4013      	ands	r3, r2
1000a1c2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
1000a1c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000a1c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
1000a1c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000a1ca:	9304      	str	r3, [sp, #16]
1000a1cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000a1ce:	9303      	str	r3, [sp, #12]
1000a1d0:	25a0      	movs	r5, #160	; 0xa0
1000a1d2:	197d      	adds	r5, r7, r5
1000a1d4:	682b      	ldr	r3, [r5, #0]
1000a1d6:	9302      	str	r3, [sp, #8]
1000a1d8:	6b3d      	ldr	r5, [r7, #48]	; 0x30
1000a1da:	6b7e      	ldr	r6, [r7, #52]	; 0x34
1000a1dc:	9500      	str	r5, [sp, #0]
1000a1de:	9601      	str	r6, [sp, #4]
1000a1e0:	0023      	movs	r3, r4
1000a1e2:	f7ff fb3d 	bl	10009860 <_ftoa>
1000a1e6:	0003      	movs	r3, r0
1000a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c

    // output the exponent part
    if (minwidth) {
1000a1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
1000a1ec:	2b00      	cmp	r3, #0
1000a1ee:	d044      	beq.n	1000a27a <_etoa+0x586>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
1000a1f0:	23a8      	movs	r3, #168	; 0xa8
1000a1f2:	18fb      	adds	r3, r7, r3
1000a1f4:	681b      	ldr	r3, [r3, #0]
1000a1f6:	2220      	movs	r2, #32
1000a1f8:	4013      	ands	r3, r2
1000a1fa:	d001      	beq.n	1000a200 <_etoa+0x50c>
1000a1fc:	2045      	movs	r0, #69	; 0x45
1000a1fe:	e000      	b.n	1000a202 <_etoa+0x50e>
1000a200:	2065      	movs	r0, #101	; 0x65
1000a202:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000a204:	1c53      	adds	r3, r2, #1
1000a206:	63fb      	str	r3, [r7, #60]	; 0x3c
1000a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000a20a:	6c39      	ldr	r1, [r7, #64]	; 0x40
1000a20c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
1000a20e:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (uint)((expval < 0) ? -expval : expval), expval < 0, 10, 0, minwidth - 1,
1000a210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000a212:	17da      	asrs	r2, r3, #31
1000a214:	189b      	adds	r3, r3, r2
1000a216:	4053      	eors	r3, r2
1000a218:	469c      	mov	ip, r3
1000a21a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000a21c:	0fdb      	lsrs	r3, r3, #31
1000a21e:	b2db      	uxtb	r3, r3
1000a220:	6fba      	ldr	r2, [r7, #120]	; 0x78
1000a222:	3a01      	subs	r2, #1
1000a224:	6bbd      	ldr	r5, [r7, #56]	; 0x38
1000a226:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
1000a228:	6c39      	ldr	r1, [r7, #64]	; 0x40
1000a22a:	6c78      	ldr	r0, [r7, #68]	; 0x44
1000a22c:	2605      	movs	r6, #5
1000a22e:	9605      	str	r6, [sp, #20]
1000a230:	9204      	str	r2, [sp, #16]
1000a232:	2200      	movs	r2, #0
1000a234:	9203      	str	r2, [sp, #12]
1000a236:	220a      	movs	r2, #10
1000a238:	9202      	str	r2, [sp, #8]
1000a23a:	9301      	str	r3, [sp, #4]
1000a23c:	4663      	mov	r3, ip
1000a23e:	9300      	str	r3, [sp, #0]
1000a240:	002b      	movs	r3, r5
1000a242:	0022      	movs	r2, r4
1000a244:	f7ff fa2f 	bl	100096a6 <_ntoa_long>
1000a248:	0003      	movs	r3, r0
1000a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
1000a24c:	23a8      	movs	r3, #168	; 0xa8
1000a24e:	18fb      	adds	r3, r7, r3
1000a250:	681b      	ldr	r3, [r3, #0]
1000a252:	2202      	movs	r2, #2
1000a254:	4013      	ands	r3, r2
1000a256:	d010      	beq.n	1000a27a <_etoa+0x586>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
1000a258:	e007      	b.n	1000a26a <_etoa+0x576>
1000a25a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000a25c:	1c53      	adds	r3, r2, #1
1000a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
1000a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000a262:	6c39      	ldr	r1, [r7, #64]	; 0x40
1000a264:	6c7c      	ldr	r4, [r7, #68]	; 0x44
1000a266:	2020      	movs	r0, #32
1000a268:	47a0      	blx	r4
1000a26a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
1000a26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000a26e:	1ad3      	subs	r3, r2, r3
1000a270:	22a4      	movs	r2, #164	; 0xa4
1000a272:	18ba      	adds	r2, r7, r2
1000a274:	6812      	ldr	r2, [r2, #0]
1000a276:	429a      	cmp	r2, r3
1000a278:	d8ef      	bhi.n	1000a25a <_etoa+0x566>
        }
    }
    return idx;
1000a27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
1000a27c:	0018      	movs	r0, r3
1000a27e:	46bd      	mov	sp, r7
1000a280:	b021      	add	sp, #132	; 0x84
1000a282:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a284:	fffff7ff 	.word	0xfffff7ff

1000a288 <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
1000a288:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a28a:	46c6      	mov	lr, r8
1000a28c:	b500      	push	{lr}
1000a28e:	b0a6      	sub	sp, #152	; 0x98
1000a290:	af0a      	add	r7, sp, #40	; 0x28
1000a292:	6278      	str	r0, [r7, #36]	; 0x24
1000a294:	6239      	str	r1, [r7, #32]
1000a296:	61fa      	str	r2, [r7, #28]
1000a298:	61bb      	str	r3, [r7, #24]
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
1000a29a:	2300      	movs	r3, #0
1000a29c:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (!buffer) {
1000a29e:	6a3b      	ldr	r3, [r7, #32]
1000a2a0:	2b00      	cmp	r3, #0
1000a2a2:	d001      	beq.n	1000a2a8 <_vsnprintf+0x20>
1000a2a4:	f000 fc26 	bl	1000aaf4 <_vsnprintf+0x86c>
        // use null output function
        out = _out_null;
1000a2a8:	4bd0      	ldr	r3, [pc, #832]	; (1000a5ec <_vsnprintf+0x364>)
1000a2aa:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (*format) {
1000a2ac:	f000 fc22 	bl	1000aaf4 <_vsnprintf+0x86c>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
1000a2b0:	69bb      	ldr	r3, [r7, #24]
1000a2b2:	781b      	ldrb	r3, [r3, #0]
1000a2b4:	2b25      	cmp	r3, #37	; 0x25
1000a2b6:	d00d      	beq.n	1000a2d4 <_vsnprintf+0x4c>
            // no
            out(*format, buffer, idx++, maxlen);
1000a2b8:	69bb      	ldr	r3, [r7, #24]
1000a2ba:	7818      	ldrb	r0, [r3, #0]
1000a2bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a2be:	1c53      	adds	r3, r2, #1
1000a2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a2c2:	69fb      	ldr	r3, [r7, #28]
1000a2c4:	6a39      	ldr	r1, [r7, #32]
1000a2c6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a2c8:	47a0      	blx	r4
            format++;
1000a2ca:	69bb      	ldr	r3, [r7, #24]
1000a2cc:	3301      	adds	r3, #1
1000a2ce:	61bb      	str	r3, [r7, #24]
            continue;
1000a2d0:	f000 fc10 	bl	1000aaf4 <_vsnprintf+0x86c>
        } else {
            // yes, evaluate it
            format++;
1000a2d4:	69bb      	ldr	r3, [r7, #24]
1000a2d6:	3301      	adds	r3, #1
1000a2d8:	61bb      	str	r3, [r7, #24]
        }

        // evaluate flags
        flags = 0U;
1000a2da:	2300      	movs	r3, #0
1000a2dc:	66fb      	str	r3, [r7, #108]	; 0x6c
        do {
            switch (*format) {
1000a2de:	69bb      	ldr	r3, [r7, #24]
1000a2e0:	781b      	ldrb	r3, [r3, #0]
1000a2e2:	3b20      	subs	r3, #32
1000a2e4:	2b10      	cmp	r3, #16
1000a2e6:	d836      	bhi.n	1000a356 <_vsnprintf+0xce>
1000a2e8:	009a      	lsls	r2, r3, #2
1000a2ea:	4bc1      	ldr	r3, [pc, #772]	; (1000a5f0 <_vsnprintf+0x368>)
1000a2ec:	18d3      	adds	r3, r2, r3
1000a2ee:	681b      	ldr	r3, [r3, #0]
1000a2f0:	469f      	mov	pc, r3
                case '0':
                    flags |= FLAGS_ZEROPAD;
1000a2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a2f4:	2201      	movs	r2, #1
1000a2f6:	4313      	orrs	r3, r2
1000a2f8:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a2fa:	69bb      	ldr	r3, [r7, #24]
1000a2fc:	3301      	adds	r3, #1
1000a2fe:	61bb      	str	r3, [r7, #24]
                    n = 1U;
1000a300:	2301      	movs	r3, #1
1000a302:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000a304:	e02a      	b.n	1000a35c <_vsnprintf+0xd4>
                case '-':
                    flags |= FLAGS_LEFT;
1000a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a308:	2202      	movs	r2, #2
1000a30a:	4313      	orrs	r3, r2
1000a30c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a30e:	69bb      	ldr	r3, [r7, #24]
1000a310:	3301      	adds	r3, #1
1000a312:	61bb      	str	r3, [r7, #24]
                    n = 1U;
1000a314:	2301      	movs	r3, #1
1000a316:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000a318:	e020      	b.n	1000a35c <_vsnprintf+0xd4>
                case '+':
                    flags |= FLAGS_PLUS;
1000a31a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a31c:	2204      	movs	r2, #4
1000a31e:	4313      	orrs	r3, r2
1000a320:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a322:	69bb      	ldr	r3, [r7, #24]
1000a324:	3301      	adds	r3, #1
1000a326:	61bb      	str	r3, [r7, #24]
                    n = 1U;
1000a328:	2301      	movs	r3, #1
1000a32a:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000a32c:	e016      	b.n	1000a35c <_vsnprintf+0xd4>
                case ' ':
                    flags |= FLAGS_SPACE;
1000a32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a330:	2208      	movs	r2, #8
1000a332:	4313      	orrs	r3, r2
1000a334:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a336:	69bb      	ldr	r3, [r7, #24]
1000a338:	3301      	adds	r3, #1
1000a33a:	61bb      	str	r3, [r7, #24]
                    n = 1U;
1000a33c:	2301      	movs	r3, #1
1000a33e:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000a340:	e00c      	b.n	1000a35c <_vsnprintf+0xd4>
                case '#':
                    flags |= FLAGS_HASH;
1000a342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a344:	2210      	movs	r2, #16
1000a346:	4313      	orrs	r3, r2
1000a348:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a34a:	69bb      	ldr	r3, [r7, #24]
1000a34c:	3301      	adds	r3, #1
1000a34e:	61bb      	str	r3, [r7, #24]
                    n = 1U;
1000a350:	2301      	movs	r3, #1
1000a352:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000a354:	e002      	b.n	1000a35c <_vsnprintf+0xd4>
                default :
                    n = 0U;
1000a356:	2300      	movs	r3, #0
1000a358:	663b      	str	r3, [r7, #96]	; 0x60
                    break;
1000a35a:	46c0      	nop			; (mov r8, r8)
            }
        } while (n);
1000a35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1000a35e:	2b00      	cmp	r3, #0
1000a360:	d1bd      	bne.n	1000a2de <_vsnprintf+0x56>

        // evaluate width field
        width = 0U;
1000a362:	2300      	movs	r3, #0
1000a364:	66bb      	str	r3, [r7, #104]	; 0x68
        if (_is_digit(*format)) {
1000a366:	69bb      	ldr	r3, [r7, #24]
1000a368:	781b      	ldrb	r3, [r3, #0]
1000a36a:	0018      	movs	r0, r3
1000a36c:	f7ff f83c 	bl	100093e8 <_is_digit>
1000a370:	1e03      	subs	r3, r0, #0
1000a372:	d007      	beq.n	1000a384 <_vsnprintf+0xfc>
            width = _atoi(&format);
1000a374:	2318      	movs	r3, #24
1000a376:	18fb      	adds	r3, r7, r3
1000a378:	0018      	movs	r0, r3
1000a37a:	f7ff f84e 	bl	1000941a <_atoi>
1000a37e:	0003      	movs	r3, r0
1000a380:	66bb      	str	r3, [r7, #104]	; 0x68
1000a382:	e01c      	b.n	1000a3be <_vsnprintf+0x136>
        } else if (*format == '*') {
1000a384:	69bb      	ldr	r3, [r7, #24]
1000a386:	781b      	ldrb	r3, [r3, #0]
1000a388:	2b2a      	cmp	r3, #42	; 0x2a
1000a38a:	d118      	bne.n	1000a3be <_vsnprintf+0x136>
            const int w = va_arg(va, int);
1000a38c:	2388      	movs	r3, #136	; 0x88
1000a38e:	18fb      	adds	r3, r7, r3
1000a390:	681b      	ldr	r3, [r3, #0]
1000a392:	1d1a      	adds	r2, r3, #4
1000a394:	2188      	movs	r1, #136	; 0x88
1000a396:	1879      	adds	r1, r7, r1
1000a398:	600a      	str	r2, [r1, #0]
1000a39a:	681b      	ldr	r3, [r3, #0]
1000a39c:	64bb      	str	r3, [r7, #72]	; 0x48
            if (w < 0) {
1000a39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000a3a0:	2b00      	cmp	r3, #0
1000a3a2:	da07      	bge.n	1000a3b4 <_vsnprintf+0x12c>
                flags |= FLAGS_LEFT;    // reverse padding
1000a3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a3a6:	2202      	movs	r2, #2
1000a3a8:	4313      	orrs	r3, r2
1000a3aa:	66fb      	str	r3, [r7, #108]	; 0x6c
                width = (unsigned int) -w;
1000a3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000a3ae:	425b      	negs	r3, r3
1000a3b0:	66bb      	str	r3, [r7, #104]	; 0x68
1000a3b2:	e001      	b.n	1000a3b8 <_vsnprintf+0x130>
            } else {
                width = (unsigned int) w;
1000a3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
1000a3b6:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            format++;
1000a3b8:	69bb      	ldr	r3, [r7, #24]
1000a3ba:	3301      	adds	r3, #1
1000a3bc:	61bb      	str	r3, [r7, #24]
        }

        // evaluate precision field
        precision = 0U;
1000a3be:	2300      	movs	r3, #0
1000a3c0:	667b      	str	r3, [r7, #100]	; 0x64
        if (*format == '.') {
1000a3c2:	69bb      	ldr	r3, [r7, #24]
1000a3c4:	781b      	ldrb	r3, [r3, #0]
1000a3c6:	2b2e      	cmp	r3, #46	; 0x2e
1000a3c8:	d12b      	bne.n	1000a422 <_vsnprintf+0x19a>
            flags |= FLAGS_PRECISION;
1000a3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a3cc:	2280      	movs	r2, #128	; 0x80
1000a3ce:	00d2      	lsls	r2, r2, #3
1000a3d0:	4313      	orrs	r3, r2
1000a3d2:	66fb      	str	r3, [r7, #108]	; 0x6c
            format++;
1000a3d4:	69bb      	ldr	r3, [r7, #24]
1000a3d6:	3301      	adds	r3, #1
1000a3d8:	61bb      	str	r3, [r7, #24]
            if (_is_digit(*format)) {
1000a3da:	69bb      	ldr	r3, [r7, #24]
1000a3dc:	781b      	ldrb	r3, [r3, #0]
1000a3de:	0018      	movs	r0, r3
1000a3e0:	f7ff f802 	bl	100093e8 <_is_digit>
1000a3e4:	1e03      	subs	r3, r0, #0
1000a3e6:	d007      	beq.n	1000a3f8 <_vsnprintf+0x170>
                precision = _atoi(&format);
1000a3e8:	2318      	movs	r3, #24
1000a3ea:	18fb      	adds	r3, r7, r3
1000a3ec:	0018      	movs	r0, r3
1000a3ee:	f7ff f814 	bl	1000941a <_atoi>
1000a3f2:	0003      	movs	r3, r0
1000a3f4:	667b      	str	r3, [r7, #100]	; 0x64
1000a3f6:	e014      	b.n	1000a422 <_vsnprintf+0x19a>
            } else if (*format == '*') {
1000a3f8:	69bb      	ldr	r3, [r7, #24]
1000a3fa:	781b      	ldrb	r3, [r3, #0]
1000a3fc:	2b2a      	cmp	r3, #42	; 0x2a
1000a3fe:	d110      	bne.n	1000a422 <_vsnprintf+0x19a>
                const int prec = (int) va_arg(va, int);
1000a400:	2388      	movs	r3, #136	; 0x88
1000a402:	18fb      	adds	r3, r7, r3
1000a404:	681b      	ldr	r3, [r3, #0]
1000a406:	1d1a      	adds	r2, r3, #4
1000a408:	2188      	movs	r1, #136	; 0x88
1000a40a:	1879      	adds	r1, r7, r1
1000a40c:	600a      	str	r2, [r1, #0]
1000a40e:	681b      	ldr	r3, [r3, #0]
1000a410:	647b      	str	r3, [r7, #68]	; 0x44
                precision = prec > 0 ? (unsigned int) prec : 0U;
1000a412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000a414:	2b00      	cmp	r3, #0
1000a416:	da00      	bge.n	1000a41a <_vsnprintf+0x192>
1000a418:	2300      	movs	r3, #0
1000a41a:	667b      	str	r3, [r7, #100]	; 0x64
                format++;
1000a41c:	69bb      	ldr	r3, [r7, #24]
1000a41e:	3301      	adds	r3, #1
1000a420:	61bb      	str	r3, [r7, #24]
            }
        }

        // evaluate length field
        switch (*format) {
1000a422:	69bb      	ldr	r3, [r7, #24]
1000a424:	781b      	ldrb	r3, [r3, #0]
1000a426:	3b68      	subs	r3, #104	; 0x68
1000a428:	2b12      	cmp	r3, #18
1000a42a:	d847      	bhi.n	1000a4bc <_vsnprintf+0x234>
1000a42c:	009a      	lsls	r2, r3, #2
1000a42e:	4b71      	ldr	r3, [pc, #452]	; (1000a5f4 <_vsnprintf+0x36c>)
1000a430:	18d3      	adds	r3, r2, r3
1000a432:	681b      	ldr	r3, [r3, #0]
1000a434:	469f      	mov	pc, r3
            case 'l' :
                flags |= FLAGS_LONG;
1000a436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a438:	2280      	movs	r2, #128	; 0x80
1000a43a:	0052      	lsls	r2, r2, #1
1000a43c:	4313      	orrs	r3, r2
1000a43e:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
1000a440:	69bb      	ldr	r3, [r7, #24]
1000a442:	3301      	adds	r3, #1
1000a444:	61bb      	str	r3, [r7, #24]
                if (*format == 'l') {
1000a446:	69bb      	ldr	r3, [r7, #24]
1000a448:	781b      	ldrb	r3, [r3, #0]
1000a44a:	2b6c      	cmp	r3, #108	; 0x6c
1000a44c:	d138      	bne.n	1000a4c0 <_vsnprintf+0x238>
                    flags |= FLAGS_LONG_LONG;
1000a44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a450:	2280      	movs	r2, #128	; 0x80
1000a452:	0092      	lsls	r2, r2, #2
1000a454:	4313      	orrs	r3, r2
1000a456:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a458:	69bb      	ldr	r3, [r7, #24]
1000a45a:	3301      	adds	r3, #1
1000a45c:	61bb      	str	r3, [r7, #24]
                }
                break;
1000a45e:	e02f      	b.n	1000a4c0 <_vsnprintf+0x238>
            case 'h' :
                flags |= FLAGS_SHORT;
1000a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a462:	2280      	movs	r2, #128	; 0x80
1000a464:	4313      	orrs	r3, r2
1000a466:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
1000a468:	69bb      	ldr	r3, [r7, #24]
1000a46a:	3301      	adds	r3, #1
1000a46c:	61bb      	str	r3, [r7, #24]
                if (*format == 'h') {
1000a46e:	69bb      	ldr	r3, [r7, #24]
1000a470:	781b      	ldrb	r3, [r3, #0]
1000a472:	2b68      	cmp	r3, #104	; 0x68
1000a474:	d126      	bne.n	1000a4c4 <_vsnprintf+0x23c>
                    flags |= FLAGS_CHAR;
1000a476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a478:	2240      	movs	r2, #64	; 0x40
1000a47a:	4313      	orrs	r3, r2
1000a47c:	66fb      	str	r3, [r7, #108]	; 0x6c
                    format++;
1000a47e:	69bb      	ldr	r3, [r7, #24]
1000a480:	3301      	adds	r3, #1
1000a482:	61bb      	str	r3, [r7, #24]
                }
                break;
1000a484:	e01e      	b.n	1000a4c4 <_vsnprintf+0x23c>
#if PICO_PRINTF_SUPPORT_PTRDIFF_T
            case 't' :
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000a486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a488:	2280      	movs	r2, #128	; 0x80
1000a48a:	0052      	lsls	r2, r2, #1
1000a48c:	4313      	orrs	r3, r2
1000a48e:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
1000a490:	69bb      	ldr	r3, [r7, #24]
1000a492:	3301      	adds	r3, #1
1000a494:	61bb      	str	r3, [r7, #24]
                break;
1000a496:	e016      	b.n	1000a4c6 <_vsnprintf+0x23e>
#endif
            case 'j' :
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000a498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a49a:	2280      	movs	r2, #128	; 0x80
1000a49c:	0092      	lsls	r2, r2, #2
1000a49e:	4313      	orrs	r3, r2
1000a4a0:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
1000a4a2:	69bb      	ldr	r3, [r7, #24]
1000a4a4:	3301      	adds	r3, #1
1000a4a6:	61bb      	str	r3, [r7, #24]
                break;
1000a4a8:	e00d      	b.n	1000a4c6 <_vsnprintf+0x23e>
            case 'z' :
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000a4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a4ac:	2280      	movs	r2, #128	; 0x80
1000a4ae:	0052      	lsls	r2, r2, #1
1000a4b0:	4313      	orrs	r3, r2
1000a4b2:	66fb      	str	r3, [r7, #108]	; 0x6c
                format++;
1000a4b4:	69bb      	ldr	r3, [r7, #24]
1000a4b6:	3301      	adds	r3, #1
1000a4b8:	61bb      	str	r3, [r7, #24]
                break;
1000a4ba:	e004      	b.n	1000a4c6 <_vsnprintf+0x23e>
            default :
                break;
1000a4bc:	46c0      	nop			; (mov r8, r8)
1000a4be:	e002      	b.n	1000a4c6 <_vsnprintf+0x23e>
                break;
1000a4c0:	46c0      	nop			; (mov r8, r8)
1000a4c2:	e000      	b.n	1000a4c6 <_vsnprintf+0x23e>
                break;
1000a4c4:	46c0      	nop			; (mov r8, r8)
        }

        // evaluate specifier
        switch (*format) {
1000a4c6:	69bb      	ldr	r3, [r7, #24]
1000a4c8:	781b      	ldrb	r3, [r3, #0]
1000a4ca:	3b25      	subs	r3, #37	; 0x25
1000a4cc:	2b53      	cmp	r3, #83	; 0x53
1000a4ce:	d900      	bls.n	1000a4d2 <_vsnprintf+0x24a>
1000a4d0:	e303      	b.n	1000aada <_vsnprintf+0x852>
1000a4d2:	009a      	lsls	r2, r3, #2
1000a4d4:	4b48      	ldr	r3, [pc, #288]	; (1000a5f8 <_vsnprintf+0x370>)
1000a4d6:	18d3      	adds	r3, r2, r3
1000a4d8:	681b      	ldr	r3, [r3, #0]
1000a4da:	469f      	mov	pc, r3
            case 'X' :
            case 'o' :
            case 'b' : {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
1000a4dc:	69bb      	ldr	r3, [r7, #24]
1000a4de:	781b      	ldrb	r3, [r3, #0]
1000a4e0:	2b78      	cmp	r3, #120	; 0x78
1000a4e2:	d003      	beq.n	1000a4ec <_vsnprintf+0x264>
1000a4e4:	69bb      	ldr	r3, [r7, #24]
1000a4e6:	781b      	ldrb	r3, [r3, #0]
1000a4e8:	2b58      	cmp	r3, #88	; 0x58
1000a4ea:	d102      	bne.n	1000a4f2 <_vsnprintf+0x26a>
                    base = 16U;
1000a4ec:	2310      	movs	r3, #16
1000a4ee:	65bb      	str	r3, [r7, #88]	; 0x58
1000a4f0:	e013      	b.n	1000a51a <_vsnprintf+0x292>
                } else if (*format == 'o') {
1000a4f2:	69bb      	ldr	r3, [r7, #24]
1000a4f4:	781b      	ldrb	r3, [r3, #0]
1000a4f6:	2b6f      	cmp	r3, #111	; 0x6f
1000a4f8:	d102      	bne.n	1000a500 <_vsnprintf+0x278>
                    base = 8U;
1000a4fa:	2308      	movs	r3, #8
1000a4fc:	65bb      	str	r3, [r7, #88]	; 0x58
1000a4fe:	e00c      	b.n	1000a51a <_vsnprintf+0x292>
                } else if (*format == 'b') {
1000a500:	69bb      	ldr	r3, [r7, #24]
1000a502:	781b      	ldrb	r3, [r3, #0]
1000a504:	2b62      	cmp	r3, #98	; 0x62
1000a506:	d102      	bne.n	1000a50e <_vsnprintf+0x286>
                    base = 2U;
1000a508:	2302      	movs	r3, #2
1000a50a:	65bb      	str	r3, [r7, #88]	; 0x58
1000a50c:	e005      	b.n	1000a51a <_vsnprintf+0x292>
                } else {
                    base = 10U;
1000a50e:	230a      	movs	r3, #10
1000a510:	65bb      	str	r3, [r7, #88]	; 0x58
                    flags &= ~FLAGS_HASH;   // no hash for dec format
1000a512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a514:	2210      	movs	r2, #16
1000a516:	4393      	bics	r3, r2
1000a518:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                // uppercase
                if (*format == 'X') {
1000a51a:	69bb      	ldr	r3, [r7, #24]
1000a51c:	781b      	ldrb	r3, [r3, #0]
1000a51e:	2b58      	cmp	r3, #88	; 0x58
1000a520:	d103      	bne.n	1000a52a <_vsnprintf+0x2a2>
                    flags |= FLAGS_UPPERCASE;
1000a522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a524:	2220      	movs	r2, #32
1000a526:	4313      	orrs	r3, r2
1000a528:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
1000a52a:	69bb      	ldr	r3, [r7, #24]
1000a52c:	781b      	ldrb	r3, [r3, #0]
1000a52e:	2b69      	cmp	r3, #105	; 0x69
1000a530:	d007      	beq.n	1000a542 <_vsnprintf+0x2ba>
1000a532:	69bb      	ldr	r3, [r7, #24]
1000a534:	781b      	ldrb	r3, [r3, #0]
1000a536:	2b64      	cmp	r3, #100	; 0x64
1000a538:	d003      	beq.n	1000a542 <_vsnprintf+0x2ba>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
1000a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a53c:	220c      	movs	r2, #12
1000a53e:	4393      	bics	r3, r2
1000a540:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
1000a542:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a544:	2380      	movs	r3, #128	; 0x80
1000a546:	00db      	lsls	r3, r3, #3
1000a548:	4013      	ands	r3, r2
1000a54a:	d003      	beq.n	1000a554 <_vsnprintf+0x2cc>
                    flags &= ~FLAGS_ZEROPAD;
1000a54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a54e:	2201      	movs	r2, #1
1000a550:	4393      	bics	r3, r2
1000a552:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
1000a554:	69bb      	ldr	r3, [r7, #24]
1000a556:	781b      	ldrb	r3, [r3, #0]
1000a558:	2b69      	cmp	r3, #105	; 0x69
1000a55a:	d004      	beq.n	1000a566 <_vsnprintf+0x2de>
1000a55c:	69bb      	ldr	r3, [r7, #24]
1000a55e:	781b      	ldrb	r3, [r3, #0]
1000a560:	2b64      	cmp	r3, #100	; 0x64
1000a562:	d000      	beq.n	1000a566 <_vsnprintf+0x2de>
1000a564:	e0b7      	b.n	1000a6d6 <_vsnprintf+0x44e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
1000a566:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a568:	2380      	movs	r3, #128	; 0x80
1000a56a:	009b      	lsls	r3, r3, #2
1000a56c:	4013      	ands	r3, r2
1000a56e:	d045      	beq.n	1000a5fc <_vsnprintf+0x374>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        const long long value = va_arg(va, long long);
1000a570:	2388      	movs	r3, #136	; 0x88
1000a572:	18fb      	adds	r3, r7, r3
1000a574:	681b      	ldr	r3, [r3, #0]
1000a576:	3307      	adds	r3, #7
1000a578:	2207      	movs	r2, #7
1000a57a:	4393      	bics	r3, r2
1000a57c:	001a      	movs	r2, r3
1000a57e:	3208      	adds	r2, #8
1000a580:	2188      	movs	r1, #136	; 0x88
1000a582:	1879      	adds	r1, r7, r1
1000a584:	600a      	str	r2, [r1, #0]
1000a586:	681a      	ldr	r2, [r3, #0]
1000a588:	685b      	ldr	r3, [r3, #4]
1000a58a:	62ba      	str	r2, [r7, #40]	; 0x28
1000a58c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
1000a58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000a592:	2b00      	cmp	r3, #0
1000a594:	da05      	bge.n	1000a5a2 <_vsnprintf+0x31a>
1000a596:	2000      	movs	r0, #0
1000a598:	2100      	movs	r1, #0
1000a59a:	1a80      	subs	r0, r0, r2
1000a59c:	4199      	sbcs	r1, r3
1000a59e:	0002      	movs	r2, r0
1000a5a0:	000b      	movs	r3, r1
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
1000a5a2:	0010      	movs	r0, r2
1000a5a4:	0019      	movs	r1, r3
1000a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000a5a8:	0fdb      	lsrs	r3, r3, #31
1000a5aa:	b2da      	uxtb	r2, r3
1000a5ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a5ae:	613b      	str	r3, [r7, #16]
1000a5b0:	2300      	movs	r3, #0
1000a5b2:	617b      	str	r3, [r7, #20]
1000a5b4:	69fb      	ldr	r3, [r7, #28]
1000a5b6:	469c      	mov	ip, r3
1000a5b8:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
1000a5ba:	6a3d      	ldr	r5, [r7, #32]
1000a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a5be:	4698      	mov	r8, r3
1000a5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a5c2:	9308      	str	r3, [sp, #32]
1000a5c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000a5c6:	9307      	str	r3, [sp, #28]
1000a5c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a5ca:	9306      	str	r3, [sp, #24]
1000a5cc:	693b      	ldr	r3, [r7, #16]
1000a5ce:	697c      	ldr	r4, [r7, #20]
1000a5d0:	9304      	str	r3, [sp, #16]
1000a5d2:	9405      	str	r4, [sp, #20]
1000a5d4:	9202      	str	r2, [sp, #8]
1000a5d6:	9000      	str	r0, [sp, #0]
1000a5d8:	9101      	str	r1, [sp, #4]
1000a5da:	4663      	mov	r3, ip
1000a5dc:	0032      	movs	r2, r6
1000a5de:	0029      	movs	r1, r5
1000a5e0:	4640      	mov	r0, r8
1000a5e2:	f7ff f8c9 	bl	10009778 <_ntoa_long_long>
1000a5e6:	0003      	movs	r3, r0
1000a5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    if (flags & FLAGS_LONG_LONG) {
1000a5ea:	e102      	b.n	1000a7f2 <_vsnprintf+0x56a>
1000a5ec:	10009361 	.word	0x10009361
1000a5f0:	1000e988 	.word	0x1000e988
1000a5f4:	1000e9cc 	.word	0x1000e9cc
1000a5f8:	1000ea18 	.word	0x1000ea18
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
1000a5fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a5fe:	2380      	movs	r3, #128	; 0x80
1000a600:	005b      	lsls	r3, r3, #1
1000a602:	4013      	ands	r3, r2
1000a604:	d025      	beq.n	1000a652 <_vsnprintf+0x3ca>
                        const long value = va_arg(va, long);
1000a606:	2388      	movs	r3, #136	; 0x88
1000a608:	18fb      	adds	r3, r7, r3
1000a60a:	681b      	ldr	r3, [r3, #0]
1000a60c:	1d1a      	adds	r2, r3, #4
1000a60e:	2188      	movs	r1, #136	; 0x88
1000a610:	1879      	adds	r1, r7, r1
1000a612:	600a      	str	r2, [r1, #0]
1000a614:	681b      	ldr	r3, [r3, #0]
1000a616:	637b      	str	r3, [r7, #52]	; 0x34
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
1000a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000a61a:	17da      	asrs	r2, r3, #31
1000a61c:	189b      	adds	r3, r3, r2
1000a61e:	4053      	eors	r3, r2
1000a620:	001e      	movs	r6, r3
1000a622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000a624:	0fdb      	lsrs	r3, r3, #31
1000a626:	b2da      	uxtb	r2, r3
1000a628:	69fd      	ldr	r5, [r7, #28]
1000a62a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
1000a62c:	6a39      	ldr	r1, [r7, #32]
1000a62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a632:	9305      	str	r3, [sp, #20]
1000a634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000a636:	9304      	str	r3, [sp, #16]
1000a638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a63a:	9303      	str	r3, [sp, #12]
1000a63c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a63e:	9302      	str	r3, [sp, #8]
1000a640:	9201      	str	r2, [sp, #4]
1000a642:	9600      	str	r6, [sp, #0]
1000a644:	002b      	movs	r3, r5
1000a646:	0022      	movs	r2, r4
1000a648:	f7ff f82d 	bl	100096a6 <_ntoa_long>
1000a64c:	0003      	movs	r3, r0
1000a64e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    if (flags & FLAGS_LONG_LONG) {
1000a650:	e0cf      	b.n	1000a7f2 <_vsnprintf+0x56a>
                                         value < 0, base, precision, width, flags);
                    } else {
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
1000a652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a654:	2240      	movs	r2, #64	; 0x40
1000a656:	4013      	ands	r3, r2
1000a658:	d009      	beq.n	1000a66e <_vsnprintf+0x3e6>
1000a65a:	2388      	movs	r3, #136	; 0x88
1000a65c:	18fb      	adds	r3, r7, r3
1000a65e:	681b      	ldr	r3, [r3, #0]
1000a660:	1d1a      	adds	r2, r3, #4
1000a662:	2188      	movs	r1, #136	; 0x88
1000a664:	1879      	adds	r1, r7, r1
1000a666:	600a      	str	r2, [r1, #0]
1000a668:	681b      	ldr	r3, [r3, #0]
1000a66a:	b2db      	uxtb	r3, r3
1000a66c:	e015      	b.n	1000a69a <_vsnprintf+0x412>
1000a66e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a670:	2280      	movs	r2, #128	; 0x80
1000a672:	4013      	ands	r3, r2
                                                                                          ? (short int) va_arg(va, int)
                                                                                          : va_arg(va, int);
1000a674:	d009      	beq.n	1000a68a <_vsnprintf+0x402>
                                                                                          ? (short int) va_arg(va, int)
1000a676:	2388      	movs	r3, #136	; 0x88
1000a678:	18fb      	adds	r3, r7, r3
1000a67a:	681b      	ldr	r3, [r3, #0]
1000a67c:	1d1a      	adds	r2, r3, #4
1000a67e:	2188      	movs	r1, #136	; 0x88
1000a680:	1879      	adds	r1, r7, r1
1000a682:	600a      	str	r2, [r1, #0]
1000a684:	681b      	ldr	r3, [r3, #0]
1000a686:	b21b      	sxth	r3, r3
1000a688:	e007      	b.n	1000a69a <_vsnprintf+0x412>
                                                                                          : va_arg(va, int);
1000a68a:	2388      	movs	r3, #136	; 0x88
1000a68c:	18fb      	adds	r3, r7, r3
1000a68e:	681b      	ldr	r3, [r3, #0]
1000a690:	1d1a      	adds	r2, r3, #4
1000a692:	2188      	movs	r1, #136	; 0x88
1000a694:	1879      	adds	r1, r7, r1
1000a696:	600a      	str	r2, [r1, #0]
1000a698:	681b      	ldr	r3, [r3, #0]
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
1000a69a:	63bb      	str	r3, [r7, #56]	; 0x38
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
1000a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000a69e:	17da      	asrs	r2, r3, #31
1000a6a0:	189b      	adds	r3, r3, r2
1000a6a2:	4053      	eors	r3, r2
1000a6a4:	001e      	movs	r6, r3
1000a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000a6a8:	0fdb      	lsrs	r3, r3, #31
1000a6aa:	b2da      	uxtb	r2, r3
1000a6ac:	69fd      	ldr	r5, [r7, #28]
1000a6ae:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
1000a6b0:	6a39      	ldr	r1, [r7, #32]
1000a6b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a6b6:	9305      	str	r3, [sp, #20]
1000a6b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000a6ba:	9304      	str	r3, [sp, #16]
1000a6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a6be:	9303      	str	r3, [sp, #12]
1000a6c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a6c2:	9302      	str	r3, [sp, #8]
1000a6c4:	9201      	str	r2, [sp, #4]
1000a6c6:	9600      	str	r6, [sp, #0]
1000a6c8:	002b      	movs	r3, r5
1000a6ca:	0022      	movs	r2, r4
1000a6cc:	f7fe ffeb 	bl	100096a6 <_ntoa_long>
1000a6d0:	0003      	movs	r3, r0
1000a6d2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    if (flags & FLAGS_LONG_LONG) {
1000a6d4:	e08d      	b.n	1000a7f2 <_vsnprintf+0x56a>
                                         value < 0, base, precision, width, flags);
                    }
                } else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
1000a6d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a6d8:	2380      	movs	r3, #128	; 0x80
1000a6da:	009b      	lsls	r3, r3, #2
1000a6dc:	4013      	ands	r3, r2
1000a6de:	d02b      	beq.n	1000a738 <_vsnprintf+0x4b0>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
1000a6e0:	2388      	movs	r3, #136	; 0x88
1000a6e2:	18fb      	adds	r3, r7, r3
1000a6e4:	681b      	ldr	r3, [r3, #0]
1000a6e6:	3307      	adds	r3, #7
1000a6e8:	2207      	movs	r2, #7
1000a6ea:	4393      	bics	r3, r2
1000a6ec:	001a      	movs	r2, r3
1000a6ee:	3208      	adds	r2, #8
1000a6f0:	2188      	movs	r1, #136	; 0x88
1000a6f2:	1879      	adds	r1, r7, r1
1000a6f4:	600a      	str	r2, [r1, #0]
1000a6f6:	6818      	ldr	r0, [r3, #0]
1000a6f8:	6859      	ldr	r1, [r3, #4]
1000a6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a6fc:	60bb      	str	r3, [r7, #8]
1000a6fe:	2300      	movs	r3, #0
1000a700:	60fb      	str	r3, [r7, #12]
1000a702:	69fe      	ldr	r6, [r7, #28]
1000a704:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a706:	6a3d      	ldr	r5, [r7, #32]
1000a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000a70a:	469c      	mov	ip, r3
1000a70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a70e:	9308      	str	r3, [sp, #32]
1000a710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000a712:	9307      	str	r3, [sp, #28]
1000a714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a716:	9306      	str	r3, [sp, #24]
1000a718:	68bb      	ldr	r3, [r7, #8]
1000a71a:	68fc      	ldr	r4, [r7, #12]
1000a71c:	9304      	str	r3, [sp, #16]
1000a71e:	9405      	str	r4, [sp, #20]
1000a720:	2300      	movs	r3, #0
1000a722:	9302      	str	r3, [sp, #8]
1000a724:	9000      	str	r0, [sp, #0]
1000a726:	9101      	str	r1, [sp, #4]
1000a728:	0033      	movs	r3, r6
1000a72a:	0029      	movs	r1, r5
1000a72c:	4660      	mov	r0, ip
1000a72e:	f7ff f823 	bl	10009778 <_ntoa_long_long>
1000a732:	0003      	movs	r3, r0
1000a734:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a736:	e05c      	b.n	1000a7f2 <_vsnprintf+0x56a>
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
1000a738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a73a:	2380      	movs	r3, #128	; 0x80
1000a73c:	005b      	lsls	r3, r3, #1
1000a73e:	4013      	ands	r3, r2
1000a740:	d01d      	beq.n	1000a77e <_vsnprintf+0x4f6>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
1000a742:	2388      	movs	r3, #136	; 0x88
1000a744:	18fb      	adds	r3, r7, r3
1000a746:	681b      	ldr	r3, [r3, #0]
1000a748:	1d1a      	adds	r2, r3, #4
1000a74a:	2188      	movs	r1, #136	; 0x88
1000a74c:	1879      	adds	r1, r7, r1
1000a74e:	600a      	str	r2, [r1, #0]
1000a750:	681b      	ldr	r3, [r3, #0]
1000a752:	69fd      	ldr	r5, [r7, #28]
1000a754:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
1000a756:	6a39      	ldr	r1, [r7, #32]
1000a758:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a75a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a75c:	9205      	str	r2, [sp, #20]
1000a75e:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000a760:	9204      	str	r2, [sp, #16]
1000a762:	6e7a      	ldr	r2, [r7, #100]	; 0x64
1000a764:	9203      	str	r2, [sp, #12]
1000a766:	6dba      	ldr	r2, [r7, #88]	; 0x58
1000a768:	9202      	str	r2, [sp, #8]
1000a76a:	2200      	movs	r2, #0
1000a76c:	9201      	str	r2, [sp, #4]
1000a76e:	9300      	str	r3, [sp, #0]
1000a770:	002b      	movs	r3, r5
1000a772:	0022      	movs	r2, r4
1000a774:	f7fe ff97 	bl	100096a6 <_ntoa_long>
1000a778:	0003      	movs	r3, r0
1000a77a:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a77c:	e039      	b.n	1000a7f2 <_vsnprintf+0x56a>
                                         width, flags);
                    } else {
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
1000a77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a780:	2240      	movs	r2, #64	; 0x40
1000a782:	4013      	ands	r3, r2
                                                                        : (flags & FLAGS_SHORT)
1000a784:	d009      	beq.n	1000a79a <_vsnprintf+0x512>
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
1000a786:	2388      	movs	r3, #136	; 0x88
1000a788:	18fb      	adds	r3, r7, r3
1000a78a:	681b      	ldr	r3, [r3, #0]
1000a78c:	1d1a      	adds	r2, r3, #4
1000a78e:	2188      	movs	r1, #136	; 0x88
1000a790:	1879      	adds	r1, r7, r1
1000a792:	600a      	str	r2, [r1, #0]
1000a794:	681b      	ldr	r3, [r3, #0]
1000a796:	b2db      	uxtb	r3, r3
1000a798:	e015      	b.n	1000a7c6 <_vsnprintf+0x53e>
                                                                        : (flags & FLAGS_SHORT)
1000a79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a79c:	2280      	movs	r2, #128	; 0x80
1000a79e:	4013      	ands	r3, r2
                                                                          ? (unsigned short int) va_arg(va,
                                                                                                        unsigned int)
                                                                          : va_arg(va, unsigned int);
1000a7a0:	d009      	beq.n	1000a7b6 <_vsnprintf+0x52e>
                                                                          ? (unsigned short int) va_arg(va,
1000a7a2:	2388      	movs	r3, #136	; 0x88
1000a7a4:	18fb      	adds	r3, r7, r3
1000a7a6:	681b      	ldr	r3, [r3, #0]
1000a7a8:	1d1a      	adds	r2, r3, #4
1000a7aa:	2188      	movs	r1, #136	; 0x88
1000a7ac:	1879      	adds	r1, r7, r1
1000a7ae:	600a      	str	r2, [r1, #0]
1000a7b0:	681b      	ldr	r3, [r3, #0]
1000a7b2:	b29b      	uxth	r3, r3
1000a7b4:	e007      	b.n	1000a7c6 <_vsnprintf+0x53e>
                                                                          : va_arg(va, unsigned int);
1000a7b6:	2388      	movs	r3, #136	; 0x88
1000a7b8:	18fb      	adds	r3, r7, r3
1000a7ba:	681b      	ldr	r3, [r3, #0]
1000a7bc:	1d1a      	adds	r2, r3, #4
1000a7be:	2188      	movs	r1, #136	; 0x88
1000a7c0:	1879      	adds	r1, r7, r1
1000a7c2:	600a      	str	r2, [r1, #0]
1000a7c4:	681b      	ldr	r3, [r3, #0]
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
1000a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
1000a7c8:	69fc      	ldr	r4, [r7, #28]
1000a7ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a7cc:	6a39      	ldr	r1, [r7, #32]
1000a7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a7d2:	9305      	str	r3, [sp, #20]
1000a7d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000a7d6:	9304      	str	r3, [sp, #16]
1000a7d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a7da:	9303      	str	r3, [sp, #12]
1000a7dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
1000a7de:	9302      	str	r3, [sp, #8]
1000a7e0:	2300      	movs	r3, #0
1000a7e2:	9301      	str	r3, [sp, #4]
1000a7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000a7e6:	9300      	str	r3, [sp, #0]
1000a7e8:	0023      	movs	r3, r4
1000a7ea:	f7fe ff5c 	bl	100096a6 <_ntoa_long>
1000a7ee:	0003      	movs	r3, r0
1000a7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    }
                }
                format++;
1000a7f2:	69bb      	ldr	r3, [r7, #24]
1000a7f4:	3301      	adds	r3, #1
1000a7f6:	61bb      	str	r3, [r7, #24]
                break;
1000a7f8:	e17c      	b.n	1000aaf4 <_vsnprintf+0x86c>
            }
            case 'f' :
            case 'F' :
#if PICO_PRINTF_SUPPORT_FLOAT
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
1000a7fa:	69bb      	ldr	r3, [r7, #24]
1000a7fc:	781b      	ldrb	r3, [r3, #0]
1000a7fe:	2b46      	cmp	r3, #70	; 0x46
1000a800:	d103      	bne.n	1000a80a <_vsnprintf+0x582>
1000a802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a804:	2220      	movs	r2, #32
1000a806:	4313      	orrs	r3, r2
1000a808:	66fb      	str	r3, [r7, #108]	; 0x6c
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
1000a80a:	2388      	movs	r3, #136	; 0x88
1000a80c:	18fb      	adds	r3, r7, r3
1000a80e:	681b      	ldr	r3, [r3, #0]
1000a810:	3307      	adds	r3, #7
1000a812:	2207      	movs	r2, #7
1000a814:	4393      	bics	r3, r2
1000a816:	001a      	movs	r2, r3
1000a818:	3208      	adds	r2, #8
1000a81a:	2188      	movs	r1, #136	; 0x88
1000a81c:	1879      	adds	r1, r7, r1
1000a81e:	600a      	str	r2, [r1, #0]
1000a820:	681a      	ldr	r2, [r3, #0]
1000a822:	685b      	ldr	r3, [r3, #4]
1000a824:	69fe      	ldr	r6, [r7, #28]
1000a826:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
1000a828:	6a3c      	ldr	r4, [r7, #32]
1000a82a:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a82c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
1000a82e:	9104      	str	r1, [sp, #16]
1000a830:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1000a832:	9103      	str	r1, [sp, #12]
1000a834:	6e79      	ldr	r1, [r7, #100]	; 0x64
1000a836:	9102      	str	r1, [sp, #8]
1000a838:	9200      	str	r2, [sp, #0]
1000a83a:	9301      	str	r3, [sp, #4]
1000a83c:	0033      	movs	r3, r6
1000a83e:	002a      	movs	r2, r5
1000a840:	0021      	movs	r1, r4
1000a842:	f7ff f80d 	bl	10009860 <_ftoa>
1000a846:	0003      	movs	r3, r0
1000a848:	65fb      	str	r3, [r7, #92]	; 0x5c
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
1000a84a:	69bb      	ldr	r3, [r7, #24]
1000a84c:	3301      	adds	r3, #1
1000a84e:	61bb      	str	r3, [r7, #24]
                break;
1000a850:	e150      	b.n	1000aaf4 <_vsnprintf+0x86c>
            case 'e':
            case 'E':
            case 'g':
            case 'G':
#if PICO_PRINTF_SUPPORT_FLOAT && PICO_PRINTF_SUPPORT_EXPONENTIAL
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
1000a852:	69bb      	ldr	r3, [r7, #24]
1000a854:	781b      	ldrb	r3, [r3, #0]
1000a856:	2b67      	cmp	r3, #103	; 0x67
1000a858:	d003      	beq.n	1000a862 <_vsnprintf+0x5da>
1000a85a:	69bb      	ldr	r3, [r7, #24]
1000a85c:	781b      	ldrb	r3, [r3, #0]
1000a85e:	2b47      	cmp	r3, #71	; 0x47
1000a860:	d104      	bne.n	1000a86c <_vsnprintf+0x5e4>
1000a862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a864:	2280      	movs	r2, #128	; 0x80
1000a866:	0112      	lsls	r2, r2, #4
1000a868:	4313      	orrs	r3, r2
1000a86a:	66fb      	str	r3, [r7, #108]	; 0x6c
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
1000a86c:	69bb      	ldr	r3, [r7, #24]
1000a86e:	781b      	ldrb	r3, [r3, #0]
1000a870:	2b45      	cmp	r3, #69	; 0x45
1000a872:	d003      	beq.n	1000a87c <_vsnprintf+0x5f4>
1000a874:	69bb      	ldr	r3, [r7, #24]
1000a876:	781b      	ldrb	r3, [r3, #0]
1000a878:	2b47      	cmp	r3, #71	; 0x47
1000a87a:	d103      	bne.n	1000a884 <_vsnprintf+0x5fc>
1000a87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a87e:	2220      	movs	r2, #32
1000a880:	4313      	orrs	r3, r2
1000a882:	66fb      	str	r3, [r7, #108]	; 0x6c
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
1000a884:	2388      	movs	r3, #136	; 0x88
1000a886:	18fb      	adds	r3, r7, r3
1000a888:	681b      	ldr	r3, [r3, #0]
1000a88a:	3307      	adds	r3, #7
1000a88c:	2207      	movs	r2, #7
1000a88e:	4393      	bics	r3, r2
1000a890:	001a      	movs	r2, r3
1000a892:	3208      	adds	r2, #8
1000a894:	2188      	movs	r1, #136	; 0x88
1000a896:	1879      	adds	r1, r7, r1
1000a898:	600a      	str	r2, [r1, #0]
1000a89a:	681a      	ldr	r2, [r3, #0]
1000a89c:	685b      	ldr	r3, [r3, #4]
1000a89e:	69fe      	ldr	r6, [r7, #28]
1000a8a0:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
1000a8a2:	6a3c      	ldr	r4, [r7, #32]
1000a8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000a8a6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
1000a8a8:	9104      	str	r1, [sp, #16]
1000a8aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
1000a8ac:	9103      	str	r1, [sp, #12]
1000a8ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
1000a8b0:	9102      	str	r1, [sp, #8]
1000a8b2:	9200      	str	r2, [sp, #0]
1000a8b4:	9301      	str	r3, [sp, #4]
1000a8b6:	0033      	movs	r3, r6
1000a8b8:	002a      	movs	r2, r5
1000a8ba:	0021      	movs	r1, r4
1000a8bc:	f7ff fa1a 	bl	10009cf4 <_etoa>
1000a8c0:	0003      	movs	r3, r0
1000a8c2:	65fb      	str	r3, [r7, #92]	; 0x5c
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
1000a8c4:	69bb      	ldr	r3, [r7, #24]
1000a8c6:	3301      	adds	r3, #1
1000a8c8:	61bb      	str	r3, [r7, #24]
                break;
1000a8ca:	e113      	b.n	1000aaf4 <_vsnprintf+0x86c>
            case 'c' : {
                unsigned int l = 1U;
1000a8cc:	2301      	movs	r3, #1
1000a8ce:	657b      	str	r3, [r7, #84]	; 0x54
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
1000a8d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a8d2:	2202      	movs	r2, #2
1000a8d4:	4013      	ands	r3, r2
1000a8d6:	d10e      	bne.n	1000a8f6 <_vsnprintf+0x66e>
                    while (l++ < width) {
1000a8d8:	e007      	b.n	1000a8ea <_vsnprintf+0x662>
                        out(' ', buffer, idx++, maxlen);
1000a8da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a8dc:	1c53      	adds	r3, r2, #1
1000a8de:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a8e0:	69fb      	ldr	r3, [r7, #28]
1000a8e2:	6a39      	ldr	r1, [r7, #32]
1000a8e4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a8e6:	2020      	movs	r0, #32
1000a8e8:	47a0      	blx	r4
                    while (l++ < width) {
1000a8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000a8ec:	1c5a      	adds	r2, r3, #1
1000a8ee:	657a      	str	r2, [r7, #84]	; 0x54
1000a8f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000a8f2:	429a      	cmp	r2, r3
1000a8f4:	d8f1      	bhi.n	1000a8da <_vsnprintf+0x652>
                    }
                }
                // char output
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000a8f6:	2388      	movs	r3, #136	; 0x88
1000a8f8:	18fb      	adds	r3, r7, r3
1000a8fa:	681b      	ldr	r3, [r3, #0]
1000a8fc:	1d1a      	adds	r2, r3, #4
1000a8fe:	2188      	movs	r1, #136	; 0x88
1000a900:	1879      	adds	r1, r7, r1
1000a902:	600a      	str	r2, [r1, #0]
1000a904:	681b      	ldr	r3, [r3, #0]
1000a906:	b2d8      	uxtb	r0, r3
1000a908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a90a:	1c53      	adds	r3, r2, #1
1000a90c:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a90e:	69fb      	ldr	r3, [r7, #28]
1000a910:	6a39      	ldr	r1, [r7, #32]
1000a912:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a914:	47a0      	blx	r4
                // post padding
                if (flags & FLAGS_LEFT) {
1000a916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a918:	2202      	movs	r2, #2
1000a91a:	4013      	ands	r3, r2
1000a91c:	d00e      	beq.n	1000a93c <_vsnprintf+0x6b4>
                    while (l++ < width) {
1000a91e:	e007      	b.n	1000a930 <_vsnprintf+0x6a8>
                        out(' ', buffer, idx++, maxlen);
1000a920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a922:	1c53      	adds	r3, r2, #1
1000a924:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a926:	69fb      	ldr	r3, [r7, #28]
1000a928:	6a39      	ldr	r1, [r7, #32]
1000a92a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a92c:	2020      	movs	r0, #32
1000a92e:	47a0      	blx	r4
                    while (l++ < width) {
1000a930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
1000a932:	1c5a      	adds	r2, r3, #1
1000a934:	657a      	str	r2, [r7, #84]	; 0x54
1000a936:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000a938:	429a      	cmp	r2, r3
1000a93a:	d8f1      	bhi.n	1000a920 <_vsnprintf+0x698>
                    }
                }
                format++;
1000a93c:	69bb      	ldr	r3, [r7, #24]
1000a93e:	3301      	adds	r3, #1
1000a940:	61bb      	str	r3, [r7, #24]
                break;
1000a942:	e0d7      	b.n	1000aaf4 <_vsnprintf+0x86c>
            }

            case 's' : {
                const char *p = va_arg(va, char*);
1000a944:	2388      	movs	r3, #136	; 0x88
1000a946:	18fb      	adds	r3, r7, r3
1000a948:	681b      	ldr	r3, [r3, #0]
1000a94a:	1d1a      	adds	r2, r3, #4
1000a94c:	2188      	movs	r1, #136	; 0x88
1000a94e:	1879      	adds	r1, r7, r1
1000a950:	600a      	str	r2, [r1, #0]
1000a952:	681b      	ldr	r3, [r3, #0]
1000a954:	653b      	str	r3, [r7, #80]	; 0x50
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
1000a956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a958:	2b00      	cmp	r3, #0
1000a95a:	d001      	beq.n	1000a960 <_vsnprintf+0x6d8>
1000a95c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a95e:	e001      	b.n	1000a964 <_vsnprintf+0x6dc>
1000a960:	2301      	movs	r3, #1
1000a962:	425b      	negs	r3, r3
1000a964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
1000a966:	0019      	movs	r1, r3
1000a968:	0010      	movs	r0, r2
1000a96a:	f7fe fd22 	bl	100093b2 <_strnlen_s>
1000a96e:	0003      	movs	r3, r0
1000a970:	64fb      	str	r3, [r7, #76]	; 0x4c
                // pre padding
                if (flags & FLAGS_PRECISION) {
1000a972:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a974:	2380      	movs	r3, #128	; 0x80
1000a976:	00db      	lsls	r3, r3, #3
1000a978:	4013      	ands	r3, r2
1000a97a:	d005      	beq.n	1000a988 <_vsnprintf+0x700>
                    l = (l < precision ? l : precision);
1000a97c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000a97e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a980:	4293      	cmp	r3, r2
1000a982:	d900      	bls.n	1000a986 <_vsnprintf+0x6fe>
1000a984:	0013      	movs	r3, r2
1000a986:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                if (!(flags & FLAGS_LEFT)) {
1000a988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a98a:	2202      	movs	r2, #2
1000a98c:	4013      	ands	r3, r2
1000a98e:	d11a      	bne.n	1000a9c6 <_vsnprintf+0x73e>
                    while (l++ < width) {
1000a990:	e007      	b.n	1000a9a2 <_vsnprintf+0x71a>
                        out(' ', buffer, idx++, maxlen);
1000a992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a994:	1c53      	adds	r3, r2, #1
1000a996:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a998:	69fb      	ldr	r3, [r7, #28]
1000a99a:	6a39      	ldr	r1, [r7, #32]
1000a99c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a99e:	2020      	movs	r0, #32
1000a9a0:	47a0      	blx	r4
                    while (l++ < width) {
1000a9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000a9a4:	1c5a      	adds	r2, r3, #1
1000a9a6:	64fa      	str	r2, [r7, #76]	; 0x4c
1000a9a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000a9aa:	429a      	cmp	r2, r3
1000a9ac:	d8f1      	bhi.n	1000a992 <_vsnprintf+0x70a>
                    }
                }
                // string output
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000a9ae:	e00a      	b.n	1000a9c6 <_vsnprintf+0x73e>
                    out(*(p++), buffer, idx++, maxlen);
1000a9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000a9b2:	1c5a      	adds	r2, r3, #1
1000a9b4:	653a      	str	r2, [r7, #80]	; 0x50
1000a9b6:	7818      	ldrb	r0, [r3, #0]
1000a9b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a9ba:	1c53      	adds	r3, r2, #1
1000a9bc:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a9be:	69fb      	ldr	r3, [r7, #28]
1000a9c0:	6a39      	ldr	r1, [r7, #32]
1000a9c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a9c4:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000a9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
1000a9c8:	781b      	ldrb	r3, [r3, #0]
1000a9ca:	2b00      	cmp	r3, #0
1000a9cc:	d009      	beq.n	1000a9e2 <_vsnprintf+0x75a>
1000a9ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
1000a9d0:	2380      	movs	r3, #128	; 0x80
1000a9d2:	00db      	lsls	r3, r3, #3
1000a9d4:	4013      	ands	r3, r2
1000a9d6:	d0eb      	beq.n	1000a9b0 <_vsnprintf+0x728>
1000a9d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000a9da:	1e5a      	subs	r2, r3, #1
1000a9dc:	667a      	str	r2, [r7, #100]	; 0x64
1000a9de:	2b00      	cmp	r3, #0
1000a9e0:	d1e6      	bne.n	1000a9b0 <_vsnprintf+0x728>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
1000a9e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000a9e4:	2202      	movs	r2, #2
1000a9e6:	4013      	ands	r3, r2
1000a9e8:	d00e      	beq.n	1000aa08 <_vsnprintf+0x780>
                    while (l++ < width) {
1000a9ea:	e007      	b.n	1000a9fc <_vsnprintf+0x774>
                        out(' ', buffer, idx++, maxlen);
1000a9ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000a9ee:	1c53      	adds	r3, r2, #1
1000a9f0:	65fb      	str	r3, [r7, #92]	; 0x5c
1000a9f2:	69fb      	ldr	r3, [r7, #28]
1000a9f4:	6a39      	ldr	r1, [r7, #32]
1000a9f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000a9f8:	2020      	movs	r0, #32
1000a9fa:	47a0      	blx	r4
                    while (l++ < width) {
1000a9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1000a9fe:	1c5a      	adds	r2, r3, #1
1000aa00:	64fa      	str	r2, [r7, #76]	; 0x4c
1000aa02:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000aa04:	429a      	cmp	r2, r3
1000aa06:	d8f1      	bhi.n	1000a9ec <_vsnprintf+0x764>
                    }
                }
                format++;
1000aa08:	69bb      	ldr	r3, [r7, #24]
1000aa0a:	3301      	adds	r3, #1
1000aa0c:	61bb      	str	r3, [r7, #24]
                break;
1000aa0e:	e071      	b.n	1000aaf4 <_vsnprintf+0x86c>
            }

            case 'p' : {
                width = sizeof(void *) * 2U;
1000aa10:	2308      	movs	r3, #8
1000aa12:	66bb      	str	r3, [r7, #104]	; 0x68
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
1000aa14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000aa16:	2221      	movs	r2, #33	; 0x21
1000aa18:	4313      	orrs	r3, r2
1000aa1a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if PICO_PRINTF_SUPPORT_LONG_LONG
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
1000aa1c:	212b      	movs	r1, #43	; 0x2b
1000aa1e:	2318      	movs	r3, #24
1000aa20:	18cb      	adds	r3, r1, r3
1000aa22:	19db      	adds	r3, r3, r7
1000aa24:	2200      	movs	r2, #0
1000aa26:	701a      	strb	r2, [r3, #0]
                if (is_ll) {
1000aa28:	2318      	movs	r3, #24
1000aa2a:	18cb      	adds	r3, r1, r3
1000aa2c:	19db      	adds	r3, r3, r7
1000aa2e:	781b      	ldrb	r3, [r3, #0]
1000aa30:	2b00      	cmp	r3, #0
1000aa32:	d025      	beq.n	1000aa80 <_vsnprintf+0x7f8>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t) va_arg(va, void*), false, 16U,
1000aa34:	2388      	movs	r3, #136	; 0x88
1000aa36:	18fb      	adds	r3, r7, r3
1000aa38:	681b      	ldr	r3, [r3, #0]
1000aa3a:	1d1a      	adds	r2, r3, #4
1000aa3c:	2188      	movs	r1, #136	; 0x88
1000aa3e:	1879      	adds	r1, r7, r1
1000aa40:	600a      	str	r2, [r1, #0]
1000aa42:	681b      	ldr	r3, [r3, #0]
1000aa44:	603b      	str	r3, [r7, #0]
1000aa46:	2300      	movs	r3, #0
1000aa48:	607b      	str	r3, [r7, #4]
1000aa4a:	69fd      	ldr	r5, [r7, #28]
1000aa4c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
1000aa4e:	6a39      	ldr	r1, [r7, #32]
1000aa50:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000aa52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000aa54:	9308      	str	r3, [sp, #32]
1000aa56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000aa58:	9307      	str	r3, [sp, #28]
1000aa5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000aa5c:	9306      	str	r3, [sp, #24]
1000aa5e:	2210      	movs	r2, #16
1000aa60:	2300      	movs	r3, #0
1000aa62:	9204      	str	r2, [sp, #16]
1000aa64:	9305      	str	r3, [sp, #20]
1000aa66:	2300      	movs	r3, #0
1000aa68:	9302      	str	r3, [sp, #8]
1000aa6a:	683a      	ldr	r2, [r7, #0]
1000aa6c:	687b      	ldr	r3, [r7, #4]
1000aa6e:	9200      	str	r2, [sp, #0]
1000aa70:	9301      	str	r3, [sp, #4]
1000aa72:	002b      	movs	r3, r5
1000aa74:	0022      	movs	r2, r4
1000aa76:	f7fe fe7f 	bl	10009778 <_ntoa_long_long>
1000aa7a:	0003      	movs	r3, r0
1000aa7c:	65fb      	str	r3, [r7, #92]	; 0x5c
1000aa7e:	e01c      	b.n	1000aaba <_vsnprintf+0x832>
                                          precision, width, flags);
                } else {
#endif
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
1000aa80:	2388      	movs	r3, #136	; 0x88
1000aa82:	18fb      	adds	r3, r7, r3
1000aa84:	681b      	ldr	r3, [r3, #0]
1000aa86:	1d1a      	adds	r2, r3, #4
1000aa88:	2188      	movs	r1, #136	; 0x88
1000aa8a:	1879      	adds	r1, r7, r1
1000aa8c:	600a      	str	r2, [r1, #0]
1000aa8e:	681b      	ldr	r3, [r3, #0]
1000aa90:	001d      	movs	r5, r3
1000aa92:	69fc      	ldr	r4, [r7, #28]
1000aa94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000aa96:	6a39      	ldr	r1, [r7, #32]
1000aa98:	6a78      	ldr	r0, [r7, #36]	; 0x24
1000aa9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000aa9c:	9305      	str	r3, [sp, #20]
1000aa9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
1000aaa0:	9304      	str	r3, [sp, #16]
1000aaa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
1000aaa4:	9303      	str	r3, [sp, #12]
1000aaa6:	2310      	movs	r3, #16
1000aaa8:	9302      	str	r3, [sp, #8]
1000aaaa:	2300      	movs	r3, #0
1000aaac:	9301      	str	r3, [sp, #4]
1000aaae:	9500      	str	r5, [sp, #0]
1000aab0:	0023      	movs	r3, r4
1000aab2:	f7fe fdf8 	bl	100096a6 <_ntoa_long>
1000aab6:	0003      	movs	r3, r0
1000aab8:	65fb      	str	r3, [r7, #92]	; 0x5c
                                     16U, precision, width, flags);
#if PICO_PRINTF_SUPPORT_LONG_LONG
                }
#endif
                format++;
1000aaba:	69bb      	ldr	r3, [r7, #24]
1000aabc:	3301      	adds	r3, #1
1000aabe:	61bb      	str	r3, [r7, #24]
                break;
1000aac0:	e018      	b.n	1000aaf4 <_vsnprintf+0x86c>
            }

            case '%' :
                out('%', buffer, idx++, maxlen);
1000aac2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000aac4:	1c53      	adds	r3, r2, #1
1000aac6:	65fb      	str	r3, [r7, #92]	; 0x5c
1000aac8:	69fb      	ldr	r3, [r7, #28]
1000aaca:	6a39      	ldr	r1, [r7, #32]
1000aacc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000aace:	2025      	movs	r0, #37	; 0x25
1000aad0:	47a0      	blx	r4
                format++;
1000aad2:	69bb      	ldr	r3, [r7, #24]
1000aad4:	3301      	adds	r3, #1
1000aad6:	61bb      	str	r3, [r7, #24]
                break;
1000aad8:	e00c      	b.n	1000aaf4 <_vsnprintf+0x86c>

            default :
                out(*format, buffer, idx++, maxlen);
1000aada:	69bb      	ldr	r3, [r7, #24]
1000aadc:	7818      	ldrb	r0, [r3, #0]
1000aade:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000aae0:	1c53      	adds	r3, r2, #1
1000aae2:	65fb      	str	r3, [r7, #92]	; 0x5c
1000aae4:	69fb      	ldr	r3, [r7, #28]
1000aae6:	6a39      	ldr	r1, [r7, #32]
1000aae8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000aaea:	47a0      	blx	r4
                format++;
1000aaec:	69bb      	ldr	r3, [r7, #24]
1000aaee:	3301      	adds	r3, #1
1000aaf0:	61bb      	str	r3, [r7, #24]
                break;
1000aaf2:	46c0      	nop			; (mov r8, r8)
    while (*format) {
1000aaf4:	69bb      	ldr	r3, [r7, #24]
1000aaf6:	781b      	ldrb	r3, [r3, #0]
1000aaf8:	2b00      	cmp	r3, #0
1000aafa:	d001      	beq.n	1000ab00 <_vsnprintf+0x878>
1000aafc:	f7ff fbd8 	bl	1000a2b0 <_vsnprintf+0x28>
        }
    }

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
1000ab00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000ab02:	69fb      	ldr	r3, [r7, #28]
1000ab04:	429a      	cmp	r2, r3
1000ab06:	d302      	bcc.n	1000ab0e <_vsnprintf+0x886>
1000ab08:	69fb      	ldr	r3, [r7, #28]
1000ab0a:	1e5a      	subs	r2, r3, #1
1000ab0c:	e000      	b.n	1000ab10 <_vsnprintf+0x888>
1000ab0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000ab10:	69fb      	ldr	r3, [r7, #28]
1000ab12:	6a39      	ldr	r1, [r7, #32]
1000ab14:	6a7c      	ldr	r4, [r7, #36]	; 0x24
1000ab16:	2000      	movs	r0, #0
1000ab18:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int) idx;
1000ab1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
1000ab1c:	0018      	movs	r0, r3
1000ab1e:	46bd      	mov	sp, r7
1000ab20:	b01c      	add	sp, #112	; 0x70
1000ab22:	bc80      	pop	{r7}
1000ab24:	46b8      	mov	r8, r7
1000ab26:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000ab28 <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
1000ab28:	b590      	push	{r4, r7, lr}
1000ab2a:	b089      	sub	sp, #36	; 0x24
1000ab2c:	af02      	add	r7, sp, #8
1000ab2e:	60f8      	str	r0, [r7, #12]
1000ab30:	60b9      	str	r1, [r7, #8]
1000ab32:	607a      	str	r2, [r7, #4]
1000ab34:	603b      	str	r3, [r7, #0]
    const out_fct_wrap_type out_fct_wrap = {out, arg};
1000ab36:	2110      	movs	r1, #16
1000ab38:	187b      	adds	r3, r7, r1
1000ab3a:	68fa      	ldr	r2, [r7, #12]
1000ab3c:	601a      	str	r2, [r3, #0]
1000ab3e:	187b      	adds	r3, r7, r1
1000ab40:	68ba      	ldr	r2, [r7, #8]
1000ab42:	605a      	str	r2, [r3, #4]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
1000ab44:	687c      	ldr	r4, [r7, #4]
1000ab46:	2301      	movs	r3, #1
1000ab48:	425a      	negs	r2, r3
1000ab4a:	1879      	adds	r1, r7, r1
1000ab4c:	4805      	ldr	r0, [pc, #20]	; (1000ab64 <vfctprintf+0x3c>)
1000ab4e:	683b      	ldr	r3, [r7, #0]
1000ab50:	9300      	str	r3, [sp, #0]
1000ab52:	0023      	movs	r3, r4
1000ab54:	f7ff fb98 	bl	1000a288 <_vsnprintf>
1000ab58:	0003      	movs	r3, r0
}
1000ab5a:	0018      	movs	r0, r3
1000ab5c:	46bd      	mov	sp, r7
1000ab5e:	b007      	add	sp, #28
1000ab60:	bd90      	pop	{r4, r7, pc}
1000ab62:	46c0      	nop			; (mov r8, r8)
1000ab64:	1000937d 	.word	0x1000937d

1000ab68 <__breakpoint>:
static inline void __breakpoint(void) {
1000ab68:	b580      	push	{r7, lr}
1000ab6a:	af00      	add	r7, sp, #0
    __asm__("bkpt #0");
1000ab6c:	be00      	bkpt	0x0000
}
1000ab6e:	46c0      	nop			; (mov r8, r8)
1000ab70:	46bd      	mov	sp, r7
1000ab72:	bd80      	pop	{r7, pc}

1000ab74 <reset_block>:
static inline void reset_block(uint32_t bits) {
1000ab74:	b580      	push	{r7, lr}
1000ab76:	b084      	sub	sp, #16
1000ab78:	af00      	add	r7, sp, #0
1000ab7a:	6078      	str	r0, [r7, #4]
1000ab7c:	4b07      	ldr	r3, [pc, #28]	; (1000ab9c <reset_block+0x28>)
1000ab7e:	60fb      	str	r3, [r7, #12]
1000ab80:	687b      	ldr	r3, [r7, #4]
1000ab82:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000ab84:	68fb      	ldr	r3, [r7, #12]
1000ab86:	2280      	movs	r2, #128	; 0x80
1000ab88:	0192      	lsls	r2, r2, #6
1000ab8a:	4313      	orrs	r3, r2
1000ab8c:	68ba      	ldr	r2, [r7, #8]
1000ab8e:	601a      	str	r2, [r3, #0]
}
1000ab90:	46c0      	nop			; (mov r8, r8)
}
1000ab92:	46c0      	nop			; (mov r8, r8)
1000ab94:	46bd      	mov	sp, r7
1000ab96:	b004      	add	sp, #16
1000ab98:	bd80      	pop	{r7, pc}
1000ab9a:	46c0      	nop			; (mov r8, r8)
1000ab9c:	4000c000 	.word	0x4000c000

1000aba0 <unreset_block_wait>:
static inline void unreset_block_wait(uint32_t bits) {
1000aba0:	b580      	push	{r7, lr}
1000aba2:	b084      	sub	sp, #16
1000aba4:	af00      	add	r7, sp, #0
1000aba6:	6078      	str	r0, [r7, #4]
1000aba8:	4b0b      	ldr	r3, [pc, #44]	; (1000abd8 <unreset_block_wait+0x38>)
1000abaa:	60fb      	str	r3, [r7, #12]
1000abac:	687b      	ldr	r3, [r7, #4]
1000abae:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000abb0:	68fb      	ldr	r3, [r7, #12]
1000abb2:	22c0      	movs	r2, #192	; 0xc0
1000abb4:	0192      	lsls	r2, r2, #6
1000abb6:	4313      	orrs	r3, r2
1000abb8:	68ba      	ldr	r2, [r7, #8]
1000abba:	601a      	str	r2, [r3, #0]
}
1000abbc:	46c0      	nop			; (mov r8, r8)
    while (~resets_hw->reset_done & bits)
1000abbe:	e000      	b.n	1000abc2 <unreset_block_wait+0x22>
static __force_inline void tight_loop_contents(void) {}
1000abc0:	46c0      	nop			; (mov r8, r8)
1000abc2:	4b05      	ldr	r3, [pc, #20]	; (1000abd8 <unreset_block_wait+0x38>)
1000abc4:	689b      	ldr	r3, [r3, #8]
1000abc6:	43db      	mvns	r3, r3
1000abc8:	687a      	ldr	r2, [r7, #4]
1000abca:	4013      	ands	r3, r2
1000abcc:	d1f8      	bne.n	1000abc0 <unreset_block_wait+0x20>
}
1000abce:	46c0      	nop			; (mov r8, r8)
1000abd0:	46c0      	nop			; (mov r8, r8)
1000abd2:	46bd      	mov	sp, r7
1000abd4:	b004      	add	sp, #16
1000abd6:	bd80      	pop	{r7, pc}
1000abd8:	4000c000 	.word	0x4000c000

1000abdc <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
1000abdc:	b580      	push	{r7, lr}
1000abde:	b086      	sub	sp, #24
1000abe0:	af00      	add	r7, sp, #0
    // Reset all peripherals to put system into a known state,
    // - except for QSPI pads and the XIP IO bank, as this is fatal if running from flash
    // - and the PLLs, as this is fatal if clock muxing has not been reset on this boot
    // - and USB, syscfg, as this disturbs USB-to-SWD on core 1
    reset_block(~(
1000abe2:	4b3b      	ldr	r3, [pc, #236]	; (1000acd0 <runtime_init+0xf4>)
1000abe4:	0018      	movs	r0, r3
1000abe6:	f7ff ffc5 	bl	1000ab74 <reset_block>
            RESETS_RESET_PLL_SYS_BITS
    ));

    // Remove reset from peripherals which are clocked only by clk_sys and
    // clk_ref. Other peripherals stay in reset until we've configured clocks.
    unreset_block_wait(RESETS_RESET_BITS & ~(
1000abea:	4b3a      	ldr	r3, [pc, #232]	; (1000acd4 <runtime_init+0xf8>)
1000abec:	0018      	movs	r0, r3
1000abee:	f7ff ffd7 	bl	1000aba0 <unreset_block_wait>
    extern void (*__preinit_array_end)(void);

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)(void) = &__preinit_array_start; p < &__preinit_array_end; ++p) {
1000abf2:	4b39      	ldr	r3, [pc, #228]	; (1000acd8 <runtime_init+0xfc>)
1000abf4:	617b      	str	r3, [r7, #20]
1000abf6:	e005      	b.n	1000ac04 <runtime_init+0x28>
        (*p)();
1000abf8:	697b      	ldr	r3, [r7, #20]
1000abfa:	681b      	ldr	r3, [r3, #0]
1000abfc:	4798      	blx	r3
    for (void (**p)(void) = &__preinit_array_start; p < &__preinit_array_end; ++p) {
1000abfe:	697b      	ldr	r3, [r7, #20]
1000ac00:	3304      	adds	r3, #4
1000ac02:	617b      	str	r3, [r7, #20]
1000ac04:	697a      	ldr	r2, [r7, #20]
1000ac06:	4b35      	ldr	r3, [pc, #212]	; (1000acdc <runtime_init+0x100>)
1000ac08:	429a      	cmp	r2, r3
1000ac0a:	d3f5      	bcc.n	1000abf8 <runtime_init+0x1c>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
1000ac0c:	f7fc fa68 	bl	100070e0 <clocks_init>

    // Peripheral clocks should now all be running
    unreset_block_wait(RESETS_RESET_BITS);
1000ac10:	4b33      	ldr	r3, [pc, #204]	; (1000ace0 <runtime_init+0x104>)
1000ac12:	0018      	movs	r0, r3
1000ac14:	f7ff ffc4 	bl	1000aba0 <unreset_block_wait>

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
1000ac18:	4a32      	ldr	r2, [pc, #200]	; (1000ace4 <runtime_init+0x108>)
1000ac1a:	2340      	movs	r3, #64	; 0x40
1000ac1c:	6793      	str	r3, [r2, #120]	; 0x78
1000ac1e:	4a31      	ldr	r2, [pc, #196]	; (1000ace4 <runtime_init+0x108>)
1000ac20:	6753      	str	r3, [r2, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
1000ac22:	4a30      	ldr	r2, [pc, #192]	; (1000ace4 <runtime_init+0x108>)
1000ac24:	6713      	str	r3, [r2, #112]	; 0x70
1000ac26:	4a2f      	ldr	r2, [pc, #188]	; (1000ace4 <runtime_init+0x108>)
1000ac28:	66d3      	str	r3, [r2, #108]	; 0x6c
    static_assert(!offsetof(mutex_t, core), "");
    static_assert(!offsetof(recursive_mutex_t, core), "");
    extern lock_core_t __mutex_array_start;
    extern lock_core_t __mutex_array_end;

    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
1000ac2a:	4b2f      	ldr	r3, [pc, #188]	; (1000ace8 <runtime_init+0x10c>)
1000ac2c:	613b      	str	r3, [r7, #16]
1000ac2e:	e020      	b.n	1000ac72 <runtime_init+0x96>
        if (l->spin_lock) {
1000ac30:	693b      	ldr	r3, [r7, #16]
1000ac32:	681b      	ldr	r3, [r3, #0]
1000ac34:	2b00      	cmp	r3, #0
1000ac36:	d013      	beq.n	1000ac60 <runtime_init+0x84>
            assert(1 == (uintptr_t)l->spin_lock); // indicator for a recursive mutex
1000ac38:	693b      	ldr	r3, [r7, #16]
1000ac3a:	681b      	ldr	r3, [r3, #0]
1000ac3c:	2b01      	cmp	r3, #1
1000ac3e:	d005      	beq.n	1000ac4c <runtime_init+0x70>
1000ac40:	4b2a      	ldr	r3, [pc, #168]	; (1000acec <runtime_init+0x110>)
1000ac42:	4a2b      	ldr	r2, [pc, #172]	; (1000acf0 <runtime_init+0x114>)
1000ac44:	482b      	ldr	r0, [pc, #172]	; (1000acf4 <runtime_init+0x118>)
1000ac46:	2183      	movs	r1, #131	; 0x83
1000ac48:	f000 f870 	bl	1000ad2c <__assert_func>
            recursive_mutex_t *rm = (recursive_mutex_t *)l;
1000ac4c:	693b      	ldr	r3, [r7, #16]
1000ac4e:	607b      	str	r3, [r7, #4]
            recursive_mutex_init(rm);
1000ac50:	687b      	ldr	r3, [r7, #4]
1000ac52:	0018      	movs	r0, r3
1000ac54:	f7fa fccc 	bl	100055f0 <recursive_mutex_init>
            l = &rm[1].core; // next
1000ac58:	687b      	ldr	r3, [r7, #4]
1000ac5a:	3308      	adds	r3, #8
1000ac5c:	613b      	str	r3, [r7, #16]
1000ac5e:	e008      	b.n	1000ac72 <runtime_init+0x96>
        } else {
            mutex_t *m = (mutex_t *)l;
1000ac60:	693b      	ldr	r3, [r7, #16]
1000ac62:	60bb      	str	r3, [r7, #8]
            mutex_init(m);
1000ac64:	68bb      	ldr	r3, [r7, #8]
1000ac66:	0018      	movs	r0, r3
1000ac68:	f7fa fcab 	bl	100055c2 <mutex_init>
            l = &m[1].core; // next
1000ac6c:	68bb      	ldr	r3, [r7, #8]
1000ac6e:	3308      	adds	r3, #8
1000ac70:	613b      	str	r3, [r7, #16]
    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
1000ac72:	693a      	ldr	r2, [r7, #16]
1000ac74:	4b20      	ldr	r3, [pc, #128]	; (1000acf8 <runtime_init+0x11c>)
1000ac76:	429a      	cmp	r2, r3
1000ac78:	d3da      	bcc.n	1000ac30 <runtime_init+0x54>
        }
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
1000ac7a:	4b20      	ldr	r3, [pc, #128]	; (1000acfc <runtime_init+0x120>)
1000ac7c:	689b      	ldr	r3, [r3, #8]
1000ac7e:	001a      	movs	r2, r3
1000ac80:	4b1f      	ldr	r3, [pc, #124]	; (1000ad00 <runtime_init+0x124>)
1000ac82:	0018      	movs	r0, r3
1000ac84:	0011      	movs	r1, r2
1000ac86:	23c0      	movs	r3, #192	; 0xc0
1000ac88:	001a      	movs	r2, r3
1000ac8a:	f002 f96b 	bl	1000cf64 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (uintptr_t) ram_vector_table;
1000ac8e:	4b1b      	ldr	r3, [pc, #108]	; (1000acfc <runtime_init+0x120>)
1000ac90:	4a1b      	ldr	r2, [pc, #108]	; (1000ad00 <runtime_init+0x124>)
1000ac92:	609a      	str	r2, [r3, #8]
#endif

#ifndef NDEBUG
    if (__get_current_exception()) {
1000ac94:	f7f5 faff 	bl	10000296 <__get_current_exception>
1000ac98:	1e03      	subs	r3, r0, #0
1000ac9a:	d000      	beq.n	1000ac9e <runtime_init+0xc2>
        // crap; started in exception handler
        __asm ("bkpt #0");
1000ac9c:	be00      	bkpt	0x0000
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
1000ac9e:	f7fd fce5 	bl	1000866c <spin_locks_reset>
    irq_init_priorities();
1000aca2:	f7fc ff93 	bl	10007bcc <irq_init_priorities>
    alarm_pool_init_default();
1000aca6:	f7fb f809 	bl	10005cbc <alarm_pool_init_default>
    extern void (*__init_array_end)(void);

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
1000acaa:	4b16      	ldr	r3, [pc, #88]	; (1000ad04 <runtime_init+0x128>)
1000acac:	60fb      	str	r3, [r7, #12]
1000acae:	e005      	b.n	1000acbc <runtime_init+0xe0>
        (*p)();
1000acb0:	68fb      	ldr	r3, [r7, #12]
1000acb2:	681b      	ldr	r3, [r3, #0]
1000acb4:	4798      	blx	r3
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
1000acb6:	68fb      	ldr	r3, [r7, #12]
1000acb8:	3304      	adds	r3, #4
1000acba:	60fb      	str	r3, [r7, #12]
1000acbc:	68fa      	ldr	r2, [r7, #12]
1000acbe:	4b12      	ldr	r3, [pc, #72]	; (1000ad08 <runtime_init+0x12c>)
1000acc0:	429a      	cmp	r2, r3
1000acc2:	d3f5      	bcc.n	1000acb0 <runtime_init+0xd4>
    }

}
1000acc4:	46c0      	nop			; (mov r8, r8)
1000acc6:	46c0      	nop			; (mov r8, r8)
1000acc8:	46bd      	mov	sp, r7
1000acca:	b006      	add	sp, #24
1000accc:	bd80      	pop	{r7, pc}
1000acce:	46c0      	nop			; (mov r8, r8)
1000acd0:	fefbcdbf 	.word	0xfefbcdbf
1000acd4:	003c7ffe 	.word	0x003c7ffe
1000acd8:	20000738 	.word	0x20000738
1000acdc:	20000748 	.word	0x20000748
1000ace0:	01ffffff 	.word	0x01ffffff
1000ace4:	4001f000 	.word	0x4001f000
1000ace8:	20000730 	.word	0x20000730
1000acec:	1000ebb8 	.word	0x1000ebb8
1000acf0:	1000eca4 	.word	0x1000eca4
1000acf4:	1000ebd8 	.word	0x1000ebd8
1000acf8:	20000738 	.word	0x20000738
1000acfc:	e000ed00 	.word	0xe000ed00
1000ad00:	20000000 	.word	0x20000000
1000ad04:	20000748 	.word	0x20000748
1000ad08:	20000750 	.word	0x20000750

1000ad0c <_exit>:

void __attribute__((noreturn)) _exit(__unused int status) {
1000ad0c:	b580      	push	{r7, lr}
1000ad0e:	b082      	sub	sp, #8
1000ad10:	af00      	add	r7, sp, #0
1000ad12:	6078      	str	r0, [r7, #4]
#if PICO_ENTER_USB_BOOT_ON_EXIT
    reset_usb_boot(0,0);
#else
    while (1) {
        __breakpoint();
1000ad14:	f7ff ff28 	bl	1000ab68 <__breakpoint>
1000ad18:	e7fc      	b.n	1000ad14 <_exit+0x8>

1000ad1a <exit>:
    heap_end = next_heap_end;
    return (void *) prev_heap_end;
}

// exit is not useful... no desire to pull in __call_exitprocs
void exit(int status) {
1000ad1a:	b580      	push	{r7, lr}
1000ad1c:	b082      	sub	sp, #8
1000ad1e:	af00      	add	r7, sp, #0
1000ad20:	6078      	str	r0, [r7, #4]
    _exit(status);
1000ad22:	687b      	ldr	r3, [r7, #4]
1000ad24:	0018      	movs	r0, r3
1000ad26:	f7ff fff1 	bl	1000ad0c <_exit>
	...

1000ad2c <__assert_func>:
}

// incorrect warning from GCC 6
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsuggest-attribute=format"
void __assert_func(const char *file, int line, const char *func, const char *failedexpr) {
1000ad2c:	b5b0      	push	{r4, r5, r7, lr}
1000ad2e:	b086      	sub	sp, #24
1000ad30:	af02      	add	r7, sp, #8
1000ad32:	60f8      	str	r0, [r7, #12]
1000ad34:	60b9      	str	r1, [r7, #8]
1000ad36:	607a      	str	r2, [r7, #4]
1000ad38:	603b      	str	r3, [r7, #0]
    weak_raw_printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
1000ad3a:	687b      	ldr	r3, [r7, #4]
1000ad3c:	2b00      	cmp	r3, #0
1000ad3e:	d001      	beq.n	1000ad44 <__assert_func+0x18>
1000ad40:	4b0a      	ldr	r3, [pc, #40]	; (1000ad6c <__assert_func+0x40>)
1000ad42:	e000      	b.n	1000ad46 <__assert_func+0x1a>
1000ad44:	4b0a      	ldr	r3, [pc, #40]	; (1000ad70 <__assert_func+0x44>)
1000ad46:	687a      	ldr	r2, [r7, #4]
1000ad48:	2a00      	cmp	r2, #0
1000ad4a:	d001      	beq.n	1000ad50 <__assert_func+0x24>
1000ad4c:	687a      	ldr	r2, [r7, #4]
1000ad4e:	e000      	b.n	1000ad52 <__assert_func+0x26>
1000ad50:	4a07      	ldr	r2, [pc, #28]	; (1000ad70 <__assert_func+0x44>)
1000ad52:	68bd      	ldr	r5, [r7, #8]
1000ad54:	68fc      	ldr	r4, [r7, #12]
1000ad56:	6839      	ldr	r1, [r7, #0]
1000ad58:	4806      	ldr	r0, [pc, #24]	; (1000ad74 <__assert_func+0x48>)
1000ad5a:	9201      	str	r2, [sp, #4]
1000ad5c:	9300      	str	r3, [sp, #0]
1000ad5e:	002b      	movs	r3, r5
1000ad60:	0022      	movs	r2, r4
1000ad62:	f000 fa3d 	bl	1000b1e0 <__wrap_printf>
           failedexpr, file, line, func ? ", function: " : "",
           func ? func : "");

    _exit(1);
1000ad66:	2001      	movs	r0, #1
1000ad68:	f7ff ffd0 	bl	1000ad0c <_exit>
1000ad6c:	1000ec30 	.word	0x1000ec30
1000ad70:	1000ec40 	.word	0x1000ec40
1000ad74:	1000ec44 	.word	0x1000ec44

1000ad78 <panic>:
// todo consider making this try harder to output if we panic early
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
1000ad78:	b40f      	push	{r0, r1, r2, r3}
1000ad7a:	b580      	push	{r7, lr}
1000ad7c:	b082      	sub	sp, #8
1000ad7e:	af00      	add	r7, sp, #0
    puts("\n*** PANIC ***\n");
1000ad80:	4b0b      	ldr	r3, [pc, #44]	; (1000adb0 <panic+0x38>)
1000ad82:	0018      	movs	r0, r3
1000ad84:	f000 f93c 	bl	1000b000 <__wrap_puts>
    if (fmt) {
1000ad88:	693b      	ldr	r3, [r7, #16]
1000ad8a:	2b00      	cmp	r3, #0
1000ad8c:	d00c      	beq.n	1000ada8 <panic+0x30>
#if LIB_PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
1000ad8e:	2314      	movs	r3, #20
1000ad90:	18fb      	adds	r3, r7, r3
1000ad92:	607b      	str	r3, [r7, #4]
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
1000ad94:	687a      	ldr	r2, [r7, #4]
1000ad96:	693b      	ldr	r3, [r7, #16]
1000ad98:	0011      	movs	r1, r2
1000ad9a:	0018      	movs	r0, r3
1000ad9c:	f000 f9ee 	bl	1000b17c <__wrap_vprintf>
#else
        weak_raw_vprintf(fmt, args);
#endif
        va_end(args);
        puts("\n");
1000ada0:	4b04      	ldr	r3, [pc, #16]	; (1000adb4 <panic+0x3c>)
1000ada2:	0018      	movs	r0, r3
1000ada4:	f000 f92c 	bl	1000b000 <__wrap_puts>
#endif
    }

    _exit(1);
1000ada8:	2001      	movs	r0, #1
1000adaa:	f7ff ffaf 	bl	1000ad0c <_exit>
1000adae:	46c0      	nop			; (mov r8, r8)
1000adb0:	1000ec84 	.word	0x1000ec84
1000adb4:	1000ec94 	.word	0x1000ec94

1000adb8 <stdout_serialize_begin>:
static stdio_driver_t *filter;

#if PICO_STDOUT_MUTEX
auto_init_mutex(print_mutex);

bool stdout_serialize_begin(void) {
1000adb8:	b580      	push	{r7, lr}
1000adba:	b082      	sub	sp, #8
1000adbc:	af00      	add	r7, sp, #0
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000adbe:	23d0      	movs	r3, #208	; 0xd0
1000adc0:	061b      	lsls	r3, r3, #24
1000adc2:	681a      	ldr	r2, [r3, #0]
    lock_owner_id_t caller = lock_get_caller_owner_id();
1000adc4:	1dfb      	adds	r3, r7, #7
1000adc6:	701a      	strb	r2, [r3, #0]
    // not using lock_owner_id_t to avoid backwards incompatibility change to mutex_try_enter API
    static_assert(sizeof(lock_owner_id_t) <= 4, "");
    uint32_t owner;
    if (!mutex_try_enter(&print_mutex, &owner)) {
1000adc8:	003a      	movs	r2, r7
1000adca:	4b0e      	ldr	r3, [pc, #56]	; (1000ae04 <stdout_serialize_begin+0x4c>)
1000adcc:	0011      	movs	r1, r2
1000adce:	0018      	movs	r0, r3
1000add0:	f002 f91e 	bl	1000d010 <__mutex_try_enter_veneer>
1000add4:	0003      	movs	r3, r0
1000add6:	001a      	movs	r2, r3
1000add8:	2301      	movs	r3, #1
1000adda:	4053      	eors	r3, r2
1000addc:	b2db      	uxtb	r3, r3
1000adde:	2b00      	cmp	r3, #0
1000ade0:	d00b      	beq.n	1000adfa <stdout_serialize_begin+0x42>
        if (owner == (uint32_t)caller) {
1000ade2:	1dfb      	adds	r3, r7, #7
1000ade4:	2200      	movs	r2, #0
1000ade6:	569a      	ldrsb	r2, [r3, r2]
1000ade8:	683b      	ldr	r3, [r7, #0]
1000adea:	429a      	cmp	r2, r3
1000adec:	d101      	bne.n	1000adf2 <stdout_serialize_begin+0x3a>
            return false;
1000adee:	2300      	movs	r3, #0
1000adf0:	e004      	b.n	1000adfc <stdout_serialize_begin+0x44>
        }
        // we are not a nested call, so lets wait
        mutex_enter_blocking(&print_mutex);
1000adf2:	4b04      	ldr	r3, [pc, #16]	; (1000ae04 <stdout_serialize_begin+0x4c>)
1000adf4:	0018      	movs	r0, r3
1000adf6:	f002 f91b 	bl	1000d030 <__mutex_enter_blocking_veneer>
    }
    return true;
1000adfa:	2301      	movs	r3, #1
}
1000adfc:	0018      	movs	r0, r3
1000adfe:	46bd      	mov	sp, r7
1000ae00:	b002      	add	sp, #8
1000ae02:	bd80      	pop	{r7, pc}
1000ae04:	20000730 	.word	0x20000730

1000ae08 <stdout_serialize_end>:

void stdout_serialize_end(void) {
1000ae08:	b580      	push	{r7, lr}
1000ae0a:	af00      	add	r7, sp, #0
    mutex_exit(&print_mutex);
1000ae0c:	4b03      	ldr	r3, [pc, #12]	; (1000ae1c <stdout_serialize_end+0x14>)
1000ae0e:	0018      	movs	r0, r3
1000ae10:	f002 f8e6 	bl	1000cfe0 <__mutex_exit_veneer>
}
1000ae14:	46c0      	nop			; (mov r8, r8)
1000ae16:	46bd      	mov	sp, r7
1000ae18:	bd80      	pop	{r7, pc}
1000ae1a:	46c0      	nop			; (mov r8, r8)
1000ae1c:	20000730 	.word	0x20000730

1000ae20 <stdio_out_chars_no_crlf>:
    return true;
}
static void stdout_serialize_end(void) {
}
#endif
static void stdio_out_chars_no_crlf(stdio_driver_t *driver, const char *s, int len) {
1000ae20:	b580      	push	{r7, lr}
1000ae22:	b084      	sub	sp, #16
1000ae24:	af00      	add	r7, sp, #0
1000ae26:	60f8      	str	r0, [r7, #12]
1000ae28:	60b9      	str	r1, [r7, #8]
1000ae2a:	607a      	str	r2, [r7, #4]
    driver->out_chars(s, len);
1000ae2c:	68fb      	ldr	r3, [r7, #12]
1000ae2e:	681b      	ldr	r3, [r3, #0]
1000ae30:	6879      	ldr	r1, [r7, #4]
1000ae32:	68ba      	ldr	r2, [r7, #8]
1000ae34:	0010      	movs	r0, r2
1000ae36:	4798      	blx	r3
}
1000ae38:	46c0      	nop			; (mov r8, r8)
1000ae3a:	46bd      	mov	sp, r7
1000ae3c:	b004      	add	sp, #16
1000ae3e:	bd80      	pop	{r7, pc}

1000ae40 <stdio_out_chars_crlf>:

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
1000ae40:	b580      	push	{r7, lr}
1000ae42:	b088      	sub	sp, #32
1000ae44:	af00      	add	r7, sp, #0
1000ae46:	60f8      	str	r0, [r7, #12]
1000ae48:	60b9      	str	r1, [r7, #8]
1000ae4a:	607a      	str	r2, [r7, #4]
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    if (!driver->crlf_enabled) {
1000ae4c:	68fb      	ldr	r3, [r7, #12]
1000ae4e:	7c5b      	ldrb	r3, [r3, #17]
1000ae50:	2201      	movs	r2, #1
1000ae52:	4053      	eors	r3, r2
1000ae54:	b2db      	uxtb	r3, r3
1000ae56:	2b00      	cmp	r3, #0
1000ae58:	d006      	beq.n	1000ae68 <stdio_out_chars_crlf+0x28>
        driver->out_chars(s, len);
1000ae5a:	68fb      	ldr	r3, [r7, #12]
1000ae5c:	681b      	ldr	r3, [r3, #0]
1000ae5e:	6879      	ldr	r1, [r7, #4]
1000ae60:	68ba      	ldr	r2, [r7, #8]
1000ae62:	0010      	movs	r0, r2
1000ae64:	4798      	blx	r3
        return;
1000ae66:	e060      	b.n	1000af2a <stdio_out_chars_crlf+0xea>
    }
    int first_of_chunk = 0;
1000ae68:	2300      	movs	r3, #0
1000ae6a:	61fb      	str	r3, [r7, #28]
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
1000ae6c:	2300      	movs	r3, #0
1000ae6e:	61bb      	str	r3, [r7, #24]
1000ae70:	e03b      	b.n	1000aeea <stdio_out_chars_crlf+0xaa>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000ae72:	69bb      	ldr	r3, [r7, #24]
1000ae74:	2b00      	cmp	r3, #0
1000ae76:	dd09      	ble.n	1000ae8c <stdio_out_chars_crlf+0x4c>
1000ae78:	69bb      	ldr	r3, [r7, #24]
1000ae7a:	3b01      	subs	r3, #1
1000ae7c:	68ba      	ldr	r2, [r7, #8]
1000ae7e:	18d3      	adds	r3, r2, r3
1000ae80:	781b      	ldrb	r3, [r3, #0]
1000ae82:	3b0d      	subs	r3, #13
1000ae84:	425a      	negs	r2, r3
1000ae86:	4153      	adcs	r3, r2
1000ae88:	b2db      	uxtb	r3, r3
1000ae8a:	e004      	b.n	1000ae96 <stdio_out_chars_crlf+0x56>
1000ae8c:	68fb      	ldr	r3, [r7, #12]
1000ae8e:	7c1b      	ldrb	r3, [r3, #16]
1000ae90:	1e5a      	subs	r2, r3, #1
1000ae92:	4193      	sbcs	r3, r2
1000ae94:	b2db      	uxtb	r3, r3
1000ae96:	2117      	movs	r1, #23
1000ae98:	187a      	adds	r2, r7, r1
1000ae9a:	7013      	strb	r3, [r2, #0]
        if (s[i] == '\n' && !prev_char_was_cr) {
1000ae9c:	69bb      	ldr	r3, [r7, #24]
1000ae9e:	68ba      	ldr	r2, [r7, #8]
1000aea0:	18d3      	adds	r3, r2, r3
1000aea2:	781b      	ldrb	r3, [r3, #0]
1000aea4:	2b0a      	cmp	r3, #10
1000aea6:	d11d      	bne.n	1000aee4 <stdio_out_chars_crlf+0xa4>
1000aea8:	187b      	adds	r3, r7, r1
1000aeaa:	781b      	ldrb	r3, [r3, #0]
1000aeac:	2201      	movs	r2, #1
1000aeae:	4053      	eors	r3, r2
1000aeb0:	b2db      	uxtb	r3, r3
1000aeb2:	2b00      	cmp	r3, #0
1000aeb4:	d016      	beq.n	1000aee4 <stdio_out_chars_crlf+0xa4>
            if (i > first_of_chunk) {
1000aeb6:	69ba      	ldr	r2, [r7, #24]
1000aeb8:	69fb      	ldr	r3, [r7, #28]
1000aeba:	429a      	cmp	r2, r3
1000aebc:	dd09      	ble.n	1000aed2 <stdio_out_chars_crlf+0x92>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
1000aebe:	68fb      	ldr	r3, [r7, #12]
1000aec0:	681b      	ldr	r3, [r3, #0]
1000aec2:	69fa      	ldr	r2, [r7, #28]
1000aec4:	68b9      	ldr	r1, [r7, #8]
1000aec6:	1888      	adds	r0, r1, r2
1000aec8:	69b9      	ldr	r1, [r7, #24]
1000aeca:	69fa      	ldr	r2, [r7, #28]
1000aecc:	1a8a      	subs	r2, r1, r2
1000aece:	0011      	movs	r1, r2
1000aed0:	4798      	blx	r3
            }
            driver->out_chars(crlf_str, 2);
1000aed2:	68fb      	ldr	r3, [r7, #12]
1000aed4:	681b      	ldr	r3, [r3, #0]
1000aed6:	4a16      	ldr	r2, [pc, #88]	; (1000af30 <stdio_out_chars_crlf+0xf0>)
1000aed8:	2102      	movs	r1, #2
1000aeda:	0010      	movs	r0, r2
1000aedc:	4798      	blx	r3
            first_of_chunk = i + 1;
1000aede:	69bb      	ldr	r3, [r7, #24]
1000aee0:	3301      	adds	r3, #1
1000aee2:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < len; i++) {
1000aee4:	69bb      	ldr	r3, [r7, #24]
1000aee6:	3301      	adds	r3, #1
1000aee8:	61bb      	str	r3, [r7, #24]
1000aeea:	69ba      	ldr	r2, [r7, #24]
1000aeec:	687b      	ldr	r3, [r7, #4]
1000aeee:	429a      	cmp	r2, r3
1000aef0:	dbbf      	blt.n	1000ae72 <stdio_out_chars_crlf+0x32>
        }
    }
    if (first_of_chunk < len) {
1000aef2:	69fa      	ldr	r2, [r7, #28]
1000aef4:	687b      	ldr	r3, [r7, #4]
1000aef6:	429a      	cmp	r2, r3
1000aef8:	da09      	bge.n	1000af0e <stdio_out_chars_crlf+0xce>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
1000aefa:	68fb      	ldr	r3, [r7, #12]
1000aefc:	681b      	ldr	r3, [r3, #0]
1000aefe:	69fa      	ldr	r2, [r7, #28]
1000af00:	68b9      	ldr	r1, [r7, #8]
1000af02:	1888      	adds	r0, r1, r2
1000af04:	6879      	ldr	r1, [r7, #4]
1000af06:	69fa      	ldr	r2, [r7, #28]
1000af08:	1a8a      	subs	r2, r1, r2
1000af0a:	0011      	movs	r1, r2
1000af0c:	4798      	blx	r3
    }
    if (len > 0) {
1000af0e:	687b      	ldr	r3, [r7, #4]
1000af10:	2b00      	cmp	r3, #0
1000af12:	dd0a      	ble.n	1000af2a <stdio_out_chars_crlf+0xea>
        driver->last_ended_with_cr = s[len - 1] == '\r';
1000af14:	687b      	ldr	r3, [r7, #4]
1000af16:	3b01      	subs	r3, #1
1000af18:	68ba      	ldr	r2, [r7, #8]
1000af1a:	18d3      	adds	r3, r2, r3
1000af1c:	781b      	ldrb	r3, [r3, #0]
1000af1e:	3b0d      	subs	r3, #13
1000af20:	425a      	negs	r2, r3
1000af22:	4153      	adcs	r3, r2
1000af24:	b2da      	uxtb	r2, r3
1000af26:	68fb      	ldr	r3, [r7, #12]
1000af28:	741a      	strb	r2, [r3, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
1000af2a:	46bd      	mov	sp, r7
1000af2c:	b008      	add	sp, #32
1000af2e:	bd80      	pop	{r7, pc}
1000af30:	1000ed14 	.word	0x1000ed14

1000af34 <stdio_put_string>:

static bool stdio_put_string(const char *s, int len, bool newline, bool no_cr) {
1000af34:	b590      	push	{r4, r7, lr}
1000af36:	b089      	sub	sp, #36	; 0x24
1000af38:	af00      	add	r7, sp, #0
1000af3a:	60f8      	str	r0, [r7, #12]
1000af3c:	60b9      	str	r1, [r7, #8]
1000af3e:	0019      	movs	r1, r3
1000af40:	1dfb      	adds	r3, r7, #7
1000af42:	701a      	strb	r2, [r3, #0]
1000af44:	1dbb      	adds	r3, r7, #6
1000af46:	1c0a      	adds	r2, r1, #0
1000af48:	701a      	strb	r2, [r3, #0]
    bool serialized = stdout_serialize_begin();
1000af4a:	231b      	movs	r3, #27
1000af4c:	18fc      	adds	r4, r7, r3
1000af4e:	f7ff ff33 	bl	1000adb8 <stdout_serialize_begin>
1000af52:	0003      	movs	r3, r0
1000af54:	7023      	strb	r3, [r4, #0]
    if (!serialized) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = (int)strlen(s);
1000af56:	68bb      	ldr	r3, [r7, #8]
1000af58:	3301      	adds	r3, #1
1000af5a:	d105      	bne.n	1000af68 <stdio_put_string+0x34>
1000af5c:	68fb      	ldr	r3, [r7, #12]
1000af5e:	0018      	movs	r0, r3
1000af60:	f002 f806 	bl	1000cf70 <strlen>
1000af64:	0003      	movs	r3, r0
1000af66:	60bb      	str	r3, [r7, #8]
    void (*out_func)(stdio_driver_t *, const char *, int) = no_cr ? stdio_out_chars_no_crlf : stdio_out_chars_crlf;
1000af68:	1dbb      	adds	r3, r7, #6
1000af6a:	781b      	ldrb	r3, [r3, #0]
1000af6c:	2b00      	cmp	r3, #0
1000af6e:	d001      	beq.n	1000af74 <stdio_put_string+0x40>
1000af70:	4b1f      	ldr	r3, [pc, #124]	; (1000aff0 <stdio_put_string+0xbc>)
1000af72:	e000      	b.n	1000af76 <stdio_put_string+0x42>
1000af74:	4b1f      	ldr	r3, [pc, #124]	; (1000aff4 <stdio_put_string+0xc0>)
1000af76:	617b      	str	r3, [r7, #20]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
1000af78:	4b1f      	ldr	r3, [pc, #124]	; (1000aff8 <stdio_put_string+0xc4>)
1000af7a:	681b      	ldr	r3, [r3, #0]
1000af7c:	61fb      	str	r3, [r7, #28]
1000af7e:	e025      	b.n	1000afcc <stdio_put_string+0x98>
        if (!driver->out_chars) continue;
1000af80:	69fb      	ldr	r3, [r7, #28]
1000af82:	681b      	ldr	r3, [r3, #0]
1000af84:	2b00      	cmp	r3, #0
1000af86:	d01b      	beq.n	1000afc0 <stdio_put_string+0x8c>
        if (filter && filter != driver) continue;
1000af88:	4b1c      	ldr	r3, [pc, #112]	; (1000affc <stdio_put_string+0xc8>)
1000af8a:	681b      	ldr	r3, [r3, #0]
1000af8c:	2b00      	cmp	r3, #0
1000af8e:	d004      	beq.n	1000af9a <stdio_put_string+0x66>
1000af90:	4b1a      	ldr	r3, [pc, #104]	; (1000affc <stdio_put_string+0xc8>)
1000af92:	681b      	ldr	r3, [r3, #0]
1000af94:	69fa      	ldr	r2, [r7, #28]
1000af96:	429a      	cmp	r2, r3
1000af98:	d114      	bne.n	1000afc4 <stdio_put_string+0x90>
        out_func(driver, s, len);
1000af9a:	68ba      	ldr	r2, [r7, #8]
1000af9c:	68f9      	ldr	r1, [r7, #12]
1000af9e:	69f8      	ldr	r0, [r7, #28]
1000afa0:	697b      	ldr	r3, [r7, #20]
1000afa2:	4798      	blx	r3
        if (newline) {
1000afa4:	1dfb      	adds	r3, r7, #7
1000afa6:	781b      	ldrb	r3, [r3, #0]
1000afa8:	2b00      	cmp	r3, #0
1000afaa:	d00c      	beq.n	1000afc6 <stdio_put_string+0x92>
            const char c = '\n';
1000afac:	2113      	movs	r1, #19
1000afae:	187b      	adds	r3, r7, r1
1000afb0:	220a      	movs	r2, #10
1000afb2:	701a      	strb	r2, [r3, #0]
            out_func(driver, &c, 1);
1000afb4:	1879      	adds	r1, r7, r1
1000afb6:	69f8      	ldr	r0, [r7, #28]
1000afb8:	697b      	ldr	r3, [r7, #20]
1000afba:	2201      	movs	r2, #1
1000afbc:	4798      	blx	r3
1000afbe:	e002      	b.n	1000afc6 <stdio_put_string+0x92>
        if (!driver->out_chars) continue;
1000afc0:	46c0      	nop			; (mov r8, r8)
1000afc2:	e000      	b.n	1000afc6 <stdio_put_string+0x92>
        if (filter && filter != driver) continue;
1000afc4:	46c0      	nop			; (mov r8, r8)
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
1000afc6:	69fb      	ldr	r3, [r7, #28]
1000afc8:	68db      	ldr	r3, [r3, #12]
1000afca:	61fb      	str	r3, [r7, #28]
1000afcc:	69fb      	ldr	r3, [r7, #28]
1000afce:	2b00      	cmp	r3, #0
1000afd0:	d1d6      	bne.n	1000af80 <stdio_put_string+0x4c>
        }
    }
    if (serialized) {
1000afd2:	231b      	movs	r3, #27
1000afd4:	18fb      	adds	r3, r7, r3
1000afd6:	781b      	ldrb	r3, [r3, #0]
1000afd8:	2b00      	cmp	r3, #0
1000afda:	d001      	beq.n	1000afe0 <stdio_put_string+0xac>
        stdout_serialize_end();
1000afdc:	f7ff ff14 	bl	1000ae08 <stdout_serialize_end>
    }
    return len;
1000afe0:	68bb      	ldr	r3, [r7, #8]
1000afe2:	1e5a      	subs	r2, r3, #1
1000afe4:	4193      	sbcs	r3, r2
1000afe6:	b2db      	uxtb	r3, r3
}
1000afe8:	0018      	movs	r0, r3
1000afea:	46bd      	mov	sp, r7
1000afec:	b009      	add	sp, #36	; 0x24
1000afee:	bd90      	pop	{r4, r7, pc}
1000aff0:	1000ae21 	.word	0x1000ae21
1000aff4:	1000ae41 	.word	0x1000ae41
1000aff8:	20004dd0 	.word	0x20004dd0
1000affc:	20004dd4 	.word	0x20004dd4

1000b000 <__wrap_puts>:
    char cc = (char)c;
    stdio_put_string(&cc, 1, false, false);
    return c;
}

int WRAPPER_FUNC(puts)(const char *s) {
1000b000:	b580      	push	{r7, lr}
1000b002:	b084      	sub	sp, #16
1000b004:	af00      	add	r7, sp, #0
1000b006:	6078      	str	r0, [r7, #4]
    int len = (int)strlen(s);
1000b008:	687b      	ldr	r3, [r7, #4]
1000b00a:	0018      	movs	r0, r3
1000b00c:	f001 ffb0 	bl	1000cf70 <strlen>
1000b010:	0003      	movs	r3, r0
1000b012:	60fb      	str	r3, [r7, #12]
    stdio_put_string(s, len, true, false);
1000b014:	68f9      	ldr	r1, [r7, #12]
1000b016:	6878      	ldr	r0, [r7, #4]
1000b018:	2300      	movs	r3, #0
1000b01a:	2201      	movs	r2, #1
1000b01c:	f7ff ff8a 	bl	1000af34 <stdio_put_string>
    stdio_flush();
1000b020:	f000 f83a 	bl	1000b098 <stdio_flush>
    return len;
1000b024:	68fb      	ldr	r3, [r7, #12]
}
1000b026:	0018      	movs	r0, r3
1000b028:	46bd      	mov	sp, r7
1000b02a:	b004      	add	sp, #16
1000b02c:	bd80      	pop	{r7, pc}
	...

1000b030 <stdio_set_driver_enabled>:
        return length;
    }
    return -1;
}

void stdio_set_driver_enabled(stdio_driver_t *driver, bool enable) {
1000b030:	b580      	push	{r7, lr}
1000b032:	b084      	sub	sp, #16
1000b034:	af00      	add	r7, sp, #0
1000b036:	6078      	str	r0, [r7, #4]
1000b038:	000a      	movs	r2, r1
1000b03a:	1cfb      	adds	r3, r7, #3
1000b03c:	701a      	strb	r2, [r3, #0]
    stdio_driver_t **prev = &drivers;
1000b03e:	4b15      	ldr	r3, [pc, #84]	; (1000b094 <stdio_set_driver_enabled+0x64>)
1000b040:	60fb      	str	r3, [r7, #12]
    while (*prev) {
1000b042:	e017      	b.n	1000b074 <stdio_set_driver_enabled+0x44>
        if (*prev == driver) {
1000b044:	68fb      	ldr	r3, [r7, #12]
1000b046:	681b      	ldr	r3, [r3, #0]
1000b048:	687a      	ldr	r2, [r7, #4]
1000b04a:	429a      	cmp	r2, r3
1000b04c:	d10e      	bne.n	1000b06c <stdio_set_driver_enabled+0x3c>
            if (!enable) {
1000b04e:	1cfb      	adds	r3, r7, #3
1000b050:	781b      	ldrb	r3, [r3, #0]
1000b052:	2201      	movs	r2, #1
1000b054:	4053      	eors	r3, r2
1000b056:	b2db      	uxtb	r3, r3
1000b058:	2b00      	cmp	r3, #0
1000b05a:	d017      	beq.n	1000b08c <stdio_set_driver_enabled+0x5c>
                *prev = driver->next;
1000b05c:	687b      	ldr	r3, [r7, #4]
1000b05e:	68da      	ldr	r2, [r3, #12]
1000b060:	68fb      	ldr	r3, [r7, #12]
1000b062:	601a      	str	r2, [r3, #0]
                driver->next = NULL;
1000b064:	687b      	ldr	r3, [r7, #4]
1000b066:	2200      	movs	r2, #0
1000b068:	60da      	str	r2, [r3, #12]
            }
            return;
1000b06a:	e00f      	b.n	1000b08c <stdio_set_driver_enabled+0x5c>
        }
        prev = &(*prev)->next;
1000b06c:	68fb      	ldr	r3, [r7, #12]
1000b06e:	681b      	ldr	r3, [r3, #0]
1000b070:	330c      	adds	r3, #12
1000b072:	60fb      	str	r3, [r7, #12]
    while (*prev) {
1000b074:	68fb      	ldr	r3, [r7, #12]
1000b076:	681b      	ldr	r3, [r3, #0]
1000b078:	2b00      	cmp	r3, #0
1000b07a:	d1e3      	bne.n	1000b044 <stdio_set_driver_enabled+0x14>
    }
    if (enable) {
1000b07c:	1cfb      	adds	r3, r7, #3
1000b07e:	781b      	ldrb	r3, [r3, #0]
1000b080:	2b00      	cmp	r3, #0
1000b082:	d004      	beq.n	1000b08e <stdio_set_driver_enabled+0x5e>
        *prev = driver;
1000b084:	68fb      	ldr	r3, [r7, #12]
1000b086:	687a      	ldr	r2, [r7, #4]
1000b088:	601a      	str	r2, [r3, #0]
1000b08a:	e000      	b.n	1000b08e <stdio_set_driver_enabled+0x5e>
            return;
1000b08c:	46c0      	nop			; (mov r8, r8)
    }
}
1000b08e:	46bd      	mov	sp, r7
1000b090:	b004      	add	sp, #16
1000b092:	bd80      	pop	{r7, pc}
1000b094:	20004dd0 	.word	0x20004dd0

1000b098 <stdio_flush>:

void stdio_flush() {
1000b098:	b580      	push	{r7, lr}
1000b09a:	b082      	sub	sp, #8
1000b09c:	af00      	add	r7, sp, #0
    for (stdio_driver_t *d = drivers; d; d = d->next) {
1000b09e:	4b0b      	ldr	r3, [pc, #44]	; (1000b0cc <stdio_flush+0x34>)
1000b0a0:	681b      	ldr	r3, [r3, #0]
1000b0a2:	607b      	str	r3, [r7, #4]
1000b0a4:	e009      	b.n	1000b0ba <stdio_flush+0x22>
        if (d->out_flush) d->out_flush();
1000b0a6:	687b      	ldr	r3, [r7, #4]
1000b0a8:	685b      	ldr	r3, [r3, #4]
1000b0aa:	2b00      	cmp	r3, #0
1000b0ac:	d002      	beq.n	1000b0b4 <stdio_flush+0x1c>
1000b0ae:	687b      	ldr	r3, [r7, #4]
1000b0b0:	685b      	ldr	r3, [r3, #4]
1000b0b2:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
1000b0b4:	687b      	ldr	r3, [r7, #4]
1000b0b6:	68db      	ldr	r3, [r3, #12]
1000b0b8:	607b      	str	r3, [r7, #4]
1000b0ba:	687b      	ldr	r3, [r7, #4]
1000b0bc:	2b00      	cmp	r3, #0
1000b0be:	d1f2      	bne.n	1000b0a6 <stdio_flush+0xe>
    }
}
1000b0c0:	46c0      	nop			; (mov r8, r8)
1000b0c2:	46c0      	nop			; (mov r8, r8)
1000b0c4:	46bd      	mov	sp, r7
1000b0c6:	b002      	add	sp, #8
1000b0c8:	bd80      	pop	{r7, pc}
1000b0ca:	46c0      	nop			; (mov r8, r8)
1000b0cc:	20004dd0 	.word	0x20004dd0

1000b0d0 <stdio_stack_buffer_flush>:
typedef struct stdio_stack_buffer {
    int used;
    char buf[PICO_STDIO_STACK_BUFFER_SIZE];
} stdio_stack_buffer_t;

static void stdio_stack_buffer_flush(stdio_stack_buffer_t *buffer) {
1000b0d0:	b580      	push	{r7, lr}
1000b0d2:	b084      	sub	sp, #16
1000b0d4:	af00      	add	r7, sp, #0
1000b0d6:	6078      	str	r0, [r7, #4]
    if (buffer->used) {
1000b0d8:	687b      	ldr	r3, [r7, #4]
1000b0da:	681b      	ldr	r3, [r3, #0]
1000b0dc:	2b00      	cmp	r3, #0
1000b0de:	d025      	beq.n	1000b12c <stdio_stack_buffer_flush+0x5c>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
1000b0e0:	4b14      	ldr	r3, [pc, #80]	; (1000b134 <stdio_stack_buffer_flush+0x64>)
1000b0e2:	681b      	ldr	r3, [r3, #0]
1000b0e4:	60fb      	str	r3, [r7, #12]
1000b0e6:	e01b      	b.n	1000b120 <stdio_stack_buffer_flush+0x50>
            if (!d->out_chars) continue;
1000b0e8:	68fb      	ldr	r3, [r7, #12]
1000b0ea:	681b      	ldr	r3, [r3, #0]
1000b0ec:	2b00      	cmp	r3, #0
1000b0ee:	d011      	beq.n	1000b114 <stdio_stack_buffer_flush+0x44>
            if (filter && filter != d) continue;
1000b0f0:	4b11      	ldr	r3, [pc, #68]	; (1000b138 <stdio_stack_buffer_flush+0x68>)
1000b0f2:	681b      	ldr	r3, [r3, #0]
1000b0f4:	2b00      	cmp	r3, #0
1000b0f6:	d004      	beq.n	1000b102 <stdio_stack_buffer_flush+0x32>
1000b0f8:	4b0f      	ldr	r3, [pc, #60]	; (1000b138 <stdio_stack_buffer_flush+0x68>)
1000b0fa:	681b      	ldr	r3, [r3, #0]
1000b0fc:	68fa      	ldr	r2, [r7, #12]
1000b0fe:	429a      	cmp	r2, r3
1000b100:	d10a      	bne.n	1000b118 <stdio_stack_buffer_flush+0x48>
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
1000b102:	687b      	ldr	r3, [r7, #4]
1000b104:	1d19      	adds	r1, r3, #4
1000b106:	687b      	ldr	r3, [r7, #4]
1000b108:	681a      	ldr	r2, [r3, #0]
1000b10a:	68fb      	ldr	r3, [r7, #12]
1000b10c:	0018      	movs	r0, r3
1000b10e:	f7ff fe97 	bl	1000ae40 <stdio_out_chars_crlf>
1000b112:	e002      	b.n	1000b11a <stdio_stack_buffer_flush+0x4a>
            if (!d->out_chars) continue;
1000b114:	46c0      	nop			; (mov r8, r8)
1000b116:	e000      	b.n	1000b11a <stdio_stack_buffer_flush+0x4a>
            if (filter && filter != d) continue;
1000b118:	46c0      	nop			; (mov r8, r8)
        for (stdio_driver_t *d = drivers; d; d = d->next) {
1000b11a:	68fb      	ldr	r3, [r7, #12]
1000b11c:	68db      	ldr	r3, [r3, #12]
1000b11e:	60fb      	str	r3, [r7, #12]
1000b120:	68fb      	ldr	r3, [r7, #12]
1000b122:	2b00      	cmp	r3, #0
1000b124:	d1e0      	bne.n	1000b0e8 <stdio_stack_buffer_flush+0x18>
        }
        buffer->used = 0;
1000b126:	687b      	ldr	r3, [r7, #4]
1000b128:	2200      	movs	r2, #0
1000b12a:	601a      	str	r2, [r3, #0]
    }
}
1000b12c:	46c0      	nop			; (mov r8, r8)
1000b12e:	46bd      	mov	sp, r7
1000b130:	b004      	add	sp, #16
1000b132:	bd80      	pop	{r7, pc}
1000b134:	20004dd0 	.word	0x20004dd0
1000b138:	20004dd4 	.word	0x20004dd4

1000b13c <stdio_buffered_printer>:

static void stdio_buffered_printer(char c, void *arg) {
1000b13c:	b580      	push	{r7, lr}
1000b13e:	b084      	sub	sp, #16
1000b140:	af00      	add	r7, sp, #0
1000b142:	0002      	movs	r2, r0
1000b144:	6039      	str	r1, [r7, #0]
1000b146:	1dfb      	adds	r3, r7, #7
1000b148:	701a      	strb	r2, [r3, #0]
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
1000b14a:	683b      	ldr	r3, [r7, #0]
1000b14c:	60fb      	str	r3, [r7, #12]
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
1000b14e:	68fb      	ldr	r3, [r7, #12]
1000b150:	681b      	ldr	r3, [r3, #0]
1000b152:	2b80      	cmp	r3, #128	; 0x80
1000b154:	d103      	bne.n	1000b15e <stdio_buffered_printer+0x22>
        stdio_stack_buffer_flush(buffer);
1000b156:	68fb      	ldr	r3, [r7, #12]
1000b158:	0018      	movs	r0, r3
1000b15a:	f7ff ffb9 	bl	1000b0d0 <stdio_stack_buffer_flush>
    }
    buffer->buf[buffer->used++] = c;
1000b15e:	68fb      	ldr	r3, [r7, #12]
1000b160:	681b      	ldr	r3, [r3, #0]
1000b162:	1c59      	adds	r1, r3, #1
1000b164:	68fa      	ldr	r2, [r7, #12]
1000b166:	6011      	str	r1, [r2, #0]
1000b168:	68fa      	ldr	r2, [r7, #12]
1000b16a:	18d3      	adds	r3, r2, r3
1000b16c:	1dfa      	adds	r2, r7, #7
1000b16e:	7812      	ldrb	r2, [r2, #0]
1000b170:	711a      	strb	r2, [r3, #4]
}
1000b172:	46c0      	nop			; (mov r8, r8)
1000b174:	46bd      	mov	sp, r7
1000b176:	b004      	add	sp, #16
1000b178:	bd80      	pop	{r7, pc}
	...

1000b17c <__wrap_vprintf>:

int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
1000b17c:	b5b0      	push	{r4, r5, r7, lr}
1000b17e:	b0a6      	sub	sp, #152	; 0x98
1000b180:	af00      	add	r7, sp, #0
1000b182:	6078      	str	r0, [r7, #4]
1000b184:	6039      	str	r1, [r7, #0]
    bool serialzed = stdout_serialize_begin();
1000b186:	2597      	movs	r5, #151	; 0x97
1000b188:	197c      	adds	r4, r7, r5
1000b18a:	f7ff fe15 	bl	1000adb8 <stdout_serialize_begin>
1000b18e:	0003      	movs	r3, r0
1000b190:	7023      	strb	r3, [r4, #0]
        return 0;
#endif
    }
    int ret;
#if LIB_PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer = {.used = 0};
1000b192:	240c      	movs	r4, #12
1000b194:	193b      	adds	r3, r7, r4
1000b196:	0018      	movs	r0, r3
1000b198:	2384      	movs	r3, #132	; 0x84
1000b19a:	001a      	movs	r2, r3
1000b19c:	2100      	movs	r1, #0
1000b19e:	f001 fedb 	bl	1000cf58 <__wrap_memset>
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
1000b1a2:	683b      	ldr	r3, [r7, #0]
1000b1a4:	687a      	ldr	r2, [r7, #4]
1000b1a6:	1939      	adds	r1, r7, r4
1000b1a8:	480c      	ldr	r0, [pc, #48]	; (1000b1dc <__wrap_vprintf+0x60>)
1000b1aa:	f7ff fcbd 	bl	1000ab28 <vfctprintf>
1000b1ae:	0003      	movs	r3, r0
1000b1b0:	2290      	movs	r2, #144	; 0x90
1000b1b2:	18ba      	adds	r2, r7, r2
1000b1b4:	6013      	str	r3, [r2, #0]
    stdio_stack_buffer_flush(&buffer);
1000b1b6:	193b      	adds	r3, r7, r4
1000b1b8:	0018      	movs	r0, r3
1000b1ba:	f7ff ff89 	bl	1000b0d0 <stdio_stack_buffer_flush>
    stdio_flush();
1000b1be:	f7ff ff6b 	bl	1000b098 <stdio_flush>
    printf_none_assert();
#else
    extern int REAL_FUNC(vprintf)(const char *format, va_list va);
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
1000b1c2:	197b      	adds	r3, r7, r5
1000b1c4:	781b      	ldrb	r3, [r3, #0]
1000b1c6:	2b00      	cmp	r3, #0
1000b1c8:	d001      	beq.n	1000b1ce <__wrap_vprintf+0x52>
        stdout_serialize_end();
1000b1ca:	f7ff fe1d 	bl	1000ae08 <stdout_serialize_end>
    }
    return ret;
1000b1ce:	2390      	movs	r3, #144	; 0x90
1000b1d0:	18fb      	adds	r3, r7, r3
1000b1d2:	681b      	ldr	r3, [r3, #0]
}
1000b1d4:	0018      	movs	r0, r3
1000b1d6:	46bd      	mov	sp, r7
1000b1d8:	b026      	add	sp, #152	; 0x98
1000b1da:	bdb0      	pop	{r4, r5, r7, pc}
1000b1dc:	1000b13d 	.word	0x1000b13d

1000b1e0 <__wrap_printf>:

int __printflike(1, 0) WRAPPER_FUNC(printf)(const char* format, ...)
{
1000b1e0:	b40f      	push	{r0, r1, r2, r3}
1000b1e2:	b580      	push	{r7, lr}
1000b1e4:	b082      	sub	sp, #8
1000b1e6:	af00      	add	r7, sp, #0
    va_list va;
    va_start(va, format);
1000b1e8:	2314      	movs	r3, #20
1000b1ea:	18fb      	adds	r3, r7, r3
1000b1ec:	603b      	str	r3, [r7, #0]
    int ret = vprintf(format, va);
1000b1ee:	683a      	ldr	r2, [r7, #0]
1000b1f0:	693b      	ldr	r3, [r7, #16]
1000b1f2:	0011      	movs	r1, r2
1000b1f4:	0018      	movs	r0, r3
1000b1f6:	f7ff ffc1 	bl	1000b17c <__wrap_vprintf>
1000b1fa:	0003      	movs	r3, r0
1000b1fc:	607b      	str	r3, [r7, #4]
    va_end(va);
    return ret;
1000b1fe:	687b      	ldr	r3, [r7, #4]
}
1000b200:	0018      	movs	r0, r3
1000b202:	46bd      	mov	sp, r7
1000b204:	b002      	add	sp, #8
1000b206:	bc80      	pop	{r7}
1000b208:	bc08      	pop	{r3}
1000b20a:	b004      	add	sp, #16
1000b20c:	4718      	bx	r3
	...

1000b210 <uart_get_index>:
static inline uint uart_get_index(uart_inst_t *uart) {
1000b210:	b580      	push	{r7, lr}
1000b212:	b082      	sub	sp, #8
1000b214:	af00      	add	r7, sp, #0
1000b216:	6078      	str	r0, [r7, #4]
    return uart == uart1 ? 1 : 0;
1000b218:	687b      	ldr	r3, [r7, #4]
1000b21a:	4a05      	ldr	r2, [pc, #20]	; (1000b230 <uart_get_index+0x20>)
1000b21c:	4694      	mov	ip, r2
1000b21e:	4463      	add	r3, ip
1000b220:	425a      	negs	r2, r3
1000b222:	4153      	adcs	r3, r2
1000b224:	b2db      	uxtb	r3, r3
}
1000b226:	0018      	movs	r0, r3
1000b228:	46bd      	mov	sp, r7
1000b22a:	b002      	add	sp, #8
1000b22c:	bd80      	pop	{r7, pc}
1000b22e:	46c0      	nop			; (mov r8, r8)
1000b230:	bffc8000 	.word	0xbffc8000

1000b234 <uart_get_hw>:
static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
1000b234:	b580      	push	{r7, lr}
1000b236:	b082      	sub	sp, #8
1000b238:	af00      	add	r7, sp, #0
1000b23a:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
1000b23c:	687b      	ldr	r3, [r7, #4]
1000b23e:	0018      	movs	r0, r3
1000b240:	f7ff ffe6 	bl	1000b210 <uart_get_index>
    return (uart_hw_t *)uart;
1000b244:	687b      	ldr	r3, [r7, #4]
}
1000b246:	0018      	movs	r0, r3
1000b248:	46bd      	mov	sp, r7
1000b24a:	b002      	add	sp, #8
1000b24c:	bd80      	pop	{r7, pc}

1000b24e <uart_is_writable>:
 *  \ingroup hardware_uart
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \return false if no space available, true otherwise
 */
static inline bool uart_is_writable(uart_inst_t *uart) {
1000b24e:	b580      	push	{r7, lr}
1000b250:	b082      	sub	sp, #8
1000b252:	af00      	add	r7, sp, #0
1000b254:	6078      	str	r0, [r7, #4]
    return !(uart_get_hw(uart)->fr & UART_UARTFR_TXFF_BITS);
1000b256:	687b      	ldr	r3, [r7, #4]
1000b258:	0018      	movs	r0, r3
1000b25a:	f7ff ffeb 	bl	1000b234 <uart_get_hw>
1000b25e:	0003      	movs	r3, r0
1000b260:	699b      	ldr	r3, [r3, #24]
1000b262:	2220      	movs	r2, #32
1000b264:	4013      	ands	r3, r2
1000b266:	425a      	negs	r2, r3
1000b268:	4153      	adcs	r3, r2
1000b26a:	b2db      	uxtb	r3, r3
}
1000b26c:	0018      	movs	r0, r3
1000b26e:	46bd      	mov	sp, r7
1000b270:	b002      	add	sp, #8
1000b272:	bd80      	pop	{r7, pc}

1000b274 <uart_is_readable>:
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \return 0 if no data available, otherwise the number of bytes, at least, that can be read
 *
 * \note HW limitations mean this function will return either 0 or 1.
 */
static inline bool uart_is_readable(uart_inst_t *uart) {
1000b274:	b580      	push	{r7, lr}
1000b276:	b082      	sub	sp, #8
1000b278:	af00      	add	r7, sp, #0
1000b27a:	6078      	str	r0, [r7, #4]
    // PL011 doesn't expose levels directly, so return values are only 0 or 1
    return !(uart_get_hw(uart)->fr & UART_UARTFR_RXFE_BITS);
1000b27c:	687b      	ldr	r3, [r7, #4]
1000b27e:	0018      	movs	r0, r3
1000b280:	f7ff ffd8 	bl	1000b234 <uart_get_hw>
1000b284:	0003      	movs	r3, r0
1000b286:	699b      	ldr	r3, [r3, #24]
1000b288:	2210      	movs	r2, #16
1000b28a:	4013      	ands	r3, r2
1000b28c:	425a      	negs	r2, r3
1000b28e:	4153      	adcs	r3, r2
1000b290:	b2db      	uxtb	r3, r3
}
1000b292:	0018      	movs	r0, r3
1000b294:	46bd      	mov	sp, r7
1000b296:	b002      	add	sp, #8
1000b298:	bd80      	pop	{r7, pc}

1000b29a <uart_write_blocking>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param src The bytes to send
 * \param len The number of bytes to send
 */
static inline void uart_write_blocking(uart_inst_t *uart, const uint8_t *src, size_t len) {
1000b29a:	b590      	push	{r4, r7, lr}
1000b29c:	b087      	sub	sp, #28
1000b29e:	af00      	add	r7, sp, #0
1000b2a0:	60f8      	str	r0, [r7, #12]
1000b2a2:	60b9      	str	r1, [r7, #8]
1000b2a4:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
1000b2a6:	2300      	movs	r3, #0
1000b2a8:	617b      	str	r3, [r7, #20]
1000b2aa:	e019      	b.n	1000b2e0 <uart_write_blocking+0x46>
static __force_inline void tight_loop_contents(void) {}
1000b2ac:	46c0      	nop			; (mov r8, r8)
        while (!uart_is_writable(uart))
1000b2ae:	68fb      	ldr	r3, [r7, #12]
1000b2b0:	0018      	movs	r0, r3
1000b2b2:	f7ff ffcc 	bl	1000b24e <uart_is_writable>
1000b2b6:	0003      	movs	r3, r0
1000b2b8:	001a      	movs	r2, r3
1000b2ba:	2301      	movs	r3, #1
1000b2bc:	4053      	eors	r3, r2
1000b2be:	b2db      	uxtb	r3, r3
1000b2c0:	2b00      	cmp	r3, #0
1000b2c2:	d1f3      	bne.n	1000b2ac <uart_write_blocking+0x12>
            tight_loop_contents();
        uart_get_hw(uart)->dr = *src++;
1000b2c4:	68bb      	ldr	r3, [r7, #8]
1000b2c6:	1c5a      	adds	r2, r3, #1
1000b2c8:	60ba      	str	r2, [r7, #8]
1000b2ca:	781c      	ldrb	r4, [r3, #0]
1000b2cc:	68fb      	ldr	r3, [r7, #12]
1000b2ce:	0018      	movs	r0, r3
1000b2d0:	f7ff ffb0 	bl	1000b234 <uart_get_hw>
1000b2d4:	0003      	movs	r3, r0
1000b2d6:	0022      	movs	r2, r4
1000b2d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
1000b2da:	697b      	ldr	r3, [r7, #20]
1000b2dc:	3301      	adds	r3, #1
1000b2de:	617b      	str	r3, [r7, #20]
1000b2e0:	697a      	ldr	r2, [r7, #20]
1000b2e2:	687b      	ldr	r3, [r7, #4]
1000b2e4:	429a      	cmp	r2, r3
1000b2e6:	d3e2      	bcc.n	1000b2ae <uart_write_blocking+0x14>
    }
}
1000b2e8:	46c0      	nop			; (mov r8, r8)
1000b2ea:	46c0      	nop			; (mov r8, r8)
1000b2ec:	46bd      	mov	sp, r7
1000b2ee:	b007      	add	sp, #28
1000b2f0:	bd90      	pop	{r4, r7, pc}

1000b2f2 <uart_read_blocking>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param dst Buffer to accept received bytes
 * \param len The number of bytes to receive.
 */
static inline void uart_read_blocking(uart_inst_t *uart, uint8_t *dst, size_t len) {
1000b2f2:	b580      	push	{r7, lr}
1000b2f4:	b086      	sub	sp, #24
1000b2f6:	af00      	add	r7, sp, #0
1000b2f8:	60f8      	str	r0, [r7, #12]
1000b2fa:	60b9      	str	r1, [r7, #8]
1000b2fc:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
1000b2fe:	2300      	movs	r3, #0
1000b300:	617b      	str	r3, [r7, #20]
1000b302:	e019      	b.n	1000b338 <uart_read_blocking+0x46>
1000b304:	46c0      	nop			; (mov r8, r8)
        while (!uart_is_readable(uart))
1000b306:	68fb      	ldr	r3, [r7, #12]
1000b308:	0018      	movs	r0, r3
1000b30a:	f7ff ffb3 	bl	1000b274 <uart_is_readable>
1000b30e:	0003      	movs	r3, r0
1000b310:	001a      	movs	r2, r3
1000b312:	2301      	movs	r3, #1
1000b314:	4053      	eors	r3, r2
1000b316:	b2db      	uxtb	r3, r3
1000b318:	2b00      	cmp	r3, #0
1000b31a:	d1f3      	bne.n	1000b304 <uart_read_blocking+0x12>
            tight_loop_contents();
        *dst++ = (uint8_t) uart_get_hw(uart)->dr;
1000b31c:	68fb      	ldr	r3, [r7, #12]
1000b31e:	0018      	movs	r0, r3
1000b320:	f7ff ff88 	bl	1000b234 <uart_get_hw>
1000b324:	0003      	movs	r3, r0
1000b326:	6819      	ldr	r1, [r3, #0]
1000b328:	68bb      	ldr	r3, [r7, #8]
1000b32a:	1c5a      	adds	r2, r3, #1
1000b32c:	60ba      	str	r2, [r7, #8]
1000b32e:	b2ca      	uxtb	r2, r1
1000b330:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
1000b332:	697b      	ldr	r3, [r7, #20]
1000b334:	3301      	adds	r3, #1
1000b336:	617b      	str	r3, [r7, #20]
1000b338:	697a      	ldr	r2, [r7, #20]
1000b33a:	687b      	ldr	r3, [r7, #4]
1000b33c:	429a      	cmp	r2, r3
1000b33e:	d3e2      	bcc.n	1000b306 <uart_read_blocking+0x14>
    }
}
1000b340:	46c0      	nop			; (mov r8, r8)
1000b342:	46c0      	nop			; (mov r8, r8)
1000b344:	46bd      	mov	sp, r7
1000b346:	b006      	add	sp, #24
1000b348:	bd80      	pop	{r7, pc}

1000b34a <uart_putc_raw>:
 * This function will block until the entire character has been sent
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param c The character  to send
 */
static inline void uart_putc_raw(uart_inst_t *uart, char c) {
1000b34a:	b580      	push	{r7, lr}
1000b34c:	b082      	sub	sp, #8
1000b34e:	af00      	add	r7, sp, #0
1000b350:	6078      	str	r0, [r7, #4]
1000b352:	000a      	movs	r2, r1
1000b354:	1cfb      	adds	r3, r7, #3
1000b356:	701a      	strb	r2, [r3, #0]
    uart_write_blocking(uart, (const uint8_t *) &c, 1);
1000b358:	1cf9      	adds	r1, r7, #3
1000b35a:	687b      	ldr	r3, [r7, #4]
1000b35c:	2201      	movs	r2, #1
1000b35e:	0018      	movs	r0, r3
1000b360:	f7ff ff9b 	bl	1000b29a <uart_write_blocking>
}
1000b364:	46c0      	nop			; (mov r8, r8)
1000b366:	46bd      	mov	sp, r7
1000b368:	b002      	add	sp, #8
1000b36a:	bd80      	pop	{r7, pc}

1000b36c <uart_putc>:
 * This function will block until the character has been sent
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param c The character  to send
 */
static inline void uart_putc(uart_inst_t *uart, char c) {
1000b36c:	b580      	push	{r7, lr}
1000b36e:	b082      	sub	sp, #8
1000b370:	af00      	add	r7, sp, #0
1000b372:	6078      	str	r0, [r7, #4]
1000b374:	000a      	movs	r2, r1
1000b376:	1cfb      	adds	r3, r7, #3
1000b378:	701a      	strb	r2, [r3, #0]
#if PICO_UART_ENABLE_CRLF_SUPPORT
    extern short uart_char_to_line_feed[NUM_UARTS];
    if (uart_char_to_line_feed[uart_get_index(uart)] == c)
1000b37a:	687b      	ldr	r3, [r7, #4]
1000b37c:	0018      	movs	r0, r3
1000b37e:	f7ff ff47 	bl	1000b210 <uart_get_index>
1000b382:	0002      	movs	r2, r0
1000b384:	4b0b      	ldr	r3, [pc, #44]	; (1000b3b4 <uart_putc+0x48>)
1000b386:	0052      	lsls	r2, r2, #1
1000b388:	5ed3      	ldrsh	r3, [r2, r3]
1000b38a:	001a      	movs	r2, r3
1000b38c:	1cfb      	adds	r3, r7, #3
1000b38e:	781b      	ldrb	r3, [r3, #0]
1000b390:	429a      	cmp	r2, r3
1000b392:	d104      	bne.n	1000b39e <uart_putc+0x32>
        uart_putc_raw(uart, '\r');
1000b394:	687b      	ldr	r3, [r7, #4]
1000b396:	210d      	movs	r1, #13
1000b398:	0018      	movs	r0, r3
1000b39a:	f7ff ffd6 	bl	1000b34a <uart_putc_raw>
#endif
    uart_putc_raw(uart, c);
1000b39e:	1cfb      	adds	r3, r7, #3
1000b3a0:	781a      	ldrb	r2, [r3, #0]
1000b3a2:	687b      	ldr	r3, [r7, #4]
1000b3a4:	0011      	movs	r1, r2
1000b3a6:	0018      	movs	r0, r3
1000b3a8:	f7ff ffcf 	bl	1000b34a <uart_putc_raw>
}
1000b3ac:	46c0      	nop			; (mov r8, r8)
1000b3ae:	46bd      	mov	sp, r7
1000b3b0:	b002      	add	sp, #8
1000b3b2:	bd80      	pop	{r7, pc}
1000b3b4:	20009424 	.word	0x20009424

1000b3b8 <uart_getc>:
 * This function will block until the character has been read
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \return The character read.
 */
static inline char uart_getc(uart_inst_t *uart) {
1000b3b8:	b590      	push	{r4, r7, lr}
1000b3ba:	b085      	sub	sp, #20
1000b3bc:	af00      	add	r7, sp, #0
1000b3be:	6078      	str	r0, [r7, #4]
    char c;
    uart_read_blocking(uart, (uint8_t *) &c, 1);
1000b3c0:	240f      	movs	r4, #15
1000b3c2:	1939      	adds	r1, r7, r4
1000b3c4:	687b      	ldr	r3, [r7, #4]
1000b3c6:	2201      	movs	r2, #1
1000b3c8:	0018      	movs	r0, r3
1000b3ca:	f7ff ff92 	bl	1000b2f2 <uart_read_blocking>
    return c;
1000b3ce:	193b      	adds	r3, r7, r4
1000b3d0:	781b      	ldrb	r3, [r3, #0]
}
1000b3d2:	0018      	movs	r0, r3
1000b3d4:	46bd      	mov	sp, r7
1000b3d6:	b005      	add	sp, #20
1000b3d8:	bd90      	pop	{r4, r7, pc}
	...

1000b3dc <stdio_uart_init_full>:
    stdio_uart_init_full(uart_default, PICO_DEFAULT_UART_BAUD_RATE, -1, PICO_DEFAULT_UART_RX_PIN);
#endif
#endif
}

void stdio_uart_init_full(struct uart_inst *uart, uint baud_rate, int tx_pin, int rx_pin) {
1000b3dc:	b580      	push	{r7, lr}
1000b3de:	b084      	sub	sp, #16
1000b3e0:	af00      	add	r7, sp, #0
1000b3e2:	60f8      	str	r0, [r7, #12]
1000b3e4:	60b9      	str	r1, [r7, #8]
1000b3e6:	607a      	str	r2, [r7, #4]
1000b3e8:	603b      	str	r3, [r7, #0]
    uart_instance = uart;
1000b3ea:	4b11      	ldr	r3, [pc, #68]	; (1000b430 <stdio_uart_init_full+0x54>)
1000b3ec:	68fa      	ldr	r2, [r7, #12]
1000b3ee:	601a      	str	r2, [r3, #0]
    uart_init(uart_instance, baud_rate);
1000b3f0:	4b0f      	ldr	r3, [pc, #60]	; (1000b430 <stdio_uart_init_full+0x54>)
1000b3f2:	681b      	ldr	r3, [r3, #0]
1000b3f4:	68ba      	ldr	r2, [r7, #8]
1000b3f6:	0011      	movs	r1, r2
1000b3f8:	0018      	movs	r0, r3
1000b3fa:	f7fd fd29 	bl	10008e50 <uart_init>
    if (tx_pin >= 0) gpio_set_function((uint)tx_pin, GPIO_FUNC_UART);
1000b3fe:	687b      	ldr	r3, [r7, #4]
1000b400:	2b00      	cmp	r3, #0
1000b402:	db04      	blt.n	1000b40e <stdio_uart_init_full+0x32>
1000b404:	687b      	ldr	r3, [r7, #4]
1000b406:	2102      	movs	r1, #2
1000b408:	0018      	movs	r0, r3
1000b40a:	f7fb ff5f 	bl	100072cc <gpio_set_function>
    if (rx_pin >= 0) gpio_set_function((uint)rx_pin, GPIO_FUNC_UART);
1000b40e:	683b      	ldr	r3, [r7, #0]
1000b410:	2b00      	cmp	r3, #0
1000b412:	db04      	blt.n	1000b41e <stdio_uart_init_full+0x42>
1000b414:	683b      	ldr	r3, [r7, #0]
1000b416:	2102      	movs	r1, #2
1000b418:	0018      	movs	r0, r3
1000b41a:	f7fb ff57 	bl	100072cc <gpio_set_function>
    stdio_set_driver_enabled(&stdio_uart, true);
1000b41e:	4b05      	ldr	r3, [pc, #20]	; (1000b434 <stdio_uart_init_full+0x58>)
1000b420:	2101      	movs	r1, #1
1000b422:	0018      	movs	r0, r3
1000b424:	f7ff fe04 	bl	1000b030 <stdio_set_driver_enabled>
}
1000b428:	46c0      	nop			; (mov r8, r8)
1000b42a:	46bd      	mov	sp, r7
1000b42c:	b004      	add	sp, #16
1000b42e:	bd80      	pop	{r7, pc}
1000b430:	2000942c 	.word	0x2000942c
1000b434:	200006a0 	.word	0x200006a0

1000b438 <stdio_uart_out_chars>:

static void stdio_uart_out_chars(const char *buf, int length) {
1000b438:	b580      	push	{r7, lr}
1000b43a:	b084      	sub	sp, #16
1000b43c:	af00      	add	r7, sp, #0
1000b43e:	6078      	str	r0, [r7, #4]
1000b440:	6039      	str	r1, [r7, #0]
    for (int i = 0; i <length; i++) {
1000b442:	2300      	movs	r3, #0
1000b444:	60fb      	str	r3, [r7, #12]
1000b446:	e00b      	b.n	1000b460 <stdio_uart_out_chars+0x28>
        uart_putc(uart_instance, buf[i]);
1000b448:	4b0a      	ldr	r3, [pc, #40]	; (1000b474 <stdio_uart_out_chars+0x3c>)
1000b44a:	6818      	ldr	r0, [r3, #0]
1000b44c:	68fb      	ldr	r3, [r7, #12]
1000b44e:	687a      	ldr	r2, [r7, #4]
1000b450:	18d3      	adds	r3, r2, r3
1000b452:	781b      	ldrb	r3, [r3, #0]
1000b454:	0019      	movs	r1, r3
1000b456:	f7ff ff89 	bl	1000b36c <uart_putc>
    for (int i = 0; i <length; i++) {
1000b45a:	68fb      	ldr	r3, [r7, #12]
1000b45c:	3301      	adds	r3, #1
1000b45e:	60fb      	str	r3, [r7, #12]
1000b460:	68fa      	ldr	r2, [r7, #12]
1000b462:	683b      	ldr	r3, [r7, #0]
1000b464:	429a      	cmp	r2, r3
1000b466:	dbef      	blt.n	1000b448 <stdio_uart_out_chars+0x10>
    }
}
1000b468:	46c0      	nop			; (mov r8, r8)
1000b46a:	46c0      	nop			; (mov r8, r8)
1000b46c:	46bd      	mov	sp, r7
1000b46e:	b004      	add	sp, #16
1000b470:	bd80      	pop	{r7, pc}
1000b472:	46c0      	nop			; (mov r8, r8)
1000b474:	2000942c 	.word	0x2000942c

1000b478 <stdio_uart_in_chars>:

int stdio_uart_in_chars(char *buf, int length) {
1000b478:	b590      	push	{r4, r7, lr}
1000b47a:	b085      	sub	sp, #20
1000b47c:	af00      	add	r7, sp, #0
1000b47e:	6078      	str	r0, [r7, #4]
1000b480:	6039      	str	r1, [r7, #0]
    int i=0;
1000b482:	2300      	movs	r3, #0
1000b484:	60fb      	str	r3, [r7, #12]
    while (i<length && uart_is_readable(uart_instance)) {
1000b486:	e00c      	b.n	1000b4a2 <stdio_uart_in_chars+0x2a>
        buf[i++] = uart_getc(uart_instance);
1000b488:	4b11      	ldr	r3, [pc, #68]	; (1000b4d0 <stdio_uart_in_chars+0x58>)
1000b48a:	6819      	ldr	r1, [r3, #0]
1000b48c:	68fb      	ldr	r3, [r7, #12]
1000b48e:	1c5a      	adds	r2, r3, #1
1000b490:	60fa      	str	r2, [r7, #12]
1000b492:	001a      	movs	r2, r3
1000b494:	687b      	ldr	r3, [r7, #4]
1000b496:	189c      	adds	r4, r3, r2
1000b498:	0008      	movs	r0, r1
1000b49a:	f7ff ff8d 	bl	1000b3b8 <uart_getc>
1000b49e:	0003      	movs	r3, r0
1000b4a0:	7023      	strb	r3, [r4, #0]
    while (i<length && uart_is_readable(uart_instance)) {
1000b4a2:	68fa      	ldr	r2, [r7, #12]
1000b4a4:	683b      	ldr	r3, [r7, #0]
1000b4a6:	429a      	cmp	r2, r3
1000b4a8:	da06      	bge.n	1000b4b8 <stdio_uart_in_chars+0x40>
1000b4aa:	4b09      	ldr	r3, [pc, #36]	; (1000b4d0 <stdio_uart_in_chars+0x58>)
1000b4ac:	681b      	ldr	r3, [r3, #0]
1000b4ae:	0018      	movs	r0, r3
1000b4b0:	f7ff fee0 	bl	1000b274 <uart_is_readable>
1000b4b4:	1e03      	subs	r3, r0, #0
1000b4b6:	d1e7      	bne.n	1000b488 <stdio_uart_in_chars+0x10>
    }
    return i ? i : PICO_ERROR_NO_DATA;
1000b4b8:	68fb      	ldr	r3, [r7, #12]
1000b4ba:	2b00      	cmp	r3, #0
1000b4bc:	d001      	beq.n	1000b4c2 <stdio_uart_in_chars+0x4a>
1000b4be:	68fb      	ldr	r3, [r7, #12]
1000b4c0:	e001      	b.n	1000b4c6 <stdio_uart_in_chars+0x4e>
1000b4c2:	2303      	movs	r3, #3
1000b4c4:	425b      	negs	r3, r3
}
1000b4c6:	0018      	movs	r0, r3
1000b4c8:	46bd      	mov	sp, r7
1000b4ca:	b005      	add	sp, #20
1000b4cc:	bd90      	pop	{r4, r7, pc}
1000b4ce:	46c0      	nop			; (mov r8, r8)
1000b4d0:	2000942c 	.word	0x2000942c

1000b4d4 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot(void) {
1000b4d4:	b580      	push	{r7, lr}
1000b4d6:	af00      	add	r7, sp, #0
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
1000b4d8:	4b03      	ldr	r3, [pc, #12]	; (1000b4e8 <_retrieve_unique_id_on_boot+0x14>)
1000b4da:	0018      	movs	r0, r3
1000b4dc:	f7fb feb6 	bl	1000724c <flash_get_unique_id>
#endif
}
1000b4e0:	46c0      	nop			; (mov r8, r8)
1000b4e2:	46bd      	mov	sp, r7
1000b4e4:	bd80      	pop	{r7, pc}
1000b4e6:	46c0      	nop			; (mov r8, r8)
1000b4e8:	200091fc 	.word	0x200091fc

1000b4ec <pico_get_unique_board_id>:

void pico_get_unique_board_id(pico_unique_board_id_t *id_out) {
1000b4ec:	b580      	push	{r7, lr}
1000b4ee:	b082      	sub	sp, #8
1000b4f0:	af00      	add	r7, sp, #0
1000b4f2:	6078      	str	r0, [r7, #4]
    *id_out = retrieved_id;
1000b4f4:	687a      	ldr	r2, [r7, #4]
1000b4f6:	4b05      	ldr	r3, [pc, #20]	; (1000b50c <pico_get_unique_board_id+0x20>)
1000b4f8:	0010      	movs	r0, r2
1000b4fa:	0019      	movs	r1, r3
1000b4fc:	2308      	movs	r3, #8
1000b4fe:	001a      	movs	r2, r3
1000b500:	f001 fd30 	bl	1000cf64 <__wrap___aeabi_memcpy>
}
1000b504:	46c0      	nop			; (mov r8, r8)
1000b506:	46bd      	mov	sp, r7
1000b508:	b002      	add	sp, #8
1000b50a:	bd80      	pop	{r7, pc}
1000b50c:	200091fc 	.word	0x200091fc

1000b510 <uart_get_index>:
static inline uint uart_get_index(uart_inst_t *uart) {
1000b510:	b580      	push	{r7, lr}
1000b512:	b082      	sub	sp, #8
1000b514:	af00      	add	r7, sp, #0
1000b516:	6078      	str	r0, [r7, #4]
    return uart == uart1 ? 1 : 0;
1000b518:	687b      	ldr	r3, [r7, #4]
1000b51a:	4a05      	ldr	r2, [pc, #20]	; (1000b530 <uart_get_index+0x20>)
1000b51c:	4694      	mov	ip, r2
1000b51e:	4463      	add	r3, ip
1000b520:	425a      	negs	r2, r3
1000b522:	4153      	adcs	r3, r2
1000b524:	b2db      	uxtb	r3, r3
}
1000b526:	0018      	movs	r0, r3
1000b528:	46bd      	mov	sp, r7
1000b52a:	b002      	add	sp, #8
1000b52c:	bd80      	pop	{r7, pc}
1000b52e:	46c0      	nop			; (mov r8, r8)
1000b530:	bffc8000 	.word	0xbffc8000

1000b534 <uart_get_hw>:
static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
1000b534:	b580      	push	{r7, lr}
1000b536:	b082      	sub	sp, #8
1000b538:	af00      	add	r7, sp, #0
1000b53a:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
1000b53c:	687b      	ldr	r3, [r7, #4]
1000b53e:	0018      	movs	r0, r3
1000b540:	f7ff ffe6 	bl	1000b510 <uart_get_index>
    return (uart_hw_t *)uart;
1000b544:	687b      	ldr	r3, [r7, #4]
}
1000b546:	0018      	movs	r0, r3
1000b548:	46bd      	mov	sp, r7
1000b54a:	b002      	add	sp, #8
1000b54c:	bd80      	pop	{r7, pc}

1000b54e <uart_is_writable>:
static inline bool uart_is_writable(uart_inst_t *uart) {
1000b54e:	b580      	push	{r7, lr}
1000b550:	b082      	sub	sp, #8
1000b552:	af00      	add	r7, sp, #0
1000b554:	6078      	str	r0, [r7, #4]
    return !(uart_get_hw(uart)->fr & UART_UARTFR_TXFF_BITS);
1000b556:	687b      	ldr	r3, [r7, #4]
1000b558:	0018      	movs	r0, r3
1000b55a:	f7ff ffeb 	bl	1000b534 <uart_get_hw>
1000b55e:	0003      	movs	r3, r0
1000b560:	699b      	ldr	r3, [r3, #24]
1000b562:	2220      	movs	r2, #32
1000b564:	4013      	ands	r3, r2
1000b566:	425a      	negs	r2, r3
1000b568:	4153      	adcs	r3, r2
1000b56a:	b2db      	uxtb	r3, r3
}
1000b56c:	0018      	movs	r0, r3
1000b56e:	46bd      	mov	sp, r7
1000b570:	b002      	add	sp, #8
1000b572:	bd80      	pop	{r7, pc}

1000b574 <uart_is_readable>:
static inline bool uart_is_readable(uart_inst_t *uart) {
1000b574:	b580      	push	{r7, lr}
1000b576:	b082      	sub	sp, #8
1000b578:	af00      	add	r7, sp, #0
1000b57a:	6078      	str	r0, [r7, #4]
    return !(uart_get_hw(uart)->fr & UART_UARTFR_RXFE_BITS);
1000b57c:	687b      	ldr	r3, [r7, #4]
1000b57e:	0018      	movs	r0, r3
1000b580:	f7ff ffd8 	bl	1000b534 <uart_get_hw>
1000b584:	0003      	movs	r3, r0
1000b586:	699b      	ldr	r3, [r3, #24]
1000b588:	2210      	movs	r2, #16
1000b58a:	4013      	ands	r3, r2
1000b58c:	425a      	negs	r2, r3
1000b58e:	4153      	adcs	r3, r2
1000b590:	b2db      	uxtb	r3, r3
}
1000b592:	0018      	movs	r0, r3
1000b594:	46bd      	mov	sp, r7
1000b596:	b002      	add	sp, #8
1000b598:	bd80      	pop	{r7, pc}

1000b59a <uart_write_blocking>:
static inline void uart_write_blocking(uart_inst_t *uart, const uint8_t *src, size_t len) {
1000b59a:	b590      	push	{r4, r7, lr}
1000b59c:	b087      	sub	sp, #28
1000b59e:	af00      	add	r7, sp, #0
1000b5a0:	60f8      	str	r0, [r7, #12]
1000b5a2:	60b9      	str	r1, [r7, #8]
1000b5a4:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
1000b5a6:	2300      	movs	r3, #0
1000b5a8:	617b      	str	r3, [r7, #20]
1000b5aa:	e019      	b.n	1000b5e0 <uart_write_blocking+0x46>
1000b5ac:	46c0      	nop			; (mov r8, r8)
        while (!uart_is_writable(uart))
1000b5ae:	68fb      	ldr	r3, [r7, #12]
1000b5b0:	0018      	movs	r0, r3
1000b5b2:	f7ff ffcc 	bl	1000b54e <uart_is_writable>
1000b5b6:	0003      	movs	r3, r0
1000b5b8:	001a      	movs	r2, r3
1000b5ba:	2301      	movs	r3, #1
1000b5bc:	4053      	eors	r3, r2
1000b5be:	b2db      	uxtb	r3, r3
1000b5c0:	2b00      	cmp	r3, #0
1000b5c2:	d1f3      	bne.n	1000b5ac <uart_write_blocking+0x12>
        uart_get_hw(uart)->dr = *src++;
1000b5c4:	68bb      	ldr	r3, [r7, #8]
1000b5c6:	1c5a      	adds	r2, r3, #1
1000b5c8:	60ba      	str	r2, [r7, #8]
1000b5ca:	781c      	ldrb	r4, [r3, #0]
1000b5cc:	68fb      	ldr	r3, [r7, #12]
1000b5ce:	0018      	movs	r0, r3
1000b5d0:	f7ff ffb0 	bl	1000b534 <uart_get_hw>
1000b5d4:	0003      	movs	r3, r0
1000b5d6:	0022      	movs	r2, r4
1000b5d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
1000b5da:	697b      	ldr	r3, [r7, #20]
1000b5dc:	3301      	adds	r3, #1
1000b5de:	617b      	str	r3, [r7, #20]
1000b5e0:	697a      	ldr	r2, [r7, #20]
1000b5e2:	687b      	ldr	r3, [r7, #4]
1000b5e4:	429a      	cmp	r2, r3
1000b5e6:	d3e2      	bcc.n	1000b5ae <uart_write_blocking+0x14>
}
1000b5e8:	46c0      	nop			; (mov r8, r8)
1000b5ea:	46c0      	nop			; (mov r8, r8)
1000b5ec:	46bd      	mov	sp, r7
1000b5ee:	b007      	add	sp, #28
1000b5f0:	bd90      	pop	{r4, r7, pc}

1000b5f2 <uart_read_blocking>:
static inline void uart_read_blocking(uart_inst_t *uart, uint8_t *dst, size_t len) {
1000b5f2:	b580      	push	{r7, lr}
1000b5f4:	b086      	sub	sp, #24
1000b5f6:	af00      	add	r7, sp, #0
1000b5f8:	60f8      	str	r0, [r7, #12]
1000b5fa:	60b9      	str	r1, [r7, #8]
1000b5fc:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
1000b5fe:	2300      	movs	r3, #0
1000b600:	617b      	str	r3, [r7, #20]
1000b602:	e019      	b.n	1000b638 <uart_read_blocking+0x46>
1000b604:	46c0      	nop			; (mov r8, r8)
        while (!uart_is_readable(uart))
1000b606:	68fb      	ldr	r3, [r7, #12]
1000b608:	0018      	movs	r0, r3
1000b60a:	f7ff ffb3 	bl	1000b574 <uart_is_readable>
1000b60e:	0003      	movs	r3, r0
1000b610:	001a      	movs	r2, r3
1000b612:	2301      	movs	r3, #1
1000b614:	4053      	eors	r3, r2
1000b616:	b2db      	uxtb	r3, r3
1000b618:	2b00      	cmp	r3, #0
1000b61a:	d1f3      	bne.n	1000b604 <uart_read_blocking+0x12>
        *dst++ = (uint8_t) uart_get_hw(uart)->dr;
1000b61c:	68fb      	ldr	r3, [r7, #12]
1000b61e:	0018      	movs	r0, r3
1000b620:	f7ff ff88 	bl	1000b534 <uart_get_hw>
1000b624:	0003      	movs	r3, r0
1000b626:	6819      	ldr	r1, [r3, #0]
1000b628:	68bb      	ldr	r3, [r7, #8]
1000b62a:	1c5a      	adds	r2, r3, #1
1000b62c:	60ba      	str	r2, [r7, #8]
1000b62e:	b2ca      	uxtb	r2, r1
1000b630:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
1000b632:	697b      	ldr	r3, [r7, #20]
1000b634:	3301      	adds	r3, #1
1000b636:	617b      	str	r3, [r7, #20]
1000b638:	697a      	ldr	r2, [r7, #20]
1000b63a:	687b      	ldr	r3, [r7, #4]
1000b63c:	429a      	cmp	r2, r3
1000b63e:	d3e2      	bcc.n	1000b606 <uart_read_blocking+0x14>
}
1000b640:	46c0      	nop			; (mov r8, r8)
1000b642:	46c0      	nop			; (mov r8, r8)
1000b644:	46bd      	mov	sp, r7
1000b646:	b006      	add	sp, #24
1000b648:	bd80      	pop	{r7, pc}

1000b64a <uart_getc>:
static inline char uart_getc(uart_inst_t *uart) {
1000b64a:	b590      	push	{r4, r7, lr}
1000b64c:	b085      	sub	sp, #20
1000b64e:	af00      	add	r7, sp, #0
1000b650:	6078      	str	r0, [r7, #4]
    uart_read_blocking(uart, (uint8_t *) &c, 1);
1000b652:	240f      	movs	r4, #15
1000b654:	1939      	adds	r1, r7, r4
1000b656:	687b      	ldr	r3, [r7, #4]
1000b658:	2201      	movs	r2, #1
1000b65a:	0018      	movs	r0, r3
1000b65c:	f7ff ffc9 	bl	1000b5f2 <uart_read_blocking>
    return c;
1000b660:	193b      	adds	r3, r7, r4
1000b662:	781b      	ldrb	r3, [r3, #0]
}
1000b664:	0018      	movs	r0, r3
1000b666:	46bd      	mov	sp, r7
1000b668:	b005      	add	sp, #20
1000b66a:	bd90      	pop	{r4, r7, pc}

1000b66c <tud_cdc_n_write_char>:
  uint8_t ch;
  return tud_cdc_n_read(itf, &ch, 1) ? (int32_t) ch : -1;
}

static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch)
{
1000b66c:	b580      	push	{r7, lr}
1000b66e:	b082      	sub	sp, #8
1000b670:	af00      	add	r7, sp, #0
1000b672:	0002      	movs	r2, r0
1000b674:	1dfb      	adds	r3, r7, #7
1000b676:	701a      	strb	r2, [r3, #0]
1000b678:	1dbb      	adds	r3, r7, #6
1000b67a:	1c0a      	adds	r2, r1, #0
1000b67c:	701a      	strb	r2, [r3, #0]
  return tud_cdc_n_write(itf, &ch, 1);
1000b67e:	1db9      	adds	r1, r7, #6
1000b680:	1dfb      	adds	r3, r7, #7
1000b682:	781b      	ldrb	r3, [r3, #0]
1000b684:	2201      	movs	r2, #1
1000b686:	0018      	movs	r0, r3
1000b688:	f7f4 ffa6 	bl	100005d8 <tud_cdc_n_write>
1000b68c:	0003      	movs	r3, r0
}
1000b68e:	0018      	movs	r0, r3
1000b690:	46bd      	mov	sp, r7
1000b692:	b002      	add	sp, #8
1000b694:	bd80      	pop	{r7, pc}

1000b696 <tud_cdc_connected>:
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
1000b696:	b580      	push	{r7, lr}
1000b698:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
1000b69a:	2000      	movs	r0, #0
1000b69c:	f7f4 ff18 	bl	100004d0 <tud_cdc_n_connected>
1000b6a0:	0003      	movs	r3, r0
}
1000b6a2:	0018      	movs	r0, r3
1000b6a4:	46bd      	mov	sp, r7
1000b6a6:	bd80      	pop	{r7, pc}

1000b6a8 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
1000b6a8:	b580      	push	{r7, lr}
1000b6aa:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
1000b6ac:	2000      	movs	r0, #0
1000b6ae:	f7f4 ff53 	bl	10000558 <tud_cdc_n_available>
1000b6b2:	0003      	movs	r3, r0
}
1000b6b4:	0018      	movs	r0, r3
1000b6b6:	46bd      	mov	sp, r7
1000b6b8:	bd80      	pop	{r7, pc}

1000b6ba <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
1000b6ba:	b580      	push	{r7, lr}
1000b6bc:	b082      	sub	sp, #8
1000b6be:	af00      	add	r7, sp, #0
1000b6c0:	6078      	str	r0, [r7, #4]
1000b6c2:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
1000b6c4:	683a      	ldr	r2, [r7, #0]
1000b6c6:	687b      	ldr	r3, [r7, #4]
1000b6c8:	0019      	movs	r1, r3
1000b6ca:	2000      	movs	r0, #0
1000b6cc:	f7f4 ff5e 	bl	1000058c <tud_cdc_n_read>
1000b6d0:	0003      	movs	r3, r0
}
1000b6d2:	0018      	movs	r0, r3
1000b6d4:	46bd      	mov	sp, r7
1000b6d6:	b002      	add	sp, #8
1000b6d8:	bd80      	pop	{r7, pc}

1000b6da <tud_cdc_write_char>:
{
  return tud_cdc_n_peek(0, ui8);
}

static inline uint32_t tud_cdc_write_char (char ch)
{
1000b6da:	b580      	push	{r7, lr}
1000b6dc:	b082      	sub	sp, #8
1000b6de:	af00      	add	r7, sp, #0
1000b6e0:	0002      	movs	r2, r0
1000b6e2:	1dfb      	adds	r3, r7, #7
1000b6e4:	701a      	strb	r2, [r3, #0]
  return tud_cdc_n_write_char(0, ch);
1000b6e6:	1dfb      	adds	r3, r7, #7
1000b6e8:	781b      	ldrb	r3, [r3, #0]
1000b6ea:	0019      	movs	r1, r3
1000b6ec:	2000      	movs	r0, #0
1000b6ee:	f7ff ffbd 	bl	1000b66c <tud_cdc_n_write_char>
1000b6f2:	0003      	movs	r3, r0
}
1000b6f4:	0018      	movs	r0, r3
1000b6f6:	46bd      	mov	sp, r7
1000b6f8:	b002      	add	sp, #8
1000b6fa:	bd80      	pop	{r7, pc}

1000b6fc <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
1000b6fc:	b580      	push	{r7, lr}
1000b6fe:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
1000b700:	2000      	movs	r0, #0
1000b702:	f7f4 ff9d 	bl	10000640 <tud_cdc_n_write_flush>
1000b706:	0003      	movs	r3, r0
}
1000b708:	0018      	movs	r0, r3
1000b70a:	46bd      	mov	sp, r7
1000b70c:	bd80      	pop	{r7, pc}
	...

1000b710 <cdc_uart_init>:

#include "tusb.h"

#include "picoprobe_config.h"

void cdc_uart_init(void) {
1000b710:	b580      	push	{r7, lr}
1000b712:	af00      	add	r7, sp, #0
    gpio_set_function(PICOPROBE_UART_TX, GPIO_FUNC_UART);
1000b714:	2102      	movs	r1, #2
1000b716:	2004      	movs	r0, #4
1000b718:	f7fb fdd8 	bl	100072cc <gpio_set_function>
    gpio_set_function(PICOPROBE_UART_RX, GPIO_FUNC_UART);
1000b71c:	2102      	movs	r1, #2
1000b71e:	2005      	movs	r0, #5
1000b720:	f7fb fdd4 	bl	100072cc <gpio_set_function>
    uart_init(PICOPROBE_UART_INTERFACE, PICOPROBE_UART_BAUDRATE);
1000b724:	23e1      	movs	r3, #225	; 0xe1
1000b726:	025b      	lsls	r3, r3, #9
1000b728:	4a03      	ldr	r2, [pc, #12]	; (1000b738 <cdc_uart_init+0x28>)
1000b72a:	0019      	movs	r1, r3
1000b72c:	0010      	movs	r0, r2
1000b72e:	f7fd fb8f 	bl	10008e50 <uart_init>
}
1000b732:	46c0      	nop			; (mov r8, r8)
1000b734:	46bd      	mov	sp, r7
1000b736:	bd80      	pop	{r7, pc}
1000b738:	40038000 	.word	0x40038000

1000b73c <cdc_task>:

#define MAX_UART_PKT 64
void cdc_task(void) {
1000b73c:	b590      	push	{r4, r7, lr}
1000b73e:	b0a5      	sub	sp, #148	; 0x94
1000b740:	af00      	add	r7, sp, #0
    uint8_t rx_buf[MAX_UART_PKT];
    uint8_t tx_buf[MAX_UART_PKT];

    // Consume uart fifo regardless even if not connected
    uint rx_len = 0;
1000b742:	2300      	movs	r3, #0
1000b744:	228c      	movs	r2, #140	; 0x8c
1000b746:	18ba      	adds	r2, r7, r2
1000b748:	6013      	str	r3, [r2, #0]
    while(uart_is_readable(PICOPROBE_UART_INTERFACE) && (rx_len < MAX_UART_PKT)) {
1000b74a:	e00e      	b.n	1000b76a <cdc_task+0x2e>
        rx_buf[rx_len++] = uart_getc(PICOPROBE_UART_INTERFACE);
1000b74c:	228c      	movs	r2, #140	; 0x8c
1000b74e:	18bb      	adds	r3, r7, r2
1000b750:	681c      	ldr	r4, [r3, #0]
1000b752:	1c63      	adds	r3, r4, #1
1000b754:	18ba      	adds	r2, r7, r2
1000b756:	6013      	str	r3, [r2, #0]
1000b758:	4b29      	ldr	r3, [pc, #164]	; (1000b800 <cdc_task+0xc4>)
1000b75a:	0018      	movs	r0, r3
1000b75c:	f7ff ff75 	bl	1000b64a <uart_getc>
1000b760:	0003      	movs	r3, r0
1000b762:	001a      	movs	r2, r3
1000b764:	2344      	movs	r3, #68	; 0x44
1000b766:	18fb      	adds	r3, r7, r3
1000b768:	551a      	strb	r2, [r3, r4]
    while(uart_is_readable(PICOPROBE_UART_INTERFACE) && (rx_len < MAX_UART_PKT)) {
1000b76a:	4b25      	ldr	r3, [pc, #148]	; (1000b800 <cdc_task+0xc4>)
1000b76c:	0018      	movs	r0, r3
1000b76e:	f7ff ff01 	bl	1000b574 <uart_is_readable>
1000b772:	1e03      	subs	r3, r0, #0
1000b774:	d004      	beq.n	1000b780 <cdc_task+0x44>
1000b776:	238c      	movs	r3, #140	; 0x8c
1000b778:	18fb      	adds	r3, r7, r3
1000b77a:	681b      	ldr	r3, [r3, #0]
1000b77c:	2b3f      	cmp	r3, #63	; 0x3f
1000b77e:	d9e5      	bls.n	1000b74c <cdc_task+0x10>
    }

    if (tud_cdc_connected()) {
1000b780:	f7ff ff89 	bl	1000b696 <tud_cdc_connected>
1000b784:	1e03      	subs	r3, r0, #0
1000b786:	d036      	beq.n	1000b7f6 <cdc_task+0xba>
        // Do we have anything to display on the host's terminal?
        if (rx_len) {
1000b788:	238c      	movs	r3, #140	; 0x8c
1000b78a:	18fb      	adds	r3, r7, r3
1000b78c:	681b      	ldr	r3, [r3, #0]
1000b78e:	2b00      	cmp	r3, #0
1000b790:	d01d      	beq.n	1000b7ce <cdc_task+0x92>
            for (uint i = 0; i < rx_len; i++) {
1000b792:	2300      	movs	r3, #0
1000b794:	2288      	movs	r2, #136	; 0x88
1000b796:	18ba      	adds	r2, r7, r2
1000b798:	6013      	str	r3, [r2, #0]
1000b79a:	e00e      	b.n	1000b7ba <cdc_task+0x7e>
                tud_cdc_write_char(rx_buf[i]);
1000b79c:	2344      	movs	r3, #68	; 0x44
1000b79e:	18fa      	adds	r2, r7, r3
1000b7a0:	2488      	movs	r4, #136	; 0x88
1000b7a2:	193b      	adds	r3, r7, r4
1000b7a4:	681b      	ldr	r3, [r3, #0]
1000b7a6:	18d3      	adds	r3, r2, r3
1000b7a8:	781b      	ldrb	r3, [r3, #0]
1000b7aa:	0018      	movs	r0, r3
1000b7ac:	f7ff ff95 	bl	1000b6da <tud_cdc_write_char>
            for (uint i = 0; i < rx_len; i++) {
1000b7b0:	193b      	adds	r3, r7, r4
1000b7b2:	681b      	ldr	r3, [r3, #0]
1000b7b4:	3301      	adds	r3, #1
1000b7b6:	193a      	adds	r2, r7, r4
1000b7b8:	6013      	str	r3, [r2, #0]
1000b7ba:	2388      	movs	r3, #136	; 0x88
1000b7bc:	18fb      	adds	r3, r7, r3
1000b7be:	681a      	ldr	r2, [r3, #0]
1000b7c0:	238c      	movs	r3, #140	; 0x8c
1000b7c2:	18fb      	adds	r3, r7, r3
1000b7c4:	681b      	ldr	r3, [r3, #0]
1000b7c6:	429a      	cmp	r2, r3
1000b7c8:	d3e8      	bcc.n	1000b79c <cdc_task+0x60>
            }
            tud_cdc_write_flush();
1000b7ca:	f7ff ff97 	bl	1000b6fc <tud_cdc_write_flush>
        }

        if (tud_cdc_available()) {
1000b7ce:	f7ff ff6b 	bl	1000b6a8 <tud_cdc_available>
1000b7d2:	1e03      	subs	r3, r0, #0
1000b7d4:	d00f      	beq.n	1000b7f6 <cdc_task+0xba>
            // Is there any data from the host for us to tx
            uint tx_len = tud_cdc_read(tx_buf, sizeof(tx_buf));
1000b7d6:	1d3b      	adds	r3, r7, #4
1000b7d8:	2140      	movs	r1, #64	; 0x40
1000b7da:	0018      	movs	r0, r3
1000b7dc:	f7ff ff6d 	bl	1000b6ba <tud_cdc_read>
1000b7e0:	0003      	movs	r3, r0
1000b7e2:	2284      	movs	r2, #132	; 0x84
1000b7e4:	18b9      	adds	r1, r7, r2
1000b7e6:	600b      	str	r3, [r1, #0]
            uart_write_blocking(PICOPROBE_UART_INTERFACE, tx_buf, tx_len);
1000b7e8:	18bb      	adds	r3, r7, r2
1000b7ea:	681a      	ldr	r2, [r3, #0]
1000b7ec:	1d3b      	adds	r3, r7, #4
1000b7ee:	4804      	ldr	r0, [pc, #16]	; (1000b800 <cdc_task+0xc4>)
1000b7f0:	0019      	movs	r1, r3
1000b7f2:	f7ff fed2 	bl	1000b59a <uart_write_blocking>
        }
    }
}
1000b7f6:	46c0      	nop			; (mov r8, r8)
1000b7f8:	46bd      	mov	sp, r7
1000b7fa:	b025      	add	sp, #148	; 0x94
1000b7fc:	bd90      	pop	{r4, r7, pc}
1000b7fe:	46c0      	nop			; (mov r8, r8)
1000b800:	40038000 	.word	0x40038000

1000b804 <tud_cdc_line_coding_cb>:

void tud_cdc_line_coding_cb(uint8_t itf, cdc_line_coding_t const* line_coding) {
1000b804:	b580      	push	{r7, lr}
1000b806:	b082      	sub	sp, #8
1000b808:	af00      	add	r7, sp, #0
1000b80a:	0002      	movs	r2, r0
1000b80c:	6039      	str	r1, [r7, #0]
1000b80e:	1dfb      	adds	r3, r7, #7
1000b810:	701a      	strb	r2, [r3, #0]
    picoprobe_info("New baud rate %d\n", line_coding->bit_rate);
    uart_init(PICOPROBE_UART_INTERFACE, line_coding->bit_rate);
1000b812:	683b      	ldr	r3, [r7, #0]
1000b814:	781a      	ldrb	r2, [r3, #0]
1000b816:	7859      	ldrb	r1, [r3, #1]
1000b818:	0209      	lsls	r1, r1, #8
1000b81a:	430a      	orrs	r2, r1
1000b81c:	7899      	ldrb	r1, [r3, #2]
1000b81e:	0409      	lsls	r1, r1, #16
1000b820:	430a      	orrs	r2, r1
1000b822:	78db      	ldrb	r3, [r3, #3]
1000b824:	061b      	lsls	r3, r3, #24
1000b826:	4313      	orrs	r3, r2
1000b828:	001a      	movs	r2, r3
1000b82a:	4b04      	ldr	r3, [pc, #16]	; (1000b83c <tud_cdc_line_coding_cb+0x38>)
1000b82c:	0011      	movs	r1, r2
1000b82e:	0018      	movs	r0, r3
1000b830:	f7fd fb0e 	bl	10008e50 <uart_init>
}
1000b834:	46c0      	nop			; (mov r8, r8)
1000b836:	46bd      	mov	sp, r7
1000b838:	b002      	add	sp, #8
1000b83a:	bd80      	pop	{r7, pc}
1000b83c:	40038000 	.word	0x40038000

1000b840 <usb_serial_init>:

/* Why a uint8_t[8] array inside a struct instead of an uint64_t an inquiring mind might wonder */
static pico_unique_board_id_t uID;

void usb_serial_init(void)
{
1000b840:	b580      	push	{r7, lr}
1000b842:	b084      	sub	sp, #16
1000b844:	af00      	add	r7, sp, #0
    pico_get_unique_board_id(&uID);
1000b846:	4b1d      	ldr	r3, [pc, #116]	; (1000b8bc <usb_serial_init+0x7c>)
1000b848:	0018      	movs	r0, r3
1000b84a:	f7ff fe4f 	bl	1000b4ec <pico_get_unique_board_id>

    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES * 2; i++)
1000b84e:	2300      	movs	r3, #0
1000b850:	60fb      	str	r3, [r7, #12]
1000b852:	e02b      	b.n	1000b8ac <usb_serial_init+0x6c>
    {
        /* Byte index inside the uid array */
        int bi = i / 2;
1000b854:	68fb      	ldr	r3, [r7, #12]
1000b856:	2b00      	cmp	r3, #0
1000b858:	da00      	bge.n	1000b85c <usb_serial_init+0x1c>
1000b85a:	3301      	adds	r3, #1
1000b85c:	105b      	asrs	r3, r3, #1
1000b85e:	60bb      	str	r3, [r7, #8]
        /* Use high nibble first to keep memory order (just cosmetics) */
        uint8_t nibble = (uID.id[bi] >> 4) & 0x0F;
1000b860:	4a16      	ldr	r2, [pc, #88]	; (1000b8bc <usb_serial_init+0x7c>)
1000b862:	68bb      	ldr	r3, [r7, #8]
1000b864:	18d3      	adds	r3, r2, r3
1000b866:	781a      	ldrb	r2, [r3, #0]
1000b868:	1dfb      	adds	r3, r7, #7
1000b86a:	0912      	lsrs	r2, r2, #4
1000b86c:	701a      	strb	r2, [r3, #0]
        uID.id[bi] <<= 4;
1000b86e:	4a13      	ldr	r2, [pc, #76]	; (1000b8bc <usb_serial_init+0x7c>)
1000b870:	68bb      	ldr	r3, [r7, #8]
1000b872:	18d3      	adds	r3, r2, r3
1000b874:	781b      	ldrb	r3, [r3, #0]
1000b876:	011b      	lsls	r3, r3, #4
1000b878:	b2d9      	uxtb	r1, r3
1000b87a:	4a10      	ldr	r2, [pc, #64]	; (1000b8bc <usb_serial_init+0x7c>)
1000b87c:	68bb      	ldr	r3, [r7, #8]
1000b87e:	18d3      	adds	r3, r2, r3
1000b880:	1c0a      	adds	r2, r1, #0
1000b882:	701a      	strb	r2, [r3, #0]
        /* Binary to hex digit */
        usb_serial[i] = nibble < 10 ? nibble + '0' : nibble + 'A' - 10;
1000b884:	1dfb      	adds	r3, r7, #7
1000b886:	781b      	ldrb	r3, [r3, #0]
1000b888:	2b09      	cmp	r3, #9
1000b88a:	d804      	bhi.n	1000b896 <usb_serial_init+0x56>
1000b88c:	1dfb      	adds	r3, r7, #7
1000b88e:	781b      	ldrb	r3, [r3, #0]
1000b890:	3330      	adds	r3, #48	; 0x30
1000b892:	b2db      	uxtb	r3, r3
1000b894:	e003      	b.n	1000b89e <usb_serial_init+0x5e>
1000b896:	1dfb      	adds	r3, r7, #7
1000b898:	781b      	ldrb	r3, [r3, #0]
1000b89a:	3337      	adds	r3, #55	; 0x37
1000b89c:	b2db      	uxtb	r3, r3
1000b89e:	4908      	ldr	r1, [pc, #32]	; (1000b8c0 <usb_serial_init+0x80>)
1000b8a0:	68fa      	ldr	r2, [r7, #12]
1000b8a2:	188a      	adds	r2, r1, r2
1000b8a4:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES * 2; i++)
1000b8a6:	68fb      	ldr	r3, [r7, #12]
1000b8a8:	3301      	adds	r3, #1
1000b8aa:	60fb      	str	r3, [r7, #12]
1000b8ac:	68fb      	ldr	r3, [r7, #12]
1000b8ae:	2b0f      	cmp	r3, #15
1000b8b0:	ddd0      	ble.n	1000b854 <usb_serial_init+0x14>
    }
}
1000b8b2:	46c0      	nop			; (mov r8, r8)
1000b8b4:	46c0      	nop			; (mov r8, r8)
1000b8b6:	46bd      	mov	sp, r7
1000b8b8:	b004      	add	sp, #16
1000b8ba:	bd80      	pop	{r7, pc}
1000b8bc:	2000941c 	.word	0x2000941c
1000b8c0:	20009430 	.word	0x20009430

1000b8c4 <gpio_set_mask>:
static inline void gpio_set_mask(uint32_t mask) {
1000b8c4:	b580      	push	{r7, lr}
1000b8c6:	b082      	sub	sp, #8
1000b8c8:	af00      	add	r7, sp, #0
1000b8ca:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_set = mask;
1000b8cc:	23d0      	movs	r3, #208	; 0xd0
1000b8ce:	061b      	lsls	r3, r3, #24
1000b8d0:	687a      	ldr	r2, [r7, #4]
1000b8d2:	615a      	str	r2, [r3, #20]
}
1000b8d4:	46c0      	nop			; (mov r8, r8)
1000b8d6:	46bd      	mov	sp, r7
1000b8d8:	b002      	add	sp, #8
1000b8da:	bd80      	pop	{r7, pc}

1000b8dc <gpio_clr_mask>:
static inline void gpio_clr_mask(uint32_t mask) {
1000b8dc:	b580      	push	{r7, lr}
1000b8de:	b082      	sub	sp, #8
1000b8e0:	af00      	add	r7, sp, #0
1000b8e2:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_clr = mask;
1000b8e4:	23d0      	movs	r3, #208	; 0xd0
1000b8e6:	061b      	lsls	r3, r3, #24
1000b8e8:	687a      	ldr	r2, [r7, #4]
1000b8ea:	619a      	str	r2, [r3, #24]
}
1000b8ec:	46c0      	nop			; (mov r8, r8)
1000b8ee:	46bd      	mov	sp, r7
1000b8f0:	b002      	add	sp, #8
1000b8f2:	bd80      	pop	{r7, pc}

1000b8f4 <gpio_put>:
static inline void gpio_put(uint gpio, bool value) {
1000b8f4:	b580      	push	{r7, lr}
1000b8f6:	b084      	sub	sp, #16
1000b8f8:	af00      	add	r7, sp, #0
1000b8fa:	6078      	str	r0, [r7, #4]
1000b8fc:	000a      	movs	r2, r1
1000b8fe:	1cfb      	adds	r3, r7, #3
1000b900:	701a      	strb	r2, [r3, #0]
    uint32_t mask = 1ul << gpio;
1000b902:	2201      	movs	r2, #1
1000b904:	687b      	ldr	r3, [r7, #4]
1000b906:	409a      	lsls	r2, r3
1000b908:	0013      	movs	r3, r2
1000b90a:	60fb      	str	r3, [r7, #12]
    if (value)
1000b90c:	1cfb      	adds	r3, r7, #3
1000b90e:	781b      	ldrb	r3, [r3, #0]
1000b910:	2b00      	cmp	r3, #0
1000b912:	d004      	beq.n	1000b91e <gpio_put+0x2a>
        gpio_set_mask(mask);
1000b914:	68fb      	ldr	r3, [r7, #12]
1000b916:	0018      	movs	r0, r3
1000b918:	f7ff ffd4 	bl	1000b8c4 <gpio_set_mask>
}
1000b91c:	e003      	b.n	1000b926 <gpio_put+0x32>
        gpio_clr_mask(mask);
1000b91e:	68fb      	ldr	r3, [r7, #12]
1000b920:	0018      	movs	r0, r3
1000b922:	f7ff ffdb 	bl	1000b8dc <gpio_clr_mask>
}
1000b926:	46c0      	nop			; (mov r8, r8)
1000b928:	46bd      	mov	sp, r7
1000b92a:	b004      	add	sp, #16
1000b92c:	bd80      	pop	{r7, pc}

1000b92e <gpio_set_dir_out_masked>:
static inline void gpio_set_dir_out_masked(uint32_t mask) {
1000b92e:	b580      	push	{r7, lr}
1000b930:	b082      	sub	sp, #8
1000b932:	af00      	add	r7, sp, #0
1000b934:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_set = mask;
1000b936:	23d0      	movs	r3, #208	; 0xd0
1000b938:	061b      	lsls	r3, r3, #24
1000b93a:	687a      	ldr	r2, [r7, #4]
1000b93c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000b93e:	46c0      	nop			; (mov r8, r8)
1000b940:	46bd      	mov	sp, r7
1000b942:	b002      	add	sp, #8
1000b944:	bd80      	pop	{r7, pc}

1000b946 <gpio_set_dir_in_masked>:
static inline void gpio_set_dir_in_masked(uint32_t mask) {
1000b946:	b580      	push	{r7, lr}
1000b948:	b082      	sub	sp, #8
1000b94a:	af00      	add	r7, sp, #0
1000b94c:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_clr = mask;
1000b94e:	23d0      	movs	r3, #208	; 0xd0
1000b950:	061b      	lsls	r3, r3, #24
1000b952:	687a      	ldr	r2, [r7, #4]
1000b954:	629a      	str	r2, [r3, #40]	; 0x28
}
1000b956:	46c0      	nop			; (mov r8, r8)
1000b958:	46bd      	mov	sp, r7
1000b95a:	b002      	add	sp, #8
1000b95c:	bd80      	pop	{r7, pc}

1000b95e <gpio_set_dir>:
static inline void gpio_set_dir(uint gpio, bool out) {
1000b95e:	b580      	push	{r7, lr}
1000b960:	b084      	sub	sp, #16
1000b962:	af00      	add	r7, sp, #0
1000b964:	6078      	str	r0, [r7, #4]
1000b966:	000a      	movs	r2, r1
1000b968:	1cfb      	adds	r3, r7, #3
1000b96a:	701a      	strb	r2, [r3, #0]
    uint32_t mask = 1ul << gpio;
1000b96c:	2201      	movs	r2, #1
1000b96e:	687b      	ldr	r3, [r7, #4]
1000b970:	409a      	lsls	r2, r3
1000b972:	0013      	movs	r3, r2
1000b974:	60fb      	str	r3, [r7, #12]
    if (out)
1000b976:	1cfb      	adds	r3, r7, #3
1000b978:	781b      	ldrb	r3, [r3, #0]
1000b97a:	2b00      	cmp	r3, #0
1000b97c:	d004      	beq.n	1000b988 <gpio_set_dir+0x2a>
        gpio_set_dir_out_masked(mask);
1000b97e:	68fb      	ldr	r3, [r7, #12]
1000b980:	0018      	movs	r0, r3
1000b982:	f7ff ffd4 	bl	1000b92e <gpio_set_dir_out_masked>
}
1000b986:	e003      	b.n	1000b990 <gpio_set_dir+0x32>
        gpio_set_dir_in_masked(mask);
1000b988:	68fb      	ldr	r3, [r7, #12]
1000b98a:	0018      	movs	r0, r3
1000b98c:	f7ff ffdb 	bl	1000b946 <gpio_set_dir_in_masked>
}
1000b990:	46c0      	nop			; (mov r8, r8)
1000b992:	46bd      	mov	sp, r7
1000b994:	b004      	add	sp, #16
1000b996:	bd80      	pop	{r7, pc}

1000b998 <led_init>:
#define LED_COUNT_SHIFT 14
#define LED_COUNT_MAX 5 * (1 << LED_COUNT_SHIFT)

static uint32_t led_count;

void led_init(void) {
1000b998:	b580      	push	{r7, lr}
1000b99a:	af00      	add	r7, sp, #0
    led_count = 0;
1000b99c:	4b08      	ldr	r3, [pc, #32]	; (1000b9c0 <led_init+0x28>)
1000b99e:	2200      	movs	r2, #0
1000b9a0:	601a      	str	r2, [r3, #0]

    gpio_init(PICOPROBE_LED);
1000b9a2:	2019      	movs	r0, #25
1000b9a4:	f7fb fd06 	bl	100073b4 <gpio_init>
    gpio_set_dir(PICOPROBE_LED, GPIO_OUT);
1000b9a8:	2101      	movs	r1, #1
1000b9aa:	2019      	movs	r0, #25
1000b9ac:	f7ff ffd7 	bl	1000b95e <gpio_set_dir>
    gpio_put(PICOPROBE_LED, 1);
1000b9b0:	2101      	movs	r1, #1
1000b9b2:	2019      	movs	r0, #25
1000b9b4:	f7ff ff9e 	bl	1000b8f4 <gpio_put>
}
1000b9b8:	46c0      	nop			; (mov r8, r8)
1000b9ba:	46bd      	mov	sp, r7
1000b9bc:	bd80      	pop	{r7, pc}
1000b9be:	46c0      	nop			; (mov r8, r8)
1000b9c0:	200051d8 	.word	0x200051d8

1000b9c4 <led_task>:



void led_task(void) {
1000b9c4:	b580      	push	{r7, lr}
1000b9c6:	af00      	add	r7, sp, #0
    if (led_count != 0) {
1000b9c8:	4b0b      	ldr	r3, [pc, #44]	; (1000b9f8 <led_task+0x34>)
1000b9ca:	681b      	ldr	r3, [r3, #0]
1000b9cc:	2b00      	cmp	r3, #0
1000b9ce:	d010      	beq.n	1000b9f2 <led_task+0x2e>
        --led_count;
1000b9d0:	4b09      	ldr	r3, [pc, #36]	; (1000b9f8 <led_task+0x34>)
1000b9d2:	681b      	ldr	r3, [r3, #0]
1000b9d4:	1e5a      	subs	r2, r3, #1
1000b9d6:	4b08      	ldr	r3, [pc, #32]	; (1000b9f8 <led_task+0x34>)
1000b9d8:	601a      	str	r2, [r3, #0]
        gpio_put(PICOPROBE_LED, !((led_count >> LED_COUNT_SHIFT) & 1));
1000b9da:	4b07      	ldr	r3, [pc, #28]	; (1000b9f8 <led_task+0x34>)
1000b9dc:	681b      	ldr	r3, [r3, #0]
1000b9de:	0b9b      	lsrs	r3, r3, #14
1000b9e0:	2201      	movs	r2, #1
1000b9e2:	4013      	ands	r3, r2
1000b9e4:	425a      	negs	r2, r3
1000b9e6:	4153      	adcs	r3, r2
1000b9e8:	b2db      	uxtb	r3, r3
1000b9ea:	0019      	movs	r1, r3
1000b9ec:	2019      	movs	r0, #25
1000b9ee:	f7ff ff81 	bl	1000b8f4 <gpio_put>
    }
}
1000b9f2:	46c0      	nop			; (mov r8, r8)
1000b9f4:	46bd      	mov	sp, r7
1000b9f6:	bd80      	pop	{r7, pc}
1000b9f8:	200051d8 	.word	0x200051d8

1000b9fc <led_signal_activity>:

void led_signal_activity(uint total_bits) {
1000b9fc:	b580      	push	{r7, lr}
1000b9fe:	b082      	sub	sp, #8
1000ba00:	af00      	add	r7, sp, #0
1000ba02:	6078      	str	r0, [r7, #4]
    if (led_count == 0) {
1000ba04:	4b0b      	ldr	r3, [pc, #44]	; (1000ba34 <led_signal_activity+0x38>)
1000ba06:	681b      	ldr	r3, [r3, #0]
1000ba08:	2b00      	cmp	r3, #0
1000ba0a:	d103      	bne.n	1000ba14 <led_signal_activity+0x18>
        gpio_put(PICOPROBE_LED, 0);
1000ba0c:	2100      	movs	r1, #0
1000ba0e:	2019      	movs	r0, #25
1000ba10:	f7ff ff70 	bl	1000b8f4 <gpio_put>
    }

    if (led_count < LED_COUNT_MAX) {
1000ba14:	4b07      	ldr	r3, [pc, #28]	; (1000ba34 <led_signal_activity+0x38>)
1000ba16:	681a      	ldr	r2, [r3, #0]
1000ba18:	23a0      	movs	r3, #160	; 0xa0
1000ba1a:	025b      	lsls	r3, r3, #9
1000ba1c:	429a      	cmp	r2, r3
1000ba1e:	d205      	bcs.n	1000ba2c <led_signal_activity+0x30>
        led_count += total_bits;
1000ba20:	4b04      	ldr	r3, [pc, #16]	; (1000ba34 <led_signal_activity+0x38>)
1000ba22:	681a      	ldr	r2, [r3, #0]
1000ba24:	687b      	ldr	r3, [r7, #4]
1000ba26:	18d2      	adds	r2, r2, r3
1000ba28:	4b02      	ldr	r3, [pc, #8]	; (1000ba34 <led_signal_activity+0x38>)
1000ba2a:	601a      	str	r2, [r3, #0]
    }
}
1000ba2c:	46c0      	nop			; (mov r8, r8)
1000ba2e:	46bd      	mov	sp, r7
1000ba30:	b002      	add	sp, #8
1000ba32:	bd80      	pop	{r7, pc}
1000ba34:	200051d8 	.word	0x200051d8

1000ba38 <main>:
#include "led.h"

// UART0 for Picoprobe debug
// UART1 for picoprobe to target device

int main(void) {
1000ba38:	b580      	push	{r7, lr}
1000ba3a:	af00      	add	r7, sp, #0

    board_init();
1000ba3c:	f7f4 fcae 	bl	1000039c <board_init>
    usb_serial_init();
1000ba40:	f7ff fefe 	bl	1000b840 <usb_serial_init>
    cdc_uart_init();
1000ba44:	f7ff fe64 	bl	1000b710 <cdc_uart_init>
    tusb_init();
1000ba48:	f7f9 fbcc 	bl	100051e4 <tusb_init>
    probe_init();
1000ba4c:	f000 fc64 	bl	1000c318 <probe_init>
    led_init();
1000ba50:	f7ff ffa2 	bl	1000b998 <led_init>

    picoprobe_info("Welcome to Picoprobe!\n");

    while (1) {
        tud_task(); // tinyusb device task
1000ba54:	f7f6 fefc 	bl	10002850 <tud_task>
        cdc_task();
1000ba58:	f7ff fe70 	bl	1000b73c <cdc_task>
        probe_task();
1000ba5c:	f000 fe36 	bl	1000c6cc <probe_task>
        led_task();
1000ba60:	f7ff ffb0 	bl	1000b9c4 <led_task>
        tud_task(); // tinyusb device task
1000ba64:	e7f6      	b.n	1000ba54 <main+0x1c>

1000ba66 <gpio_pull_up>:
static inline void gpio_pull_up(uint gpio) {
1000ba66:	b580      	push	{r7, lr}
1000ba68:	b082      	sub	sp, #8
1000ba6a:	af00      	add	r7, sp, #0
1000ba6c:	6078      	str	r0, [r7, #4]
    gpio_set_pulls(gpio, true, false);
1000ba6e:	687b      	ldr	r3, [r7, #4]
1000ba70:	2200      	movs	r2, #0
1000ba72:	2101      	movs	r1, #1
1000ba74:	0018      	movs	r0, r3
1000ba76:	f7fb fc5f 	bl	10007338 <gpio_set_pulls>
}
1000ba7a:	46c0      	nop			; (mov r8, r8)
1000ba7c:	46bd      	mov	sp, r7
1000ba7e:	b002      	add	sp, #8
1000ba80:	bd80      	pop	{r7, pc}

1000ba82 <gpio_set_mask>:
static inline void gpio_set_mask(uint32_t mask) {
1000ba82:	b580      	push	{r7, lr}
1000ba84:	b082      	sub	sp, #8
1000ba86:	af00      	add	r7, sp, #0
1000ba88:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_set = mask;
1000ba8a:	23d0      	movs	r3, #208	; 0xd0
1000ba8c:	061b      	lsls	r3, r3, #24
1000ba8e:	687a      	ldr	r2, [r7, #4]
1000ba90:	615a      	str	r2, [r3, #20]
}
1000ba92:	46c0      	nop			; (mov r8, r8)
1000ba94:	46bd      	mov	sp, r7
1000ba96:	b002      	add	sp, #8
1000ba98:	bd80      	pop	{r7, pc}

1000ba9a <gpio_clr_mask>:
static inline void gpio_clr_mask(uint32_t mask) {
1000ba9a:	b580      	push	{r7, lr}
1000ba9c:	b082      	sub	sp, #8
1000ba9e:	af00      	add	r7, sp, #0
1000baa0:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_clr = mask;
1000baa2:	23d0      	movs	r3, #208	; 0xd0
1000baa4:	061b      	lsls	r3, r3, #24
1000baa6:	687a      	ldr	r2, [r7, #4]
1000baa8:	619a      	str	r2, [r3, #24]
}
1000baaa:	46c0      	nop			; (mov r8, r8)
1000baac:	46bd      	mov	sp, r7
1000baae:	b002      	add	sp, #8
1000bab0:	bd80      	pop	{r7, pc}

1000bab2 <gpio_set_dir_out_masked>:
static inline void gpio_set_dir_out_masked(uint32_t mask) {
1000bab2:	b580      	push	{r7, lr}
1000bab4:	b082      	sub	sp, #8
1000bab6:	af00      	add	r7, sp, #0
1000bab8:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_set = mask;
1000baba:	23d0      	movs	r3, #208	; 0xd0
1000babc:	061b      	lsls	r3, r3, #24
1000babe:	687a      	ldr	r2, [r7, #4]
1000bac0:	625a      	str	r2, [r3, #36]	; 0x24
}
1000bac2:	46c0      	nop			; (mov r8, r8)
1000bac4:	46bd      	mov	sp, r7
1000bac6:	b002      	add	sp, #8
1000bac8:	bd80      	pop	{r7, pc}

1000baca <gpio_set_dir_in_masked>:
static inline void gpio_set_dir_in_masked(uint32_t mask) {
1000baca:	b580      	push	{r7, lr}
1000bacc:	b082      	sub	sp, #8
1000bace:	af00      	add	r7, sp, #0
1000bad0:	6078      	str	r0, [r7, #4]
    sio_hw->gpio_oe_clr = mask;
1000bad2:	23d0      	movs	r3, #208	; 0xd0
1000bad4:	061b      	lsls	r3, r3, #24
1000bad6:	687a      	ldr	r2, [r7, #4]
1000bad8:	629a      	str	r2, [r3, #40]	; 0x28
}
1000bada:	46c0      	nop			; (mov r8, r8)
1000badc:	46bd      	mov	sp, r7
1000bade:	b002      	add	sp, #8
1000bae0:	bd80      	pop	{r7, pc}

1000bae2 <gpio_set_dir>:
static inline void gpio_set_dir(uint gpio, bool out) {
1000bae2:	b580      	push	{r7, lr}
1000bae4:	b084      	sub	sp, #16
1000bae6:	af00      	add	r7, sp, #0
1000bae8:	6078      	str	r0, [r7, #4]
1000baea:	000a      	movs	r2, r1
1000baec:	1cfb      	adds	r3, r7, #3
1000baee:	701a      	strb	r2, [r3, #0]
    uint32_t mask = 1ul << gpio;
1000baf0:	2201      	movs	r2, #1
1000baf2:	687b      	ldr	r3, [r7, #4]
1000baf4:	409a      	lsls	r2, r3
1000baf6:	0013      	movs	r3, r2
1000baf8:	60fb      	str	r3, [r7, #12]
    if (out)
1000bafa:	1cfb      	adds	r3, r7, #3
1000bafc:	781b      	ldrb	r3, [r3, #0]
1000bafe:	2b00      	cmp	r3, #0
1000bb00:	d004      	beq.n	1000bb0c <gpio_set_dir+0x2a>
        gpio_set_dir_out_masked(mask);
1000bb02:	68fb      	ldr	r3, [r7, #12]
1000bb04:	0018      	movs	r0, r3
1000bb06:	f7ff ffd4 	bl	1000bab2 <gpio_set_dir_out_masked>
}
1000bb0a:	e003      	b.n	1000bb14 <gpio_set_dir+0x32>
        gpio_set_dir_in_masked(mask);
1000bb0c:	68fb      	ldr	r3, [r7, #12]
1000bb0e:	0018      	movs	r0, r3
1000bb10:	f7ff ffdb 	bl	1000baca <gpio_set_dir_in_masked>
}
1000bb14:	46c0      	nop			; (mov r8, r8)
1000bb16:	46bd      	mov	sp, r7
1000bb18:	b004      	add	sp, #16
1000bb1a:	bd80      	pop	{r7, pc}

1000bb1c <_pio_encode_instr_and_args>:
static inline uint _pio_encode_instr_and_args(enum pio_instr_bits instr_bits, uint arg1, uint arg2) {
1000bb1c:	b580      	push	{r7, lr}
1000bb1e:	b084      	sub	sp, #16
1000bb20:	af00      	add	r7, sp, #0
1000bb22:	60b9      	str	r1, [r7, #8]
1000bb24:	607a      	str	r2, [r7, #4]
1000bb26:	210e      	movs	r1, #14
1000bb28:	187b      	adds	r3, r7, r1
1000bb2a:	1c02      	adds	r2, r0, #0
1000bb2c:	801a      	strh	r2, [r3, #0]
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
1000bb2e:	187b      	adds	r3, r7, r1
1000bb30:	881a      	ldrh	r2, [r3, #0]
1000bb32:	68bb      	ldr	r3, [r7, #8]
1000bb34:	015b      	lsls	r3, r3, #5
1000bb36:	431a      	orrs	r2, r3
1000bb38:	687b      	ldr	r3, [r7, #4]
1000bb3a:	211f      	movs	r1, #31
1000bb3c:	400b      	ands	r3, r1
1000bb3e:	4313      	orrs	r3, r2
}
1000bb40:	0018      	movs	r0, r3
1000bb42:	46bd      	mov	sp, r7
1000bb44:	b004      	add	sp, #16
1000bb46:	bd80      	pop	{r7, pc}

1000bb48 <pio_encode_jmp>:
static inline uint pio_encode_jmp(uint addr) {
1000bb48:	b580      	push	{r7, lr}
1000bb4a:	b082      	sub	sp, #8
1000bb4c:	af00      	add	r7, sp, #0
1000bb4e:	6078      	str	r0, [r7, #4]
    return _pio_encode_instr_and_args(pio_instr_bits_jmp, 0, addr);
1000bb50:	687b      	ldr	r3, [r7, #4]
1000bb52:	001a      	movs	r2, r3
1000bb54:	2100      	movs	r1, #0
1000bb56:	2000      	movs	r0, #0
1000bb58:	f7ff ffe0 	bl	1000bb1c <_pio_encode_instr_and_args>
1000bb5c:	0003      	movs	r3, r0
}
1000bb5e:	0018      	movs	r0, r3
1000bb60:	46bd      	mov	sp, r7
1000bb62:	b002      	add	sp, #8
1000bb64:	bd80      	pop	{r7, pc}

1000bb66 <check_sm_param>:
static inline void check_sm_param(__unused uint sm) {
1000bb66:	b580      	push	{r7, lr}
1000bb68:	b082      	sub	sp, #8
1000bb6a:	af00      	add	r7, sp, #0
1000bb6c:	6078      	str	r0, [r7, #4]
}
1000bb6e:	46c0      	nop			; (mov r8, r8)
1000bb70:	46bd      	mov	sp, r7
1000bb72:	b002      	add	sp, #8
1000bb74:	bd80      	pop	{r7, pc}

1000bb76 <check_pio_param>:
static inline void check_pio_param(__unused PIO pio) {
1000bb76:	b580      	push	{r7, lr}
1000bb78:	b082      	sub	sp, #8
1000bb7a:	af00      	add	r7, sp, #0
1000bb7c:	6078      	str	r0, [r7, #4]
}
1000bb7e:	46c0      	nop			; (mov r8, r8)
1000bb80:	46bd      	mov	sp, r7
1000bb82:	b002      	add	sp, #8
1000bb84:	bd80      	pop	{r7, pc}
	...

1000bb88 <sm_config_set_out_pins>:
static inline void sm_config_set_out_pins(pio_sm_config *c, uint out_base, uint out_count) {
1000bb88:	b580      	push	{r7, lr}
1000bb8a:	b084      	sub	sp, #16
1000bb8c:	af00      	add	r7, sp, #0
1000bb8e:	60f8      	str	r0, [r7, #12]
1000bb90:	60b9      	str	r1, [r7, #8]
1000bb92:	607a      	str	r2, [r7, #4]
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
1000bb94:	68fb      	ldr	r3, [r7, #12]
1000bb96:	68db      	ldr	r3, [r3, #12]
1000bb98:	4a06      	ldr	r2, [pc, #24]	; (1000bbb4 <sm_config_set_out_pins+0x2c>)
1000bb9a:	401a      	ands	r2, r3
1000bb9c:	68bb      	ldr	r3, [r7, #8]
1000bb9e:	431a      	orrs	r2, r3
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
1000bba0:	687b      	ldr	r3, [r7, #4]
1000bba2:	051b      	lsls	r3, r3, #20
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
1000bba4:	431a      	orrs	r2, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
1000bba6:	68fb      	ldr	r3, [r7, #12]
1000bba8:	60da      	str	r2, [r3, #12]
}
1000bbaa:	46c0      	nop			; (mov r8, r8)
1000bbac:	46bd      	mov	sp, r7
1000bbae:	b004      	add	sp, #16
1000bbb0:	bd80      	pop	{r7, pc}
1000bbb2:	46c0      	nop			; (mov r8, r8)
1000bbb4:	fc0fffe0 	.word	0xfc0fffe0

1000bbb8 <sm_config_set_set_pins>:
static inline void sm_config_set_set_pins(pio_sm_config *c, uint set_base, uint set_count) {
1000bbb8:	b580      	push	{r7, lr}
1000bbba:	b084      	sub	sp, #16
1000bbbc:	af00      	add	r7, sp, #0
1000bbbe:	60f8      	str	r0, [r7, #12]
1000bbc0:	60b9      	str	r1, [r7, #8]
1000bbc2:	607a      	str	r2, [r7, #4]
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_SET_BASE_BITS | PIO_SM0_PINCTRL_SET_COUNT_BITS)) |
1000bbc4:	68fb      	ldr	r3, [r7, #12]
1000bbc6:	68db      	ldr	r3, [r3, #12]
1000bbc8:	4a06      	ldr	r2, [pc, #24]	; (1000bbe4 <sm_config_set_set_pins+0x2c>)
1000bbca:	401a      	ands	r2, r3
                 (set_base << PIO_SM0_PINCTRL_SET_BASE_LSB) |
1000bbcc:	68bb      	ldr	r3, [r7, #8]
1000bbce:	015b      	lsls	r3, r3, #5
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_SET_BASE_BITS | PIO_SM0_PINCTRL_SET_COUNT_BITS)) |
1000bbd0:	431a      	orrs	r2, r3
                 (set_count << PIO_SM0_PINCTRL_SET_COUNT_LSB);
1000bbd2:	687b      	ldr	r3, [r7, #4]
1000bbd4:	069b      	lsls	r3, r3, #26
                 (set_base << PIO_SM0_PINCTRL_SET_BASE_LSB) |
1000bbd6:	431a      	orrs	r2, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_SET_BASE_BITS | PIO_SM0_PINCTRL_SET_COUNT_BITS)) |
1000bbd8:	68fb      	ldr	r3, [r7, #12]
1000bbda:	60da      	str	r2, [r3, #12]
}
1000bbdc:	46c0      	nop			; (mov r8, r8)
1000bbde:	46bd      	mov	sp, r7
1000bbe0:	b004      	add	sp, #16
1000bbe2:	bd80      	pop	{r7, pc}
1000bbe4:	e3fffc1f 	.word	0xe3fffc1f

1000bbe8 <sm_config_set_in_pins>:
static inline void sm_config_set_in_pins(pio_sm_config *c, uint in_base) {
1000bbe8:	b580      	push	{r7, lr}
1000bbea:	b082      	sub	sp, #8
1000bbec:	af00      	add	r7, sp, #0
1000bbee:	6078      	str	r0, [r7, #4]
1000bbf0:	6039      	str	r1, [r7, #0]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_IN_BASE_BITS) |
1000bbf2:	687b      	ldr	r3, [r7, #4]
1000bbf4:	68db      	ldr	r3, [r3, #12]
1000bbf6:	4a05      	ldr	r2, [pc, #20]	; (1000bc0c <sm_config_set_in_pins+0x24>)
1000bbf8:	401a      	ands	r2, r3
                 (in_base << PIO_SM0_PINCTRL_IN_BASE_LSB);
1000bbfa:	683b      	ldr	r3, [r7, #0]
1000bbfc:	03db      	lsls	r3, r3, #15
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_IN_BASE_BITS) |
1000bbfe:	431a      	orrs	r2, r3
1000bc00:	687b      	ldr	r3, [r7, #4]
1000bc02:	60da      	str	r2, [r3, #12]
}
1000bc04:	46c0      	nop			; (mov r8, r8)
1000bc06:	46bd      	mov	sp, r7
1000bc08:	b002      	add	sp, #8
1000bc0a:	bd80      	pop	{r7, pc}
1000bc0c:	fff07fff 	.word	0xfff07fff

1000bc10 <sm_config_set_sideset_pins>:
static inline void sm_config_set_sideset_pins(pio_sm_config *c, uint sideset_base) {
1000bc10:	b580      	push	{r7, lr}
1000bc12:	b082      	sub	sp, #8
1000bc14:	af00      	add	r7, sp, #0
1000bc16:	6078      	str	r0, [r7, #4]
1000bc18:	6039      	str	r1, [r7, #0]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
1000bc1a:	687b      	ldr	r3, [r7, #4]
1000bc1c:	68db      	ldr	r3, [r3, #12]
1000bc1e:	4a05      	ldr	r2, [pc, #20]	; (1000bc34 <sm_config_set_sideset_pins+0x24>)
1000bc20:	401a      	ands	r2, r3
                 (sideset_base << PIO_SM0_PINCTRL_SIDESET_BASE_LSB);
1000bc22:	683b      	ldr	r3, [r7, #0]
1000bc24:	029b      	lsls	r3, r3, #10
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
1000bc26:	431a      	orrs	r2, r3
1000bc28:	687b      	ldr	r3, [r7, #4]
1000bc2a:	60da      	str	r2, [r3, #12]
}
1000bc2c:	46c0      	nop			; (mov r8, r8)
1000bc2e:	46bd      	mov	sp, r7
1000bc30:	b002      	add	sp, #8
1000bc32:	bd80      	pop	{r7, pc}
1000bc34:	ffff83ff 	.word	0xffff83ff

1000bc38 <sm_config_set_sideset>:
static inline void sm_config_set_sideset(pio_sm_config *c, uint bit_count, bool optional, bool pindirs) {
1000bc38:	b580      	push	{r7, lr}
1000bc3a:	b084      	sub	sp, #16
1000bc3c:	af00      	add	r7, sp, #0
1000bc3e:	60f8      	str	r0, [r7, #12]
1000bc40:	60b9      	str	r1, [r7, #8]
1000bc42:	0019      	movs	r1, r3
1000bc44:	1dfb      	adds	r3, r7, #7
1000bc46:	701a      	strb	r2, [r3, #0]
1000bc48:	1dbb      	adds	r3, r7, #6
1000bc4a:	1c0a      	adds	r2, r1, #0
1000bc4c:	701a      	strb	r2, [r3, #0]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_COUNT_BITS) |
1000bc4e:	68fb      	ldr	r3, [r7, #12]
1000bc50:	68db      	ldr	r3, [r3, #12]
1000bc52:	00db      	lsls	r3, r3, #3
1000bc54:	08da      	lsrs	r2, r3, #3
                 (bit_count << PIO_SM0_PINCTRL_SIDESET_COUNT_LSB);
1000bc56:	68bb      	ldr	r3, [r7, #8]
1000bc58:	075b      	lsls	r3, r3, #29
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_COUNT_BITS) |
1000bc5a:	431a      	orrs	r2, r3
1000bc5c:	68fb      	ldr	r3, [r7, #12]
1000bc5e:	60da      	str	r2, [r3, #12]
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_SIDE_EN_BITS | PIO_SM0_EXECCTRL_SIDE_PINDIR_BITS)) |
1000bc60:	68fb      	ldr	r3, [r7, #12]
1000bc62:	685b      	ldr	r3, [r3, #4]
1000bc64:	4a0c      	ldr	r2, [pc, #48]	; (1000bc98 <sm_config_set_sideset+0x60>)
1000bc66:	401a      	ands	r2, r3
                  (bool_to_bit(optional) << PIO_SM0_EXECCTRL_SIDE_EN_LSB) |
1000bc68:	1dfb      	adds	r3, r7, #7
1000bc6a:	781b      	ldrb	r3, [r3, #0]
1000bc6c:	2b00      	cmp	r3, #0
1000bc6e:	d002      	beq.n	1000bc76 <sm_config_set_sideset+0x3e>
1000bc70:	2380      	movs	r3, #128	; 0x80
1000bc72:	05db      	lsls	r3, r3, #23
1000bc74:	e000      	b.n	1000bc78 <sm_config_set_sideset+0x40>
1000bc76:	2300      	movs	r3, #0
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_SIDE_EN_BITS | PIO_SM0_EXECCTRL_SIDE_PINDIR_BITS)) |
1000bc78:	431a      	orrs	r2, r3
                  (bool_to_bit(pindirs) << PIO_SM0_EXECCTRL_SIDE_PINDIR_LSB);
1000bc7a:	1dbb      	adds	r3, r7, #6
1000bc7c:	781b      	ldrb	r3, [r3, #0]
1000bc7e:	2b00      	cmp	r3, #0
1000bc80:	d002      	beq.n	1000bc88 <sm_config_set_sideset+0x50>
1000bc82:	2380      	movs	r3, #128	; 0x80
1000bc84:	059b      	lsls	r3, r3, #22
1000bc86:	e000      	b.n	1000bc8a <sm_config_set_sideset+0x52>
1000bc88:	2300      	movs	r3, #0
                  (bool_to_bit(optional) << PIO_SM0_EXECCTRL_SIDE_EN_LSB) |
1000bc8a:	431a      	orrs	r2, r3
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_SIDE_EN_BITS | PIO_SM0_EXECCTRL_SIDE_PINDIR_BITS)) |
1000bc8c:	68fb      	ldr	r3, [r7, #12]
1000bc8e:	605a      	str	r2, [r3, #4]
}
1000bc90:	46c0      	nop			; (mov r8, r8)
1000bc92:	46bd      	mov	sp, r7
1000bc94:	b004      	add	sp, #16
1000bc96:	bd80      	pop	{r7, pc}
1000bc98:	9fffffff 	.word	0x9fffffff

1000bc9c <sm_config_set_clkdiv_int_frac>:
static inline void sm_config_set_clkdiv_int_frac(pio_sm_config *c, uint16_t div_int, uint8_t div_frac) {
1000bc9c:	b580      	push	{r7, lr}
1000bc9e:	b082      	sub	sp, #8
1000bca0:	af00      	add	r7, sp, #0
1000bca2:	6078      	str	r0, [r7, #4]
1000bca4:	0008      	movs	r0, r1
1000bca6:	0011      	movs	r1, r2
1000bca8:	1cbb      	adds	r3, r7, #2
1000bcaa:	1c02      	adds	r2, r0, #0
1000bcac:	801a      	strh	r2, [r3, #0]
1000bcae:	1c7b      	adds	r3, r7, #1
1000bcb0:	1c0a      	adds	r2, r1, #0
1000bcb2:	701a      	strb	r2, [r3, #0]
            (((uint)div_frac) << PIO_SM0_CLKDIV_FRAC_LSB) |
1000bcb4:	1c7b      	adds	r3, r7, #1
1000bcb6:	781b      	ldrb	r3, [r3, #0]
1000bcb8:	021a      	lsls	r2, r3, #8
            (((uint)div_int) << PIO_SM0_CLKDIV_INT_LSB);
1000bcba:	1cbb      	adds	r3, r7, #2
1000bcbc:	881b      	ldrh	r3, [r3, #0]
1000bcbe:	041b      	lsls	r3, r3, #16
            (((uint)div_frac) << PIO_SM0_CLKDIV_FRAC_LSB) |
1000bcc0:	431a      	orrs	r2, r3
    c->clkdiv =
1000bcc2:	687b      	ldr	r3, [r7, #4]
1000bcc4:	601a      	str	r2, [r3, #0]
}
1000bcc6:	46c0      	nop			; (mov r8, r8)
1000bcc8:	46bd      	mov	sp, r7
1000bcca:	b002      	add	sp, #8
1000bccc:	bd80      	pop	{r7, pc}
	...

1000bcd0 <sm_config_set_wrap>:
static inline void sm_config_set_wrap(pio_sm_config *c, uint wrap_target, uint wrap) {
1000bcd0:	b580      	push	{r7, lr}
1000bcd2:	b084      	sub	sp, #16
1000bcd4:	af00      	add	r7, sp, #0
1000bcd6:	60f8      	str	r0, [r7, #12]
1000bcd8:	60b9      	str	r1, [r7, #8]
1000bcda:	607a      	str	r2, [r7, #4]
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000bcdc:	68fb      	ldr	r3, [r7, #12]
1000bcde:	685b      	ldr	r3, [r3, #4]
1000bce0:	4a06      	ldr	r2, [pc, #24]	; (1000bcfc <sm_config_set_wrap+0x2c>)
1000bce2:	401a      	ands	r2, r3
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000bce4:	68bb      	ldr	r3, [r7, #8]
1000bce6:	01db      	lsls	r3, r3, #7
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000bce8:	431a      	orrs	r2, r3
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
1000bcea:	687b      	ldr	r3, [r7, #4]
1000bcec:	031b      	lsls	r3, r3, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000bcee:	431a      	orrs	r2, r3
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000bcf0:	68fb      	ldr	r3, [r7, #12]
1000bcf2:	605a      	str	r2, [r3, #4]
}
1000bcf4:	46c0      	nop			; (mov r8, r8)
1000bcf6:	46bd      	mov	sp, r7
1000bcf8:	b004      	add	sp, #16
1000bcfa:	bd80      	pop	{r7, pc}
1000bcfc:	fffe007f 	.word	0xfffe007f

1000bd00 <sm_config_set_in_shift>:
static inline void sm_config_set_in_shift(pio_sm_config *c, bool shift_right, bool autopush, uint push_threshold) {
1000bd00:	b590      	push	{r4, r7, lr}
1000bd02:	b085      	sub	sp, #20
1000bd04:	af00      	add	r7, sp, #0
1000bd06:	60f8      	str	r0, [r7, #12]
1000bd08:	0008      	movs	r0, r1
1000bd0a:	0011      	movs	r1, r2
1000bd0c:	607b      	str	r3, [r7, #4]
1000bd0e:	240b      	movs	r4, #11
1000bd10:	193b      	adds	r3, r7, r4
1000bd12:	1c02      	adds	r2, r0, #0
1000bd14:	701a      	strb	r2, [r3, #0]
1000bd16:	230a      	movs	r3, #10
1000bd18:	18fb      	adds	r3, r7, r3
1000bd1a:	1c0a      	adds	r2, r1, #0
1000bd1c:	701a      	strb	r2, [r3, #0]
    c->shiftctrl = (c->shiftctrl &
1000bd1e:	68fb      	ldr	r3, [r7, #12]
1000bd20:	689b      	ldr	r3, [r3, #8]
1000bd22:	4a10      	ldr	r2, [pc, #64]	; (1000bd64 <sm_config_set_in_shift+0x64>)
1000bd24:	401a      	ands	r2, r3
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_LSB) |
1000bd26:	193b      	adds	r3, r7, r4
1000bd28:	781b      	ldrb	r3, [r3, #0]
1000bd2a:	2b00      	cmp	r3, #0
1000bd2c:	d002      	beq.n	1000bd34 <sm_config_set_in_shift+0x34>
1000bd2e:	2380      	movs	r3, #128	; 0x80
1000bd30:	02db      	lsls	r3, r3, #11
1000bd32:	e000      	b.n	1000bd36 <sm_config_set_in_shift+0x36>
1000bd34:	2300      	movs	r3, #0
                      PIO_SM0_SHIFTCTRL_PUSH_THRESH_BITS)) |
1000bd36:	431a      	orrs	r2, r3
                   (bool_to_bit(autopush) << PIO_SM0_SHIFTCTRL_AUTOPUSH_LSB) |
1000bd38:	230a      	movs	r3, #10
1000bd3a:	18fb      	adds	r3, r7, r3
1000bd3c:	781b      	ldrb	r3, [r3, #0]
1000bd3e:	2b00      	cmp	r3, #0
1000bd40:	d002      	beq.n	1000bd48 <sm_config_set_in_shift+0x48>
1000bd42:	2380      	movs	r3, #128	; 0x80
1000bd44:	025b      	lsls	r3, r3, #9
1000bd46:	e000      	b.n	1000bd4a <sm_config_set_in_shift+0x4a>
1000bd48:	2300      	movs	r3, #0
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_IN_SHIFTDIR_LSB) |
1000bd4a:	431a      	orrs	r2, r3
                   ((push_threshold & 0x1fu) << PIO_SM0_SHIFTCTRL_PUSH_THRESH_LSB);
1000bd4c:	687b      	ldr	r3, [r7, #4]
1000bd4e:	0519      	lsls	r1, r3, #20
1000bd50:	23f8      	movs	r3, #248	; 0xf8
1000bd52:	045b      	lsls	r3, r3, #17
1000bd54:	400b      	ands	r3, r1
                   (bool_to_bit(autopush) << PIO_SM0_SHIFTCTRL_AUTOPUSH_LSB) |
1000bd56:	431a      	orrs	r2, r3
    c->shiftctrl = (c->shiftctrl &
1000bd58:	68fb      	ldr	r3, [r7, #12]
1000bd5a:	609a      	str	r2, [r3, #8]
}
1000bd5c:	46c0      	nop			; (mov r8, r8)
1000bd5e:	46bd      	mov	sp, r7
1000bd60:	b005      	add	sp, #20
1000bd62:	bd90      	pop	{r4, r7, pc}
1000bd64:	fe0affff 	.word	0xfe0affff

1000bd68 <sm_config_set_out_shift>:
static inline void sm_config_set_out_shift(pio_sm_config *c, bool shift_right, bool autopull, uint pull_threshold) {
1000bd68:	b590      	push	{r4, r7, lr}
1000bd6a:	b085      	sub	sp, #20
1000bd6c:	af00      	add	r7, sp, #0
1000bd6e:	60f8      	str	r0, [r7, #12]
1000bd70:	0008      	movs	r0, r1
1000bd72:	0011      	movs	r1, r2
1000bd74:	607b      	str	r3, [r7, #4]
1000bd76:	240b      	movs	r4, #11
1000bd78:	193b      	adds	r3, r7, r4
1000bd7a:	1c02      	adds	r2, r0, #0
1000bd7c:	701a      	strb	r2, [r3, #0]
1000bd7e:	230a      	movs	r3, #10
1000bd80:	18fb      	adds	r3, r7, r3
1000bd82:	1c0a      	adds	r2, r1, #0
1000bd84:	701a      	strb	r2, [r3, #0]
    c->shiftctrl = (c->shiftctrl &
1000bd86:	68fb      	ldr	r3, [r7, #12]
1000bd88:	689b      	ldr	r3, [r3, #8]
1000bd8a:	4a10      	ldr	r2, [pc, #64]	; (1000bdcc <sm_config_set_out_shift+0x64>)
1000bd8c:	401a      	ands	r2, r3
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_LSB) |
1000bd8e:	193b      	adds	r3, r7, r4
1000bd90:	781b      	ldrb	r3, [r3, #0]
1000bd92:	2b00      	cmp	r3, #0
1000bd94:	d002      	beq.n	1000bd9c <sm_config_set_out_shift+0x34>
1000bd96:	2380      	movs	r3, #128	; 0x80
1000bd98:	031b      	lsls	r3, r3, #12
1000bd9a:	e000      	b.n	1000bd9e <sm_config_set_out_shift+0x36>
1000bd9c:	2300      	movs	r3, #0
                      PIO_SM0_SHIFTCTRL_PULL_THRESH_BITS)) |
1000bd9e:	431a      	orrs	r2, r3
                   (bool_to_bit(autopull) << PIO_SM0_SHIFTCTRL_AUTOPULL_LSB) |
1000bda0:	230a      	movs	r3, #10
1000bda2:	18fb      	adds	r3, r7, r3
1000bda4:	781b      	ldrb	r3, [r3, #0]
1000bda6:	2b00      	cmp	r3, #0
1000bda8:	d002      	beq.n	1000bdb0 <sm_config_set_out_shift+0x48>
1000bdaa:	2380      	movs	r3, #128	; 0x80
1000bdac:	029b      	lsls	r3, r3, #10
1000bdae:	e000      	b.n	1000bdb2 <sm_config_set_out_shift+0x4a>
1000bdb0:	2300      	movs	r3, #0
                   (bool_to_bit(shift_right) << PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_LSB) |
1000bdb2:	431a      	orrs	r2, r3
                   ((pull_threshold & 0x1fu) << PIO_SM0_SHIFTCTRL_PULL_THRESH_LSB);
1000bdb4:	687b      	ldr	r3, [r7, #4]
1000bdb6:	0659      	lsls	r1, r3, #25
1000bdb8:	23f8      	movs	r3, #248	; 0xf8
1000bdba:	059b      	lsls	r3, r3, #22
1000bdbc:	400b      	ands	r3, r1
                   (bool_to_bit(autopull) << PIO_SM0_SHIFTCTRL_AUTOPULL_LSB) |
1000bdbe:	431a      	orrs	r2, r3
    c->shiftctrl = (c->shiftctrl &
1000bdc0:	68fb      	ldr	r3, [r7, #12]
1000bdc2:	609a      	str	r2, [r3, #8]
}
1000bdc4:	46c0      	nop			; (mov r8, r8)
1000bdc6:	46bd      	mov	sp, r7
1000bdc8:	b005      	add	sp, #20
1000bdca:	bd90      	pop	{r4, r7, pc}
1000bdcc:	c1f5ffff 	.word	0xc1f5ffff

1000bdd0 <pio_get_default_sm_config>:
static inline pio_sm_config pio_get_default_sm_config(void) {
1000bdd0:	b590      	push	{r4, r7, lr}
1000bdd2:	b087      	sub	sp, #28
1000bdd4:	af00      	add	r7, sp, #0
1000bdd6:	6078      	str	r0, [r7, #4]
    pio_sm_config c = {0, 0, 0, 0};
1000bdd8:	2408      	movs	r4, #8
1000bdda:	193b      	adds	r3, r7, r4
1000bddc:	0018      	movs	r0, r3
1000bdde:	2310      	movs	r3, #16
1000bde0:	001a      	movs	r2, r3
1000bde2:	2100      	movs	r1, #0
1000bde4:	f001 f8b8 	bl	1000cf58 <__wrap_memset>
    sm_config_set_clkdiv_int_frac(&c, 1, 0);
1000bde8:	193b      	adds	r3, r7, r4
1000bdea:	2200      	movs	r2, #0
1000bdec:	2101      	movs	r1, #1
1000bdee:	0018      	movs	r0, r3
1000bdf0:	f7ff ff54 	bl	1000bc9c <sm_config_set_clkdiv_int_frac>
    sm_config_set_wrap(&c, 0, 31);
1000bdf4:	193b      	adds	r3, r7, r4
1000bdf6:	221f      	movs	r2, #31
1000bdf8:	2100      	movs	r1, #0
1000bdfa:	0018      	movs	r0, r3
1000bdfc:	f7ff ff68 	bl	1000bcd0 <sm_config_set_wrap>
    sm_config_set_in_shift(&c, true, false, 32);
1000be00:	1938      	adds	r0, r7, r4
1000be02:	2320      	movs	r3, #32
1000be04:	2200      	movs	r2, #0
1000be06:	2101      	movs	r1, #1
1000be08:	f7ff ff7a 	bl	1000bd00 <sm_config_set_in_shift>
    sm_config_set_out_shift(&c, true, false, 32);
1000be0c:	1938      	adds	r0, r7, r4
1000be0e:	2320      	movs	r3, #32
1000be10:	2200      	movs	r2, #0
1000be12:	2101      	movs	r1, #1
1000be14:	f7ff ffa8 	bl	1000bd68 <sm_config_set_out_shift>
    return c;
1000be18:	687b      	ldr	r3, [r7, #4]
1000be1a:	193a      	adds	r2, r7, r4
1000be1c:	ca13      	ldmia	r2!, {r0, r1, r4}
1000be1e:	c313      	stmia	r3!, {r0, r1, r4}
1000be20:	6812      	ldr	r2, [r2, #0]
1000be22:	601a      	str	r2, [r3, #0]
}
1000be24:	6878      	ldr	r0, [r7, #4]
1000be26:	46bd      	mov	sp, r7
1000be28:	b007      	add	sp, #28
1000be2a:	bd90      	pop	{r4, r7, pc}

1000be2c <pio_gpio_init>:
static inline void pio_gpio_init(PIO pio, uint pin) {
1000be2c:	b580      	push	{r7, lr}
1000be2e:	b082      	sub	sp, #8
1000be30:	af00      	add	r7, sp, #0
1000be32:	6078      	str	r0, [r7, #4]
1000be34:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
1000be36:	687b      	ldr	r3, [r7, #4]
1000be38:	0018      	movs	r0, r3
1000be3a:	f7ff fe9c 	bl	1000bb76 <check_pio_param>
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
1000be3e:	687b      	ldr	r3, [r7, #4]
1000be40:	4a07      	ldr	r2, [pc, #28]	; (1000be60 <pio_gpio_init+0x34>)
1000be42:	4293      	cmp	r3, r2
1000be44:	d101      	bne.n	1000be4a <pio_gpio_init+0x1e>
1000be46:	2306      	movs	r3, #6
1000be48:	e000      	b.n	1000be4c <pio_gpio_init+0x20>
1000be4a:	2307      	movs	r3, #7
1000be4c:	683a      	ldr	r2, [r7, #0]
1000be4e:	0019      	movs	r1, r3
1000be50:	0010      	movs	r0, r2
1000be52:	f7fb fa3b 	bl	100072cc <gpio_set_function>
}
1000be56:	46c0      	nop			; (mov r8, r8)
1000be58:	46bd      	mov	sp, r7
1000be5a:	b002      	add	sp, #8
1000be5c:	bd80      	pop	{r7, pc}
1000be5e:	46c0      	nop			; (mov r8, r8)
1000be60:	50200000 	.word	0x50200000

1000be64 <pio_sm_set_enabled>:
static inline void pio_sm_set_enabled(PIO pio, uint sm, bool enabled) {
1000be64:	b580      	push	{r7, lr}
1000be66:	b084      	sub	sp, #16
1000be68:	af00      	add	r7, sp, #0
1000be6a:	60f8      	str	r0, [r7, #12]
1000be6c:	60b9      	str	r1, [r7, #8]
1000be6e:	1dfb      	adds	r3, r7, #7
1000be70:	701a      	strb	r2, [r3, #0]
    check_pio_param(pio);
1000be72:	68fb      	ldr	r3, [r7, #12]
1000be74:	0018      	movs	r0, r3
1000be76:	f7ff fe7e 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000be7a:	68bb      	ldr	r3, [r7, #8]
1000be7c:	0018      	movs	r0, r3
1000be7e:	f7ff fe72 	bl	1000bb66 <check_sm_param>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (bool_to_bit(enabled) << sm);
1000be82:	68fb      	ldr	r3, [r7, #12]
1000be84:	681b      	ldr	r3, [r3, #0]
1000be86:	2101      	movs	r1, #1
1000be88:	68ba      	ldr	r2, [r7, #8]
1000be8a:	4091      	lsls	r1, r2
1000be8c:	000a      	movs	r2, r1
1000be8e:	43d2      	mvns	r2, r2
1000be90:	401a      	ands	r2, r3
1000be92:	1dfb      	adds	r3, r7, #7
1000be94:	781b      	ldrb	r3, [r3, #0]
1000be96:	0019      	movs	r1, r3
1000be98:	68bb      	ldr	r3, [r7, #8]
1000be9a:	4099      	lsls	r1, r3
1000be9c:	000b      	movs	r3, r1
1000be9e:	431a      	orrs	r2, r3
1000bea0:	68fb      	ldr	r3, [r7, #12]
1000bea2:	601a      	str	r2, [r3, #0]
}
1000bea4:	46c0      	nop			; (mov r8, r8)
1000bea6:	46bd      	mov	sp, r7
1000bea8:	b004      	add	sp, #16
1000beaa:	bd80      	pop	{r7, pc}

1000beac <pio_sm_exec>:
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
1000beac:	b580      	push	{r7, lr}
1000beae:	b084      	sub	sp, #16
1000beb0:	af00      	add	r7, sp, #0
1000beb2:	60f8      	str	r0, [r7, #12]
1000beb4:	60b9      	str	r1, [r7, #8]
1000beb6:	607a      	str	r2, [r7, #4]
    check_pio_param(pio);
1000beb8:	68fb      	ldr	r3, [r7, #12]
1000beba:	0018      	movs	r0, r3
1000bebc:	f7ff fe5b 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000bec0:	68bb      	ldr	r3, [r7, #8]
1000bec2:	0018      	movs	r0, r3
1000bec4:	f7ff fe4f 	bl	1000bb66 <check_sm_param>
    pio->sm[sm].instr = instr;
1000bec8:	68f9      	ldr	r1, [r7, #12]
1000beca:	68ba      	ldr	r2, [r7, #8]
1000becc:	20d8      	movs	r0, #216	; 0xd8
1000bece:	0013      	movs	r3, r2
1000bed0:	005b      	lsls	r3, r3, #1
1000bed2:	189b      	adds	r3, r3, r2
1000bed4:	00db      	lsls	r3, r3, #3
1000bed6:	18cb      	adds	r3, r1, r3
1000bed8:	181b      	adds	r3, r3, r0
1000beda:	687a      	ldr	r2, [r7, #4]
1000bedc:	601a      	str	r2, [r3, #0]
}
1000bede:	46c0      	nop			; (mov r8, r8)
1000bee0:	46bd      	mov	sp, r7
1000bee2:	b004      	add	sp, #16
1000bee4:	bd80      	pop	{r7, pc}

1000bee6 <pio_sm_put>:
static inline void pio_sm_put(PIO pio, uint sm, uint32_t data) {
1000bee6:	b580      	push	{r7, lr}
1000bee8:	b084      	sub	sp, #16
1000beea:	af00      	add	r7, sp, #0
1000beec:	60f8      	str	r0, [r7, #12]
1000beee:	60b9      	str	r1, [r7, #8]
1000bef0:	607a      	str	r2, [r7, #4]
    check_pio_param(pio);
1000bef2:	68fb      	ldr	r3, [r7, #12]
1000bef4:	0018      	movs	r0, r3
1000bef6:	f7ff fe3e 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000befa:	68bb      	ldr	r3, [r7, #8]
1000befc:	0018      	movs	r0, r3
1000befe:	f7ff fe32 	bl	1000bb66 <check_sm_param>
    pio->txf[sm] = data;
1000bf02:	68fb      	ldr	r3, [r7, #12]
1000bf04:	68ba      	ldr	r2, [r7, #8]
1000bf06:	3204      	adds	r2, #4
1000bf08:	0092      	lsls	r2, r2, #2
1000bf0a:	6879      	ldr	r1, [r7, #4]
1000bf0c:	50d1      	str	r1, [r2, r3]
}
1000bf0e:	46c0      	nop			; (mov r8, r8)
1000bf10:	46bd      	mov	sp, r7
1000bf12:	b004      	add	sp, #16
1000bf14:	bd80      	pop	{r7, pc}

1000bf16 <pio_sm_get>:
static inline uint32_t pio_sm_get(PIO pio, uint sm) {
1000bf16:	b580      	push	{r7, lr}
1000bf18:	b082      	sub	sp, #8
1000bf1a:	af00      	add	r7, sp, #0
1000bf1c:	6078      	str	r0, [r7, #4]
1000bf1e:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
1000bf20:	687b      	ldr	r3, [r7, #4]
1000bf22:	0018      	movs	r0, r3
1000bf24:	f7ff fe27 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000bf28:	683b      	ldr	r3, [r7, #0]
1000bf2a:	0018      	movs	r0, r3
1000bf2c:	f7ff fe1b 	bl	1000bb66 <check_sm_param>
    return pio->rxf[sm];
1000bf30:	687b      	ldr	r3, [r7, #4]
1000bf32:	683a      	ldr	r2, [r7, #0]
1000bf34:	3208      	adds	r2, #8
1000bf36:	0092      	lsls	r2, r2, #2
1000bf38:	58d3      	ldr	r3, [r2, r3]
}
1000bf3a:	0018      	movs	r0, r3
1000bf3c:	46bd      	mov	sp, r7
1000bf3e:	b002      	add	sp, #8
1000bf40:	bd80      	pop	{r7, pc}

1000bf42 <pio_sm_is_rx_fifo_empty>:
static inline bool pio_sm_is_rx_fifo_empty(PIO pio, uint sm) {
1000bf42:	b580      	push	{r7, lr}
1000bf44:	b082      	sub	sp, #8
1000bf46:	af00      	add	r7, sp, #0
1000bf48:	6078      	str	r0, [r7, #4]
1000bf4a:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
1000bf4c:	687b      	ldr	r3, [r7, #4]
1000bf4e:	0018      	movs	r0, r3
1000bf50:	f7ff fe11 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000bf54:	683b      	ldr	r3, [r7, #0]
1000bf56:	0018      	movs	r0, r3
1000bf58:	f7ff fe05 	bl	1000bb66 <check_sm_param>
    return (pio->fstat & (1u << (PIO_FSTAT_RXEMPTY_LSB + sm))) != 0;
1000bf5c:	687b      	ldr	r3, [r7, #4]
1000bf5e:	685b      	ldr	r3, [r3, #4]
1000bf60:	683a      	ldr	r2, [r7, #0]
1000bf62:	3208      	adds	r2, #8
1000bf64:	2101      	movs	r1, #1
1000bf66:	4091      	lsls	r1, r2
1000bf68:	000a      	movs	r2, r1
1000bf6a:	4013      	ands	r3, r2
1000bf6c:	1e5a      	subs	r2, r3, #1
1000bf6e:	4193      	sbcs	r3, r2
1000bf70:	b2db      	uxtb	r3, r3
}
1000bf72:	0018      	movs	r0, r3
1000bf74:	46bd      	mov	sp, r7
1000bf76:	b002      	add	sp, #8
1000bf78:	bd80      	pop	{r7, pc}

1000bf7a <pio_sm_is_tx_fifo_full>:
static inline bool pio_sm_is_tx_fifo_full(PIO pio, uint sm) {
1000bf7a:	b580      	push	{r7, lr}
1000bf7c:	b082      	sub	sp, #8
1000bf7e:	af00      	add	r7, sp, #0
1000bf80:	6078      	str	r0, [r7, #4]
1000bf82:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
1000bf84:	687b      	ldr	r3, [r7, #4]
1000bf86:	0018      	movs	r0, r3
1000bf88:	f7ff fdf5 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000bf8c:	683b      	ldr	r3, [r7, #0]
1000bf8e:	0018      	movs	r0, r3
1000bf90:	f7ff fde9 	bl	1000bb66 <check_sm_param>
    return (pio->fstat & (1u << (PIO_FSTAT_TXFULL_LSB + sm))) != 0;
1000bf94:	687b      	ldr	r3, [r7, #4]
1000bf96:	685b      	ldr	r3, [r3, #4]
1000bf98:	683a      	ldr	r2, [r7, #0]
1000bf9a:	3210      	adds	r2, #16
1000bf9c:	2101      	movs	r1, #1
1000bf9e:	4091      	lsls	r1, r2
1000bfa0:	000a      	movs	r2, r1
1000bfa2:	4013      	ands	r3, r2
1000bfa4:	1e5a      	subs	r2, r3, #1
1000bfa6:	4193      	sbcs	r3, r2
1000bfa8:	b2db      	uxtb	r3, r3
}
1000bfaa:	0018      	movs	r0, r3
1000bfac:	46bd      	mov	sp, r7
1000bfae:	b002      	add	sp, #8
1000bfb0:	bd80      	pop	{r7, pc}

1000bfb2 <pio_sm_put_blocking>:
static inline void pio_sm_put_blocking(PIO pio, uint sm, uint32_t data) {
1000bfb2:	b580      	push	{r7, lr}
1000bfb4:	b084      	sub	sp, #16
1000bfb6:	af00      	add	r7, sp, #0
1000bfb8:	60f8      	str	r0, [r7, #12]
1000bfba:	60b9      	str	r1, [r7, #8]
1000bfbc:	607a      	str	r2, [r7, #4]
    check_pio_param(pio);
1000bfbe:	68fb      	ldr	r3, [r7, #12]
1000bfc0:	0018      	movs	r0, r3
1000bfc2:	f7ff fdd8 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000bfc6:	68bb      	ldr	r3, [r7, #8]
1000bfc8:	0018      	movs	r0, r3
1000bfca:	f7ff fdcc 	bl	1000bb66 <check_sm_param>
    while (pio_sm_is_tx_fifo_full(pio, sm)) tight_loop_contents();
1000bfce:	e000      	b.n	1000bfd2 <pio_sm_put_blocking+0x20>
1000bfd0:	46c0      	nop			; (mov r8, r8)
1000bfd2:	68ba      	ldr	r2, [r7, #8]
1000bfd4:	68fb      	ldr	r3, [r7, #12]
1000bfd6:	0011      	movs	r1, r2
1000bfd8:	0018      	movs	r0, r3
1000bfda:	f7ff ffce 	bl	1000bf7a <pio_sm_is_tx_fifo_full>
1000bfde:	1e03      	subs	r3, r0, #0
1000bfe0:	d1f6      	bne.n	1000bfd0 <pio_sm_put_blocking+0x1e>
    pio_sm_put(pio, sm, data);
1000bfe2:	687a      	ldr	r2, [r7, #4]
1000bfe4:	68b9      	ldr	r1, [r7, #8]
1000bfe6:	68fb      	ldr	r3, [r7, #12]
1000bfe8:	0018      	movs	r0, r3
1000bfea:	f7ff ff7c 	bl	1000bee6 <pio_sm_put>
}
1000bfee:	46c0      	nop			; (mov r8, r8)
1000bff0:	46bd      	mov	sp, r7
1000bff2:	b004      	add	sp, #16
1000bff4:	bd80      	pop	{r7, pc}

1000bff6 <pio_sm_get_blocking>:
static inline uint32_t pio_sm_get_blocking(PIO pio, uint sm) {
1000bff6:	b580      	push	{r7, lr}
1000bff8:	b082      	sub	sp, #8
1000bffa:	af00      	add	r7, sp, #0
1000bffc:	6078      	str	r0, [r7, #4]
1000bffe:	6039      	str	r1, [r7, #0]
    check_pio_param(pio);
1000c000:	687b      	ldr	r3, [r7, #4]
1000c002:	0018      	movs	r0, r3
1000c004:	f7ff fdb7 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000c008:	683b      	ldr	r3, [r7, #0]
1000c00a:	0018      	movs	r0, r3
1000c00c:	f7ff fdab 	bl	1000bb66 <check_sm_param>
    while (pio_sm_is_rx_fifo_empty(pio, sm)) tight_loop_contents();
1000c010:	e000      	b.n	1000c014 <pio_sm_get_blocking+0x1e>
1000c012:	46c0      	nop			; (mov r8, r8)
1000c014:	683a      	ldr	r2, [r7, #0]
1000c016:	687b      	ldr	r3, [r7, #4]
1000c018:	0011      	movs	r1, r2
1000c01a:	0018      	movs	r0, r3
1000c01c:	f7ff ff91 	bl	1000bf42 <pio_sm_is_rx_fifo_empty>
1000c020:	1e03      	subs	r3, r0, #0
1000c022:	d1f6      	bne.n	1000c012 <pio_sm_get_blocking+0x1c>
    return pio_sm_get(pio, sm);
1000c024:	683a      	ldr	r2, [r7, #0]
1000c026:	687b      	ldr	r3, [r7, #4]
1000c028:	0011      	movs	r1, r2
1000c02a:	0018      	movs	r0, r3
1000c02c:	f7ff ff73 	bl	1000bf16 <pio_sm_get>
1000c030:	0003      	movs	r3, r0
}
1000c032:	0018      	movs	r0, r3
1000c034:	46bd      	mov	sp, r7
1000c036:	b002      	add	sp, #8
1000c038:	bd80      	pop	{r7, pc}

1000c03a <pio_sm_set_clkdiv_int_frac>:
static inline void pio_sm_set_clkdiv_int_frac(PIO pio, uint sm, uint16_t div_int, uint8_t div_frac) {
1000c03a:	b590      	push	{r4, r7, lr}
1000c03c:	b085      	sub	sp, #20
1000c03e:	af00      	add	r7, sp, #0
1000c040:	60f8      	str	r0, [r7, #12]
1000c042:	60b9      	str	r1, [r7, #8]
1000c044:	0019      	movs	r1, r3
1000c046:	1dbb      	adds	r3, r7, #6
1000c048:	801a      	strh	r2, [r3, #0]
1000c04a:	1d7b      	adds	r3, r7, #5
1000c04c:	1c0a      	adds	r2, r1, #0
1000c04e:	701a      	strb	r2, [r3, #0]
    check_pio_param(pio);
1000c050:	68fb      	ldr	r3, [r7, #12]
1000c052:	0018      	movs	r0, r3
1000c054:	f7ff fd8f 	bl	1000bb76 <check_pio_param>
    check_sm_param(sm);
1000c058:	68bb      	ldr	r3, [r7, #8]
1000c05a:	0018      	movs	r0, r3
1000c05c:	f7ff fd83 	bl	1000bb66 <check_sm_param>
            (((uint)div_frac) << PIO_SM0_CLKDIV_FRAC_LSB) |
1000c060:	1d7b      	adds	r3, r7, #5
1000c062:	781b      	ldrb	r3, [r3, #0]
1000c064:	021a      	lsls	r2, r3, #8
            (((uint)div_int) << PIO_SM0_CLKDIV_INT_LSB);
1000c066:	1dbb      	adds	r3, r7, #6
1000c068:	881b      	ldrh	r3, [r3, #0]
1000c06a:	041b      	lsls	r3, r3, #16
            (((uint)div_frac) << PIO_SM0_CLKDIV_FRAC_LSB) |
1000c06c:	431a      	orrs	r2, r3
1000c06e:	0011      	movs	r1, r2
    pio->sm[sm].clkdiv =
1000c070:	68f8      	ldr	r0, [r7, #12]
1000c072:	68ba      	ldr	r2, [r7, #8]
1000c074:	24c8      	movs	r4, #200	; 0xc8
1000c076:	0013      	movs	r3, r2
1000c078:	005b      	lsls	r3, r3, #1
1000c07a:	189b      	adds	r3, r3, r2
1000c07c:	00db      	lsls	r3, r3, #3
1000c07e:	18c3      	adds	r3, r0, r3
1000c080:	191b      	adds	r3, r3, r4
1000c082:	6019      	str	r1, [r3, #0]
}
1000c084:	46c0      	nop			; (mov r8, r8)
1000c086:	46bd      	mov	sp, r7
1000c088:	b005      	add	sp, #20
1000c08a:	bd90      	pop	{r4, r7, pc}

1000c08c <probe_program_get_default_config>:
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config probe_program_get_default_config(uint offset)
{
1000c08c:	b590      	push	{r4, r7, lr}
1000c08e:	b087      	sub	sp, #28
1000c090:	af00      	add	r7, sp, #0
1000c092:	6078      	str	r0, [r7, #4]
1000c094:	6039      	str	r1, [r7, #0]
    pio_sm_config c = pio_get_default_sm_config();
1000c096:	2408      	movs	r4, #8
1000c098:	193b      	adds	r3, r7, r4
1000c09a:	0018      	movs	r0, r3
1000c09c:	f7ff fe98 	bl	1000bdd0 <pio_get_default_sm_config>
    sm_config_set_wrap(&c, offset + probe_wrap_target, offset + probe_wrap);
1000c0a0:	683b      	ldr	r3, [r7, #0]
1000c0a2:	330f      	adds	r3, #15
1000c0a4:	001a      	movs	r2, r3
1000c0a6:	6839      	ldr	r1, [r7, #0]
1000c0a8:	193b      	adds	r3, r7, r4
1000c0aa:	0018      	movs	r0, r3
1000c0ac:	f7ff fe10 	bl	1000bcd0 <sm_config_set_wrap>
    sm_config_set_sideset(&c, 2, true, false);
1000c0b0:	1938      	adds	r0, r7, r4
1000c0b2:	2300      	movs	r3, #0
1000c0b4:	2201      	movs	r2, #1
1000c0b6:	2102      	movs	r1, #2
1000c0b8:	f7ff fdbe 	bl	1000bc38 <sm_config_set_sideset>
    return c;
1000c0bc:	687b      	ldr	r3, [r7, #4]
1000c0be:	193a      	adds	r2, r7, r4
1000c0c0:	ca13      	ldmia	r2!, {r0, r1, r4}
1000c0c2:	c313      	stmia	r3!, {r0, r1, r4}
1000c0c4:	6812      	ldr	r2, [r2, #0]
1000c0c6:	601a      	str	r2, [r3, #0]
}
1000c0c8:	6878      	ldr	r0, [r7, #4]
1000c0ca:	46bd      	mov	sp, r7
1000c0cc:	b007      	add	sp, #28
1000c0ce:	bd90      	pop	{r4, r7, pc}

1000c0d0 <tud_vendor_available>:
{
  return tud_vendor_n_mounted(0);
}

static inline uint32_t tud_vendor_available (void)
{
1000c0d0:	b580      	push	{r7, lr}
1000c0d2:	af00      	add	r7, sp, #0
  return tud_vendor_n_available(0);
1000c0d4:	2000      	movs	r0, #0
1000c0d6:	f7f4 ff2d 	bl	10000f34 <tud_vendor_n_available>
1000c0da:	0003      	movs	r3, r0
}
1000c0dc:	0018      	movs	r0, r3
1000c0de:	46bd      	mov	sp, r7
1000c0e0:	bd80      	pop	{r7, pc}

1000c0e2 <tud_vendor_read>:

static inline uint32_t tud_vendor_read (void* buffer, uint32_t bufsize)
{
1000c0e2:	b580      	push	{r7, lr}
1000c0e4:	b082      	sub	sp, #8
1000c0e6:	af00      	add	r7, sp, #0
1000c0e8:	6078      	str	r0, [r7, #4]
1000c0ea:	6039      	str	r1, [r7, #0]
  return tud_vendor_n_read(0, buffer, bufsize);
1000c0ec:	683a      	ldr	r2, [r7, #0]
1000c0ee:	687b      	ldr	r3, [r7, #4]
1000c0f0:	0019      	movs	r1, r3
1000c0f2:	2000      	movs	r0, #0
1000c0f4:	f7f4 ff62 	bl	10000fbc <tud_vendor_n_read>
1000c0f8:	0003      	movs	r3, r0
}
1000c0fa:	0018      	movs	r0, r3
1000c0fc:	46bd      	mov	sp, r7
1000c0fe:	b002      	add	sp, #8
1000c100:	bd80      	pop	{r7, pc}

1000c102 <tud_vendor_write>:
{
    tud_vendor_n_read_flush(0);
}

static inline uint32_t tud_vendor_write (void const* buffer, uint32_t bufsize)
{
1000c102:	b580      	push	{r7, lr}
1000c104:	b082      	sub	sp, #8
1000c106:	af00      	add	r7, sp, #0
1000c108:	6078      	str	r0, [r7, #4]
1000c10a:	6039      	str	r1, [r7, #0]
  return tud_vendor_n_write(0, buffer, bufsize);
1000c10c:	683a      	ldr	r2, [r7, #0]
1000c10e:	687b      	ldr	r3, [r7, #4]
1000c110:	0019      	movs	r1, r3
1000c112:	2000      	movs	r0, #0
1000c114:	f7f4 ffc0 	bl	10001098 <tud_vendor_n_write>
1000c118:	0003      	movs	r3, r0
}
1000c11a:	0018      	movs	r0, r3
1000c11c:	46bd      	mov	sp, r7
1000c11e:	b002      	add	sp, #8
1000c120:	bd80      	pop	{r7, pc}
	...

1000c124 <probe_set_swclk_freq>:

struct __attribute__((__packed__)) probe_pkt_hdr {
    uint32_t total_packet_length;
};

void probe_set_swclk_freq(uint freq_khz) {
1000c124:	b580      	push	{r7, lr}
1000c126:	b084      	sub	sp, #16
1000c128:	af00      	add	r7, sp, #0
1000c12a:	6078      	str	r0, [r7, #4]
    picoprobe_info("Set swclk freq %dKHz\n", freq_khz);
    uint clk_sys_freq_khz = clock_get_hz(clk_sys) / 1000;
1000c12c:	2005      	movs	r0, #5
1000c12e:	f7fb f87b 	bl	10007228 <clock_get_hz>
1000c132:	0002      	movs	r2, r0
1000c134:	23fa      	movs	r3, #250	; 0xfa
1000c136:	0099      	lsls	r1, r3, #2
1000c138:	0010      	movs	r0, r2
1000c13a:	f000 fbc1 	bl	1000c8c0 <__wrap___aeabi_uidiv>
1000c13e:	0003      	movs	r3, r0
1000c140:	60fb      	str	r3, [r7, #12]
    // Worked out with saleae
    uint32_t divider = clk_sys_freq_khz / freq_khz / 2;
1000c142:	6879      	ldr	r1, [r7, #4]
1000c144:	68f8      	ldr	r0, [r7, #12]
1000c146:	f000 fbbb 	bl	1000c8c0 <__wrap___aeabi_uidiv>
1000c14a:	0003      	movs	r3, r0
1000c14c:	085b      	lsrs	r3, r3, #1
1000c14e:	60bb      	str	r3, [r7, #8]
    pio_sm_set_clkdiv_int_frac(pio0, PROBE_SM, divider, 0);
1000c150:	68bb      	ldr	r3, [r7, #8]
1000c152:	b29a      	uxth	r2, r3
1000c154:	4804      	ldr	r0, [pc, #16]	; (1000c168 <probe_set_swclk_freq+0x44>)
1000c156:	2300      	movs	r3, #0
1000c158:	2100      	movs	r1, #0
1000c15a:	f7ff ff6e 	bl	1000c03a <pio_sm_set_clkdiv_int_frac>
}
1000c15e:	46c0      	nop			; (mov r8, r8)
1000c160:	46bd      	mov	sp, r7
1000c162:	b004      	add	sp, #16
1000c164:	bd80      	pop	{r7, pc}
1000c166:	46c0      	nop			; (mov r8, r8)
1000c168:	50200000 	.word	0x50200000

1000c16c <probe_assert_reset>:

static inline void probe_assert_reset(bool state)
{
1000c16c:	b580      	push	{r7, lr}
1000c16e:	b082      	sub	sp, #8
1000c170:	af00      	add	r7, sp, #0
1000c172:	0002      	movs	r2, r0
1000c174:	1dfb      	adds	r3, r7, #7
1000c176:	701a      	strb	r2, [r3, #0]
    /* Change the direction to out to drive pin to 0 or to in to emulate open drain */
    gpio_set_dir(PROBE_PIN_RESET, state);
1000c178:	1dfb      	adds	r3, r7, #7
1000c17a:	781b      	ldrb	r3, [r3, #0]
1000c17c:	0019      	movs	r1, r3
1000c17e:	2006      	movs	r0, #6
1000c180:	f7ff fcaf 	bl	1000bae2 <gpio_set_dir>
}
1000c184:	46c0      	nop			; (mov r8, r8)
1000c186:	46bd      	mov	sp, r7
1000c188:	b002      	add	sp, #8
1000c18a:	bd80      	pop	{r7, pc}

1000c18c <probe_write_bits>:

static inline void probe_write_bits(uint bit_count, uint8_t data_byte) {
1000c18c:	b580      	push	{r7, lr}
1000c18e:	b082      	sub	sp, #8
1000c190:	af00      	add	r7, sp, #0
1000c192:	6078      	str	r0, [r7, #4]
1000c194:	000a      	movs	r2, r1
1000c196:	1cfb      	adds	r3, r7, #3
1000c198:	701a      	strb	r2, [r3, #0]
    DEBUG_PINS_SET(probe_timing, DBG_PIN_WRITE);
1000c19a:	4b1d      	ldr	r3, [pc, #116]	; (1000c210 <probe_write_bits+0x84>)
1000c19c:	781b      	ldrb	r3, [r3, #0]
1000c19e:	2b01      	cmp	r3, #1
1000c1a0:	d104      	bne.n	1000c1ac <probe_write_bits+0x20>
1000c1a2:	2380      	movs	r3, #128	; 0x80
1000c1a4:	031b      	lsls	r3, r3, #12
1000c1a6:	0018      	movs	r0, r3
1000c1a8:	f7ff fc6b 	bl	1000ba82 <gpio_set_mask>
    pio_sm_put_blocking(pio0, PROBE_SM, bit_count - 1);
1000c1ac:	687b      	ldr	r3, [r7, #4]
1000c1ae:	3b01      	subs	r3, #1
1000c1b0:	4818      	ldr	r0, [pc, #96]	; (1000c214 <probe_write_bits+0x88>)
1000c1b2:	001a      	movs	r2, r3
1000c1b4:	2100      	movs	r1, #0
1000c1b6:	f7ff fefc 	bl	1000bfb2 <pio_sm_put_blocking>
    pio_sm_put_blocking(pio0, PROBE_SM, data_byte);
1000c1ba:	1cfb      	adds	r3, r7, #3
1000c1bc:	781b      	ldrb	r3, [r3, #0]
1000c1be:	4815      	ldr	r0, [pc, #84]	; (1000c214 <probe_write_bits+0x88>)
1000c1c0:	001a      	movs	r2, r3
1000c1c2:	2100      	movs	r1, #0
1000c1c4:	f7ff fef5 	bl	1000bfb2 <pio_sm_put_blocking>
    DEBUG_PINS_SET(probe_timing, DBG_PIN_WRITE_WAIT);
1000c1c8:	4b11      	ldr	r3, [pc, #68]	; (1000c210 <probe_write_bits+0x84>)
1000c1ca:	781b      	ldrb	r3, [r3, #0]
1000c1cc:	2b01      	cmp	r3, #1
1000c1ce:	d104      	bne.n	1000c1da <probe_write_bits+0x4e>
1000c1d0:	2380      	movs	r3, #128	; 0x80
1000c1d2:	035b      	lsls	r3, r3, #13
1000c1d4:	0018      	movs	r0, r3
1000c1d6:	f7ff fc54 	bl	1000ba82 <gpio_set_mask>
    picoprobe_dump("Write %d bits 0x%x\n", bit_count, data_byte);
    // Wait for pio to push garbage to rx fifo so we know it has finished sending
    pio_sm_get_blocking(pio0, PROBE_SM);
1000c1da:	4b0e      	ldr	r3, [pc, #56]	; (1000c214 <probe_write_bits+0x88>)
1000c1dc:	2100      	movs	r1, #0
1000c1de:	0018      	movs	r0, r3
1000c1e0:	f7ff ff09 	bl	1000bff6 <pio_sm_get_blocking>
    DEBUG_PINS_CLR(probe_timing, DBG_PIN_WRITE_WAIT);
1000c1e4:	4b0a      	ldr	r3, [pc, #40]	; (1000c210 <probe_write_bits+0x84>)
1000c1e6:	781b      	ldrb	r3, [r3, #0]
1000c1e8:	2b01      	cmp	r3, #1
1000c1ea:	d104      	bne.n	1000c1f6 <probe_write_bits+0x6a>
1000c1ec:	2380      	movs	r3, #128	; 0x80
1000c1ee:	035b      	lsls	r3, r3, #13
1000c1f0:	0018      	movs	r0, r3
1000c1f2:	f7ff fc52 	bl	1000ba9a <gpio_clr_mask>
    DEBUG_PINS_CLR(probe_timing, DBG_PIN_WRITE);
1000c1f6:	4b06      	ldr	r3, [pc, #24]	; (1000c210 <probe_write_bits+0x84>)
1000c1f8:	781b      	ldrb	r3, [r3, #0]
1000c1fa:	2b01      	cmp	r3, #1
1000c1fc:	d104      	bne.n	1000c208 <probe_write_bits+0x7c>
1000c1fe:	2380      	movs	r3, #128	; 0x80
1000c200:	031b      	lsls	r3, r3, #12
1000c202:	0018      	movs	r0, r3
1000c204:	f7ff fc49 	bl	1000ba9a <gpio_clr_mask>
}
1000c208:	46c0      	nop			; (mov r8, r8)
1000c20a:	46bd      	mov	sp, r7
1000c20c:	b002      	add	sp, #8
1000c20e:	bd80      	pop	{r7, pc}
1000c210:	20009441 	.word	0x20009441
1000c214:	50200000 	.word	0x50200000

1000c218 <probe_read_bits>:

static inline uint8_t probe_read_bits(uint bit_count) {
1000c218:	b580      	push	{r7, lr}
1000c21a:	b084      	sub	sp, #16
1000c21c:	af00      	add	r7, sp, #0
1000c21e:	6078      	str	r0, [r7, #4]
    DEBUG_PINS_SET(probe_timing, DBG_PIN_READ);
1000c220:	4b1b      	ldr	r3, [pc, #108]	; (1000c290 <probe_read_bits+0x78>)
1000c222:	781b      	ldrb	r3, [r3, #0]
1000c224:	2b01      	cmp	r3, #1
1000c226:	d104      	bne.n	1000c232 <probe_read_bits+0x1a>
1000c228:	2380      	movs	r3, #128	; 0x80
1000c22a:	039b      	lsls	r3, r3, #14
1000c22c:	0018      	movs	r0, r3
1000c22e:	f7ff fc28 	bl	1000ba82 <gpio_set_mask>
    pio_sm_put_blocking(pio0, PROBE_SM, bit_count - 1);
1000c232:	687b      	ldr	r3, [r7, #4]
1000c234:	3b01      	subs	r3, #1
1000c236:	4817      	ldr	r0, [pc, #92]	; (1000c294 <probe_read_bits+0x7c>)
1000c238:	001a      	movs	r2, r3
1000c23a:	2100      	movs	r1, #0
1000c23c:	f7ff feb9 	bl	1000bfb2 <pio_sm_put_blocking>
    uint32_t data = pio_sm_get_blocking(pio0, PROBE_SM);
1000c240:	4b14      	ldr	r3, [pc, #80]	; (1000c294 <probe_read_bits+0x7c>)
1000c242:	2100      	movs	r1, #0
1000c244:	0018      	movs	r0, r3
1000c246:	f7ff fed6 	bl	1000bff6 <pio_sm_get_blocking>
1000c24a:	0003      	movs	r3, r0
1000c24c:	60bb      	str	r3, [r7, #8]
    uint8_t data_shifted = data >> 24;
1000c24e:	68bb      	ldr	r3, [r7, #8]
1000c250:	0e1a      	lsrs	r2, r3, #24
1000c252:	200f      	movs	r0, #15
1000c254:	183b      	adds	r3, r7, r0
1000c256:	701a      	strb	r2, [r3, #0]

    if (bit_count < 8) {
1000c258:	687b      	ldr	r3, [r7, #4]
1000c25a:	2b07      	cmp	r3, #7
1000c25c:	d807      	bhi.n	1000c26e <probe_read_bits+0x56>
        data_shifted = data_shifted >> 8-bit_count;
1000c25e:	183b      	adds	r3, r7, r0
1000c260:	781a      	ldrb	r2, [r3, #0]
1000c262:	687b      	ldr	r3, [r7, #4]
1000c264:	2108      	movs	r1, #8
1000c266:	1acb      	subs	r3, r1, r3
1000c268:	411a      	asrs	r2, r3
1000c26a:	183b      	adds	r3, r7, r0
1000c26c:	701a      	strb	r2, [r3, #0]
    }

    picoprobe_dump("Read %d bits 0x%x (shifted 0x%x)\n", bit_count, data, data_shifted);
    DEBUG_PINS_CLR(probe_timing, DBG_PIN_READ);
1000c26e:	4b08      	ldr	r3, [pc, #32]	; (1000c290 <probe_read_bits+0x78>)
1000c270:	781b      	ldrb	r3, [r3, #0]
1000c272:	2b01      	cmp	r3, #1
1000c274:	d104      	bne.n	1000c280 <probe_read_bits+0x68>
1000c276:	2380      	movs	r3, #128	; 0x80
1000c278:	039b      	lsls	r3, r3, #14
1000c27a:	0018      	movs	r0, r3
1000c27c:	f7ff fc0d 	bl	1000ba9a <gpio_clr_mask>
    return data_shifted;
1000c280:	230f      	movs	r3, #15
1000c282:	18fb      	adds	r3, r7, r3
1000c284:	781b      	ldrb	r3, [r3, #0]
}
1000c286:	0018      	movs	r0, r3
1000c288:	46bd      	mov	sp, r7
1000c28a:	b004      	add	sp, #16
1000c28c:	bd80      	pop	{r7, pc}
1000c28e:	46c0      	nop			; (mov r8, r8)
1000c290:	20009441 	.word	0x20009441
1000c294:	50200000 	.word	0x50200000

1000c298 <probe_read_mode>:

static void probe_read_mode(void) {
1000c298:	b580      	push	{r7, lr}
1000c29a:	af00      	add	r7, sp, #0
    pio_sm_exec(pio0, PROBE_SM, pio_encode_jmp(probe.offset + probe_offset_in_posedge));
1000c29c:	4b0b      	ldr	r3, [pc, #44]	; (1000c2cc <probe_read_mode+0x34>)
1000c29e:	4a0c      	ldr	r2, [pc, #48]	; (1000c2d0 <probe_read_mode+0x38>)
1000c2a0:	589b      	ldr	r3, [r3, r2]
1000c2a2:	3309      	adds	r3, #9
1000c2a4:	0018      	movs	r0, r3
1000c2a6:	f7ff fc4f 	bl	1000bb48 <pio_encode_jmp>
1000c2aa:	0003      	movs	r3, r0
1000c2ac:	4809      	ldr	r0, [pc, #36]	; (1000c2d4 <probe_read_mode+0x3c>)
1000c2ae:	001a      	movs	r2, r3
1000c2b0:	2100      	movs	r1, #0
1000c2b2:	f7ff fdfb 	bl	1000beac <pio_sm_exec>
    while(pio0->dbg_padoe & (1 << PROBE_PIN_SWDIO));
1000c2b6:	46c0      	nop			; (mov r8, r8)
1000c2b8:	4b06      	ldr	r3, [pc, #24]	; (1000c2d4 <probe_read_mode+0x3c>)
1000c2ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000c2bc:	2380      	movs	r3, #128	; 0x80
1000c2be:	059b      	lsls	r3, r3, #22
1000c2c0:	4013      	ands	r3, r2
1000c2c2:	d1f9      	bne.n	1000c2b8 <probe_read_mode+0x20>
}
1000c2c4:	46c0      	nop			; (mov r8, r8)
1000c2c6:	46c0      	nop			; (mov r8, r8)
1000c2c8:	46bd      	mov	sp, r7
1000c2ca:	bd80      	pop	{r7, pc}
1000c2cc:	200051f0 	.word	0x200051f0
1000c2d0:	00004008 	.word	0x00004008
1000c2d4:	50200000 	.word	0x50200000

1000c2d8 <probe_write_mode>:

static void probe_write_mode(void) {
1000c2d8:	b580      	push	{r7, lr}
1000c2da:	af00      	add	r7, sp, #0
    pio_sm_exec(pio0, PROBE_SM, pio_encode_jmp(probe.offset + probe_offset_out_negedge));
1000c2dc:	4b0b      	ldr	r3, [pc, #44]	; (1000c30c <probe_write_mode+0x34>)
1000c2de:	4a0c      	ldr	r2, [pc, #48]	; (1000c310 <probe_write_mode+0x38>)
1000c2e0:	589b      	ldr	r3, [r3, r2]
1000c2e2:	0018      	movs	r0, r3
1000c2e4:	f7ff fc30 	bl	1000bb48 <pio_encode_jmp>
1000c2e8:	0003      	movs	r3, r0
1000c2ea:	480a      	ldr	r0, [pc, #40]	; (1000c314 <probe_write_mode+0x3c>)
1000c2ec:	001a      	movs	r2, r3
1000c2ee:	2100      	movs	r1, #0
1000c2f0:	f7ff fddc 	bl	1000beac <pio_sm_exec>
    while(!(pio0->dbg_padoe & (1 << PROBE_PIN_SWDIO)));
1000c2f4:	46c0      	nop			; (mov r8, r8)
1000c2f6:	4b07      	ldr	r3, [pc, #28]	; (1000c314 <probe_write_mode+0x3c>)
1000c2f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000c2fa:	2380      	movs	r3, #128	; 0x80
1000c2fc:	059b      	lsls	r3, r3, #22
1000c2fe:	4013      	ands	r3, r2
1000c300:	d0f9      	beq.n	1000c2f6 <probe_write_mode+0x1e>
}
1000c302:	46c0      	nop			; (mov r8, r8)
1000c304:	46c0      	nop			; (mov r8, r8)
1000c306:	46bd      	mov	sp, r7
1000c308:	bd80      	pop	{r7, pc}
1000c30a:	46c0      	nop			; (mov r8, r8)
1000c30c:	200051f0 	.word	0x200051f0
1000c310:	00004008 	.word	0x00004008
1000c314:	50200000 	.word	0x50200000

1000c318 <probe_init>:

void probe_init() {
1000c318:	b580      	push	{r7, lr}
1000c31a:	b088      	sub	sp, #32
1000c31c:	af02      	add	r7, sp, #8
    // Funcsel pins
    pio_gpio_init(pio0, PROBE_PIN_SWCLK);
1000c31e:	4b33      	ldr	r3, [pc, #204]	; (1000c3ec <probe_init+0xd4>)
1000c320:	211c      	movs	r1, #28
1000c322:	0018      	movs	r0, r3
1000c324:	f7ff fd82 	bl	1000be2c <pio_gpio_init>
    pio_gpio_init(pio0, PROBE_PIN_SWDIO);
1000c328:	4b30      	ldr	r3, [pc, #192]	; (1000c3ec <probe_init+0xd4>)
1000c32a:	211d      	movs	r1, #29
1000c32c:	0018      	movs	r0, r3
1000c32e:	f7ff fd7d 	bl	1000be2c <pio_gpio_init>
    // Make sure SWDIO has a pullup on it. Idle state is high
    gpio_pull_up(PROBE_PIN_SWDIO);
1000c332:	201d      	movs	r0, #29
1000c334:	f7ff fb97 	bl	1000ba66 <gpio_pull_up>

    // Target reset pin: pull up, input to emulate open drain pin
    gpio_pull_up(PROBE_PIN_RESET);
1000c338:	2006      	movs	r0, #6
1000c33a:	f7ff fb94 	bl	1000ba66 <gpio_pull_up>
    // gpio_init will leave the pin cleared and set as input
    gpio_init(PROBE_PIN_RESET);
1000c33e:	2006      	movs	r0, #6
1000c340:	f7fb f838 	bl	100073b4 <gpio_init>

    uint offset = pio_add_program(pio0, &probe_program);
1000c344:	4b2a      	ldr	r3, [pc, #168]	; (1000c3f0 <probe_init+0xd8>)
1000c346:	4a29      	ldr	r2, [pc, #164]	; (1000c3ec <probe_init+0xd4>)
1000c348:	0019      	movs	r1, r3
1000c34a:	0010      	movs	r0, r2
1000c34c:	f7fb ff9e 	bl	1000828c <pio_add_program>
1000c350:	0003      	movs	r3, r0
1000c352:	617b      	str	r3, [r7, #20]
    probe.offset = offset;
1000c354:	4b27      	ldr	r3, [pc, #156]	; (1000c3f4 <probe_init+0xdc>)
1000c356:	4928      	ldr	r1, [pc, #160]	; (1000c3f8 <probe_init+0xe0>)
1000c358:	697a      	ldr	r2, [r7, #20]
1000c35a:	505a      	str	r2, [r3, r1]

    pio_sm_config sm_config = probe_program_get_default_config(offset);
1000c35c:	1d3b      	adds	r3, r7, #4
1000c35e:	697a      	ldr	r2, [r7, #20]
1000c360:	0011      	movs	r1, r2
1000c362:	0018      	movs	r0, r3
1000c364:	f7ff fe92 	bl	1000c08c <probe_program_get_default_config>

    // Set SWCLK as a sideset pin
    sm_config_set_sideset_pins(&sm_config, PROBE_PIN_SWCLK);
1000c368:	1d3b      	adds	r3, r7, #4
1000c36a:	211c      	movs	r1, #28
1000c36c:	0018      	movs	r0, r3
1000c36e:	f7ff fc4f 	bl	1000bc10 <sm_config_set_sideset_pins>

    // Set SWDIO offset
    sm_config_set_out_pins(&sm_config, PROBE_PIN_SWDIO, 1);
1000c372:	1d3b      	adds	r3, r7, #4
1000c374:	2201      	movs	r2, #1
1000c376:	211d      	movs	r1, #29
1000c378:	0018      	movs	r0, r3
1000c37a:	f7ff fc05 	bl	1000bb88 <sm_config_set_out_pins>
    sm_config_set_set_pins(&sm_config, PROBE_PIN_SWDIO, 1);
1000c37e:	1d3b      	adds	r3, r7, #4
1000c380:	2201      	movs	r2, #1
1000c382:	211d      	movs	r1, #29
1000c384:	0018      	movs	r0, r3
1000c386:	f7ff fc17 	bl	1000bbb8 <sm_config_set_set_pins>
    sm_config_set_in_pins(&sm_config, PROBE_PIN_SWDIO);
1000c38a:	1d3b      	adds	r3, r7, #4
1000c38c:	211d      	movs	r1, #29
1000c38e:	0018      	movs	r0, r3
1000c390:	f7ff fc2a 	bl	1000bbe8 <sm_config_set_in_pins>

    // Set SWD and SWDIO pins as output to start. This will be set in the sm
    pio_sm_set_consecutive_pindirs(pio0, PROBE_SM, PROBE_PIN_OFFSET, 2, true);
1000c394:	4815      	ldr	r0, [pc, #84]	; (1000c3ec <probe_init+0xd4>)
1000c396:	2301      	movs	r3, #1
1000c398:	9300      	str	r3, [sp, #0]
1000c39a:	2302      	movs	r3, #2
1000c39c:	221c      	movs	r2, #28
1000c39e:	2100      	movs	r1, #0
1000c3a0:	f7fb ff9e 	bl	100082e0 <pio_sm_set_consecutive_pindirs>

    // shift output right, autopull off, autopull threshold
    sm_config_set_out_shift(&sm_config, true, false, 0);
1000c3a4:	1d38      	adds	r0, r7, #4
1000c3a6:	2300      	movs	r3, #0
1000c3a8:	2200      	movs	r2, #0
1000c3aa:	2101      	movs	r1, #1
1000c3ac:	f7ff fcdc 	bl	1000bd68 <sm_config_set_out_shift>
    // shift input right as swd data is lsb first, autopush off
    sm_config_set_in_shift(&sm_config, true, false, 0);
1000c3b0:	1d38      	adds	r0, r7, #4
1000c3b2:	2300      	movs	r3, #0
1000c3b4:	2200      	movs	r2, #0
1000c3b6:	2101      	movs	r1, #1
1000c3b8:	f7ff fca2 	bl	1000bd00 <sm_config_set_in_shift>

    // Init SM with config
    pio_sm_init(pio0, PROBE_SM, offset, &sm_config);
1000c3bc:	1d3b      	adds	r3, r7, #4
1000c3be:	697a      	ldr	r2, [r7, #20]
1000c3c0:	480a      	ldr	r0, [pc, #40]	; (1000c3ec <probe_init+0xd4>)
1000c3c2:	2100      	movs	r1, #0
1000c3c4:	f7fc f800 	bl	100083c8 <pio_sm_init>

    // Set up divisor
    probe_set_swclk_freq(1000);
1000c3c8:	23fa      	movs	r3, #250	; 0xfa
1000c3ca:	009b      	lsls	r3, r3, #2
1000c3cc:	0018      	movs	r0, r3
1000c3ce:	f7ff fea9 	bl	1000c124 <probe_set_swclk_freq>

    // Enable SM
    pio_sm_set_enabled(pio0, PROBE_SM, 1);
1000c3d2:	4b06      	ldr	r3, [pc, #24]	; (1000c3ec <probe_init+0xd4>)
1000c3d4:	2201      	movs	r2, #1
1000c3d6:	2100      	movs	r1, #0
1000c3d8:	0018      	movs	r0, r3
1000c3da:	f7ff fd43 	bl	1000be64 <pio_sm_set_enabled>

    // Jump to write program
    probe_write_mode();
1000c3de:	f7ff ff7b 	bl	1000c2d8 <probe_write_mode>
}
1000c3e2:	46c0      	nop			; (mov r8, r8)
1000c3e4:	46bd      	mov	sp, r7
1000c3e6:	b006      	add	sp, #24
1000c3e8:	bd80      	pop	{r7, pc}
1000c3ea:	46c0      	nop			; (mov r8, r8)
1000c3ec:	50200000 	.word	0x50200000
1000c3f0:	1000ed38 	.word	0x1000ed38
1000c3f4:	200051f0 	.word	0x200051f0
1000c3f8:	00004008 	.word	0x00004008

1000c3fc <probe_handle_read>:

void probe_handle_read(uint total_bits) {
1000c3fc:	b590      	push	{r4, r7, lr}
1000c3fe:	b085      	sub	sp, #20
1000c400:	af00      	add	r7, sp, #0
1000c402:	6078      	str	r0, [r7, #4]
    picoprobe_debug("Read %d bits\n", total_bits);
    probe_read_mode();
1000c404:	f7ff ff48 	bl	1000c298 <probe_read_mode>

    uint chunk;
    uint bits = total_bits;
1000c408:	687b      	ldr	r3, [r7, #4]
1000c40a:	60bb      	str	r3, [r7, #8]
    while (bits > 0) {
1000c40c:	e01b      	b.n	1000c446 <probe_handle_read+0x4a>
        if (bits > 8) {
1000c40e:	68bb      	ldr	r3, [r7, #8]
1000c410:	2b08      	cmp	r3, #8
1000c412:	d902      	bls.n	1000c41a <probe_handle_read+0x1e>
            chunk = 8;
1000c414:	2308      	movs	r3, #8
1000c416:	60fb      	str	r3, [r7, #12]
1000c418:	e001      	b.n	1000c41e <probe_handle_read+0x22>
        } else {
            chunk = bits;
1000c41a:	68bb      	ldr	r3, [r7, #8]
1000c41c:	60fb      	str	r3, [r7, #12]
        }
        probe.tx_buf[probe.tx_len] = probe_read_bits(chunk);
1000c41e:	4b0e      	ldr	r3, [pc, #56]	; (1000c458 <probe_handle_read+0x5c>)
1000c420:	681c      	ldr	r4, [r3, #0]
1000c422:	68fb      	ldr	r3, [r7, #12]
1000c424:	0018      	movs	r0, r3
1000c426:	f7ff fef7 	bl	1000c218 <probe_read_bits>
1000c42a:	0003      	movs	r3, r0
1000c42c:	001a      	movs	r2, r3
1000c42e:	4b0a      	ldr	r3, [pc, #40]	; (1000c458 <probe_handle_read+0x5c>)
1000c430:	191b      	adds	r3, r3, r4
1000c432:	711a      	strb	r2, [r3, #4]
        probe.tx_len++;
1000c434:	4b08      	ldr	r3, [pc, #32]	; (1000c458 <probe_handle_read+0x5c>)
1000c436:	681b      	ldr	r3, [r3, #0]
1000c438:	1c5a      	adds	r2, r3, #1
1000c43a:	4b07      	ldr	r3, [pc, #28]	; (1000c458 <probe_handle_read+0x5c>)
1000c43c:	601a      	str	r2, [r3, #0]
        // Decrement remaining bits
        bits -= chunk;
1000c43e:	68ba      	ldr	r2, [r7, #8]
1000c440:	68fb      	ldr	r3, [r7, #12]
1000c442:	1ad3      	subs	r3, r2, r3
1000c444:	60bb      	str	r3, [r7, #8]
    while (bits > 0) {
1000c446:	68bb      	ldr	r3, [r7, #8]
1000c448:	2b00      	cmp	r3, #0
1000c44a:	d1e0      	bne.n	1000c40e <probe_handle_read+0x12>
    }
}
1000c44c:	46c0      	nop			; (mov r8, r8)
1000c44e:	46c0      	nop			; (mov r8, r8)
1000c450:	46bd      	mov	sp, r7
1000c452:	b005      	add	sp, #20
1000c454:	bd90      	pop	{r4, r7, pc}
1000c456:	46c0      	nop			; (mov r8, r8)
1000c458:	200051f0 	.word	0x200051f0

1000c45c <probe_handle_write>:

void probe_handle_write(uint8_t *data, uint total_bits) {
1000c45c:	b580      	push	{r7, lr}
1000c45e:	b084      	sub	sp, #16
1000c460:	af00      	add	r7, sp, #0
1000c462:	6078      	str	r0, [r7, #4]
1000c464:	6039      	str	r1, [r7, #0]
    picoprobe_debug("Write %d bits\n", total_bits);

    led_signal_activity(total_bits);
1000c466:	683b      	ldr	r3, [r7, #0]
1000c468:	0018      	movs	r0, r3
1000c46a:	f7ff fac7 	bl	1000b9fc <led_signal_activity>

    probe_write_mode();
1000c46e:	f7ff ff33 	bl	1000c2d8 <probe_write_mode>

    uint chunk;
    uint bits = total_bits;
1000c472:	683b      	ldr	r3, [r7, #0]
1000c474:	60bb      	str	r3, [r7, #8]
    while (bits > 0) {
1000c476:	e014      	b.n	1000c4a2 <probe_handle_write+0x46>
        if (bits > 8) {
1000c478:	68bb      	ldr	r3, [r7, #8]
1000c47a:	2b08      	cmp	r3, #8
1000c47c:	d902      	bls.n	1000c484 <probe_handle_write+0x28>
            chunk = 8;
1000c47e:	2308      	movs	r3, #8
1000c480:	60fb      	str	r3, [r7, #12]
1000c482:	e001      	b.n	1000c488 <probe_handle_write+0x2c>
        } else {
            chunk = bits;
1000c484:	68bb      	ldr	r3, [r7, #8]
1000c486:	60fb      	str	r3, [r7, #12]
        }

        probe_write_bits(chunk, *data++);
1000c488:	687b      	ldr	r3, [r7, #4]
1000c48a:	1c5a      	adds	r2, r3, #1
1000c48c:	607a      	str	r2, [r7, #4]
1000c48e:	781a      	ldrb	r2, [r3, #0]
1000c490:	68fb      	ldr	r3, [r7, #12]
1000c492:	0011      	movs	r1, r2
1000c494:	0018      	movs	r0, r3
1000c496:	f7ff fe79 	bl	1000c18c <probe_write_bits>
        bits -= chunk;
1000c49a:	68ba      	ldr	r2, [r7, #8]
1000c49c:	68fb      	ldr	r3, [r7, #12]
1000c49e:	1ad3      	subs	r3, r2, r3
1000c4a0:	60bb      	str	r3, [r7, #8]
    while (bits > 0) {
1000c4a2:	68bb      	ldr	r3, [r7, #8]
1000c4a4:	2b00      	cmp	r3, #0
1000c4a6:	d1e7      	bne.n	1000c478 <probe_handle_write+0x1c>
    }
}
1000c4a8:	46c0      	nop			; (mov r8, r8)
1000c4aa:	46c0      	nop			; (mov r8, r8)
1000c4ac:	46bd      	mov	sp, r7
1000c4ae:	b004      	add	sp, #16
1000c4b0:	bd80      	pop	{r7, pc}
	...

1000c4b4 <probe_prepare_read_header>:

void probe_prepare_read_header(struct probe_cmd_hdr *hdr) {
1000c4b4:	b580      	push	{r7, lr}
1000c4b6:	b082      	sub	sp, #8
1000c4b8:	af00      	add	r7, sp, #0
1000c4ba:	6078      	str	r0, [r7, #4]
    // We have a read so need to prefix the data with the cmd header
    if (probe.tx_len == 0) {
1000c4bc:	4b0d      	ldr	r3, [pc, #52]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4be:	681b      	ldr	r3, [r3, #0]
1000c4c0:	2b00      	cmp	r3, #0
1000c4c2:	d104      	bne.n	1000c4ce <probe_prepare_read_header+0x1a>
        // Reserve some space for probe_pkt_hdr
        probe.tx_len += sizeof(struct probe_pkt_hdr);
1000c4c4:	4b0b      	ldr	r3, [pc, #44]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4c6:	681b      	ldr	r3, [r3, #0]
1000c4c8:	1d1a      	adds	r2, r3, #4
1000c4ca:	4b0a      	ldr	r3, [pc, #40]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4cc:	601a      	str	r2, [r3, #0]
    }

    memcpy((void*)&probe.tx_buf[probe.tx_len], hdr, sizeof(struct probe_cmd_hdr));
1000c4ce:	4b09      	ldr	r3, [pc, #36]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4d0:	681a      	ldr	r2, [r3, #0]
1000c4d2:	4b08      	ldr	r3, [pc, #32]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4d4:	18d3      	adds	r3, r2, r3
1000c4d6:	3304      	adds	r3, #4
1000c4d8:	6879      	ldr	r1, [r7, #4]
1000c4da:	2206      	movs	r2, #6
1000c4dc:	0018      	movs	r0, r3
1000c4de:	f000 fd41 	bl	1000cf64 <__wrap___aeabi_memcpy>
    probe.tx_len += sizeof(struct probe_cmd_hdr);
1000c4e2:	4b04      	ldr	r3, [pc, #16]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4e4:	681b      	ldr	r3, [r3, #0]
1000c4e6:	1d9a      	adds	r2, r3, #6
1000c4e8:	4b02      	ldr	r3, [pc, #8]	; (1000c4f4 <probe_prepare_read_header+0x40>)
1000c4ea:	601a      	str	r2, [r3, #0]
}
1000c4ec:	46c0      	nop			; (mov r8, r8)
1000c4ee:	46bd      	mov	sp, r7
1000c4f0:	b002      	add	sp, #8
1000c4f2:	bd80      	pop	{r7, pc}
1000c4f4:	200051f0 	.word	0x200051f0

1000c4f8 <probe_handle_pkt>:

void probe_handle_pkt(void) {
1000c4f8:	b590      	push	{r4, r7, lr}
1000c4fa:	b087      	sub	sp, #28
1000c4fc:	af00      	add	r7, sp, #0
    uint8_t *pkt = &probe.rx_buf[0] + sizeof(struct probe_pkt_hdr);
1000c4fe:	4b6e      	ldr	r3, [pc, #440]	; (1000c6b8 <probe_handle_pkt+0x1c0>)
1000c500:	617b      	str	r3, [r7, #20]
    uint remaining = probe.rx_len - sizeof(struct probe_pkt_hdr);
1000c502:	4b6e      	ldr	r3, [pc, #440]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c504:	4a6e      	ldr	r2, [pc, #440]	; (1000c6c0 <probe_handle_pkt+0x1c8>)
1000c506:	589b      	ldr	r3, [r3, r2]
1000c508:	3b04      	subs	r3, #4
1000c50a:	613b      	str	r3, [r7, #16]

    DEBUG_PINS_SET(probe_timing, DBG_PIN_PKT);
1000c50c:	4b6d      	ldr	r3, [pc, #436]	; (1000c6c4 <probe_handle_pkt+0x1cc>)
1000c50e:	781b      	ldrb	r3, [r3, #0]
1000c510:	2b01      	cmp	r3, #1
1000c512:	d104      	bne.n	1000c51e <probe_handle_pkt+0x26>
1000c514:	2380      	movs	r3, #128	; 0x80
1000c516:	03db      	lsls	r3, r3, #15
1000c518:	0018      	movs	r0, r3
1000c51a:	f7ff fab2 	bl	1000ba82 <gpio_set_mask>

    picoprobe_debug("Processing packet of length %d\n", probe.rx_len);

    probe.tx_len = 0;
1000c51e:	4b67      	ldr	r3, [pc, #412]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c520:	2200      	movs	r2, #0
1000c522:	601a      	str	r2, [r3, #0]
    while (remaining) {
1000c524:	e078      	b.n	1000c618 <probe_handle_pkt+0x120>
        struct probe_cmd_hdr *hdr = (struct probe_cmd_hdr*)pkt;
1000c526:	697b      	ldr	r3, [r7, #20]
1000c528:	60bb      	str	r3, [r7, #8]
        uint data_bytes = DIV_ROUND_UP(hdr->bits, 8);
1000c52a:	68bb      	ldr	r3, [r7, #8]
1000c52c:	789a      	ldrb	r2, [r3, #2]
1000c52e:	78d9      	ldrb	r1, [r3, #3]
1000c530:	0209      	lsls	r1, r1, #8
1000c532:	430a      	orrs	r2, r1
1000c534:	7919      	ldrb	r1, [r3, #4]
1000c536:	0409      	lsls	r1, r1, #16
1000c538:	430a      	orrs	r2, r1
1000c53a:	795b      	ldrb	r3, [r3, #5]
1000c53c:	061b      	lsls	r3, r3, #24
1000c53e:	4313      	orrs	r3, r2
1000c540:	3307      	adds	r3, #7
1000c542:	08db      	lsrs	r3, r3, #3
1000c544:	607b      	str	r3, [r7, #4]
        pkt += sizeof(struct probe_cmd_hdr);
1000c546:	697b      	ldr	r3, [r7, #20]
1000c548:	3306      	adds	r3, #6
1000c54a:	617b      	str	r3, [r7, #20]
        remaining -= sizeof(struct probe_cmd_hdr);
1000c54c:	693b      	ldr	r3, [r7, #16]
1000c54e:	3b06      	subs	r3, #6
1000c550:	613b      	str	r3, [r7, #16]

        if (hdr->cmd == PROBE_WRITE_BITS) {
1000c552:	68bb      	ldr	r3, [r7, #8]
1000c554:	785b      	ldrb	r3, [r3, #1]
1000c556:	2b01      	cmp	r3, #1
1000c558:	d11b      	bne.n	1000c592 <probe_handle_pkt+0x9a>
            uint8_t *data = pkt;
1000c55a:	697b      	ldr	r3, [r7, #20]
1000c55c:	603b      	str	r3, [r7, #0]
            probe_handle_write(data, hdr->bits);
1000c55e:	68bb      	ldr	r3, [r7, #8]
1000c560:	789a      	ldrb	r2, [r3, #2]
1000c562:	78d9      	ldrb	r1, [r3, #3]
1000c564:	0209      	lsls	r1, r1, #8
1000c566:	430a      	orrs	r2, r1
1000c568:	7919      	ldrb	r1, [r3, #4]
1000c56a:	0409      	lsls	r1, r1, #16
1000c56c:	430a      	orrs	r2, r1
1000c56e:	795b      	ldrb	r3, [r3, #5]
1000c570:	061b      	lsls	r3, r3, #24
1000c572:	4313      	orrs	r3, r2
1000c574:	001a      	movs	r2, r3
1000c576:	683b      	ldr	r3, [r7, #0]
1000c578:	0011      	movs	r1, r2
1000c57a:	0018      	movs	r0, r3
1000c57c:	f7ff ff6e 	bl	1000c45c <probe_handle_write>
            pkt += data_bytes;
1000c580:	697a      	ldr	r2, [r7, #20]
1000c582:	687b      	ldr	r3, [r7, #4]
1000c584:	18d3      	adds	r3, r2, r3
1000c586:	617b      	str	r3, [r7, #20]
            remaining -= data_bytes;
1000c588:	693a      	ldr	r2, [r7, #16]
1000c58a:	687b      	ldr	r3, [r7, #4]
1000c58c:	1ad3      	subs	r3, r2, r3
1000c58e:	613b      	str	r3, [r7, #16]
1000c590:	e042      	b.n	1000c618 <probe_handle_pkt+0x120>
        } else if (hdr->cmd == PROBE_READ_BITS) {
1000c592:	68bb      	ldr	r3, [r7, #8]
1000c594:	785b      	ldrb	r3, [r3, #1]
1000c596:	2b02      	cmp	r3, #2
1000c598:	d112      	bne.n	1000c5c0 <probe_handle_pkt+0xc8>
            probe_prepare_read_header(hdr);
1000c59a:	68bb      	ldr	r3, [r7, #8]
1000c59c:	0018      	movs	r0, r3
1000c59e:	f7ff ff89 	bl	1000c4b4 <probe_prepare_read_header>
            probe_handle_read(hdr->bits);
1000c5a2:	68bb      	ldr	r3, [r7, #8]
1000c5a4:	789a      	ldrb	r2, [r3, #2]
1000c5a6:	78d9      	ldrb	r1, [r3, #3]
1000c5a8:	0209      	lsls	r1, r1, #8
1000c5aa:	430a      	orrs	r2, r1
1000c5ac:	7919      	ldrb	r1, [r3, #4]
1000c5ae:	0409      	lsls	r1, r1, #16
1000c5b0:	430a      	orrs	r2, r1
1000c5b2:	795b      	ldrb	r3, [r3, #5]
1000c5b4:	061b      	lsls	r3, r3, #24
1000c5b6:	4313      	orrs	r3, r2
1000c5b8:	0018      	movs	r0, r3
1000c5ba:	f7ff ff1f 	bl	1000c3fc <probe_handle_read>
1000c5be:	e02b      	b.n	1000c618 <probe_handle_pkt+0x120>
        } else if (hdr->cmd == PROBE_SET_FREQ) {
1000c5c0:	68bb      	ldr	r3, [r7, #8]
1000c5c2:	785b      	ldrb	r3, [r3, #1]
1000c5c4:	2b03      	cmp	r3, #3
1000c5c6:	d10e      	bne.n	1000c5e6 <probe_handle_pkt+0xee>
            probe_set_swclk_freq(hdr->bits);
1000c5c8:	68bb      	ldr	r3, [r7, #8]
1000c5ca:	789a      	ldrb	r2, [r3, #2]
1000c5cc:	78d9      	ldrb	r1, [r3, #3]
1000c5ce:	0209      	lsls	r1, r1, #8
1000c5d0:	430a      	orrs	r2, r1
1000c5d2:	7919      	ldrb	r1, [r3, #4]
1000c5d4:	0409      	lsls	r1, r1, #16
1000c5d6:	430a      	orrs	r2, r1
1000c5d8:	795b      	ldrb	r3, [r3, #5]
1000c5da:	061b      	lsls	r3, r3, #24
1000c5dc:	4313      	orrs	r3, r2
1000c5de:	0018      	movs	r0, r3
1000c5e0:	f7ff fda0 	bl	1000c124 <probe_set_swclk_freq>
1000c5e4:	e018      	b.n	1000c618 <probe_handle_pkt+0x120>
        } else if (hdr->cmd == PROBE_RESET) {
1000c5e6:	68bb      	ldr	r3, [r7, #8]
1000c5e8:	785b      	ldrb	r3, [r3, #1]
1000c5ea:	2b04      	cmp	r3, #4
1000c5ec:	d014      	beq.n	1000c618 <probe_handle_pkt+0x120>
            // TODO: Is there anything to do after a reset?
            // tx len and rx len should already be 0
            ;
        } else if (hdr->cmd == PROBE_TARGET_RESET) {
1000c5ee:	68bb      	ldr	r3, [r7, #8]
1000c5f0:	785b      	ldrb	r3, [r3, #1]
1000c5f2:	2b05      	cmp	r3, #5
1000c5f4:	d110      	bne.n	1000c618 <probe_handle_pkt+0x120>
            probe_assert_reset(hdr->bits);
1000c5f6:	68bb      	ldr	r3, [r7, #8]
1000c5f8:	789a      	ldrb	r2, [r3, #2]
1000c5fa:	78d9      	ldrb	r1, [r3, #3]
1000c5fc:	0209      	lsls	r1, r1, #8
1000c5fe:	430a      	orrs	r2, r1
1000c600:	7919      	ldrb	r1, [r3, #4]
1000c602:	0409      	lsls	r1, r1, #16
1000c604:	430a      	orrs	r2, r1
1000c606:	795b      	ldrb	r3, [r3, #5]
1000c608:	061b      	lsls	r3, r3, #24
1000c60a:	4313      	orrs	r3, r2
1000c60c:	1e5a      	subs	r2, r3, #1
1000c60e:	4193      	sbcs	r3, r2
1000c610:	b2db      	uxtb	r3, r3
1000c612:	0018      	movs	r0, r3
1000c614:	f7ff fdaa 	bl	1000c16c <probe_assert_reset>
    while (remaining) {
1000c618:	693b      	ldr	r3, [r7, #16]
1000c61a:	2b00      	cmp	r3, #0
1000c61c:	d183      	bne.n	1000c526 <probe_handle_pkt+0x2e>
        }
    }
    probe.rx_len = 0;
1000c61e:	4b27      	ldr	r3, [pc, #156]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c620:	4a27      	ldr	r2, [pc, #156]	; (1000c6c0 <probe_handle_pkt+0x1c8>)
1000c622:	2100      	movs	r1, #0
1000c624:	5099      	str	r1, [r3, r2]

    if (probe.tx_len) {
1000c626:	4b25      	ldr	r3, [pc, #148]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c628:	681b      	ldr	r3, [r3, #0]
1000c62a:	2b00      	cmp	r3, #0
1000c62c:	d033      	beq.n	1000c696 <probe_handle_pkt+0x19e>
        // Fill in total packet length before sending
        struct probe_pkt_hdr *tx_hdr = (struct probe_pkt_hdr*)&probe.tx_buf[0];
1000c62e:	4b26      	ldr	r3, [pc, #152]	; (1000c6c8 <probe_handle_pkt+0x1d0>)
1000c630:	60fb      	str	r3, [r7, #12]
        tx_hdr->total_packet_length = probe.tx_len;
1000c632:	4b22      	ldr	r3, [pc, #136]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c634:	681a      	ldr	r2, [r3, #0]
1000c636:	68fb      	ldr	r3, [r7, #12]
1000c638:	21ff      	movs	r1, #255	; 0xff
1000c63a:	4011      	ands	r1, r2
1000c63c:	000c      	movs	r4, r1
1000c63e:	7819      	ldrb	r1, [r3, #0]
1000c640:	2000      	movs	r0, #0
1000c642:	4001      	ands	r1, r0
1000c644:	1c08      	adds	r0, r1, #0
1000c646:	1c21      	adds	r1, r4, #0
1000c648:	4301      	orrs	r1, r0
1000c64a:	7019      	strb	r1, [r3, #0]
1000c64c:	0a11      	lsrs	r1, r2, #8
1000c64e:	20ff      	movs	r0, #255	; 0xff
1000c650:	4001      	ands	r1, r0
1000c652:	000c      	movs	r4, r1
1000c654:	7859      	ldrb	r1, [r3, #1]
1000c656:	2000      	movs	r0, #0
1000c658:	4001      	ands	r1, r0
1000c65a:	1c08      	adds	r0, r1, #0
1000c65c:	1c21      	adds	r1, r4, #0
1000c65e:	4301      	orrs	r1, r0
1000c660:	7059      	strb	r1, [r3, #1]
1000c662:	0c11      	lsrs	r1, r2, #16
1000c664:	20ff      	movs	r0, #255	; 0xff
1000c666:	4001      	ands	r1, r0
1000c668:	000c      	movs	r4, r1
1000c66a:	7899      	ldrb	r1, [r3, #2]
1000c66c:	2000      	movs	r0, #0
1000c66e:	4001      	ands	r1, r0
1000c670:	1c08      	adds	r0, r1, #0
1000c672:	1c21      	adds	r1, r4, #0
1000c674:	4301      	orrs	r1, r0
1000c676:	7099      	strb	r1, [r3, #2]
1000c678:	0e10      	lsrs	r0, r2, #24
1000c67a:	78da      	ldrb	r2, [r3, #3]
1000c67c:	2100      	movs	r1, #0
1000c67e:	400a      	ands	r2, r1
1000c680:	1c11      	adds	r1, r2, #0
1000c682:	1c02      	adds	r2, r0, #0
1000c684:	430a      	orrs	r2, r1
1000c686:	70da      	strb	r2, [r3, #3]
        tud_vendor_write(&probe.tx_buf[0], probe.tx_len);
1000c688:	4b0c      	ldr	r3, [pc, #48]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c68a:	681a      	ldr	r2, [r3, #0]
1000c68c:	4b0e      	ldr	r3, [pc, #56]	; (1000c6c8 <probe_handle_pkt+0x1d0>)
1000c68e:	0011      	movs	r1, r2
1000c690:	0018      	movs	r0, r3
1000c692:	f7ff fd36 	bl	1000c102 <tud_vendor_write>
        picoprobe_debug("Picoprobe wrote %d response bytes\n", probe.tx_len);
    }
    probe.tx_len = 0;
1000c696:	4b09      	ldr	r3, [pc, #36]	; (1000c6bc <probe_handle_pkt+0x1c4>)
1000c698:	2200      	movs	r2, #0
1000c69a:	601a      	str	r2, [r3, #0]

    DEBUG_PINS_CLR(probe_timing, DBG_PIN_PKT);
1000c69c:	4b09      	ldr	r3, [pc, #36]	; (1000c6c4 <probe_handle_pkt+0x1cc>)
1000c69e:	781b      	ldrb	r3, [r3, #0]
1000c6a0:	2b01      	cmp	r3, #1
1000c6a2:	d104      	bne.n	1000c6ae <probe_handle_pkt+0x1b6>
1000c6a4:	2380      	movs	r3, #128	; 0x80
1000c6a6:	03db      	lsls	r3, r3, #15
1000c6a8:	0018      	movs	r0, r3
1000c6aa:	f7ff f9f6 	bl	1000ba9a <gpio_clr_mask>
}
1000c6ae:	46c0      	nop			; (mov r8, r8)
1000c6b0:	46bd      	mov	sp, r7
1000c6b2:	b007      	add	sp, #28
1000c6b4:	bd90      	pop	{r4, r7, pc}
1000c6b6:	46c0      	nop			; (mov r8, r8)
1000c6b8:	200071fc 	.word	0x200071fc
1000c6bc:	200051f0 	.word	0x200051f0
1000c6c0:	00002004 	.word	0x00002004
1000c6c4:	20009441 	.word	0x20009441
1000c6c8:	200051f4 	.word	0x200051f4

1000c6cc <probe_task>:

// USB bits
void probe_task(void) {
1000c6cc:	b580      	push	{r7, lr}
1000c6ce:	b082      	sub	sp, #8
1000c6d0:	af00      	add	r7, sp, #0
    if ( tud_vendor_available() ) {
1000c6d2:	f7ff fcfd 	bl	1000c0d0 <tud_vendor_available>
1000c6d6:	1e03      	subs	r3, r0, #0
1000c6d8:	d017      	beq.n	1000c70a <probe_task+0x3e>
        uint count = tud_vendor_read(&probe.rx_buf[probe.rx_len], 64);
1000c6da:	4b1b      	ldr	r3, [pc, #108]	; (1000c748 <probe_task+0x7c>)
1000c6dc:	4a1b      	ldr	r2, [pc, #108]	; (1000c74c <probe_task+0x80>)
1000c6de:	589b      	ldr	r3, [r3, r2]
1000c6e0:	4a1b      	ldr	r2, [pc, #108]	; (1000c750 <probe_task+0x84>)
1000c6e2:	189a      	adds	r2, r3, r2
1000c6e4:	4b18      	ldr	r3, [pc, #96]	; (1000c748 <probe_task+0x7c>)
1000c6e6:	18d3      	adds	r3, r2, r3
1000c6e8:	2140      	movs	r1, #64	; 0x40
1000c6ea:	0018      	movs	r0, r3
1000c6ec:	f7ff fcf9 	bl	1000c0e2 <tud_vendor_read>
1000c6f0:	0003      	movs	r3, r0
1000c6f2:	607b      	str	r3, [r7, #4]
        if (count == 0) {
1000c6f4:	687b      	ldr	r3, [r7, #4]
1000c6f6:	2b00      	cmp	r3, #0
1000c6f8:	d022      	beq.n	1000c740 <probe_task+0x74>
            return;
        }
        probe.rx_len += count;
1000c6fa:	4b13      	ldr	r3, [pc, #76]	; (1000c748 <probe_task+0x7c>)
1000c6fc:	4a13      	ldr	r2, [pc, #76]	; (1000c74c <probe_task+0x80>)
1000c6fe:	589a      	ldr	r2, [r3, r2]
1000c700:	687b      	ldr	r3, [r7, #4]
1000c702:	18d2      	adds	r2, r2, r3
1000c704:	4b10      	ldr	r3, [pc, #64]	; (1000c748 <probe_task+0x7c>)
1000c706:	4911      	ldr	r1, [pc, #68]	; (1000c74c <probe_task+0x80>)
1000c708:	505a      	str	r2, [r3, r1]
    }

    if (probe.rx_len >= sizeof(struct probe_pkt_hdr)) {
1000c70a:	4b0f      	ldr	r3, [pc, #60]	; (1000c748 <probe_task+0x7c>)
1000c70c:	4a0f      	ldr	r2, [pc, #60]	; (1000c74c <probe_task+0x80>)
1000c70e:	589b      	ldr	r3, [r3, r2]
1000c710:	2b03      	cmp	r3, #3
1000c712:	d916      	bls.n	1000c742 <probe_task+0x76>
        struct probe_pkt_hdr *pkt_hdr = (struct probe_pkt_hdr*)&probe.rx_buf[0];
1000c714:	4b0f      	ldr	r3, [pc, #60]	; (1000c754 <probe_task+0x88>)
1000c716:	603b      	str	r3, [r7, #0]
        if (pkt_hdr->total_packet_length == probe.rx_len) {
1000c718:	683b      	ldr	r3, [r7, #0]
1000c71a:	781a      	ldrb	r2, [r3, #0]
1000c71c:	7859      	ldrb	r1, [r3, #1]
1000c71e:	0209      	lsls	r1, r1, #8
1000c720:	430a      	orrs	r2, r1
1000c722:	7899      	ldrb	r1, [r3, #2]
1000c724:	0409      	lsls	r1, r1, #16
1000c726:	430a      	orrs	r2, r1
1000c728:	78db      	ldrb	r3, [r3, #3]
1000c72a:	061b      	lsls	r3, r3, #24
1000c72c:	4313      	orrs	r3, r2
1000c72e:	0019      	movs	r1, r3
1000c730:	4b05      	ldr	r3, [pc, #20]	; (1000c748 <probe_task+0x7c>)
1000c732:	4a06      	ldr	r2, [pc, #24]	; (1000c74c <probe_task+0x80>)
1000c734:	589b      	ldr	r3, [r3, r2]
1000c736:	4299      	cmp	r1, r3
1000c738:	d103      	bne.n	1000c742 <probe_task+0x76>
            probe_handle_pkt();
1000c73a:	f7ff fedd 	bl	1000c4f8 <probe_handle_pkt>
1000c73e:	e000      	b.n	1000c742 <probe_task+0x76>
            return;
1000c740:	46c0      	nop			; (mov r8, r8)
        }
    }
1000c742:	46bd      	mov	sp, r7
1000c744:	b002      	add	sp, #8
1000c746:	bd80      	pop	{r7, pc}
1000c748:	200051f0 	.word	0x200051f0
1000c74c:	00002004 	.word	0x00002004
1000c750:	00002008 	.word	0x00002008
1000c754:	200071f8 	.word	0x200071f8

1000c758 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
1000c758:	b580      	push	{r7, lr}
1000c75a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
1000c75c:	4b01      	ldr	r3, [pc, #4]	; (1000c764 <tud_descriptor_device_cb+0xc>)
}
1000c75e:	0018      	movs	r0, r3
1000c760:	46bd      	mov	sp, r7
1000c762:	bd80      	pop	{r7, pc}
1000c764:	1000ed40 	.word	0x1000ed40

1000c768 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
1000c768:	b580      	push	{r7, lr}
1000c76a:	b082      	sub	sp, #8
1000c76c:	af00      	add	r7, sp, #0
1000c76e:	0002      	movs	r2, r0
1000c770:	1dfb      	adds	r3, r7, #7
1000c772:	701a      	strb	r2, [r3, #0]
  (void) index; // for multiple configurations
  return desc_configuration;
1000c774:	4b02      	ldr	r3, [pc, #8]	; (1000c780 <tud_descriptor_configuration_cb+0x18>)
}
1000c776:	0018      	movs	r0, r3
1000c778:	46bd      	mov	sp, r7
1000c77a:	b002      	add	sp, #8
1000c77c:	bd80      	pop	{r7, pc}
1000c77e:	46c0      	nop			; (mov r8, r8)
1000c780:	1000ed54 	.word	0x1000ed54

1000c784 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
1000c784:	b580      	push	{r7, lr}
1000c786:	b084      	sub	sp, #16
1000c788:	af00      	add	r7, sp, #0
1000c78a:	0002      	movs	r2, r0
1000c78c:	1dfb      	adds	r3, r7, #7
1000c78e:	701a      	strb	r2, [r3, #0]
1000c790:	1d3b      	adds	r3, r7, #4
1000c792:	1c0a      	adds	r2, r1, #0
1000c794:	801a      	strh	r2, [r3, #0]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
1000c796:	1dfb      	adds	r3, r7, #7
1000c798:	781b      	ldrb	r3, [r3, #0]
1000c79a:	2b00      	cmp	r3, #0
1000c79c:	d10b      	bne.n	1000c7b6 <tud_descriptor_string_cb+0x32>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
1000c79e:	4b2d      	ldr	r3, [pc, #180]	; (1000c854 <tud_descriptor_string_cb+0xd0>)
1000c7a0:	6819      	ldr	r1, [r3, #0]
1000c7a2:	4b2d      	ldr	r3, [pc, #180]	; (1000c858 <tud_descriptor_string_cb+0xd4>)
1000c7a4:	2202      	movs	r2, #2
1000c7a6:	0018      	movs	r0, r3
1000c7a8:	f000 fbdc 	bl	1000cf64 <__wrap___aeabi_memcpy>
    chr_count = 1;
1000c7ac:	230f      	movs	r3, #15
1000c7ae:	18fb      	adds	r3, r7, r3
1000c7b0:	2201      	movs	r2, #1
1000c7b2:	701a      	strb	r2, [r3, #0]
1000c7b4:	e03a      	b.n	1000c82c <tud_descriptor_string_cb+0xa8>
  }else
  {
    // Convert ASCII string into UTF-16

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
1000c7b6:	1dfb      	adds	r3, r7, #7
1000c7b8:	781b      	ldrb	r3, [r3, #0]
1000c7ba:	2b03      	cmp	r3, #3
1000c7bc:	d901      	bls.n	1000c7c2 <tud_descriptor_string_cb+0x3e>
1000c7be:	2300      	movs	r3, #0
1000c7c0:	e044      	b.n	1000c84c <tud_descriptor_string_cb+0xc8>

    const char* str = string_desc_arr[index];
1000c7c2:	1dfb      	adds	r3, r7, #7
1000c7c4:	781a      	ldrb	r2, [r3, #0]
1000c7c6:	4b23      	ldr	r3, [pc, #140]	; (1000c854 <tud_descriptor_string_cb+0xd0>)
1000c7c8:	0092      	lsls	r2, r2, #2
1000c7ca:	58d3      	ldr	r3, [r2, r3]
1000c7cc:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
1000c7ce:	68bb      	ldr	r3, [r7, #8]
1000c7d0:	0018      	movs	r0, r3
1000c7d2:	f000 fbcd 	bl	1000cf70 <strlen>
1000c7d6:	0002      	movs	r2, r0
1000c7d8:	210f      	movs	r1, #15
1000c7da:	187b      	adds	r3, r7, r1
1000c7dc:	701a      	strb	r2, [r3, #0]
    if ( chr_count > 31 ) chr_count = 31;
1000c7de:	000a      	movs	r2, r1
1000c7e0:	18bb      	adds	r3, r7, r2
1000c7e2:	781b      	ldrb	r3, [r3, #0]
1000c7e4:	2b1f      	cmp	r3, #31
1000c7e6:	d902      	bls.n	1000c7ee <tud_descriptor_string_cb+0x6a>
1000c7e8:	18bb      	adds	r3, r7, r2
1000c7ea:	221f      	movs	r2, #31
1000c7ec:	701a      	strb	r2, [r3, #0]

    for(uint8_t i=0; i<chr_count; i++)
1000c7ee:	230e      	movs	r3, #14
1000c7f0:	18fb      	adds	r3, r7, r3
1000c7f2:	2200      	movs	r2, #0
1000c7f4:	701a      	strb	r2, [r3, #0]
1000c7f6:	e011      	b.n	1000c81c <tud_descriptor_string_cb+0x98>
    {
      _desc_str[1+i] = str[i];
1000c7f8:	200e      	movs	r0, #14
1000c7fa:	183b      	adds	r3, r7, r0
1000c7fc:	781b      	ldrb	r3, [r3, #0]
1000c7fe:	68ba      	ldr	r2, [r7, #8]
1000c800:	18d3      	adds	r3, r2, r3
1000c802:	7819      	ldrb	r1, [r3, #0]
1000c804:	183b      	adds	r3, r7, r0
1000c806:	781b      	ldrb	r3, [r3, #0]
1000c808:	1c5a      	adds	r2, r3, #1
1000c80a:	b289      	uxth	r1, r1
1000c80c:	4b13      	ldr	r3, [pc, #76]	; (1000c85c <tud_descriptor_string_cb+0xd8>)
1000c80e:	0052      	lsls	r2, r2, #1
1000c810:	52d1      	strh	r1, [r2, r3]
    for(uint8_t i=0; i<chr_count; i++)
1000c812:	183b      	adds	r3, r7, r0
1000c814:	781a      	ldrb	r2, [r3, #0]
1000c816:	183b      	adds	r3, r7, r0
1000c818:	3201      	adds	r2, #1
1000c81a:	701a      	strb	r2, [r3, #0]
1000c81c:	230e      	movs	r3, #14
1000c81e:	18fa      	adds	r2, r7, r3
1000c820:	230f      	movs	r3, #15
1000c822:	18fb      	adds	r3, r7, r3
1000c824:	7812      	ldrb	r2, [r2, #0]
1000c826:	781b      	ldrb	r3, [r3, #0]
1000c828:	429a      	cmp	r2, r3
1000c82a:	d3e5      	bcc.n	1000c7f8 <tud_descriptor_string_cb+0x74>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
1000c82c:	230f      	movs	r3, #15
1000c82e:	18fb      	adds	r3, r7, r3
1000c830:	781b      	ldrb	r3, [r3, #0]
1000c832:	3301      	adds	r3, #1
1000c834:	b29b      	uxth	r3, r3
1000c836:	18db      	adds	r3, r3, r3
1000c838:	b29b      	uxth	r3, r3
1000c83a:	b21b      	sxth	r3, r3
1000c83c:	22c0      	movs	r2, #192	; 0xc0
1000c83e:	0092      	lsls	r2, r2, #2
1000c840:	4313      	orrs	r3, r2
1000c842:	b21b      	sxth	r3, r3
1000c844:	b29a      	uxth	r2, r3
1000c846:	4b05      	ldr	r3, [pc, #20]	; (1000c85c <tud_descriptor_string_cb+0xd8>)
1000c848:	801a      	strh	r2, [r3, #0]

  return _desc_str;
1000c84a:	4b04      	ldr	r3, [pc, #16]	; (1000c85c <tud_descriptor_string_cb+0xd8>)
}
1000c84c:	0018      	movs	r0, r3
1000c84e:	46bd      	mov	sp, r7
1000c850:	b004      	add	sp, #16
1000c852:	bd80      	pop	{r7, pc}
1000c854:	200006b4 	.word	0x200006b4
1000c858:	200009de 	.word	0x200009de
1000c85c:	200009dc 	.word	0x200009dc

1000c860 <__aeabi_bits_init>:
aeabi_bits_funcs_end:

.section .text
.thumb_func
__aeabi_bits_init:
    ldr r0, =aeabi_bits_funcs
1000c860:	4801      	ldr	r0, [pc, #4]	; (1000c868 <__aeabi_bits_init+0x8>)
    movs r1, #BITS_FUNC_COUNT
1000c862:	2104      	movs	r1, #4
    ldr r3, =rom_funcs_lookup
1000c864:	4b01      	ldr	r3, [pc, #4]	; (1000c86c <__aeabi_bits_init+0xc>)
    bx r3
1000c866:	4718      	bx	r3
    ldr r0, =aeabi_bits_funcs
1000c868:	20000710 	.word	0x20000710
    ldr r3, =rom_funcs_lookup
1000c86c:	1000909d 	.word	0x1000909d

1000c870 <__wrap___aeabi_idiv>:
wrapper_func __aeabi_idivmod
regular_func div_s32s32
regular_func divmod_s32s32
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    ldr r2, =SIO_BASE
1000c870:	4a12      	ldr	r2, [pc, #72]	; (1000c8bc <divmod_s32s32_savestate+0x18>)
    ldr r3, [r2, #SIO_DIV_CSR_OFFSET]
1000c872:	6f93      	ldr	r3, [r2, #120]	; 0x78
    lsrs r3, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
1000c874:	089b      	lsrs	r3, r3, #2
    bcs divmod_s32s32_savestate
1000c876:	d215      	bcs.n	1000c8a4 <divmod_s32s32_savestate>

1000c878 <divmod_s32s32_unsafe>:
    // to avoid worrying about IRQs (or context switches), simply disable interrupts around call
    ldr r2, =SIO_BASE
    mrs r3, PRIMASK
    cpsid i
#endif /* !PICO_DIVIDER_DISABLE_INTERRUPTS */
    str r0, [r2, #SIO_DIV_SDIVIDEND_OFFSET]
1000c878:	6690      	str	r0, [r2, #104]	; 0x68
    str r1, [r2, #SIO_DIV_SDIVISOR_OFFSET]
1000c87a:	66d1      	str	r1, [r2, #108]	; 0x6c
    cmp r1, #0
1000c87c:	2900      	cmp	r1, #0
    beq 1f
1000c87e:	d005      	beq.n	1000c88c <divmod_s32s32_unsafe+0x14>
    wait_div 2
1000c880:	e7ff      	b.n	1000c882 <divmod_s32s32_unsafe+0xa>
1000c882:	e7ff      	b.n	1000c884 <divmod_s32s32_unsafe+0xc>
1000c884:	e7ff      	b.n	1000c886 <divmod_s32s32_unsafe+0xe>
    // return 64 bit value so we can efficiently return both (note read order is important since QUOTIENT must be read last)
    ldr r1, [r2, #SIO_DIV_REMAINDER_OFFSET]
1000c886:	6f51      	ldr	r1, [r2, #116]	; 0x74
    ldr r0, [r2, #SIO_DIV_QUOTIENT_OFFSET]
1000c888:	6f10      	ldr	r0, [r2, #112]	; 0x70
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    bx lr
1000c88a:	4770      	bx	lr
1:
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    push {r2, lr}
1000c88c:	b504      	push	{r2, lr}
    movs r1, #0x80
1000c88e:	2180      	movs	r1, #128	; 0x80
    lsls r1, #24
1000c890:	0609      	lsls	r1, r1, #24
    asrs r2, r0, #31
1000c892:	17c2      	asrs	r2, r0, #31
    eors r1, r2
1000c894:	4051      	eors	r1, r2
    cmp r0, #0
1000c896:	2800      	cmp	r0, #0
    beq 1f
1000c898:	d000      	beq.n	1000c89c <divmod_s32s32_unsafe+0x24>
    mvns r0, r1
1000c89a:	43c8      	mvns	r0, r1
1:
#if PICO_DIVIDER_CALL_IDIV0
    bl __aeabi_idiv0
1000c89c:	f000 fbb0 	bl	1000d000 <____aeabi_idiv0_veneer>
#endif
    movs r1, #0 // remainder 0
1000c8a0:	2100      	movs	r1, #0
    // need to restore saved r2 as it hold SIO ptr
    pop {r2, pc}
1000c8a2:	bd04      	pop	{r2, pc}

1000c8a4 <divmod_s32s32_savestate>:
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
.align 2
regular_func divmod_s32s32_savestate
    // note that we must be at least 2 cycles into division at this point,
    // which we are because of the firty check before getting here (and of course the function call before that)
    save_div_state_and_lr
1000c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8a6:	6e14      	ldr	r4, [r2, #96]	; 0x60
1000c8a8:	6e55      	ldr	r5, [r2, #100]	; 0x64
1000c8aa:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000c8ac:	6f16      	ldr	r6, [r2, #112]	; 0x70
    bl divmod_s32s32_unsafe
1000c8ae:	f7ff ffe3 	bl	1000c878 <divmod_s32s32_unsafe>
    restore_div_state_and_return
1000c8b2:	6614      	str	r4, [r2, #96]	; 0x60
1000c8b4:	6655      	str	r5, [r2, #100]	; 0x64
1000c8b6:	6757      	str	r7, [r2, #116]	; 0x74
1000c8b8:	6716      	str	r6, [r2, #112]	; 0x70
1000c8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ldr r2, =SIO_BASE
1000c8bc:	d0000000 	.word	0xd0000000

1000c8c0 <__wrap___aeabi_uidiv>:
regular_func divmod_u32u32
wrapper_func __aeabi_uidiv
wrapper_func __aeabi_uidivmod
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    ldr r2, =SIO_BASE
1000c8c0:	4a11      	ldr	r2, [pc, #68]	; (1000c908 <divmod_u32u32_savestate+0x18>)
    ldr r3, [r2, #SIO_DIV_CSR_OFFSET]
1000c8c2:	6f93      	ldr	r3, [r2, #120]	; 0x78
    lsrs r3, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
1000c8c4:	089b      	lsrs	r3, r3, #2
    bcs divmod_u32u32_savestate
1000c8c6:	d213      	bcs.n	1000c8f0 <divmod_u32u32_savestate>

1000c8c8 <divmod_u32u32_unsafe>:
    // to avoid worrying about IRQs (or context switches), simply disable interrupts around call
    ldr r2, =SIO_BASE
    mrs r3, PRIMASK
    cpsid i
#endif /* !PICO_DIVIDER_DISABLE_INTERRUPTS */
    str r0, [r2, #SIO_DIV_UDIVIDEND_OFFSET]
1000c8c8:	6610      	str	r0, [r2, #96]	; 0x60
    str r1, [r2, #SIO_DIV_UDIVISOR_OFFSET]
1000c8ca:	6651      	str	r1, [r2, #100]	; 0x64
    cmp r1, #0
1000c8cc:	2900      	cmp	r1, #0
    beq 1f
1000c8ce:	d005      	beq.n	1000c8dc <divmod_u32u32_unsafe+0x14>
    wait_div 2
1000c8d0:	e7ff      	b.n	1000c8d2 <divmod_u32u32_unsafe+0xa>
1000c8d2:	e7ff      	b.n	1000c8d4 <divmod_u32u32_unsafe+0xc>
1000c8d4:	e7ff      	b.n	1000c8d6 <divmod_u32u32_unsafe+0xe>
    // return 64 bit value so we can efficiently return both (note read order is important since QUOTIENT must be read last)
    ldr r1, [r2, #SIO_DIV_REMAINDER_OFFSET]
1000c8d6:	6f51      	ldr	r1, [r2, #116]	; 0x74
    ldr r0, [r2, #SIO_DIV_QUOTIENT_OFFSET]
1000c8d8:	6f10      	ldr	r0, [r2, #112]	; 0x70
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    bx lr
1000c8da:	4770      	bx	lr
1:
#if PICO_DIVIDER_DISABLE_INTERRUPTS
    msr PRIMASK, r3
#endif /* PICO_DIVIDER_DISABLE_INTERRUPTS */
    push {r2, lr}
1000c8dc:	b504      	push	{r2, lr}
    cmp r0, #0
1000c8de:	2800      	cmp	r0, #0
    beq 1f
1000c8e0:	d001      	beq.n	1000c8e6 <divmod_u32u32_unsafe+0x1e>
    movs r0, #0
1000c8e2:	2000      	movs	r0, #0
    mvns r0, r0
1000c8e4:	43c0      	mvns	r0, r0
1:
#if PICO_DIVIDER_CALL_IDIV0
    bl __aeabi_idiv0
1000c8e6:	f000 fb8b 	bl	1000d000 <____aeabi_idiv0_veneer>
#endif
    movs r1, #0 // remainder 0
1000c8ea:	2100      	movs	r1, #0
    // need to restore saved r2 as it hold SIO ptr
    pop {r2, pc}
1000c8ec:	bd04      	pop	{r2, pc}
1000c8ee:	46c0      	nop			; (mov r8, r8)

1000c8f0 <divmod_u32u32_savestate>:
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
.align 2
regular_func divmod_u32u32_savestate
    save_div_state_and_lr
1000c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8f2:	6e14      	ldr	r4, [r2, #96]	; 0x60
1000c8f4:	6e55      	ldr	r5, [r2, #100]	; 0x64
1000c8f6:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000c8f8:	6f16      	ldr	r6, [r2, #112]	; 0x70
    bl divmod_u32u32_unsafe
1000c8fa:	f7ff ffe5 	bl	1000c8c8 <divmod_u32u32_unsafe>
    restore_div_state_and_return
1000c8fe:	6614      	str	r4, [r2, #96]	; 0x60
1000c900:	6655      	str	r5, [r2, #100]	; 0x64
1000c902:	6757      	str	r7, [r2, #116]	; 0x74
1000c904:	6716      	str	r6, [r2, #112]	; 0x70
1000c906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ldr r2, =SIO_BASE
1000c908:	d0000000 	.word	0xd0000000

1000c90c <__wrap___aeabi_ldivmod>:
wrapper_func __aeabi_ldivmod
regular_func div_s64s64
regular_func divmod_s64s64
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    mov ip, r2
1000c90c:	4694      	mov	ip, r2
    ldr r2, =SIO_BASE
1000c90e:	4a4e      	ldr	r2, [pc, #312]	; (1000ca48 <udiv0+0x1a>)
    ldr r2, [r2, #SIO_DIV_CSR_OFFSET]
1000c910:	6f92      	ldr	r2, [r2, #120]	; 0x78
    lsrs r2, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
1000c912:	0892      	lsrs	r2, r2, #2
    mov r2, ip
1000c914:	4662      	mov	r2, ip
    bcs divmod_s64s64_savestate
1000c916:	d201      	bcs.n	1000c91c <divmod_s64s64_savestate>
    b divmod_s64s64_unsafe
1000c918:	e030      	b.n	1000c97c <divmod_s64s64_unsafe>
1000c91a:	46c0      	nop			; (mov r8, r8)

1000c91c <divmod_s64s64_savestate>:
.align 2
divmod_s64s64_savestate:
    save_div_state_and_lr_64
1000c91c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c91e:	4e4a      	ldr	r6, [pc, #296]	; (1000ca48 <udiv0+0x1a>)
1000c920:	6fb5      	ldr	r5, [r6, #120]	; 0x78
1000c922:	086d      	lsrs	r5, r5, #1
1000c924:	d3fc      	bcc.n	1000c920 <divmod_s64s64_savestate+0x4>
1000c926:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000c928:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000c92a:	6f77      	ldr	r7, [r6, #116]	; 0x74
1000c92c:	6f36      	ldr	r6, [r6, #112]	; 0x70
    bl divmod_s64s64_unsafe
1000c92e:	f000 f825 	bl	1000c97c <divmod_s64s64_unsafe>
    restore_div_state_and_return_64
1000c932:	4694      	mov	ip, r2
1000c934:	4a44      	ldr	r2, [pc, #272]	; (1000ca48 <udiv0+0x1a>)
1000c936:	6614      	str	r4, [r2, #96]	; 0x60
1000c938:	6655      	str	r5, [r2, #100]	; 0x64
1000c93a:	6757      	str	r7, [r2, #116]	; 0x74
1000c93c:	6716      	str	r6, [r2, #112]	; 0x70
1000c93e:	4662      	mov	r2, ip
1000c940:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c942:	46c0      	nop			; (mov r8, r8)

1000c944 <__wrap___aeabi_uldivmod>:
wrapper_func __aeabi_uldivmod
regular_func div_u64u64
regular_func divmod_u64u64
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    mov ip, r2
1000c944:	4694      	mov	ip, r2
    ldr r2, =SIO_BASE
1000c946:	4a40      	ldr	r2, [pc, #256]	; (1000ca48 <udiv0+0x1a>)
    ldr r2, [r2, #SIO_DIV_CSR_OFFSET]
1000c948:	6f92      	ldr	r2, [r2, #120]	; 0x78
    lsrs r2, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
1000c94a:	0892      	lsrs	r2, r2, #2
    mov r2, ip
1000c94c:	4662      	mov	r2, ip
    bcs divmod_u64u64_savestate
1000c94e:	d201      	bcs.n	1000c954 <divmod_u64u64_savestate>
    b divmod_u64u64_unsafe
1000c950:	e058      	b.n	1000ca04 <divmod_u64u64_unsafe>
1000c952:	46c0      	nop			; (mov r8, r8)

1000c954 <divmod_u64u64_savestate>:
.align 2
regular_func divmod_u64u64_savestate
    save_div_state_and_lr_64
1000c954:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c956:	4e3c      	ldr	r6, [pc, #240]	; (1000ca48 <udiv0+0x1a>)
1000c958:	6fb5      	ldr	r5, [r6, #120]	; 0x78
1000c95a:	086d      	lsrs	r5, r5, #1
1000c95c:	d3fc      	bcc.n	1000c958 <divmod_u64u64_savestate+0x4>
1000c95e:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000c960:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000c962:	6f77      	ldr	r7, [r6, #116]	; 0x74
1000c964:	6f36      	ldr	r6, [r6, #112]	; 0x70
    bl divmod_u64u64_unsafe
1000c966:	f000 f84d 	bl	1000ca04 <divmod_u64u64_unsafe>
    restore_div_state_and_return_64
1000c96a:	4694      	mov	ip, r2
1000c96c:	4a36      	ldr	r2, [pc, #216]	; (1000ca48 <udiv0+0x1a>)
1000c96e:	6614      	str	r4, [r2, #96]	; 0x60
1000c970:	6655      	str	r5, [r2, #100]	; 0x64
1000c972:	6757      	str	r7, [r2, #116]	; 0x74
1000c974:	6716      	str	r6, [r2, #112]	; 0x70
1000c976:	4662      	mov	r2, ip
1000c978:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c97a:	46c0      	nop			; (mov r8, r8)

1000c97c <divmod_s64s64_unsafe>:
l\@_1:
.endm

.align 2
regular_func divmod_s64s64_unsafe
 cmp r3,#0
1000c97c:	2b00      	cmp	r3, #0
 blt 1f
1000c97e:	db24      	blt.n	1000c9ca <l41_1+0x26>
@ here x +ve
 beq 2f                    @ could x be zero?
1000c980:	d011      	beq.n	1000c9a6 <l41_1+0x2>
3:
 cmp r1,#0
1000c982:	2900      	cmp	r1, #0
 bge divmod_u64u64_unsafe  @ both positive
1000c984:	da3e      	bge.n	1000ca04 <divmod_u64u64_unsafe>
@ y -ve, x +ve
 push {r14}
1000c986:	b500      	push	{lr}
 dneg r0,r1
1000c988:	43c9      	mvns	r1, r1
1000c98a:	4240      	negs	r0, r0
1000c98c:	d100      	bne.n	1000c990 <l39_1>
1000c98e:	3101      	adds	r1, #1

1000c990 <l39_1>:
 bl divmod_u64u64_unsafe
1000c990:	f000 f838 	bl	1000ca04 <divmod_u64u64_unsafe>
 dneg r0,r1
1000c994:	43c9      	mvns	r1, r1
1000c996:	4240      	negs	r0, r0
1000c998:	d100      	bne.n	1000c99c <l40_1>
1000c99a:	3101      	adds	r1, #1

1000c99c <l40_1>:
 dneg r2,r3
1000c99c:	43db      	mvns	r3, r3
1000c99e:	4252      	negs	r2, r2
1000c9a0:	d100      	bne.n	1000c9a4 <l41_1>
1000c9a2:	3301      	adds	r3, #1

1000c9a4 <l41_1>:
 pop {r15}
1000c9a4:	bd00      	pop	{pc}

2:
 cmp r2,#0
1000c9a6:	2a00      	cmp	r2, #0
 bne 3b                    @ back if x not zero
1000c9a8:	d1eb      	bne.n	1000c982 <divmod_s64s64_unsafe+0x6>

 cmp r0,#0                 @ y==0?
1000c9aa:	2800      	cmp	r0, #0
 bne 4f
1000c9ac:	d101      	bne.n	1000c9b2 <l41_1+0xe>
 cmp r1,#0
1000c9ae:	2900      	cmp	r1, #0
 beq 5f                    @ then pass 0 to __aeabi_ldiv0
1000c9b0:	d005      	beq.n	1000c9be <l41_1+0x1a>
4:
 movs r0,#0
1000c9b2:	2000      	movs	r0, #0
 lsrs r1,#31
1000c9b4:	0fc9      	lsrs	r1, r1, #31
 lsls r1,#31               @ get sign bit
1000c9b6:	07c9      	lsls	r1, r1, #31
 bne 5f                    @ y -ve? pass -2^63 to __aeabi_ldiv0
1000c9b8:	d101      	bne.n	1000c9be <l41_1+0x1a>
 mvns r0,r0
1000c9ba:	43c0      	mvns	r0, r0
 lsrs r1,r0,#1             @ y +ve: pass 2^63-1 to __aeabi_ldiv0
1000c9bc:	0841      	lsrs	r1, r0, #1
5:
 push {r14}
1000c9be:	b500      	push	{lr}
#if PICO_DIVIDER_CALL_LDIV0
 bl __aeabi_ldiv0
1000c9c0:	f000 fb16 	bl	1000cff0 <____aeabi_ldiv0_veneer>
#endif
 movs r2,#0                @ and return 0 for the remainder
1000c9c4:	2200      	movs	r2, #0
 movs r3,#0
1000c9c6:	2300      	movs	r3, #0
 pop {r15}
1000c9c8:	bd00      	pop	{pc}

1:
@ here x -ve
 push {r14}
1000c9ca:	b500      	push	{lr}
 cmp r1,#0
1000c9cc:	2900      	cmp	r1, #0
 blt 1f
1000c9ce:	db0a      	blt.n	1000c9e6 <l43_1+0x2>
@ y +ve, x -ve
 dneg r2,r3
1000c9d0:	43db      	mvns	r3, r3
1000c9d2:	4252      	negs	r2, r2
1000c9d4:	d100      	bne.n	1000c9d8 <l42_1>
1000c9d6:	3301      	adds	r3, #1

1000c9d8 <l42_1>:
 bl divmod_u64u64_unsafe
1000c9d8:	f000 f814 	bl	1000ca04 <divmod_u64u64_unsafe>
 dneg r0,r1
1000c9dc:	43c9      	mvns	r1, r1
1000c9de:	4240      	negs	r0, r0
1000c9e0:	d100      	bne.n	1000c9e4 <l43_1>
1000c9e2:	3101      	adds	r1, #1

1000c9e4 <l43_1>:
 pop {r15}
1000c9e4:	bd00      	pop	{pc}

1:
@ y -ve, x -ve
 dneg r0,r1
1000c9e6:	43c9      	mvns	r1, r1
1000c9e8:	4240      	negs	r0, r0
1000c9ea:	d100      	bne.n	1000c9ee <l44_1>
1000c9ec:	3101      	adds	r1, #1

1000c9ee <l44_1>:
 dneg r2,r3
1000c9ee:	43db      	mvns	r3, r3
1000c9f0:	4252      	negs	r2, r2
1000c9f2:	d100      	bne.n	1000c9f6 <l45_1>
1000c9f4:	3301      	adds	r3, #1

1000c9f6 <l45_1>:
 bl divmod_u64u64_unsafe
1000c9f6:	f000 f805 	bl	1000ca04 <divmod_u64u64_unsafe>
 dneg r2,r3
1000c9fa:	43db      	mvns	r3, r3
1000c9fc:	4252      	negs	r2, r2
1000c9fe:	d100      	bne.n	1000ca02 <l46_1>
1000ca00:	3301      	adds	r3, #1

1000ca02 <l46_1>:
 pop {r15}
1000ca02:	bd00      	pop	{pc}

1000ca04 <divmod_u64u64_unsafe>:

regular_func divmod_u64u64_unsafe
 cmp r1,#0
1000ca04:	2900      	cmp	r1, #0
 bne y64                   @ y fits in 32 bits?
1000ca06:	d123      	bne.n	1000ca50 <y64>
 cmp r3,#0                 @ yes; and x?
1000ca08:	2b00      	cmp	r3, #0
 bne 1f
1000ca0a:	d118      	bne.n	1000ca3e <udiv0+0x10>
 cmp r2,#0
1000ca0c:	2a00      	cmp	r2, #0
 beq 2f                    @ x==0?
1000ca0e:	d00c      	beq.n	1000ca2a <divmod_u64u64_unsafe+0x26>
 mov r12,r7
1000ca10:	46bc      	mov	ip, r7
 ldr r7,=SIO_BASE
1000ca12:	4f0d      	ldr	r7, [pc, #52]	; (1000ca48 <udiv0+0x1a>)
 str r0,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
1000ca14:	6638      	str	r0, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]
1000ca16:	667a      	str	r2, [r7, #100]	; 0x64
 movs r1,#0
1000ca18:	2100      	movs	r1, #0
 movs r3,#0
1000ca1a:	2300      	movs	r3, #0
 wait_div 2
1000ca1c:	e7ff      	b.n	1000ca1e <divmod_u64u64_unsafe+0x1a>
1000ca1e:	e7ff      	b.n	1000ca20 <divmod_u64u64_unsafe+0x1c>
1000ca20:	e7ff      	b.n	1000ca22 <divmod_u64u64_unsafe+0x1e>
 ldr r2,[r7,#SIO_DIV_REMAINDER_OFFSET]
1000ca22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 ldr r0,[r7,#SIO_DIV_QUOTIENT_OFFSET]
1000ca24:	6f38      	ldr	r0, [r7, #112]	; 0x70
 mov r7,r12
1000ca26:	4667      	mov	r7, ip
 bx r14
1000ca28:	4770      	bx	lr

2:                         @ divide by 0 with y<2^32
 cmp r0,#0                 @ y==0?
1000ca2a:	2800      	cmp	r0, #0
 beq 3f                    @ then pass 0 to __aeabi_ldiv0
1000ca2c:	d001      	beq.n	1000ca32 <udiv0+0x4>

1000ca2e <udiv0>:
udiv0:
 ldr r0,=0xffffffff
1000ca2e:	4807      	ldr	r0, [pc, #28]	; (1000ca4c <udiv0+0x1e>)
 movs r1,r0                @ pass 2^64-1 to __aeabi_ldiv0
1000ca30:	0001      	movs	r1, r0
3:
 push {r14}
1000ca32:	b500      	push	{lr}
#if PICO_DIVIDER_CALL_LDIV0
 bl __aeabi_ldiv0
1000ca34:	f000 fadc 	bl	1000cff0 <____aeabi_ldiv0_veneer>
#endif
 movs r2,#0                @ and return 0 for the remainder
1000ca38:	2200      	movs	r2, #0
 movs r3,#0
1000ca3a:	2300      	movs	r3, #0
 pop {r15}
1000ca3c:	bd00      	pop	{pc}

1:
 movs r2,r0                @ x>y, so result is 0 remainder y
1000ca3e:	0002      	movs	r2, r0
 movs r3,r1
1000ca40:	000b      	movs	r3, r1
 movs r0,#0
1000ca42:	2000      	movs	r0, #0
 movs r1,#0
1000ca44:	2100      	movs	r1, #0
 bx r14
1000ca46:	4770      	bx	lr
    ldr r2, =SIO_BASE
1000ca48:	d0000000 	.word	0xd0000000
 ldr r0,=0xffffffff
1000ca4c:	ffffffff 	.word	0xffffffff

1000ca50 <y64>:
.ltorg

@ here y occupies more than 32 bits
@ split into cases acccording to the size of x
y64:
 cmp r3,#0
1000ca50:	2b00      	cmp	r3, #0
 beq 1f
1000ca52:	d000      	beq.n	1000ca56 <y64+0x6>
 b y64_x48                 @ if x does not fit in 32 bits, go to 48- and 64-bit cases
1000ca54:	e0bf      	b.n	1000cbd6 <y64_x48>
1:
 lsrs r3,r2,#16
1000ca56:	0c13      	lsrs	r3, r2, #16
 bne y64_x32               @ jump if x is 17..32 bits
1000ca58:	d128      	bne.n	1000caac <y64_x32>

@ here x is at most 16 bits

 cmp r2,#0
1000ca5a:	2a00      	cmp	r2, #0
 beq udiv0                 @ x==0? exit as with y!=0 case above
1000ca5c:	d0e7      	beq.n	1000ca2e <udiv0>
 push {r7}
1000ca5e:	b480      	push	{r7}
 ldr r7,=SIO_BASE
1000ca60:	4f11      	ldr	r7, [pc, #68]	; (1000caa8 <y64+0x58>)
 str r1,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
1000ca62:	6639      	str	r1, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]
1000ca64:	667a      	str	r2, [r7, #100]	; 0x64
 wait_div 4
1000ca66:	e7ff      	b.n	1000ca68 <y64+0x18>
1000ca68:	e7ff      	b.n	1000ca6a <y64+0x1a>
 push {r4, r5}
1000ca6a:	b430      	push	{r4, r5}
 lsrs r4,r0,#16
1000ca6c:	0c04      	lsrs	r4, r0, #16
 ldr r3,[r7,#SIO_DIV_REMAINDER_OFFSET] @ r0=y0-q0*x; 0<=r0<x
1000ca6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 ldr r1,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ q0=y0/x;
1000ca70:	6f39      	ldr	r1, [r7, #112]	; 0x70
 lsls r3,#16
1000ca72:	041b      	lsls	r3, r3, #16
 orrs r3,r4
1000ca74:	4323      	orrs	r3, r4
 str r3,[r7,#SIO_DIV_UDIVIDEND_OFFSET] @ y1=(r0<<16)+(((ui32)y)>>16);
1000ca76:	663b      	str	r3, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]  @ must set divisor again, as we do not save/restore regs at all in IRQs if not dirty
1000ca78:	667a      	str	r2, [r7, #100]	; 0x64
 wait_div 1
1000ca7a:	e7ff      	b.n	1000ca7c <y64+0x2c>
1000ca7c:	e7ff      	b.n	1000ca7e <y64+0x2e>
1000ca7e:	e7ff      	b.n	1000ca80 <y64+0x30>
1000ca80:	46c0      	nop			; (mov r8, r8)
 uxth r4,r0
1000ca82:	b284      	uxth	r4, r0
 ldr r3,[r7,#SIO_DIV_REMAINDER_OFFSET] @ r1=y1-q1*x; 0<=r1<x
1000ca84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 ldr r5,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ q1=y1/x;
1000ca86:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 lsls r3,#16
1000ca88:	041b      	lsls	r3, r3, #16
 orrs r3,r4
1000ca8a:	4323      	orrs	r3, r4
 str r3,[r7,#SIO_DIV_UDIVIDEND_OFFSET] @ y1=(r0<<16)+(((ui32)y)>>16);
1000ca8c:	663b      	str	r3, [r7, #96]	; 0x60
 str r2,[r7,#SIO_DIV_UDIVISOR_OFFSET]  @ must set divisor again, as we do not save/restore regs at all in IRQs if not dirty
1000ca8e:	667a      	str	r2, [r7, #100]	; 0x64
 wait_div 3
1000ca90:	e7ff      	b.n	1000ca92 <y64+0x42>
1000ca92:	e7ff      	b.n	1000ca94 <y64+0x44>
1000ca94:	46c0      	nop			; (mov r8, r8)
 movs r3,#0
1000ca96:	2300      	movs	r3, #0
 lsls r4,r5,#16             @ quotient=(q0<<32)+(q1<<16)+q2
1000ca98:	042c      	lsls	r4, r5, #16
 lsrs r5,#16
1000ca9a:	0c2d      	lsrs	r5, r5, #16
 ldr r2,[r7,#SIO_DIV_REMAINDER_OFFSET] @ r2=y2-q2*x; 0<=r2<x
1000ca9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 ldr r0,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ q2=y2/x;
1000ca9e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 adds r0,r4
1000caa0:	1900      	adds	r0, r0, r4
 adcs r1,r5
1000caa2:	4169      	adcs	r1, r5
 pop {r4,r5,r7}
1000caa4:	bcb0      	pop	{r4, r5, r7}
 bx r14
1000caa6:	4770      	bx	lr
 ldr r7,=SIO_BASE
1000caa8:	d0000000 	.word	0xd0000000

1000caac <y64_x32>:

.ltorg

y64_x32:
@ here x is 17..32 bits
 push {r4-r7,r14}
1000caac:	b5f0      	push	{r4, r5, r6, r7, lr}
 mov r12,r2                @ save x
1000caae:	4694      	mov	ip, r2
 movs r5,#0                @ xsh=0
1000cab0:	2500      	movs	r5, #0
 lsrs r4,r2,#24
1000cab2:	0e14      	lsrs	r4, r2, #24
 bne 1f
1000cab4:	d101      	bne.n	1000caba <y64_x32+0xe>
 lsls r2,#8                @ if(x0<1U<<24) x0<<=8,xsh =8;
1000cab6:	0212      	lsls	r2, r2, #8
 adds r5,#8
1000cab8:	3508      	adds	r5, #8
1:
 lsrs r4,r2,#28
1000caba:	0f14      	lsrs	r4, r2, #28
 bne 1f
1000cabc:	d101      	bne.n	1000cac2 <y64_x32+0x16>
 lsls r2,#4                @ if(x0<1U<<28) x0<<=4,xsh+=4;
1000cabe:	0112      	lsls	r2, r2, #4
 adds r5,#4
1000cac0:	3504      	adds	r5, #4
1:
 lsrs r4,r2,#30
1000cac2:	0f94      	lsrs	r4, r2, #30
 bne 1f
1000cac4:	d101      	bne.n	1000caca <y64_x32+0x1e>
 lsls r2,#2                @ if(x0<1U<<30) x0<<=2,xsh+=2;
1000cac6:	0092      	lsls	r2, r2, #2
 adds r5,#2
1000cac8:	3502      	adds	r5, #2
1:
 lsrs r4,r2,#31
1000caca:	0fd4      	lsrs	r4, r2, #31
 bne 1f
1000cacc:	d101      	bne.n	1000cad2 <y64_x32+0x26>
 lsls r2,#1                @ if(x0<1U<<31) x0<<=1,xsh+=1;
1000cace:	0052      	lsls	r2, r2, #1
 adds r5,#1
1000cad0:	3501      	adds	r5, #1
1:
@ now 2^31<=x0<2^32, 0<=xsh<16 (amount x is shifted in x0); number of quotient bits to be calculated qb=xsh+33 33<=qb<49
 lsrs r4,r2,#15
1000cad2:	0bd4      	lsrs	r4, r2, #15
 adds r4,#1                @ x1=(x0>>15)+1; 2^16<x1<=2^17
1000cad4:	3401      	adds	r4, #1

 ldr r7,=SIO_BASE
1000cad6:	4f25      	ldr	r7, [pc, #148]	; (1000cb6c <y64_x32+0xc0>)
 str r4,[r7,#SIO_DIV_UDIVISOR_OFFSET]
1000cad8:	667c      	str	r4, [r7, #100]	; 0x64
 ldr r4,=0xffffffff
1000cada:	4c25      	ldr	r4, [pc, #148]	; (1000cb70 <y64_x32+0xc4>)
 str r4,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
1000cadc:	663c      	str	r4, [r7, #96]	; 0x60
 lsrs r6,r1,#16
1000cade:	0c0e      	lsrs	r6, r1, #16
 uxth r3,r2                @ x0l
1000cae0:	b293      	uxth	r3, r2
 wait_div 2
1000cae2:	e7ff      	b.n	1000cae4 <y64_x32+0x38>
1000cae4:	e7ff      	b.n	1000cae6 <y64_x32+0x3a>
1000cae6:	e7ff      	b.n	1000cae8 <y64_x32+0x3c>
 ldr r4,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ r=0xffffffffU/x1; 2^15<=r<2^16 r is a normalised reciprocal of x, guaranteed not an overestimate
1000cae8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
@ r2    x0
@ r4    r
@ r5    xsh
@ r12   x

 muls r6,r4
1000caea:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>48)*r)>>16;
1000caec:	0c36      	lsrs	r6, r6, #16
 lsls r7,r6,#13
1000caee:	0377      	lsls	r7, r6, #13
 mov r14,r7                @ quh=q0<<13
1000caf0:	46be      	mov	lr, r7

 muls r3,r6                @ x0l*q
1000caf2:	4373      	muls	r3, r6
 lsrs r7,r3,#15
1000caf4:	0bdf      	lsrs	r7, r3, #15
 lsls r3,#17               @ r3:r7 is (x0l*q)<<17
1000caf6:	045b      	lsls	r3, r3, #17
 subs r0,r3
1000caf8:	1ac0      	subs	r0, r0, r3
 sbcs r1,r7                @ y-=(x0l*q)<<17
1000cafa:	41b9      	sbcs	r1, r7

 lsrs r3,r2,#16            @ x0h
1000cafc:	0c13      	lsrs	r3, r2, #16
 muls r3,r6                @ q*x0h
1000cafe:	4373      	muls	r3, r6
 adds r3,r3
1000cb00:	18db      	adds	r3, r3, r3
 subs r1,r3                @ y-=(x0h*q)<<17
1000cb02:	1ac9      	subs	r1, r1, r3

 lsrs r6,r1,#3
1000cb04:	08ce      	lsrs	r6, r1, #3
 muls r6,r4
1000cb06:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>35)*r)>>16;
1000cb08:	0c36      	lsrs	r6, r6, #16
 add r14,r6                @ quh+=q1
1000cb0a:	44b6      	add	lr, r6

 uxth r3,r2                @ x0l
1000cb0c:	b293      	uxth	r3, r2
 muls r3,r6                @ x0l*q
1000cb0e:	4373      	muls	r3, r6
 lsrs r7,r3,#28
1000cb10:	0f1f      	lsrs	r7, r3, #28
 lsls r3,#4                @ r3:r7 is (x0l*q)<<4
1000cb12:	011b      	lsls	r3, r3, #4
 subs r0,r3
1000cb14:	1ac0      	subs	r0, r0, r3
 sbcs r1,r7                @ y-=(x0l*q)<<4
1000cb16:	41b9      	sbcs	r1, r7

 lsrs r3,r2,#16            @ x0h
1000cb18:	0c13      	lsrs	r3, r2, #16
 muls r3,r6                @ x0h*q
1000cb1a:	4373      	muls	r3, r6
 lsrs r7,r3,#12
1000cb1c:	0b1f      	lsrs	r7, r3, #12
 lsls r3,#20               @ r3:r7 is (x0h*q)<<4
1000cb1e:	051b      	lsls	r3, r3, #20
 subs r0,r3
1000cb20:	1ac0      	subs	r0, r0, r3
 sbcs r1,r7                @ y-=(x0h*q)<<4
1000cb22:	41b9      	sbcs	r1, r7

 lsrs r6,r0,#22
1000cb24:	0d86      	lsrs	r6, r0, #22
 lsls r7,r1,#10
1000cb26:	028f      	lsls	r7, r1, #10
 orrs r6,r7                @ y>>22
1000cb28:	433e      	orrs	r6, r7
 muls r6,r4
1000cb2a:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>22)*r)>>16;
1000cb2c:	0c36      	lsrs	r6, r6, #16

 cmp r5,#9
1000cb2e:	2d09      	cmp	r5, #9
 blt last0                 @ if(xsh<9) goto last0;
1000cb30:	db24      	blt.n	1000cb7c <last0>

@ on this path xsh>=9, which means x<2^23
 lsrs r2,#9                @ x0>>9: this shift loses no bits
1000cb32:	0a52      	lsrs	r2, r2, #9
@ the remainder y-x0*q is guaranteed less than a very small multiple of the remaining quotient
@ bits (at most 6 bits) times x, and so fits in one word
 muls r2,r6                @ x0*q
1000cb34:	4372      	muls	r2, r6
 subs r0,r2                @ y-x0*q
1000cb36:	1a80      	subs	r0, r0, r2
 lsls r7,r6,#13            @ qul=q<<13
1000cb38:	0377      	lsls	r7, r6, #13
1:
 lsrs r6,r0,#9
1000cb3a:	0a46      	lsrs	r6, r0, #9
 muls r6,r4
1000cb3c:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>9)*r)>>16;
1000cb3e:	0c36      	lsrs	r6, r6, #16
@ r6 q
@ r7 qul
@ r12 x
@ r14 quh

 movs r3,#22
1000cb40:	2316      	movs	r3, #22
 subs r3,r5                @ 22-xsh
1000cb42:	1b5b      	subs	r3, r3, r5
 lsrs r6,r3                @ q>>=22-xsh
1000cb44:	40de      	lsrs	r6, r3
 lsrs r7,r3                @ qul>>=22-xsh
1000cb46:	40df      	lsrs	r7, r3
 adds r7,r6                @ qul+=q
1000cb48:	19bf      	adds	r7, r7, r6
 mov r4,r12
1000cb4a:	4664      	mov	r4, ip
 muls r6,r4                @ x*q
1000cb4c:	4366      	muls	r6, r4
 subs r2,r0,r6             @ y-=x*q
1000cb4e:	1b82      	subs	r2, r0, r6
 mov r0,r14                @ quh
1000cb50:	4670      	mov	r0, lr
 adds r5,#4                @ xsh+4
1000cb52:	3504      	adds	r5, #4
 adds r3,#6                @ 28-xsh
1000cb54:	3306      	adds	r3, #6
 movs r1,r0
1000cb56:	0001      	movs	r1, r0
 lsrs r1,r3
1000cb58:	40d9      	lsrs	r1, r3
 lsls r0,r5                @ r0:r1 is quh<<(4+xsh)
1000cb5a:	40a8      	lsls	r0, r5
 adds r0,r7
1000cb5c:	19c0      	adds	r0, r0, r7
 bcc 1f
1000cb5e:	d300      	bcc.n	1000cb62 <y64_x32+0xb6>
2:
 adds r1,#1
1000cb60:	3101      	adds	r1, #1
1:                         @ qu=((ui64)quh<<(4+xsh))+qul
 cmp r2,r4
1000cb62:	42a2      	cmp	r2, r4
 bhs 3f
1000cb64:	d206      	bcs.n	1000cb74 <y64_x32+0xc8>
 movs r3,#0
1000cb66:	2300      	movs	r3, #0
 pop {r4-r7,r15}
1000cb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cb6a:	0000      	.short	0x0000
 ldr r7,=SIO_BASE
1000cb6c:	d0000000 	.word	0xd0000000
 ldr r4,=0xffffffff
1000cb70:	ffffffff 	.word	0xffffffff

.ltorg

3:
 subs r2,r4
1000cb74:	1b12      	subs	r2, r2, r4
 adds r0,#1
1000cb76:	3001      	adds	r0, #1
 bcc 1b
1000cb78:	d3f3      	bcc.n	1000cb62 <y64_x32+0xb6>
 b 2b                      @ while(y>=x) y-=x,qu++;
1000cb7a:	e7f1      	b.n	1000cb60 <y64_x32+0xb4>

1000cb7c <last0>:
@ r4 r
@ r5 xsh; xsh<9
@ r6 q

last0:
 movs r7,#9
1000cb7c:	2709      	movs	r7, #9
 subs r7,r5                @ 9-xsh
1000cb7e:	1b7f      	subs	r7, r7, r5
 lsrs r6,r7
1000cb80:	40fe      	lsrs	r6, r7
 mov r4,r12                @ x
1000cb82:	4664      	mov	r4, ip
 uxth r2,r4
1000cb84:	b2a2      	uxth	r2, r4
 muls r2,r6                @ q*xlo
1000cb86:	4372      	muls	r2, r6
 subs r0,r2
1000cb88:	1a80      	subs	r0, r0, r2
 bcs 1f
1000cb8a:	d200      	bcs.n	1000cb8e <last0+0x12>
 subs r1,#1                @ y-=q*xlo
1000cb8c:	3901      	subs	r1, #1
1:
 lsrs r2,r4,#16            @ xhi
1000cb8e:	0c22      	lsrs	r2, r4, #16
 muls r2,r6                @ q*xhi
1000cb90:	4372      	muls	r2, r6
 lsrs r3,r2,#16
1000cb92:	0c13      	lsrs	r3, r2, #16
 lsls r2,#16
1000cb94:	0412      	lsls	r2, r2, #16
 subs r2,r0,r2
1000cb96:	1a82      	subs	r2, r0, r2
 sbcs r1,r3                @ y-q*xhi
1000cb98:	4199      	sbcs	r1, r3
 movs r3,r1                @ y now in r2:r3
1000cb9a:	000b      	movs	r3, r1
 mov r0,r14                @ quh
1000cb9c:	4670      	mov	r0, lr
 adds r5,#4                @ xsh+4
1000cb9e:	3504      	adds	r5, #4
 adds r7,#19               @ 28-xsh
1000cba0:	3713      	adds	r7, #19
 movs r1,r0
1000cba2:	0001      	movs	r1, r0
 lsrs r1,r7
1000cba4:	40f9      	lsrs	r1, r7
 lsls r0,r5                @ r0:r1 is quh<<(4+xsh)
1000cba6:	40a8      	lsls	r0, r5
 adds r0,r6
1000cba8:	1980      	adds	r0, r0, r6
 bcc 1f
1000cbaa:	d300      	bcc.n	1000cbae <last0+0x32>
 adds r1,#1                @ quh<<(xsh+4))+q
1000cbac:	3101      	adds	r1, #1
1:
 cmp r3,#0                 @ y>=2^32?
1000cbae:	2b00      	cmp	r3, #0
 bne 3f
1000cbb0:	d102      	bne.n	1000cbb8 <last0+0x3c>
 cmp r2,r4                 @ y>=x?
1000cbb2:	42a2      	cmp	r2, r4
 bhs 4f
1000cbb4:	d20a      	bcs.n	1000cbcc <last0+0x50>
 pop {r4-r7,r15}
1000cbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

3:
 adds r0,#1                @ qu++
1000cbb8:	3001      	adds	r0, #1
 bcc 2f
1000cbba:	d300      	bcc.n	1000cbbe <last0+0x42>
 adds r1,#1
1000cbbc:	3101      	adds	r1, #1
2:
 subs r2,r4                @ y-=x
1000cbbe:	1b12      	subs	r2, r2, r4
 bcs 3b
1000cbc0:	d2fa      	bcs.n	1000cbb8 <last0+0x3c>
 subs r3,#1
1000cbc2:	3b01      	subs	r3, #1
 bne 3b
1000cbc4:	d1f8      	bne.n	1000cbb8 <last0+0x3c>

1:
 cmp r2,r4
1000cbc6:	42a2      	cmp	r2, r4
 bhs 4f
1000cbc8:	d200      	bcs.n	1000cbcc <last0+0x50>
 pop {r4-r7,r15}
1000cbca:	bdf0      	pop	{r4, r5, r6, r7, pc}

4:
 adds r0,#1                @ qu++
1000cbcc:	3001      	adds	r0, #1
 bcc 2f
1000cbce:	d300      	bcc.n	1000cbd2 <last0+0x56>
 adds r1,#1
1000cbd0:	3101      	adds	r1, #1
2:
 subs r2,r4                @ y-=x
1000cbd2:	1b12      	subs	r2, r2, r4
 b 1b
1000cbd4:	e7f7      	b.n	1000cbc6 <last0+0x4a>

1000cbd6 <y64_x48>:

y64_x48:
@ here x is 33..64 bits
 push {r4-r7,r14}          @ save a copy of x
1000cbd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 lsrs r4,r3,#16
1000cbd8:	0c1c      	lsrs	r4, r3, #16
 beq 1f
1000cbda:	d000      	beq.n	1000cbde <y64_x48+0x8>
 b y64_x64                 @ jump if x is 49..64 bits
1000cbdc:	e080      	b.n	1000cce0 <y64_x64>
1:
 push {r2-r3}              @ save a copy of x
1000cbde:	b40c      	push	{r2, r3}
@ here x is 33..48 bits
 movs r5,#0                @ xsh=0
1000cbe0:	2500      	movs	r5, #0
 lsrs r4,r3,#8
1000cbe2:	0a1c      	lsrs	r4, r3, #8
 bne 1f
1000cbe4:	d104      	bne.n	1000cbf0 <y64_x48+0x1a>
 lsls r3,#8
1000cbe6:	021b      	lsls	r3, r3, #8
 lsrs r6,r2,#24
1000cbe8:	0e16      	lsrs	r6, r2, #24
 orrs r3,r6
1000cbea:	4333      	orrs	r3, r6
 lsls r2,#8                @ if(x0<1U<<40) x0<<=8,xsh =8;
1000cbec:	0212      	lsls	r2, r2, #8
 adds r5,#8
1000cbee:	3508      	adds	r5, #8
1:
 lsrs r4,r3,#12
1000cbf0:	0b1c      	lsrs	r4, r3, #12
 bne 1f
1000cbf2:	d104      	bne.n	1000cbfe <y64_x48+0x28>
 lsls r3,#4
1000cbf4:	011b      	lsls	r3, r3, #4
 lsrs r6,r2,#28
1000cbf6:	0f16      	lsrs	r6, r2, #28
 orrs r3,r6
1000cbf8:	4333      	orrs	r3, r6
 lsls r2,#4                @ if(x0<1U<<44) x0<<=4,xsh+=4;
1000cbfa:	0112      	lsls	r2, r2, #4
 adds r5,#4
1000cbfc:	3504      	adds	r5, #4
1:
 lsrs r4,r3,#14
1000cbfe:	0b9c      	lsrs	r4, r3, #14
 bne 1f
1000cc00:	d104      	bne.n	1000cc0c <y64_x48+0x36>
 lsls r3,#2
1000cc02:	009b      	lsls	r3, r3, #2
 lsrs r6,r2,#30
1000cc04:	0f96      	lsrs	r6, r2, #30
 orrs r3,r6
1000cc06:	4333      	orrs	r3, r6
 lsls r2,#2                @ if(x0<1U<<46) x0<<=2,xsh+=2;
1000cc08:	0092      	lsls	r2, r2, #2
 adds r5,#2
1000cc0a:	3502      	adds	r5, #2
1:
 lsrs r4,r3,#15
1000cc0c:	0bdc      	lsrs	r4, r3, #15
 bne 1f
1000cc0e:	d102      	bne.n	1000cc16 <y64_x48+0x40>
 adds r2,r2
1000cc10:	1892      	adds	r2, r2, r2
 adcs r3,r3                @ if(x0<1U<<47) x0<<=1,xsh+=1;
1000cc12:	415b      	adcs	r3, r3
 adds r5,#1
1000cc14:	3501      	adds	r5, #1
1:
@ now 2^47<=x0<2^48, 0<=xsh<16 (amount x is shifted in x0); number of quotient bits to be calculated qb=xsh+17 17<=qb<33
 movs r4,r3
1000cc16:	001c      	movs	r4, r3
 adds r7,r2,r2
1000cc18:	1897      	adds	r7, r2, r2
 adcs r4,r4
1000cc1a:	4164      	adcs	r4, r4
 adds r4,#1                @ x1=(ui32)(x0>>31)+1; // 2^16<x1<=2^17
1000cc1c:	3401      	adds	r4, #1

 ldr r7,=SIO_BASE
1000cc1e:	4f46      	ldr	r7, [pc, #280]	; (1000cd38 <y64_x64+0x58>)
 str r4,[r7,#SIO_DIV_UDIVISOR_OFFSET]
1000cc20:	667c      	str	r4, [r7, #100]	; 0x64
 ldr r4,=0xffffffff
1000cc22:	4c46      	ldr	r4, [pc, #280]	; (1000cd3c <y64_x64+0x5c>)
 str r4,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
1000cc24:	663c      	str	r4, [r7, #96]	; 0x60
 lsrs r6,r1,#16
1000cc26:	0c0e      	lsrs	r6, r1, #16
 wait_div 1
1000cc28:	e7ff      	b.n	1000cc2a <y64_x48+0x54>
1000cc2a:	e7ff      	b.n	1000cc2c <y64_x48+0x56>
1000cc2c:	e7ff      	b.n	1000cc2e <y64_x48+0x58>
1000cc2e:	46c0      	nop			; (mov r8, r8)
 ldr r4,[r7,#SIO_DIV_QUOTIENT_OFFSET]  @ r=0xffffffffU/x1; 2^15<=r<2^16 r is a normalised reciprocal of x, guaranteed not an overestimate
1000cc30:	6f3c      	ldr	r4, [r7, #112]	; 0x70
@ r0:r1 y
@ r2:r3 x0
@ r4    r
@ r5    xsh 0<=xsh<16

 muls r6,r4
1000cc32:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>48)*r)>>16;
1000cc34:	0c36      	lsrs	r6, r6, #16
 lsls r7,r6,#13
1000cc36:	0377      	lsls	r7, r6, #13
 mov r14,r7                @ save q<<13
1000cc38:	46be      	mov	lr, r7
 uxth r7,r2                @ x0l
1000cc3a:	b297      	uxth	r7, r2
 muls r7,r6
1000cc3c:	4377      	muls	r7, r6
 subs r0,r7
1000cc3e:	1bc0      	subs	r0, r0, r7
 bcs 1f
1000cc40:	d200      	bcs.n	1000cc44 <y64_x48+0x6e>
 subs r1,#1
1000cc42:	3901      	subs	r1, #1
1:
 subs r0,r7
1000cc44:	1bc0      	subs	r0, r0, r7
 bcs 1f
1000cc46:	d200      	bcs.n	1000cc4a <y64_x48+0x74>
 subs r1,#1
1000cc48:	3901      	subs	r1, #1
1:
 uxth r7,r3                @ x0h
1000cc4a:	b29f      	uxth	r7, r3
 muls r7,r6
1000cc4c:	4377      	muls	r7, r6
 subs r1,r7
1000cc4e:	1bc9      	subs	r1, r1, r7
 subs r1,r7
1000cc50:	1bc9      	subs	r1, r1, r7
 lsrs r7,r2,#16            @ x0m
1000cc52:	0c17      	lsrs	r7, r2, #16
 muls r7,r6
1000cc54:	4377      	muls	r7, r6
 lsls r6,r7,#17
1000cc56:	047e      	lsls	r6, r7, #17
 lsrs r7,#15
1000cc58:	0bff      	lsrs	r7, r7, #15
 subs r0,r6
1000cc5a:	1b80      	subs	r0, r0, r6
 sbcs r1,r7                @ y-=((ui64)q*x0)<<1;
1000cc5c:	41b9      	sbcs	r1, r7

 lsrs r6,r1,#3             @ y>>35
1000cc5e:	08ce      	lsrs	r6, r1, #3
 muls r6,r4
1000cc60:	4366      	muls	r6, r4
 lsrs r6,#16               @ q=((ui32)(y>>35)*r)>>16;
1000cc62:	0c36      	lsrs	r6, r6, #16

 cmp r5,#12
1000cc64:	2d0c      	cmp	r5, #12
 blt last1                 @ if(xsh<12) goto last1;
1000cc66:	db33      	blt.n	1000ccd0 <last1>

 add r14,r6                @ qu<<13+q
1000cc68:	44b6      	add	lr, r6
 lsrs r2,#12
1000cc6a:	0b12      	lsrs	r2, r2, #12
 lsls r7,r3,#20
1000cc6c:	051f      	lsls	r7, r3, #20
 orrs r2,r7
1000cc6e:	433a      	orrs	r2, r7
 lsrs r3,#12               @ x0>>12
1000cc70:	0b1b      	lsrs	r3, r3, #12

 uxth r7,r2                @ x0l
1000cc72:	b297      	uxth	r7, r2
 muls r7,r6
1000cc74:	4377      	muls	r7, r6
 subs r0,r7
1000cc76:	1bc0      	subs	r0, r0, r7
 bcs 1f
1000cc78:	d200      	bcs.n	1000cc7c <y64_x48+0xa6>
 subs r1,#1
1000cc7a:	3901      	subs	r1, #1
1:
 uxth r7,r3                @ x0h
1000cc7c:	b29f      	uxth	r7, r3
 muls r7,r6
1000cc7e:	4377      	muls	r7, r6
 subs r1,r7
1000cc80:	1bc9      	subs	r1, r1, r7
 lsrs r7,r2,#16            @ x0m
1000cc82:	0c17      	lsrs	r7, r2, #16
 muls r7,r6
1000cc84:	4377      	muls	r7, r6
 lsls r6,r7,#16
1000cc86:	043e      	lsls	r6, r7, #16
 lsrs r7,#16
1000cc88:	0c3f      	lsrs	r7, r7, #16
 subs r0,r6
1000cc8a:	1b80      	subs	r0, r0, r6
 sbcs r1,r7                @ y-=((ui64)q*x0)>>12
1000cc8c:	41b9      	sbcs	r1, r7

 lsrs r6,r0,#22
1000cc8e:	0d86      	lsrs	r6, r0, #22
 lsls r7,r1,#10
1000cc90:	028f      	lsls	r7, r1, #10
 orrs r6,r7                @ y>>22
1000cc92:	433e      	orrs	r6, r7
 muls r6,r4
1000cc94:	4366      	muls	r6, r4
 movs r7,#41
1000cc96:	2729      	movs	r7, #41	; 0x29
 subs r7,r5
1000cc98:	1b7f      	subs	r7, r7, r5
 lsrs r6,r7                @ q=((ui32)(y>>22)*r)>>(16+25-xsh)
1000cc9a:	40fe      	lsrs	r6, r7

 subs r5,#12
1000cc9c:	3d0c      	subs	r5, #12
 mov r7,r14
1000cc9e:	4677      	mov	r7, lr
 lsls r7,r5
1000cca0:	40af      	lsls	r7, r5
2:
 adds r7,r6                @ qu=(qu<<(xsh-12))+q
1000cca2:	19bf      	adds	r7, r7, r6
 pop {r4,r5}               @ recall x
1000cca4:	bc30      	pop	{r4, r5}
@ r0:r1 y
@ r4:r5 x
@ r6 q
@ r7 qu

 uxth r2,r4
1000cca6:	b2a2      	uxth	r2, r4
 uxth r3,r5
1000cca8:	b2ab      	uxth	r3, r5
 muls r2,r6                @ xlo*q
1000ccaa:	4372      	muls	r2, r6
 muls r3,r6                @ xhi*q
1000ccac:	4373      	muls	r3, r6
 subs r0,r2
1000ccae:	1a80      	subs	r0, r0, r2
 sbcs r1,r3
1000ccb0:	4199      	sbcs	r1, r3
 lsrs r2,r4,#16
1000ccb2:	0c22      	lsrs	r2, r4, #16
 muls r2,r6
1000ccb4:	4372      	muls	r2, r6
 lsrs r3,r2,#16
1000ccb6:	0c13      	lsrs	r3, r2, #16
 lsls r2,#16               @ xm*q
1000ccb8:	0412      	lsls	r2, r2, #16
 subs r0,r2
1000ccba:	1a80      	subs	r0, r0, r2
 sbcs r1,r3                @ y-=(ui64)q*x
1000ccbc:	4199      	sbcs	r1, r3

1:
 movs r2,r0
1000ccbe:	0002      	movs	r2, r0
 movs r3,r1
1000ccc0:	000b      	movs	r3, r1
 adds r7,#1
1000ccc2:	3701      	adds	r7, #1
 subs r0,r4
1000ccc4:	1b00      	subs	r0, r0, r4
 sbcs r1,r5                @ while(y>=x) y-=x,qu++;
1000ccc6:	41a9      	sbcs	r1, r5
 bhs 1b
1000ccc8:	d2f9      	bcs.n	1000ccbe <y64_x48+0xe8>
 subs r0,r7,#1             @ correction to qu
1000ccca:	1e78      	subs	r0, r7, #1
 movs r1,#0
1000cccc:	2100      	movs	r1, #0
 pop {r4-r7,r15}
1000ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000ccd0 <last1>:
@ r0:r1 y
@ r2:r3 x0
@ r5 xsh
@ r6 q

 movs r7,#12
1000ccd0:	270c      	movs	r7, #12
 subs r7,r5
1000ccd2:	1b7f      	subs	r7, r7, r5
 lsrs r6,r7                @ q>>=12-xsh
1000ccd4:	40fe      	lsrs	r6, r7
 mov r7,r14
1000ccd6:	4677      	mov	r7, lr
 lsrs r7,#13
1000ccd8:	0b7f      	lsrs	r7, r7, #13
 lsls r7,r5
1000ccda:	40af      	lsls	r7, r5
 adds r7,r7                @ qu<<(xsh+1)
1000ccdc:	19ff      	adds	r7, r7, r7
 b 2b
1000ccde:	e7e0      	b.n	1000cca2 <y64_x48+0xcc>

1000cce0 <y64_x64>:

y64_x64:
@ here x is 49..64 bits
 movs r4,#0                @ q=0 if x>>32==0xffffffff
1000cce0:	2400      	movs	r4, #0
 adds r5,r3,#1
1000cce2:	1c5d      	adds	r5, r3, #1
 beq 1f
1000cce4:	d007      	beq.n	1000ccf6 <y64_x64+0x16>

 ldr r7,=SIO_BASE
1000cce6:	4f14      	ldr	r7, [pc, #80]	; (1000cd38 <y64_x64+0x58>)
 str r5,[r7,#SIO_DIV_UDIVISOR_OFFSET]
1000cce8:	667d      	str	r5, [r7, #100]	; 0x64
 str r1,[r7,#SIO_DIV_UDIVIDEND_OFFSET]
1000ccea:	6639      	str	r1, [r7, #96]	; 0x60
 wait_div 0
1000ccec:	e7ff      	b.n	1000ccee <y64_x64+0xe>
1000ccee:	e7ff      	b.n	1000ccf0 <y64_x64+0x10>
1000ccf0:	e7ff      	b.n	1000ccf2 <y64_x64+0x12>
1000ccf2:	e7ff      	b.n	1000ccf4 <y64_x64+0x14>
 ldr r4,[r7,#SIO_DIV_QUOTIENT_OFFSET] @ q=(ui32)(y>>32)/((x>>32)+1)
1000ccf4:	6f3c      	ldr	r4, [r7, #112]	; 0x70
1:
 uxth r5,r2
1000ccf6:	b295      	uxth	r5, r2
 uxth r6,r3
1000ccf8:	b29e      	uxth	r6, r3
 muls r5,r4
1000ccfa:	4365      	muls	r5, r4
 muls r6,r4
1000ccfc:	4366      	muls	r6, r4
 subs r0,r5
1000ccfe:	1b40      	subs	r0, r0, r5
 sbcs r1,r6
1000cd00:	41b1      	sbcs	r1, r6
 lsrs r5,r2,#16
1000cd02:	0c15      	lsrs	r5, r2, #16
 lsrs r6,r3,#16
1000cd04:	0c1e      	lsrs	r6, r3, #16
 muls r5,r4
1000cd06:	4365      	muls	r5, r4
 muls r6,r4
1000cd08:	4366      	muls	r6, r4
 lsls r6,#16
1000cd0a:	0436      	lsls	r6, r6, #16
 lsrs r7,r5,#16
1000cd0c:	0c2f      	lsrs	r7, r5, #16
 orrs r6,r7
1000cd0e:	433e      	orrs	r6, r7
 lsls r5,#16
1000cd10:	042d      	lsls	r5, r5, #16
 subs r0,r5
1000cd12:	1b40      	subs	r0, r0, r5
 sbcs r1,r6                @   y-=(ui64)q*x
1000cd14:	41b1      	sbcs	r1, r6

 cmp r1,r3                 @   while(y>=x) y-=x,q++
1000cd16:	4299      	cmp	r1, r3
 bhs 1f
1000cd18:	d204      	bcs.n	1000cd24 <y64_x64+0x44>
3:
 movs r2,r0
1000cd1a:	0002      	movs	r2, r0
 movs r3,r1
1000cd1c:	000b      	movs	r3, r1
 movs r0,r4
1000cd1e:	0020      	movs	r0, r4
 movs r1,#0
1000cd20:	2100      	movs	r1, #0
 pop {r4-r7,r15}
1000cd22:	bdf0      	pop	{r4, r5, r6, r7, pc}

1:
 bne 2f
1000cd24:	d101      	bne.n	1000cd2a <y64_x64+0x4a>
 cmp r0,r2
1000cd26:	4290      	cmp	r0, r2
 blo 3b
1000cd28:	d3f7      	bcc.n	1000cd1a <y64_x64+0x3a>
2:
 subs r0,r2
1000cd2a:	1a80      	subs	r0, r0, r2
 sbcs r1,r3
1000cd2c:	4199      	sbcs	r1, r3
 adds r4,#1
1000cd2e:	3401      	adds	r4, #1
 cmp r1,r3
1000cd30:	4299      	cmp	r1, r3
 blo 3b
1000cd32:	d3f2      	bcc.n	1000cd1a <y64_x64+0x3a>
 b 1b
1000cd34:	e7f6      	b.n	1000cd24 <y64_x64+0x44>
1000cd36:	0000      	.short	0x0000
 ldr r7,=SIO_BASE
1000cd38:	d0000000 	.word	0xd0000000
 ldr r4,=0xffffffff
1000cd3c:	ffffffff 	.word	0xffffffff

1000cd40 <__wrap___aeabi_drsub>:
// double FUNC_NAME(__aeabi_drsub)(double x, double y)    double-precision reverse subtraction, y - x

// frsub first because it is the only one that needs alignment
.align 2
wrapper_func __aeabi_drsub
    eors r0, r1
1000cd40:	4048      	eors	r0, r1
    eors r1, r0
1000cd42:	4041      	eors	r1, r0
    eors r0, r1
1000cd44:	4048      	eors	r0, r1

1000cd46 <__wrap___aeabi_dsub>:
    b ddiv_dsub_nan_helper
1:
    mov r0, ip
2:
#endif
   shimmable_table_tail_call SF_TABLE_FSUB dsub_shim
1000cd46:	b418      	push	{r3, r4}
1000cd48:	4b13      	ldr	r3, [pc, #76]	; (1000cd98 <__wrap___aeabi_dmul+0xa>)
1000cd4a:	685b      	ldr	r3, [r3, #4]
1000cd4c:	9301      	str	r3, [sp, #4]
1000cd4e:	bd08      	pop	{r3, pc}

1000cd50 <__wrap___aeabi_dadd>:

wrapper_func_d2 __aeabi_dadd
   shimmable_table_tail_call SF_TABLE_FADD dadd_shim
1000cd50:	b418      	push	{r3, r4}
1000cd52:	4b11      	ldr	r3, [pc, #68]	; (1000cd98 <__wrap___aeabi_dmul+0xa>)
1000cd54:	681b      	ldr	r3, [r3, #0]
1000cd56:	9301      	str	r3, [sp, #4]
1000cd58:	bd08      	pop	{r3, pc}

1000cd5a <__wrap___aeabi_ddiv>:
    b ddiv_dsub_nan_helper
1:
#endif
#if !PICO_DIVIDER_DISABLE_INTERRUPTS
    // to support IRQ usage (or context switch) we must save/restore divider state around call if state is dirty
    mov ip, r2
1000cd5a:	4694      	mov	ip, r2
    ldr r2, =(SIO_BASE)
1000cd5c:	4a0f      	ldr	r2, [pc, #60]	; (1000cd9c <__wrap___aeabi_dmul+0xe>)
    ldr r2, [r2, #SIO_DIV_CSR_OFFSET]
1000cd5e:	6f92      	ldr	r2, [r2, #120]	; 0x78
    lsrs r2, #SIO_DIV_CSR_DIRTY_SHIFT_FOR_CARRY
1000cd60:	0892      	lsrs	r2, r2, #2
    bcs ddiv_save_state
1000cd62:	d205      	bcs.n	1000cd70 <ddiv_save_state>
    mov r2, ip
1000cd64:	4662      	mov	r2, ip

1000cd66 <ddiv_shim_call>:
    bl ddiv_shim_call
    msr PRIMASK, r4
    pop {r4, pc}
#endif
ddiv_shim_call:
    shimmable_table_tail_call SF_TABLE_FDIV ddiv_shim
1000cd66:	b418      	push	{r3, r4}
1000cd68:	4b0b      	ldr	r3, [pc, #44]	; (1000cd98 <__wrap___aeabi_dmul+0xa>)
1000cd6a:	68db      	ldr	r3, [r3, #12]
1000cd6c:	9301      	str	r3, [sp, #4]
1000cd6e:	bd08      	pop	{r3, pc}

1000cd70 <ddiv_save_state>:

#if !PICO_DIVIDER_DISABLE_INTERRUPTS
ddiv_save_state:
    ldr r2, =(SIO_BASE)
1000cd70:	4a0a      	ldr	r2, [pc, #40]	; (1000cd9c <__wrap___aeabi_dmul+0xe>)
    save_div_state_and_lr
1000cd72:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cd74:	6e14      	ldr	r4, [r2, #96]	; 0x60
1000cd76:	6e55      	ldr	r5, [r2, #100]	; 0x64
1000cd78:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000cd7a:	6f16      	ldr	r6, [r2, #112]	; 0x70
    mov r2, ip
1000cd7c:	4662      	mov	r2, ip
    bl ddiv_shim_call
1000cd7e:	f7ff fff2 	bl	1000cd66 <ddiv_shim_call>
    ldr r2, =(SIO_BASE)
1000cd82:	4a06      	ldr	r2, [pc, #24]	; (1000cd9c <__wrap___aeabi_dmul+0xe>)
    restore_div_state_and_return
1000cd84:	6614      	str	r4, [r2, #96]	; 0x60
1000cd86:	6655      	str	r5, [r2, #100]	; 0x64
1000cd88:	6757      	str	r7, [r2, #116]	; 0x74
1000cd8a:	6716      	str	r6, [r2, #112]	; 0x70
1000cd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000cd8e <__wrap___aeabi_dmul>:
3:
    add sp, #16
    pop {pc}
1:
#endif
   shimmable_table_tail_call SF_TABLE_FMUL dmul_shim
1000cd8e:	b418      	push	{r3, r4}
1000cd90:	4b01      	ldr	r3, [pc, #4]	; (1000cd98 <__wrap___aeabi_dmul+0xa>)
1000cd92:	689b      	ldr	r3, [r3, #8]
1000cd94:	9301      	str	r3, [sp, #4]
1000cd96:	bd08      	pop	{r3, pc}
   shimmable_table_tail_call SF_TABLE_FSUB dsub_shim
1000cd98:	20009204 	.word	0x20009204
    ldr r2, =(SIO_BASE)
1000cd9c:	d0000000 	.word	0xd0000000

1000cda0 <__wrap___aeabi_cdrcmple>:

// void FUNC_NAME(__aeabi_cdrcmple)(double, double)         reversed 3-way (<, =, ?>) compare [1], result in PSR ZC flags
double_wrapper_section __aeabi_cdcmple

wrapper_func __aeabi_cdrcmple
 push {r0-r7,r14}
1000cda0:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
    eors r0, r2
1000cda2:	4050      	eors	r0, r2
    eors r2, r0
1000cda4:	4042      	eors	r2, r0
    eors r0, r2
1000cda6:	4050      	eors	r0, r2
    eors r1, r3
1000cda8:	4059      	eors	r1, r3
    eors r3, r1
1000cdaa:	404b      	eors	r3, r1
    eors r1, r3
1000cdac:	4059      	eors	r1, r3
    b __aeabi_dfcmple_guts
1000cdae:	e000      	b.n	1000cdb2 <__aeabi_dfcmple_guts>

1000cdb0 <__wrap___aeabi_cdcmpeq>:
@ compare r0:r1 against r2:r3, returning -1/0/1 for <, =, >
@ also set flags accordingly
.align 2
wrapper_func __aeabi_cdcmple
wrapper_func __aeabi_cdcmpeq
 push {r0-r7,r14}
1000cdb0:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

1000cdb2 <__aeabi_dfcmple_guts>:
__aeabi_dfcmple_guts:
 ldr r7,=0x7ff                @ flush NaNs and denormals
1000cdb2:	4f15      	ldr	r7, [pc, #84]	; (1000ce08 <__aeabi_dfcmple_guts+0x56>)
 lsls r4,r1,#1
1000cdb4:	004c      	lsls	r4, r1, #1
 lsrs r4,#21
1000cdb6:	0d64      	lsrs	r4, r4, #21
 beq 1f
1000cdb8:	d003      	beq.n	1000cdc2 <__aeabi_dfcmple_guts+0x10>
 cmp r4,r7
1000cdba:	42bc      	cmp	r4, r7
 bne 2f
1000cdbc:	d104      	bne.n	1000cdc8 <__aeabi_dfcmple_guts+0x16>
 lsls r4, r1, #12
1000cdbe:	030c      	lsls	r4, r1, #12
 bhi 7f
1000cdc0:	d814      	bhi.n	1000cdec <__aeabi_dfcmple_guts+0x3a>
1:
 movs r0,#0
1000cdc2:	2000      	movs	r0, #0
 lsrs r1,#20
1000cdc4:	0d09      	lsrs	r1, r1, #20
 lsls r1,#20
1000cdc6:	0509      	lsls	r1, r1, #20
2:
 lsls r4,r3,#1
1000cdc8:	005c      	lsls	r4, r3, #1
 lsrs r4,#21
1000cdca:	0d64      	lsrs	r4, r4, #21
 beq 1f
1000cdcc:	d003      	beq.n	1000cdd6 <__aeabi_dfcmple_guts+0x24>
 cmp r4,r7
1000cdce:	42bc      	cmp	r4, r7
 bne 2f
1000cdd0:	d104      	bne.n	1000cddc <__aeabi_dfcmple_guts+0x2a>
 lsls r4, r3, #12
1000cdd2:	031c      	lsls	r4, r3, #12
 bhi 7f
1000cdd4:	d80a      	bhi.n	1000cdec <__aeabi_dfcmple_guts+0x3a>
1:
 movs r2,#0
1000cdd6:	2200      	movs	r2, #0
 lsrs r3,#20
1000cdd8:	0d1b      	lsrs	r3, r3, #20
 lsls r3,#20
1000cdda:	051b      	lsls	r3, r3, #20
2:
 movs r6,#1
1000cddc:	2601      	movs	r6, #1
 eors r3,r1
1000cdde:	404b      	eors	r3, r1
 bmi 4f                        @ opposite signs? then can proceed on basis of sign of x
1000cde0:	d409      	bmi.n	1000cdf6 <__aeabi_dfcmple_guts+0x44>
 eors r3,r1                    @ restore r3
1000cde2:	404b      	eors	r3, r1
 bpl 2f
1000cde4:	d503      	bpl.n	1000cdee <__aeabi_dfcmple_guts+0x3c>
 cmp r3,r1
1000cde6:	428b      	cmp	r3, r1
 bne 7f
1000cde8:	d100      	bne.n	1000cdec <__aeabi_dfcmple_guts+0x3a>
1:
 cmp r2,r0
1000cdea:	4282      	cmp	r2, r0
7:
 pop {r0-r7,r15}
1000cdec:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
2:
 cmp r1,r3
1000cdee:	4299      	cmp	r1, r3
 bne 7b
1000cdf0:	d1fc      	bne.n	1000cdec <__aeabi_dfcmple_guts+0x3a>
1:
 cmp r0,r2
1000cdf2:	4290      	cmp	r0, r2
 pop {r0-r7,r15}
1000cdf4:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
4:
 orrs r3,r1                    @ make -0==+0
1000cdf6:	430b      	orrs	r3, r1
 adds r3,r3
1000cdf8:	18db      	adds	r3, r3, r3
 orrs r3,r0
1000cdfa:	4303      	orrs	r3, r0
 orrs r3,r2
1000cdfc:	4313      	orrs	r3, r2
 beq 7b
1000cdfe:	d0f5      	beq.n	1000cdec <__aeabi_dfcmple_guts+0x3a>
 mvns r1, r1     @ carry inverse of r1 sign
1000ce00:	43c9      	mvns	r1, r1
 adds r1, r1
1000ce02:	1849      	adds	r1, r1, r1
 pop {r0-r7,r15}
1000ce04:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
1000ce06:	0000      	.short	0x0000
 ldr r7,=0x7ff                @ flush NaNs and denormals
1000ce08:	000007ff 	.word	0x000007ff

1000ce0c <__wrap___aeabi_dcmplt>:

// int FUNC_NAME(__aeabi_dcmplt)(double, double)         result (1, 0) denotes (<, ?>=) [2], use for C <
double_wrapper_section __aeabi_dcmplt
.align 2
wrapper_func __aeabi_dcmplt
    push {lr}
1000ce0c:	b500      	push	{lr}
    bl __aeabi_cdcmple
1000ce0e:	f7ff ffcf 	bl	1000cdb0 <__wrap___aeabi_cdcmpeq>
    sbcs r0, r0
1000ce12:	4180      	sbcs	r0, r0
    pop {pc}
1000ce14:	bd00      	pop	{pc}
1000ce16:	46c0      	nop			; (mov r8, r8)

1000ce18 <__wrap___aeabi_dcmpge>:

// int FUNC_NAME(__aeabi_dcmpge)(double, double)         result (1, 0) denotes (>=, ?<) [2], use for C >=
double_wrapper_section __aeabi_dcmpge
.align 2
wrapper_func __aeabi_dcmpge
    push {lr}
1000ce18:	b500      	push	{lr}
    // because of NaNs it is better to reverse the args than the result
    bl __aeabi_cdrcmple
1000ce1a:	f7ff ffc1 	bl	1000cda0 <__wrap___aeabi_cdrcmple>
    bls 1f
1000ce1e:	d901      	bls.n	1000ce24 <__wrap___aeabi_dcmpge+0xc>
    movs r0, #0
1000ce20:	2000      	movs	r0, #0
    pop {pc}
1000ce22:	bd00      	pop	{pc}
1:
    movs r0, #1
1000ce24:	2001      	movs	r0, #1
    pop {pc}
1000ce26:	bd00      	pop	{pc}

1000ce28 <__wrap___aeabi_dcmpgt>:

// int FUNC_NAME(__aeabi_dcmpgt)(double, double)         result (1, 0) denotes (>, ?<=) [2], use for C >
double_wrapper_section __aeabi_dcmpgt
wrapper_func __aeabi_dcmpgt
    push {lr}
1000ce28:	b500      	push	{lr}
    // because of NaNs it is better to reverse the args than the result
    bl __aeabi_cdrcmple
1000ce2a:	f7ff ffb9 	bl	1000cda0 <__wrap___aeabi_cdrcmple>
    sbcs r0, r0
1000ce2e:	4180      	sbcs	r0, r0
    pop {pc}
1000ce30:	bd00      	pop	{pc}

1000ce32 <__wrap___aeabi_dcmpun>:

// int FUNC_NAME(__aeabi_dcmpun)(double, double)         result (1, 0) denotes (?, <=>) [2], use for C99 isunordered()
double_wrapper_section __aeabi_dcmpun
wrapper_func __aeabi_dcmpun
   movs r0, #1
1000ce32:	2001      	movs	r0, #1
   lsls r0, #21
1000ce34:	0540      	lsls	r0, r0, #21
   lsls r2, r1, #1
1000ce36:	004a      	lsls	r2, r1, #1
   adds r2, r0
1000ce38:	1812      	adds	r2, r2, r0
   bhi 1f
1000ce3a:	d804      	bhi.n	1000ce46 <__wrap___aeabi_dcmpun+0x14>
   lsls r2, r3, #1
1000ce3c:	005a      	lsls	r2, r3, #1
   adds r2, r0
1000ce3e:	1812      	adds	r2, r2, r0
   bhi 1f
1000ce40:	d801      	bhi.n	1000ce46 <__wrap___aeabi_dcmpun+0x14>
   movs r0, #0
1000ce42:	2000      	movs	r0, #0
   bx lr
1000ce44:	4770      	bx	lr
1:
   movs r0, #1
1000ce46:	2001      	movs	r0, #1
   bx lr
1000ce48:	4770      	bx	lr

    movs r0, #0
1000ce4a:	2000      	movs	r0, #0
    bx lr
1000ce4c:	4770      	bx	lr
	...

1000ce50 <__wrap___aeabi_ui2d>:
    shimmable_table_tail_call SF_TABLE_UINT2FLOAT uint2double_shim

double_wrapper_section __aeabi_i2d

wrapper_func __aeabi_ui2d
    movs r1, #0
1000ce50:	2100      	movs	r1, #0
    cmp r0, #0
1000ce52:	2800      	cmp	r0, #0
    bne 2f
1000ce54:	d105      	bne.n	1000ce62 <__wrap___aeabi_i2d+0xa>
1:
    bx lr
1000ce56:	4770      	bx	lr

1000ce58 <__wrap___aeabi_i2d>:
// double FUNC_NAME(__aeabi_i2d)(int)                     integer to double (double precision) conversion
wrapper_func __aeabi_i2d
    asrs r1, r0, #31
1000ce58:	17c1      	asrs	r1, r0, #31
    eors r0, r1
1000ce5a:	4048      	eors	r0, r1
    subs r0, r1
1000ce5c:	1a40      	subs	r0, r0, r1
    beq 1b
1000ce5e:	d0fa      	beq.n	1000ce56 <__wrap___aeabi_ui2d+0x6>
    lsls r1, #31
1000ce60:	07c9      	lsls	r1, r1, #31
2:
    push {r0, r1, r4, lr}
1000ce62:	b513      	push	{r0, r1, r4, lr}
    ldr r3, =sf_clz_func
1000ce64:	4b06      	ldr	r3, [pc, #24]	; (1000ce80 <__wrap___aeabi_i2d+0x28>)
    ldr r3, [r3]
1000ce66:	681b      	ldr	r3, [r3, #0]
    blx r3
1000ce68:	4798      	blx	r3
    pop {r2, r3}
1000ce6a:	bc0c      	pop	{r2, r3}
    adds r4, r0, #1
1000ce6c:	1c44      	adds	r4, r0, #1
    lsls r2, r4
1000ce6e:	40a2      	lsls	r2, r4
    lsls r0, r2, #20
1000ce70:	0510      	lsls	r0, r2, #20
    lsrs r2, #12
1000ce72:	0b12      	lsrs	r2, r2, #12
    ldr r1,=1055
1000ce74:	4903      	ldr	r1, [pc, #12]	; (1000ce84 <__wrap___aeabi_i2d+0x2c>)
    subs r1, r4
1000ce76:	1b09      	subs	r1, r1, r4
    lsls r1, #20
1000ce78:	0509      	lsls	r1, r1, #20
    orrs r1, r3
1000ce7a:	4319      	orrs	r1, r3
    orrs r1, r2
1000ce7c:	4311      	orrs	r1, r2
    pop {r4, pc}
1000ce7e:	bd10      	pop	{r4, pc}
    ldr r3, =sf_clz_func
1000ce80:	20009304 	.word	0x20009304
    ldr r1,=1055
1000ce84:	0000041f 	.word	0x0000041f

1000ce88 <__wrap___aeabi_d2iz>:

// int FUNC_NAME(__aeabi_d2iz)(double)                     double (double precision) to integer C-style conversion [3]
double_wrapper_section __aeabi_d2iz
wrapper_func __aeabi_d2iz
regular_func double2int_z
    push {r4, lr}
1000ce88:	b510      	push	{r4, lr}
    lsls r4, r1, #1
1000ce8a:	004c      	lsls	r4, r1, #1
    lsrs r2, r4, #21
1000ce8c:	0d62      	lsrs	r2, r4, #21
    movs r3, #0x80
1000ce8e:	2380      	movs	r3, #128	; 0x80
    adds r2, r3
1000ce90:	18d2      	adds	r2, r2, r3
    lsls r3, #3
1000ce92:	00db      	lsls	r3, r3, #3
    subs r2, r3
1000ce94:	1ad2      	subs	r2, r2, r3
    lsls r3, #21
1000ce96:	055b      	lsls	r3, r3, #21
    cmp r2, #126
1000ce98:	2a7e      	cmp	r2, #126	; 0x7e
    ble 1f
1000ce9a:	dd10      	ble.n	1000cebe <__wrap___aeabi_d2iz+0x36>
    subs r2, #158
1000ce9c:	3a9e      	subs	r2, #158	; 0x9e
    bge 2f
1000ce9e:	da13      	bge.n	1000cec8 <__wrap___aeabi_d2iz+0x40>
    asrs r4, r1, #31
1000cea0:	17cc      	asrs	r4, r1, #31
    lsls r1, #12
1000cea2:	0309      	lsls	r1, r1, #12
    lsrs r1, #1
1000cea4:	0849      	lsrs	r1, r1, #1
    orrs r1, r3
1000cea6:	4319      	orrs	r1, r3
    negs r2, r2
1000cea8:	4252      	negs	r2, r2
    lsrs r1, r2
1000ceaa:	40d1      	lsrs	r1, r2
    lsls r4, #1
1000ceac:	0064      	lsls	r4, r4, #1
    adds r4, #1
1000ceae:	3401      	adds	r4, #1
    adds r2, #21
1000ceb0:	3215      	adds	r2, #21
    cmp r2, #32
1000ceb2:	2a20      	cmp	r2, #32
    bge 3f
1000ceb4:	da05      	bge.n	1000cec2 <__wrap___aeabi_d2iz+0x3a>
    lsrs r0, r2
1000ceb6:	40d0      	lsrs	r0, r2
    orrs r0, r1
1000ceb8:	4308      	orrs	r0, r1
    muls r0, r4
1000ceba:	4360      	muls	r0, r4
    pop {r4, pc}
1000cebc:	bd10      	pop	{r4, pc}
1:
    movs r0, #0
1000cebe:	2000      	movs	r0, #0
    pop {r4, pc}
1000cec0:	bd10      	pop	{r4, pc}
3:
    mov r0, r1
1000cec2:	4608      	mov	r0, r1
    muls r0, r4
1000cec4:	4360      	muls	r0, r4
    pop {r4, pc}
1000cec6:	bd10      	pop	{r4, pc}
2:
    // overflow
    lsrs r0, r1, #31
1000cec8:	0fc8      	lsrs	r0, r1, #31
    adds r0, r3
1000ceca:	18c0      	adds	r0, r0, r3
    subs r0, #1
1000cecc:	3801      	subs	r0, #1
    pop {r4, pc}
1000cece:	bd10      	pop	{r4, pc}

1000ced0 <__wrap___aeabi_d2uiz>:

// unsigned FUNC_NAME(__aeabi_d2uiz)(double)             double (double precision) to unsigned C-style conversion [3]
double_wrapper_section __aeabi_d2uiz
wrapper_func __aeabi_d2uiz
regular_func double2uint
    shimmable_table_tail_call SF_TABLE_FLOAT2UINT double2uint_shim
1000ced0:	b418      	push	{r3, r4}
1000ced2:	4b02      	ldr	r3, [pc, #8]	; (1000cedc <__wrap___aeabi_d2uiz+0xc>)
1000ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000ced6:	9301      	str	r3, [sp, #4]
1000ced8:	bd08      	pop	{r3, pc}
1000ceda:	0000      	.short	0x0000
1000cedc:	20009204 	.word	0x20009204

1000cee0 <double_table_shim_on_use_helper>:
#endif
.endm

double_section double_table_shim_on_use_helper
regular_func double_table_shim_on_use_helper
    push {r0-r2, lr}
1000cee0:	b507      	push	{r0, r1, r2, lr}
    mov r0, ip
1000cee2:	4660      	mov	r0, ip
#ifndef NDEBUG
    // sanity check to make sure we weren't called by non (shimmable_) table_tail_call macro
    cmp r0, #0
1000cee4:	2800      	cmp	r0, #0
    bne 1f
1000cee6:	d100      	bne.n	1000ceea <double_table_shim_on_use_helper+0xa>
    bkpt #0
1000cee8:	be00      	bkpt	0x0000
#endif
1:
    ldrh r1, [r0]
1000ceea:	8801      	ldrh	r1, [r0, #0]
    lsrs r2, r1, #8
1000ceec:	0a0a      	lsrs	r2, r1, #8
    adds r0, #2
1000ceee:	3002      	adds	r0, #2
    cmp r2, #0xdf
1000cef0:	2adf      	cmp	r2, #223	; 0xdf
    bne 1b
1000cef2:	d1fa      	bne.n	1000ceea <double_table_shim_on_use_helper+0xa>
    uxtb r1, r1 // r1 holds table offset
1000cef4:	b2c9      	uxtb	r1, r1
    lsrs r2, r0, #2
1000cef6:	0882      	lsrs	r2, r0, #2
    bcc 1f
1000cef8:	d304      	bcc.n	1000cf04 <double_table_shim_on_use_helper+0x24>
    // unaligned
    ldrh r2, [r0, #0]
1000cefa:	8802      	ldrh	r2, [r0, #0]
    ldrh r0, [r0, #2]
1000cefc:	8840      	ldrh	r0, [r0, #2]
    lsls r0, #16
1000cefe:	0400      	lsls	r0, r0, #16
    orrs r0, r2
1000cf00:	4310      	orrs	r0, r2
    b 2f
1000cf02:	e000      	b.n	1000cf06 <double_table_shim_on_use_helper+0x26>
1:
    ldr r0, [r0]
1000cf04:	6800      	ldr	r0, [r0, #0]
2:
    ldr r2, =sd_table
1000cf06:	4a02      	ldr	r2, [pc, #8]	; (1000cf10 <double_table_shim_on_use_helper+0x30>)
    str r0, [r2, r1]
1000cf08:	5050      	str	r0, [r2, r1]
    str r0, [sp, #12]
1000cf0a:	9003      	str	r0, [sp, #12]
    pop {r0-r2, pc}
1000cf0c:	bd07      	pop	{r0, r1, r2, pc}
1000cf0e:	0000      	.short	0x0000
    ldr r2, =sd_table
1000cf10:	20009204 	.word	0x20009204

1000cf14 <__wrap___aeabi_lmul>:
.endm

int64_section __aeabi_lmul

wrapper_func __aeabi_lmul
    muls   r1, r2
1000cf14:	4351      	muls	r1, r2
    muls   r3, r0
1000cf16:	4343      	muls	r3, r0
    adds   r1, r3
1000cf18:	18c9      	adds	r1, r1, r3
    mov    r12, r1
1000cf1a:	468c      	mov	ip, r1
    lsrs   r1, r2, #16
1000cf1c:	0c11      	lsrs	r1, r2, #16
    uxth   r3, r0
1000cf1e:	b283      	uxth	r3, r0
    muls   r3, r1
1000cf20:	434b      	muls	r3, r1
    push   {r4}
1000cf22:	b410      	push	{r4}
    lsrs   r4, r0, #16
1000cf24:	0c04      	lsrs	r4, r0, #16
    muls   r1, r4
1000cf26:	4361      	muls	r1, r4
    uxth   r2, r2
1000cf28:	b292      	uxth	r2, r2
    uxth   r0, r0
1000cf2a:	b280      	uxth	r0, r0
    muls   r0, r2
1000cf2c:	4350      	muls	r0, r2
    muls   r2, r4
1000cf2e:	4362      	muls	r2, r4
    lsls   r4, r3, #16
1000cf30:	041c      	lsls	r4, r3, #16
    lsrs   r3, #16
1000cf32:	0c1b      	lsrs	r3, r3, #16
    adds   r0, r4
1000cf34:	1900      	adds	r0, r0, r4
    pop    {r4}
1000cf36:	bc10      	pop	{r4}
    adcs   r1, r3
1000cf38:	4159      	adcs	r1, r3
    lsls   r3, r2, #16
1000cf3a:	0413      	lsls	r3, r2, #16
    lsrs   r2, #16
1000cf3c:	0c12      	lsrs	r2, r2, #16
    adds   r0, r3
1000cf3e:	18c0      	adds	r0, r0, r3
    adcs   r1, r2
1000cf40:	4151      	adcs	r1, r2
    add    r1, r12
1000cf42:	4461      	add	r1, ip
    bx lr
1000cf44:	4770      	bx	lr
	...

1000cf48 <__aeabi_mem_init>:
    .word ROM_FUNC_MEMCPY44
aeabi_mem_funcs_end:

.section .text
regular_func __aeabi_mem_init
    ldr r0, =aeabi_mem_funcs
1000cf48:	4801      	ldr	r0, [pc, #4]	; (1000cf50 <__aeabi_mem_init+0x8>)
    movs r1, #MEM_FUNC_COUNT
1000cf4a:	2104      	movs	r1, #4
    ldr r3, =rom_funcs_lookup
1000cf4c:	4b01      	ldr	r3, [pc, #4]	; (1000cf54 <__aeabi_mem_init+0xc>)
    bx r3
1000cf4e:	4718      	bx	r3
    ldr r0, =aeabi_mem_funcs
1000cf50:	20000720 	.word	0x20000720
    ldr r3, =rom_funcs_lookup
1000cf54:	1000909d 	.word	0x1000909d

1000cf58 <__wrap_memset>:
    bx r3

mem_section memset

wrapper_func memset
    ldr r3, =aeabi_mem_funcs
1000cf58:	4b01      	ldr	r3, [pc, #4]	; (1000cf60 <__wrap_memset+0x8>)
    ldr r3, [r3, #MEMSET]
1000cf5a:	681b      	ldr	r3, [r3, #0]
    bx r3
1000cf5c:	4718      	bx	r3
1000cf5e:	0000      	.short	0x0000
    ldr r3, =aeabi_mem_funcs
1000cf60:	20000720 	.word	0x20000720

1000cf64 <__wrap___aeabi_memcpy>:

mem_section memcpy
wrapper_func __aeabi_memcpy
wrapper_func memcpy
    ldr r3, =aeabi_mem_funcs
1000cf64:	4b01      	ldr	r3, [pc, #4]	; (1000cf6c <__wrap___aeabi_memcpy+0x8>)
    ldr r3, [r3, #MEMCPY]
1000cf66:	685b      	ldr	r3, [r3, #4]
    bx r3
1000cf68:	4718      	bx	r3
1000cf6a:	0000      	.short	0x0000
    ldr r3, =aeabi_mem_funcs
1000cf6c:	20000720 	.word	0x20000720

1000cf70 <strlen>:
1000cf70:	b510      	push	{r4, lr}
1000cf72:	0783      	lsls	r3, r0, #30
1000cf74:	d00a      	beq.n	1000cf8c <strlen+0x1c>
1000cf76:	0003      	movs	r3, r0
1000cf78:	2103      	movs	r1, #3
1000cf7a:	e002      	b.n	1000cf82 <strlen+0x12>
1000cf7c:	3301      	adds	r3, #1
1000cf7e:	420b      	tst	r3, r1
1000cf80:	d005      	beq.n	1000cf8e <strlen+0x1e>
1000cf82:	781a      	ldrb	r2, [r3, #0]
1000cf84:	2a00      	cmp	r2, #0
1000cf86:	d1f9      	bne.n	1000cf7c <strlen+0xc>
1000cf88:	1a18      	subs	r0, r3, r0
1000cf8a:	bd10      	pop	{r4, pc}
1000cf8c:	0003      	movs	r3, r0
1000cf8e:	6819      	ldr	r1, [r3, #0]
1000cf90:	4a0c      	ldr	r2, [pc, #48]	; (1000cfc4 <strlen+0x54>)
1000cf92:	4c0d      	ldr	r4, [pc, #52]	; (1000cfc8 <strlen+0x58>)
1000cf94:	188a      	adds	r2, r1, r2
1000cf96:	438a      	bics	r2, r1
1000cf98:	4222      	tst	r2, r4
1000cf9a:	d10f      	bne.n	1000cfbc <strlen+0x4c>
1000cf9c:	6859      	ldr	r1, [r3, #4]
1000cf9e:	4a09      	ldr	r2, [pc, #36]	; (1000cfc4 <strlen+0x54>)
1000cfa0:	3304      	adds	r3, #4
1000cfa2:	188a      	adds	r2, r1, r2
1000cfa4:	438a      	bics	r2, r1
1000cfa6:	4222      	tst	r2, r4
1000cfa8:	d108      	bne.n	1000cfbc <strlen+0x4c>
1000cfaa:	6859      	ldr	r1, [r3, #4]
1000cfac:	4a05      	ldr	r2, [pc, #20]	; (1000cfc4 <strlen+0x54>)
1000cfae:	3304      	adds	r3, #4
1000cfb0:	188a      	adds	r2, r1, r2
1000cfb2:	438a      	bics	r2, r1
1000cfb4:	4222      	tst	r2, r4
1000cfb6:	d0f1      	beq.n	1000cf9c <strlen+0x2c>
1000cfb8:	e000      	b.n	1000cfbc <strlen+0x4c>
1000cfba:	3301      	adds	r3, #1
1000cfbc:	781a      	ldrb	r2, [r3, #0]
1000cfbe:	2a00      	cmp	r2, #0
1000cfc0:	d1fb      	bne.n	1000cfba <strlen+0x4a>
1000cfc2:	e7e1      	b.n	1000cf88 <strlen+0x18>
1000cfc4:	fefefeff 	.word	0xfefefeff
1000cfc8:	80808080 	.word	0x80808080

1000cfcc <_fini>:
1000cfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cfce:	46c0      	nop			; (mov r8, r8)

1000cfd0 <__flash_do_cmd_veneer>:
1000cfd0:	b401      	push	{r0}
1000cfd2:	4802      	ldr	r0, [pc, #8]	; (1000cfdc <__flash_do_cmd_veneer+0xc>)
1000cfd4:	4684      	mov	ip, r0
1000cfd6:	bc01      	pop	{r0}
1000cfd8:	4760      	bx	ip
1000cfda:	bf00      	nop
1000cfdc:	200004b9 	.word	0x200004b9

1000cfe0 <__mutex_exit_veneer>:
1000cfe0:	b401      	push	{r0}
1000cfe2:	4802      	ldr	r0, [pc, #8]	; (1000cfec <__mutex_exit_veneer+0xc>)
1000cfe4:	4684      	mov	ip, r0
1000cfe6:	bc01      	pop	{r0}
1000cfe8:	4760      	bx	ip
1000cfea:	bf00      	nop
1000cfec:	2000035d 	.word	0x2000035d

1000cff0 <____aeabi_ldiv0_veneer>:
1000cff0:	b401      	push	{r0}
1000cff2:	4802      	ldr	r0, [pc, #8]	; (1000cffc <____aeabi_ldiv0_veneer+0xc>)
1000cff4:	4684      	mov	ip, r0
1000cff6:	bc01      	pop	{r0}
1000cff8:	4760      	bx	ip
1000cffa:	bf00      	nop
1000cffc:	20000615 	.word	0x20000615

1000d000 <____aeabi_idiv0_veneer>:
1000d000:	b401      	push	{r0}
1000d002:	4802      	ldr	r0, [pc, #8]	; (1000d00c <____aeabi_idiv0_veneer+0xc>)
1000d004:	4684      	mov	ip, r0
1000d006:	bc01      	pop	{r0}
1000d008:	4760      	bx	ip
1000d00a:	bf00      	nop
1000d00c:	20000615 	.word	0x20000615

1000d010 <__mutex_try_enter_veneer>:
1000d010:	b401      	push	{r0}
1000d012:	4802      	ldr	r0, [pc, #8]	; (1000d01c <__mutex_try_enter_veneer+0xc>)
1000d014:	4684      	mov	ip, r0
1000d016:	bc01      	pop	{r0}
1000d018:	4760      	bx	ip
1000d01a:	bf00      	nop
1000d01c:	20000185 	.word	0x20000185

1000d020 <__mutex_enter_timeout_ms_veneer>:
1000d020:	b401      	push	{r0}
1000d022:	4802      	ldr	r0, [pc, #8]	; (1000d02c <__mutex_enter_timeout_ms_veneer+0xc>)
1000d024:	4684      	mov	ip, r0
1000d026:	bc01      	pop	{r0}
1000d028:	4760      	bx	ip
1000d02a:	bf00      	nop
1000d02c:	20000237 	.word	0x20000237

1000d030 <__mutex_enter_blocking_veneer>:
1000d030:	b401      	push	{r0}
1000d032:	4802      	ldr	r0, [pc, #8]	; (1000d03c <__mutex_enter_blocking_veneer+0xc>)
1000d034:	4684      	mov	ip, r0
1000d036:	bc01      	pop	{r0}
1000d038:	4760      	bx	ip
1000d03a:	bf00      	nop
1000d03c:	200000c1 	.word	0x200000c1

Disassembly of section .data:

200000c0 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
200000c0:	b580      	push	{r7, lr}
200000c2:	b090      	sub	sp, #64	; 0x40
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
200000c8:	23d0      	movs	r3, #208	; 0xd0
200000ca:	061b      	lsls	r3, r3, #24
200000cc:	681a      	ldr	r2, [r3, #0]
    if (mtx->recursive) {
        recursive_mutex_enter_blocking(mtx);
        return;
    }
#endif
    lock_owner_id_t caller = lock_get_caller_owner_id();
200000ce:	233f      	movs	r3, #63	; 0x3f
200000d0:	18fb      	adds	r3, r7, r3
200000d2:	701a      	strb	r2, [r3, #0]
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	681b      	ldr	r3, [r3, #0]
200000d8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
200000da:	f3ef 8310 	mrs	r3, PRIMASK
200000de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm volatile ("cpsid i");
200000e0:	b672      	cpsid	i
    return status;
200000e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    uint32_t save = save_and_disable_interrupts();
200000e4:	62fb      	str	r3, [r7, #44]	; 0x2c
200000e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200000e8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (__builtin_expect(!*lock, 0));
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
200000ee:	681b      	ldr	r3, [r3, #0]
200000f0:	425a      	negs	r2, r3
200000f2:	4153      	adcs	r3, r2
200000f4:	b2db      	uxtb	r3, r3
200000f6:	2b00      	cmp	r3, #0
200000f8:	d1f8      	bne.n	200000ec <mutex_enter_blocking+0x2c>
    __asm volatile ("dmb" : : : "memory");
200000fa:	f3bf 8f5f 	dmb	sy
}
200000fe:	46c0      	nop			; (mov r8, r8)
}
20000100:	46c0      	nop			; (mov r8, r8)
}
20000102:	46c0      	nop			; (mov r8, r8)
    return save;
20000104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000106:	63bb      	str	r3, [r7, #56]	; 0x38
        if (!lock_is_owner_id_valid(mtx->owner)) {
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	791b      	ldrb	r3, [r3, #4]
2000010c:	b25b      	sxtb	r3, r3
2000010e:	2b00      	cmp	r3, #0
20000110:	da1b      	bge.n	2000014a <mutex_enter_blocking+0x8a>
            mtx->owner = caller;
20000112:	687b      	ldr	r3, [r7, #4]
20000114:	223f      	movs	r2, #63	; 0x3f
20000116:	18ba      	adds	r2, r7, r2
20000118:	7812      	ldrb	r2, [r2, #0]
2000011a:	711a      	strb	r2, [r3, #4]
            spin_unlock(mtx->core.spin_lock, save);
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	681b      	ldr	r3, [r3, #0]
20000120:	627b      	str	r3, [r7, #36]	; 0x24
20000122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000124:	623b      	str	r3, [r7, #32]
20000126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000128:	61fb      	str	r3, [r7, #28]
    __asm volatile ("dmb" : : : "memory");
2000012a:	f3bf 8f5f 	dmb	sy
}
2000012e:	46c0      	nop			; (mov r8, r8)
}
20000130:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
20000132:	69fb      	ldr	r3, [r7, #28]
20000134:	2200      	movs	r2, #0
20000136:	601a      	str	r2, [r3, #0]
}
20000138:	46c0      	nop			; (mov r8, r8)
2000013a:	6a3b      	ldr	r3, [r7, #32]
2000013c:	61bb      	str	r3, [r7, #24]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000013e:	69bb      	ldr	r3, [r7, #24]
20000140:	f383 8810 	msr	PRIMASK, r3
}
20000144:	46c0      	nop			; (mov r8, r8)
}
20000146:	46c0      	nop			; (mov r8, r8)
            break;
20000148:	e018      	b.n	2000017c <mutex_enter_blocking+0xbc>
        }
        lock_internal_spin_unlock_with_wait(&mtx->core, save);
2000014a:	687b      	ldr	r3, [r7, #4]
2000014c:	681b      	ldr	r3, [r3, #0]
2000014e:	617b      	str	r3, [r7, #20]
20000150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000152:	613b      	str	r3, [r7, #16]
20000154:	697b      	ldr	r3, [r7, #20]
20000156:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
20000158:	f3bf 8f5f 	dmb	sy
}
2000015c:	46c0      	nop			; (mov r8, r8)
}
2000015e:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
20000160:	68fb      	ldr	r3, [r7, #12]
20000162:	2200      	movs	r2, #0
20000164:	601a      	str	r2, [r3, #0]
}
20000166:	46c0      	nop			; (mov r8, r8)
20000168:	693b      	ldr	r3, [r7, #16]
2000016a:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000016c:	68bb      	ldr	r3, [r7, #8]
2000016e:	f383 8810 	msr	PRIMASK, r3
}
20000172:	46c0      	nop			; (mov r8, r8)
}
20000174:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("wfe");
20000176:	bf20      	wfe
}
20000178:	46c0      	nop			; (mov r8, r8)
    do {
2000017a:	e7ab      	b.n	200000d4 <mutex_enter_blocking+0x14>
    } while (true);
}
2000017c:	46c0      	nop			; (mov r8, r8)
2000017e:	46bd      	mov	sp, r7
20000180:	b010      	add	sp, #64	; 0x40
20000182:	bd80      	pop	{r7, pc}

20000184 <mutex_try_enter>:
            lock_internal_spin_unlock_with_wait(&mtx->core, save);
        }
    } while (true);
}

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20000184:	b580      	push	{r7, lr}
20000186:	b08c      	sub	sp, #48	; 0x30
20000188:	af00      	add	r7, sp, #0
2000018a:	6078      	str	r0, [r7, #4]
2000018c:	6039      	str	r1, [r7, #0]
    if (mtx->recursive) {
        return recursive_mutex_try_enter(mtx, owner_out);
    }
#endif
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000018e:	687b      	ldr	r3, [r7, #4]
20000190:	681b      	ldr	r3, [r3, #0]
20000192:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20000194:	f3ef 8310 	mrs	r3, PRIMASK
20000198:	623b      	str	r3, [r7, #32]
    __asm volatile ("cpsid i");
2000019a:	b672      	cpsid	i
    return status;
2000019c:	6a3b      	ldr	r3, [r7, #32]
    uint32_t save = save_and_disable_interrupts();
2000019e:	61fb      	str	r3, [r7, #28]
200001a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200001a2:	61bb      	str	r3, [r7, #24]
    while (__builtin_expect(!*lock, 0));
200001a4:	46c0      	nop			; (mov r8, r8)
200001a6:	69bb      	ldr	r3, [r7, #24]
200001a8:	681b      	ldr	r3, [r3, #0]
200001aa:	425a      	negs	r2, r3
200001ac:	4153      	adcs	r3, r2
200001ae:	b2db      	uxtb	r3, r3
200001b0:	2b00      	cmp	r3, #0
200001b2:	d1f8      	bne.n	200001a6 <mutex_try_enter+0x22>
    __asm volatile ("dmb" : : : "memory");
200001b4:	f3bf 8f5f 	dmb	sy
}
200001b8:	46c0      	nop			; (mov r8, r8)
}
200001ba:	46c0      	nop			; (mov r8, r8)
}
200001bc:	46c0      	nop			; (mov r8, r8)
    return save;
200001be:	69fb      	ldr	r3, [r7, #28]
200001c0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!lock_is_owner_id_valid(mtx->owner)) {
200001c2:	687b      	ldr	r3, [r7, #4]
200001c4:	791b      	ldrb	r3, [r3, #4]
200001c6:	b25b      	sxtb	r3, r3
200001c8:	2b00      	cmp	r3, #0
200001ca:	da0a      	bge.n	200001e2 <mutex_try_enter+0x5e>
200001cc:	23d0      	movs	r3, #208	; 0xd0
200001ce:	061b      	lsls	r3, r3, #24
200001d0:	681b      	ldr	r3, [r3, #0]
        mtx->owner = lock_get_caller_owner_id();
200001d2:	b25a      	sxtb	r2, r3
200001d4:	687b      	ldr	r3, [r7, #4]
200001d6:	711a      	strb	r2, [r3, #4]
        entered = true;
200001d8:	232f      	movs	r3, #47	; 0x2f
200001da:	18fb      	adds	r3, r7, r3
200001dc:	2201      	movs	r2, #1
200001de:	701a      	strb	r2, [r3, #0]
200001e0:	e00c      	b.n	200001fc <mutex_try_enter+0x78>
    } else {
        if (owner_out) *owner_out = (uint32_t) mtx->owner;
200001e2:	683b      	ldr	r3, [r7, #0]
200001e4:	2b00      	cmp	r3, #0
200001e6:	d005      	beq.n	200001f4 <mutex_try_enter+0x70>
200001e8:	687b      	ldr	r3, [r7, #4]
200001ea:	791b      	ldrb	r3, [r3, #4]
200001ec:	b25b      	sxtb	r3, r3
200001ee:	001a      	movs	r2, r3
200001f0:	683b      	ldr	r3, [r7, #0]
200001f2:	601a      	str	r2, [r3, #0]
        entered = false;
200001f4:	232f      	movs	r3, #47	; 0x2f
200001f6:	18fb      	adds	r3, r7, r3
200001f8:	2200      	movs	r2, #0
200001fa:	701a      	strb	r2, [r3, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
200001fc:	687b      	ldr	r3, [r7, #4]
200001fe:	681b      	ldr	r3, [r3, #0]
20000200:	617b      	str	r3, [r7, #20]
20000202:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000204:	613b      	str	r3, [r7, #16]
20000206:	697b      	ldr	r3, [r7, #20]
20000208:	60fb      	str	r3, [r7, #12]
    __asm volatile ("dmb" : : : "memory");
2000020a:	f3bf 8f5f 	dmb	sy
}
2000020e:	46c0      	nop			; (mov r8, r8)
}
20000210:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
20000212:	68fb      	ldr	r3, [r7, #12]
20000214:	2200      	movs	r2, #0
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	693b      	ldr	r3, [r7, #16]
2000021c:	60bb      	str	r3, [r7, #8]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000021e:	68bb      	ldr	r3, [r7, #8]
20000220:	f383 8810 	msr	PRIMASK, r3
}
20000224:	46c0      	nop			; (mov r8, r8)
}
20000226:	46c0      	nop			; (mov r8, r8)
    return entered;
20000228:	232f      	movs	r3, #47	; 0x2f
2000022a:	18fb      	adds	r3, r7, r3
2000022c:	781b      	ldrb	r3, [r3, #0]
}
2000022e:	0018      	movs	r0, r3
20000230:	46bd      	mov	sp, r7
20000232:	b00c      	add	sp, #48	; 0x30
20000234:	bd80      	pop	{r7, pc}

20000236 <mutex_enter_timeout_ms>:
    }
    spin_unlock(mtx->core.spin_lock, save);
    return entered;
}

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20000236:	b580      	push	{r7, lr}
20000238:	b084      	sub	sp, #16
2000023a:	af00      	add	r7, sp, #0
2000023c:	6078      	str	r0, [r7, #4]
2000023e:	6039      	str	r1, [r7, #0]
    return mutex_enter_block_until(mtx, make_timeout_time_ms(timeout_ms));
20000240:	2308      	movs	r3, #8
20000242:	18fb      	adds	r3, r7, r3
20000244:	683a      	ldr	r2, [r7, #0]
20000246:	0011      	movs	r1, r2
20000248:	0018      	movs	r0, r3
2000024a:	f000 f9ed 	bl	20000628 <__make_timeout_time_ms_veneer>
2000024e:	68ba      	ldr	r2, [r7, #8]
20000250:	68fb      	ldr	r3, [r7, #12]
20000252:	6879      	ldr	r1, [r7, #4]
20000254:	0008      	movs	r0, r1
20000256:	f000 f805 	bl	20000264 <mutex_enter_block_until>
2000025a:	0003      	movs	r3, r0
}
2000025c:	0018      	movs	r0, r3
2000025e:	46bd      	mov	sp, r7
20000260:	b004      	add	sp, #16
20000262:	bd80      	pop	{r7, pc}

20000264 <mutex_enter_block_until>:

bool __time_critical_func(recursive_mutex_enter_timeout_us)(recursive_mutex_t *mtx, uint32_t timeout_us) {
    return recursive_mutex_enter_block_until(mtx, make_timeout_time_us(timeout_us));
}

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
20000264:	b580      	push	{r7, lr}
20000266:	b092      	sub	sp, #72	; 0x48
20000268:	af00      	add	r7, sp, #0
2000026a:	60f8      	str	r0, [r7, #12]
2000026c:	603a      	str	r2, [r7, #0]
2000026e:	607b      	str	r3, [r7, #4]
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    if (mtx->recursive) {
        return recursive_mutex_enter_block_until(mtx, until);
    }
#endif
    assert(mtx->core.spin_lock);
20000270:	68fb      	ldr	r3, [r7, #12]
20000272:	681b      	ldr	r3, [r3, #0]
20000274:	2b00      	cmp	r3, #0
20000276:	d105      	bne.n	20000284 <mutex_enter_block_until+0x20>
20000278:	4b35      	ldr	r3, [pc, #212]	; (20000350 <mutex_enter_block_until+0xec>)
2000027a:	4a36      	ldr	r2, [pc, #216]	; (20000354 <mutex_enter_block_until+0xf0>)
2000027c:	4836      	ldr	r0, [pc, #216]	; (20000358 <mutex_enter_block_until+0xf4>)
2000027e:	217a      	movs	r1, #122	; 0x7a
20000280:	f000 f9ca 	bl	20000618 <____assert_func_veneer>
20000284:	23d0      	movs	r3, #208	; 0xd0
20000286:	061b      	lsls	r3, r3, #24
20000288:	681a      	ldr	r2, [r3, #0]
    lock_owner_id_t caller = lock_get_caller_owner_id();
2000028a:	2347      	movs	r3, #71	; 0x47
2000028c:	18fb      	adds	r3, r7, r3
2000028e:	701a      	strb	r2, [r3, #0]
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	681b      	ldr	r3, [r3, #0]
20000294:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20000296:	f3ef 8310 	mrs	r3, PRIMASK
2000029a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm volatile ("cpsid i");
2000029c:	b672      	cpsid	i
    return status;
2000029e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint32_t save = save_and_disable_interrupts();
200002a0:	637b      	str	r3, [r7, #52]	; 0x34
200002a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
200002a4:	633b      	str	r3, [r7, #48]	; 0x30
    while (__builtin_expect(!*lock, 0));
200002a6:	46c0      	nop			; (mov r8, r8)
200002a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200002aa:	681b      	ldr	r3, [r3, #0]
200002ac:	425a      	negs	r2, r3
200002ae:	4153      	adcs	r3, r2
200002b0:	b2db      	uxtb	r3, r3
200002b2:	2b00      	cmp	r3, #0
200002b4:	d1f8      	bne.n	200002a8 <mutex_enter_block_until+0x44>
    __asm volatile ("dmb" : : : "memory");
200002b6:	f3bf 8f5f 	dmb	sy
}
200002ba:	46c0      	nop			; (mov r8, r8)
}
200002bc:	46c0      	nop			; (mov r8, r8)
}
200002be:	46c0      	nop			; (mov r8, r8)
    return save;
200002c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200002c2:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lock_is_owner_id_valid(mtx->owner)) {
200002c4:	68fb      	ldr	r3, [r7, #12]
200002c6:	791b      	ldrb	r3, [r3, #4]
200002c8:	b25b      	sxtb	r3, r3
200002ca:	2b00      	cmp	r3, #0
200002cc:	da1c      	bge.n	20000308 <mutex_enter_block_until+0xa4>
            mtx->owner = caller;
200002ce:	68fb      	ldr	r3, [r7, #12]
200002d0:	2247      	movs	r2, #71	; 0x47
200002d2:	18ba      	adds	r2, r7, r2
200002d4:	7812      	ldrb	r2, [r2, #0]
200002d6:	711a      	strb	r2, [r3, #4]
            spin_unlock(mtx->core.spin_lock, save);
200002d8:	68fb      	ldr	r3, [r7, #12]
200002da:	681b      	ldr	r3, [r3, #0]
200002dc:	62fb      	str	r3, [r7, #44]	; 0x2c
200002de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200002e0:	62bb      	str	r3, [r7, #40]	; 0x28
200002e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200002e4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("dmb" : : : "memory");
200002e6:	f3bf 8f5f 	dmb	sy
}
200002ea:	46c0      	nop			; (mov r8, r8)
}
200002ec:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
200002ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200002f0:	2200      	movs	r2, #0
200002f2:	601a      	str	r2, [r3, #0]
}
200002f4:	46c0      	nop			; (mov r8, r8)
200002f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200002f8:	623b      	str	r3, [r7, #32]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
200002fa:	6a3b      	ldr	r3, [r7, #32]
200002fc:	f383 8810 	msr	PRIMASK, r3
}
20000300:	46c0      	nop			; (mov r8, r8)
}
20000302:	46c0      	nop			; (mov r8, r8)
            return true;
20000304:	2301      	movs	r3, #1
20000306:	e01e      	b.n	20000346 <mutex_enter_block_until+0xe2>
        } else {
            if (lock_internal_spin_unlock_with_best_effort_wait_or_timeout(&mtx->core, save, until)) {
20000308:	68fb      	ldr	r3, [r7, #12]
2000030a:	681b      	ldr	r3, [r3, #0]
2000030c:	61fb      	str	r3, [r7, #28]
2000030e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20000310:	61bb      	str	r3, [r7, #24]
20000312:	69fb      	ldr	r3, [r7, #28]
20000314:	617b      	str	r3, [r7, #20]
    __asm volatile ("dmb" : : : "memory");
20000316:	f3bf 8f5f 	dmb	sy
}
2000031a:	46c0      	nop			; (mov r8, r8)
}
2000031c:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
2000031e:	697b      	ldr	r3, [r7, #20]
20000320:	2200      	movs	r2, #0
20000322:	601a      	str	r2, [r3, #0]
}
20000324:	46c0      	nop			; (mov r8, r8)
20000326:	69bb      	ldr	r3, [r7, #24]
20000328:	613b      	str	r3, [r7, #16]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000032a:	693b      	ldr	r3, [r7, #16]
2000032c:	f383 8810 	msr	PRIMASK, r3
}
20000330:	46c0      	nop			; (mov r8, r8)
}
20000332:	46c0      	nop			; (mov r8, r8)
20000334:	683a      	ldr	r2, [r7, #0]
20000336:	687b      	ldr	r3, [r7, #4]
20000338:	0010      	movs	r0, r2
2000033a:	0019      	movs	r1, r3
2000033c:	f000 f97c 	bl	20000638 <__best_effort_wfe_or_timeout_veneer>
20000340:	1e03      	subs	r3, r0, #0
20000342:	d0a5      	beq.n	20000290 <mutex_enter_block_until+0x2c>
                // timed out
                return false;
20000344:	2300      	movs	r3, #0
            }
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}
20000346:	0018      	movs	r0, r3
20000348:	46bd      	mov	sp, r7
2000034a:	b012      	add	sp, #72	; 0x48
2000034c:	bd80      	pop	{r7, pc}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	1000d77c 	.word	0x1000d77c
20000354:	1000d7e0 	.word	0x1000d7e0
20000358:	1000d72c 	.word	0x1000d72c

2000035c <mutex_exit>:
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
2000035c:	b580      	push	{r7, lr}
2000035e:	b08c      	sub	sp, #48	; 0x30
20000360:	af00      	add	r7, sp, #0
20000362:	6078      	str	r0, [r7, #4]
    if (mtx->recursive) {
        recursive_mutex_exit(mtx);
        return;
    }
#endif
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000364:	687b      	ldr	r3, [r7, #4]
20000366:	681b      	ldr	r3, [r3, #0]
20000368:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000036a:	f3ef 8310 	mrs	r3, PRIMASK
2000036e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm volatile ("cpsid i");
20000370:	b672      	cpsid	i
    return status;
20000372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    uint32_t save = save_and_disable_interrupts();
20000374:	623b      	str	r3, [r7, #32]
20000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000378:	61fb      	str	r3, [r7, #28]
    while (__builtin_expect(!*lock, 0));
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	69fb      	ldr	r3, [r7, #28]
2000037e:	681b      	ldr	r3, [r3, #0]
20000380:	425a      	negs	r2, r3
20000382:	4153      	adcs	r3, r2
20000384:	b2db      	uxtb	r3, r3
20000386:	2b00      	cmp	r3, #0
20000388:	d1f8      	bne.n	2000037c <mutex_exit+0x20>
    __asm volatile ("dmb" : : : "memory");
2000038a:	f3bf 8f5f 	dmb	sy
}
2000038e:	46c0      	nop			; (mov r8, r8)
}
20000390:	46c0      	nop			; (mov r8, r8)
}
20000392:	46c0      	nop			; (mov r8, r8)
    return save;
20000394:	6a3b      	ldr	r3, [r7, #32]
20000396:	62fb      	str	r3, [r7, #44]	; 0x2c
    assert(lock_is_owner_id_valid(mtx->owner));
20000398:	687b      	ldr	r3, [r7, #4]
2000039a:	791b      	ldrb	r3, [r3, #4]
2000039c:	b25b      	sxtb	r3, r3
2000039e:	2b00      	cmp	r3, #0
200003a0:	da05      	bge.n	200003ae <mutex_exit+0x52>
200003a2:	4b12      	ldr	r3, [pc, #72]	; (200003ec <mutex_exit+0x90>)
200003a4:	4a12      	ldr	r2, [pc, #72]	; (200003f0 <mutex_exit+0x94>)
200003a6:	4813      	ldr	r0, [pc, #76]	; (200003f4 <mutex_exit+0x98>)
200003a8:	21a9      	movs	r1, #169	; 0xa9
200003aa:	f000 f935 	bl	20000618 <____assert_func_veneer>
    mtx->owner = LOCK_INVALID_OWNER_ID;
200003ae:	687b      	ldr	r3, [r7, #4]
200003b0:	22ff      	movs	r2, #255	; 0xff
200003b2:	711a      	strb	r2, [r3, #4]
    lock_internal_spin_unlock_with_notify(&mtx->core, save);
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	681b      	ldr	r3, [r3, #0]
200003b8:	61bb      	str	r3, [r7, #24]
200003ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200003bc:	617b      	str	r3, [r7, #20]
200003be:	69bb      	ldr	r3, [r7, #24]
200003c0:	613b      	str	r3, [r7, #16]
    __asm volatile ("dmb" : : : "memory");
200003c2:	f3bf 8f5f 	dmb	sy
}
200003c6:	46c0      	nop			; (mov r8, r8)
}
200003c8:	46c0      	nop			; (mov r8, r8)
    *lock = 0;
200003ca:	693b      	ldr	r3, [r7, #16]
200003cc:	2200      	movs	r2, #0
200003ce:	601a      	str	r2, [r3, #0]
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	697b      	ldr	r3, [r7, #20]
200003d4:	60fb      	str	r3, [r7, #12]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
200003d6:	68fb      	ldr	r3, [r7, #12]
200003d8:	f383 8810 	msr	PRIMASK, r3
}
200003dc:	46c0      	nop			; (mov r8, r8)
}
200003de:	46c0      	nop			; (mov r8, r8)
    __asm volatile ("sev");
200003e0:	bf40      	sev
}
200003e2:	46c0      	nop			; (mov r8, r8)
}
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	46bd      	mov	sp, r7
200003e8:	b00c      	add	sp, #48	; 0x30
200003ea:	bd80      	pop	{r7, pc}
200003ec:	1000d790 	.word	0x1000d790
200003f0:	1000d7f8 	.word	0x1000d7f8
200003f4:	1000d72c 	.word	0x1000d72c

200003f8 <flash_init_boot2_copyout>:
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)(void) {
200003f8:	b580      	push	{r7, lr}
200003fa:	b082      	sub	sp, #8
200003fc:	af00      	add	r7, sp, #0
    if (boot2_copyout_valid)
200003fe:	4b10      	ldr	r3, [pc, #64]	; (20000440 <flash_init_boot2_copyout+0x48>)
20000400:	781b      	ldrb	r3, [r3, #0]
20000402:	2b00      	cmp	r3, #0
20000404:	d118      	bne.n	20000438 <flash_init_boot2_copyout+0x40>
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20000406:	2300      	movs	r3, #0
20000408:	607b      	str	r3, [r7, #4]
2000040a:	e00d      	b.n	20000428 <flash_init_boot2_copyout+0x30>
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
2000040c:	687b      	ldr	r3, [r7, #4]
2000040e:	009b      	lsls	r3, r3, #2
20000410:	2280      	movs	r2, #128	; 0x80
20000412:	0552      	lsls	r2, r2, #21
20000414:	4694      	mov	ip, r2
20000416:	4463      	add	r3, ip
20000418:	6819      	ldr	r1, [r3, #0]
2000041a:	4b0a      	ldr	r3, [pc, #40]	; (20000444 <flash_init_boot2_copyout+0x4c>)
2000041c:	687a      	ldr	r2, [r7, #4]
2000041e:	0092      	lsls	r2, r2, #2
20000420:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	3301      	adds	r3, #1
20000426:	607b      	str	r3, [r7, #4]
20000428:	687b      	ldr	r3, [r7, #4]
2000042a:	2b3f      	cmp	r3, #63	; 0x3f
2000042c:	ddee      	ble.n	2000040c <flash_init_boot2_copyout+0x14>
}
2000042e:	46c0      	nop			; (mov r8, r8)
    boot2_copyout_valid = true;
20000430:	4b03      	ldr	r3, [pc, #12]	; (20000440 <flash_init_boot2_copyout+0x48>)
20000432:	2201      	movs	r2, #1
20000434:	701a      	strb	r2, [r3, #0]
20000436:	e000      	b.n	2000043a <flash_init_boot2_copyout+0x42>
        return;
20000438:	46c0      	nop			; (mov r8, r8)
}
2000043a:	46bd      	mov	sp, r7
2000043c:	b002      	add	sp, #8
2000043e:	bd80      	pop	{r7, pc}
20000440:	20009444 	.word	0x20009444
20000444:	20004c64 	.word	0x20004c64

20000448 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)(void) {
20000448:	b580      	push	{r7, lr}
2000044a:	af00      	add	r7, sp, #0
    ((void (*)(void))boot2_copyout+1)();
2000044c:	4b02      	ldr	r3, [pc, #8]	; (20000458 <flash_enable_xip_via_boot2+0x10>)
2000044e:	3301      	adds	r3, #1
20000450:	4798      	blx	r3
}
20000452:	46c0      	nop			; (mov r8, r8)
20000454:	46bd      	mov	sp, r7
20000456:	bd80      	pop	{r7, pc}
20000458:	20004c64 	.word	0x20004c64

2000045c <flash_cs_force>:
static void __no_inline_not_in_flash_func(flash_cs_force)(bool high) {
2000045c:	b580      	push	{r7, lr}
2000045e:	b088      	sub	sp, #32
20000460:	af00      	add	r7, sp, #0
20000462:	0002      	movs	r2, r0
20000464:	1dfb      	adds	r3, r7, #7
20000466:	701a      	strb	r2, [r3, #0]
        IO_QSPI_GPIO_QSPI_SS_CTRL_OUTOVER_VALUE_HIGH :
20000468:	1dfb      	adds	r3, r7, #7
2000046a:	781b      	ldrb	r3, [r3, #0]
2000046c:	2b00      	cmp	r3, #0
2000046e:	d001      	beq.n	20000474 <flash_cs_force+0x18>
20000470:	2303      	movs	r3, #3
20000472:	e000      	b.n	20000476 <flash_cs_force+0x1a>
20000474:	2302      	movs	r3, #2
    uint32_t field_val = high ?
20000476:	61fb      	str	r3, [r7, #28]
    hw_write_masked(&ioqspi_hw->io[1].ctrl,
20000478:	69fb      	ldr	r3, [r7, #28]
2000047a:	021b      	lsls	r3, r3, #8
2000047c:	4a0d      	ldr	r2, [pc, #52]	; (200004b4 <flash_cs_force+0x58>)
2000047e:	61ba      	str	r2, [r7, #24]
20000480:	617b      	str	r3, [r7, #20]
20000482:	23c0      	movs	r3, #192	; 0xc0
20000484:	009b      	lsls	r3, r3, #2
20000486:	613b      	str	r3, [r7, #16]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20000488:	69bb      	ldr	r3, [r7, #24]
2000048a:	681a      	ldr	r2, [r3, #0]
2000048c:	697b      	ldr	r3, [r7, #20]
2000048e:	4053      	eors	r3, r2
20000490:	693a      	ldr	r2, [r7, #16]
20000492:	4013      	ands	r3, r2
20000494:	69ba      	ldr	r2, [r7, #24]
20000496:	60fa      	str	r2, [r7, #12]
20000498:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
2000049a:	68fb      	ldr	r3, [r7, #12]
2000049c:	2280      	movs	r2, #128	; 0x80
2000049e:	0152      	lsls	r2, r2, #5
200004a0:	4313      	orrs	r3, r2
200004a2:	68ba      	ldr	r2, [r7, #8]
200004a4:	601a      	str	r2, [r3, #0]
}
200004a6:	46c0      	nop			; (mov r8, r8)
}
200004a8:	46c0      	nop			; (mov r8, r8)
}
200004aa:	46c0      	nop			; (mov r8, r8)
200004ac:	46bd      	mov	sp, r7
200004ae:	b008      	add	sp, #32
200004b0:	bd80      	pop	{r7, pc}
200004b2:	46c0      	nop			; (mov r8, r8)
200004b4:	4001800c 	.word	0x4001800c

200004b8 <flash_do_cmd>:
void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
200004b8:	b580      	push	{r7, lr}
200004ba:	b096      	sub	sp, #88	; 0x58
200004bc:	af00      	add	r7, sp, #0
200004be:	60f8      	str	r0, [r7, #12]
200004c0:	60b9      	str	r1, [r7, #8]
200004c2:	607a      	str	r2, [r7, #4]
200004c4:	4b4d      	ldr	r3, [pc, #308]	; (200005fc <flash_do_cmd+0x144>)
200004c6:	61fb      	str	r3, [r7, #28]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
200004c8:	2318      	movs	r3, #24
200004ca:	881b      	ldrh	r3, [r3, #0]
200004cc:	61bb      	str	r3, [r7, #24]
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
200004ce:	2314      	movs	r3, #20
200004d0:	881b      	ldrh	r3, [r3, #0]
200004d2:	617b      	str	r3, [r7, #20]
    return rom_table_lookup(func_table, code);
200004d4:	69f9      	ldr	r1, [r7, #28]
200004d6:	697a      	ldr	r2, [r7, #20]
200004d8:	69bb      	ldr	r3, [r7, #24]
200004da:	0010      	movs	r0, r2
200004dc:	4798      	blx	r3
200004de:	0003      	movs	r3, r0
    rom_connect_internal_flash_fn connect_internal_flash = (rom_connect_internal_flash_fn)rom_func_lookup_inline(ROM_FUNC_CONNECT_INTERNAL_FLASH);
200004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
200004e2:	4b47      	ldr	r3, [pc, #284]	; (20000600 <flash_do_cmd+0x148>)
200004e4:	62bb      	str	r3, [r7, #40]	; 0x28
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
200004e6:	2318      	movs	r3, #24
200004e8:	881b      	ldrh	r3, [r3, #0]
200004ea:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
200004ec:	2314      	movs	r3, #20
200004ee:	881b      	ldrh	r3, [r3, #0]
200004f0:	623b      	str	r3, [r7, #32]
    return rom_table_lookup(func_table, code);
200004f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
200004f4:	6a3a      	ldr	r2, [r7, #32]
200004f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200004f8:	0010      	movs	r0, r2
200004fa:	4798      	blx	r3
200004fc:	0003      	movs	r3, r0
    rom_flash_exit_xip_fn flash_exit_xip = (rom_flash_exit_xip_fn)rom_func_lookup_inline(ROM_FUNC_FLASH_EXIT_XIP);
200004fe:	64bb      	str	r3, [r7, #72]	; 0x48
20000500:	4b40      	ldr	r3, [pc, #256]	; (20000604 <flash_do_cmd+0x14c>)
20000502:	637b      	str	r3, [r7, #52]	; 0x34
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
20000504:	2318      	movs	r3, #24
20000506:	881b      	ldrh	r3, [r3, #0]
20000508:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
2000050a:	2314      	movs	r3, #20
2000050c:	881b      	ldrh	r3, [r3, #0]
2000050e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return rom_table_lookup(func_table, code);
20000510:	6b79      	ldr	r1, [r7, #52]	; 0x34
20000512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000516:	0010      	movs	r0, r2
20000518:	4798      	blx	r3
2000051a:	0003      	movs	r3, r0
    rom_flash_flush_cache_fn flash_flush_cache = (rom_flash_flush_cache_fn)rom_func_lookup_inline(ROM_FUNC_FLASH_FLUSH_CACHE);
2000051c:	647b      	str	r3, [r7, #68]	; 0x44
    assert(connect_internal_flash && flash_exit_xip && flash_flush_cache);
2000051e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20000520:	2b00      	cmp	r3, #0
20000522:	d005      	beq.n	20000530 <flash_do_cmd+0x78>
20000524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20000526:	2b00      	cmp	r3, #0
20000528:	d002      	beq.n	20000530 <flash_do_cmd+0x78>
2000052a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
2000052c:	2b00      	cmp	r3, #0
2000052e:	d105      	bne.n	2000053c <flash_do_cmd+0x84>
20000530:	4b35      	ldr	r3, [pc, #212]	; (20000608 <flash_do_cmd+0x150>)
20000532:	4a36      	ldr	r2, [pc, #216]	; (2000060c <flash_do_cmd+0x154>)
20000534:	4836      	ldr	r0, [pc, #216]	; (20000610 <flash_do_cmd+0x158>)
20000536:	2180      	movs	r1, #128	; 0x80
20000538:	f000 f86e 	bl	20000618 <____assert_func_veneer>
    flash_init_boot2_copyout();
2000053c:	f7ff ff5c 	bl	200003f8 <flash_init_boot2_copyout>
20000540:	46c0      	nop			; (mov r8, r8)
    connect_internal_flash();
20000542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
20000544:	4798      	blx	r3
    flash_exit_xip();
20000546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
20000548:	4798      	blx	r3
    flash_cs_force(0);
2000054a:	2000      	movs	r0, #0
2000054c:	f7ff ff86 	bl	2000045c <flash_cs_force>
    size_t tx_remaining = count;
20000550:	687b      	ldr	r3, [r7, #4]
20000552:	657b      	str	r3, [r7, #84]	; 0x54
    size_t rx_remaining = count;
20000554:	687b      	ldr	r3, [r7, #4]
20000556:	653b      	str	r3, [r7, #80]	; 0x50
    const size_t max_in_flight = 16 - 2;
20000558:	230e      	movs	r3, #14
2000055a:	643b      	str	r3, [r7, #64]	; 0x40
    while (tx_remaining || rx_remaining) {
2000055c:	e03d      	b.n	200005da <flash_do_cmd+0x122>
        uint32_t flags = ssi_hw->sr;
2000055e:	23c0      	movs	r3, #192	; 0xc0
20000560:	055b      	lsls	r3, r3, #21
20000562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000564:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20000566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000568:	2202      	movs	r2, #2
2000056a:	401a      	ands	r2, r3
2000056c:	203b      	movs	r0, #59	; 0x3b
2000056e:	183b      	adds	r3, r7, r0
20000570:	1e51      	subs	r1, r2, #1
20000572:	418a      	sbcs	r2, r1
20000574:	701a      	strb	r2, [r3, #0]
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20000576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000578:	2208      	movs	r2, #8
2000057a:	401a      	ands	r2, r3
2000057c:	233a      	movs	r3, #58	; 0x3a
2000057e:	18fb      	adds	r3, r7, r3
20000580:	1e51      	subs	r1, r2, #1
20000582:	418a      	sbcs	r2, r1
20000584:	701a      	strb	r2, [r3, #0]
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20000586:	183b      	adds	r3, r7, r0
20000588:	781b      	ldrb	r3, [r3, #0]
2000058a:	2b00      	cmp	r3, #0
2000058c:	d012      	beq.n	200005b4 <flash_do_cmd+0xfc>
2000058e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20000590:	2b00      	cmp	r3, #0
20000592:	d00f      	beq.n	200005b4 <flash_do_cmd+0xfc>
20000594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
20000596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
20000598:	1ad3      	subs	r3, r2, r3
2000059a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
2000059c:	429a      	cmp	r2, r3
2000059e:	d909      	bls.n	200005b4 <flash_do_cmd+0xfc>
            ssi_hw->dr0 = *txbuf++;
200005a0:	68fb      	ldr	r3, [r7, #12]
200005a2:	1c5a      	adds	r2, r3, #1
200005a4:	60fa      	str	r2, [r7, #12]
200005a6:	781a      	ldrb	r2, [r3, #0]
200005a8:	23c0      	movs	r3, #192	; 0xc0
200005aa:	055b      	lsls	r3, r3, #21
200005ac:	661a      	str	r2, [r3, #96]	; 0x60
            --tx_remaining;
200005ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
200005b0:	3b01      	subs	r3, #1
200005b2:	657b      	str	r3, [r7, #84]	; 0x54
        if (can_get && rx_remaining) {
200005b4:	233a      	movs	r3, #58	; 0x3a
200005b6:	18fb      	adds	r3, r7, r3
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	2b00      	cmp	r3, #0
200005bc:	d00d      	beq.n	200005da <flash_do_cmd+0x122>
200005be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
200005c0:	2b00      	cmp	r3, #0
200005c2:	d00a      	beq.n	200005da <flash_do_cmd+0x122>
            *rxbuf++ = (uint8_t)ssi_hw->dr0;
200005c4:	23c0      	movs	r3, #192	; 0xc0
200005c6:	055b      	lsls	r3, r3, #21
200005c8:	6e19      	ldr	r1, [r3, #96]	; 0x60
200005ca:	68bb      	ldr	r3, [r7, #8]
200005cc:	1c5a      	adds	r2, r3, #1
200005ce:	60ba      	str	r2, [r7, #8]
200005d0:	b2ca      	uxtb	r2, r1
200005d2:	701a      	strb	r2, [r3, #0]
            --rx_remaining;
200005d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
200005d6:	3b01      	subs	r3, #1
200005d8:	653b      	str	r3, [r7, #80]	; 0x50
    while (tx_remaining || rx_remaining) {
200005da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
200005dc:	2b00      	cmp	r3, #0
200005de:	d1be      	bne.n	2000055e <flash_do_cmd+0xa6>
200005e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
200005e2:	2b00      	cmp	r3, #0
200005e4:	d1bb      	bne.n	2000055e <flash_do_cmd+0xa6>
    flash_cs_force(1);
200005e6:	2001      	movs	r0, #1
200005e8:	f7ff ff38 	bl	2000045c <flash_cs_force>
    flash_flush_cache();
200005ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200005ee:	4798      	blx	r3
    flash_enable_xip_via_boot2();
200005f0:	f7ff ff2a 	bl	20000448 <flash_enable_xip_via_boot2>
}
200005f4:	46c0      	nop			; (mov r8, r8)
200005f6:	46bd      	mov	sp, r7
200005f8:	b016      	add	sp, #88	; 0x58
200005fa:	bd80      	pop	{r7, pc}
200005fc:	00004649 	.word	0x00004649
20000600:	00005845 	.word	0x00005845
20000604:	00004346 	.word	0x00004346
20000608:	1000e02c 	.word	0x1000e02c
2000060c:	1000e06c 	.word	0x1000e06c
20000610:	1000df28 	.word	0x1000df28

20000614 <__aeabi_idiv0>:
20000614:	4770      	bx	lr
20000616:	46c0      	nop			; (mov r8, r8)

20000618 <____assert_func_veneer>:
20000618:	b401      	push	{r0}
2000061a:	4802      	ldr	r0, [pc, #8]	; (20000624 <____assert_func_veneer+0xc>)
2000061c:	4684      	mov	ip, r0
2000061e:	bc01      	pop	{r0}
20000620:	4760      	bx	ip
20000622:	bf00      	nop
20000624:	1000ad2d 	.word	0x1000ad2d

20000628 <__make_timeout_time_ms_veneer>:
20000628:	b401      	push	{r0}
2000062a:	4802      	ldr	r0, [pc, #8]	; (20000634 <__make_timeout_time_ms_veneer+0xc>)
2000062c:	4684      	mov	ip, r0
2000062e:	bc01      	pop	{r0}
20000630:	4760      	bx	ip
20000632:	bf00      	nop
20000634:	10005599 	.word	0x10005599

20000638 <__best_effort_wfe_or_timeout_veneer>:
20000638:	b401      	push	{r0}
2000063a:	4802      	ldr	r0, [pc, #8]	; (20000644 <__best_effort_wfe_or_timeout_veneer+0xc>)
2000063c:	4684      	mov	ip, r0
2000063e:	bc01      	pop	{r0}
20000640:	4760      	bx	ip
20000642:	bf00      	nop
20000644:	10006615 	.word	0x10006615

20000648 <_usbd_qdef>:
20000648:	20000ac0 000c0010 ffe00000 0000001f     ... ............
	...

2000066c <ep_dir_string>:
2000066c:	1000d3e4 1000d3e8                       ........

20000674 <default_alarm_pool_heap>:
20000674:	20004da0 00000000 00000000 00000010     .M. ............

20000684 <default_alarm_pool>:
20000684:	20000674 00000000 20000750 20004d90     t.. ....P.. .M. 
	...

2000069c <striped_spin_lock_num>:
2000069c:	00000010                                ....

200006a0 <stdio_uart>:
200006a0:	1000b439 00000000 1000b479 00000000     9.......y.......
200006b0:	00000100                                ....

200006b4 <string_desc_arr>:
200006b4:	1000edb8 1000edbc 1000edcc 20009430     ............0.. 

200006c4 <irq_handler_chain_slots>:
200006c4:	00000000 	.word	0x00000000
200006c8:	00010000 	.word	0x00010000
	...
200006d4:	00020000 	.word	0x00020000
	...
200006e0:	00030000 	.word	0x00030000
	...
200006ec:	00ff0000 	.word	0x00ff0000
200006f0:	00000000 	.word	0x00000000

200006f4 <irq_handler_chain_first_slot>:
200006f4:	b500      	push	{lr}
200006f6:	6848      	ldr	r0, [r1, #4]
200006f8:	3101      	adds	r1, #1
200006fa:	468e      	mov	lr, r1
200006fc:	4700      	bx	r0

200006fe <irq_handler_chain_remove_tail>:
200006fe:	4670      	mov	r0, lr
20000700:	3809      	subs	r0, #9
20000702:	4901      	ldr	r1, [pc, #4]	; (20000708 <irq_handler_chain_remove_tail+0xa>)
20000704:	4788      	blx	r1
20000706:	bd00      	pop	{pc}
20000708:	10007a19 	.word	0x10007a19
2000070c:	00000000 	.word	0x00000000

20000710 <aeabi_bits_funcs>:
20000710:	00003350 	.word	0x00003350
20000714:	0000334c 	.word	0x0000334c
20000718:	00003354 	.word	0x00003354
2000071c:	00003352 	.word	0x00003352

20000720 <aeabi_bits_funcs_end>:
20000720:	0000534d 	.word	0x0000534d
20000724:	0000434d 	.word	0x0000434d
20000728:	00003453 	.word	0x00003453
2000072c:	00003443 	.word	0x00003443

20000730 <print_mutex>:
	...

20000738 <__mutex_array_end>:
20000738:	1000cf49 	.word	0x1000cf49
2000073c:	1000c861 	.word	0x1000c861
20000740:	10009149 	.word	0x10009149
20000744:	1000928d 	.word	0x1000928d

20000748 <__frame_dummy_init_array_entry>:
20000748:	100002ed 1000b4d5                       ........
